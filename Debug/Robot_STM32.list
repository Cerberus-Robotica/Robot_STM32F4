
Robot_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009380  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08009520  08009520  0000a520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a88  08009a88  0000b1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009a88  08009a88  0000aa88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a90  08009a90  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a90  08009a90  0000aa90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a94  08009a94  0000aa94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009a98  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001dc  08009c74  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08009c74  0000b528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2ed  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002292  00000000  00000000  0001a4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d13  00000000  00000000  0001d850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018514  00000000  00000000  0001e563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001193d  00000000  00000000  00036a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094527  00000000  00000000  000483b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc8db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005988  00000000  00000000  000dc920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  000e22a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009508 	.word	0x08009508

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08009508 	.word	0x08009508

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2108      	movs	r1, #8
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <csn_high+0x14>)
 8000f8e:	f002 fbb5 	bl	80036fc <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020000 	.word	0x40020000

08000f9c <csn_low>:

void csn_low(void){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2108      	movs	r1, #8
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <csn_low+0x14>)
 8000fa6:	f002 fba9 	bl	80036fc <HAL_GPIO_WritePin>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <ce_high>:

void ce_high(void){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 1);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <ce_high+0x14>)
 8000fbe:	f002 fb9d 	bl	80036fc <HAL_GPIO_WritePin>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020000 	.word	0x40020000

08000fcc <ce_low>:

void ce_low(void){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2110      	movs	r1, #16
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <ce_low+0x14>)
 8000fd6:	f002 fb91 	bl	80036fc <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f043 0320 	orr.w	r3, r3, #32
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8000ffe:	f7ff ffcd 	bl	8000f9c <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8001002:	f107 010f 	add.w	r1, r7, #15
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	2201      	movs	r2, #1
 800100c:	4808      	ldr	r0, [pc, #32]	@ (8001030 <nrf24_w_reg+0x4c>)
 800100e:	f003 f9a0 	bl	8004352 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	b29a      	uxth	r2, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101a:	6839      	ldr	r1, [r7, #0]
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <nrf24_w_reg+0x4c>)
 800101e:	f003 f998 	bl	8004352 <HAL_SPI_Transmit>

	csn_high();
 8001022:	f7ff ffaf 	bl	8000f84 <csn_high>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000025c 	.word	0x2000025c

08001034 <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	73bb      	strb	r3, [r7, #14]

	csn_low();
 800104c:	f7ff ffa6 	bl	8000f9c <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8001050:	f107 010f 	add.w	r1, r7, #15
 8001054:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001058:	2201      	movs	r2, #1
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <nrf24_r_reg+0x4c>)
 800105c:	f003 f979 	bl	8004352 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	b29a      	uxth	r2, r3
 8001064:	f107 010e 	add.w	r1, r7, #14
 8001068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <nrf24_r_reg+0x4c>)
 800106e:	f003 fab4 	bl	80045da <HAL_SPI_Receive>

	csn_high();
 8001072:	f7ff ff87 	bl	8000f84 <csn_high>

	return data;
 8001076:	7bbb      	ldrb	r3, [r7, #14]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000025c 	.word	0x2000025c

08001084 <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800108e:	1df9      	adds	r1, r7, #7
 8001090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001094:	2201      	movs	r2, #1
 8001096:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <nrf24_w_spec_cmd+0x20>)
 8001098:	f003 f95b 	bl	8004352 <HAL_SPI_Transmit>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000025c 	.word	0x2000025c

080010a8 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80010b2:	2101      	movs	r1, #1
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff ffbd 	bl	8001034 <nrf24_r_reg>
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff ff88 	bl	8000fe4 <nrf24_w_reg>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <nrf24_tx_pwr>:
	data &= ~(1 << PWR_UP);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_tx_pwr(uint8_t pwr){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80010ea:	2101      	movs	r1, #1
 80010ec:	2006      	movs	r0, #6
 80010ee:	f7ff ffa1 	bl	8001034 <nrf24_r_reg>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	b25a      	sxtb	r2, r3
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	b25b      	sxtb	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b25b      	sxtb	r3, r3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8001114:	f107 030f 	add.w	r3, r7, #15
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	2006      	movs	r0, #6
 800111e:	f7ff ff61 	bl	8000fe4 <nrf24_w_reg>
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8001138:	2101      	movs	r1, #1
 800113a:	2006      	movs	r0, #6
 800113c:	f7ff ff7a 	bl	8001034 <nrf24_r_reg>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800114a:	b2db      	uxtb	r3, r3
 800114c:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d105      	bne.n	8001160 <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	b2db      	uxtb	r3, r3
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e007      	b.n	8001170 <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d104      	bne.n	8001170 <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	b2db      	uxtb	r3, r3
 800116e:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 8001170:	f107 030f 	add.w	r3, r7, #15
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	2006      	movs	r0, #6
 800117a:	f7ff ff33 	bl	8000fe4 <nrf24_w_reg>
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	2201      	movs	r2, #1
 8001194:	4619      	mov	r1, r3
 8001196:	2005      	movs	r0, #5
 8001198:	f7ff ff24 	bl	8000fe4 <nrf24_w_reg>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 80011ac:	2205      	movs	r2, #5
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	2010      	movs	r0, #16
 80011b2:	f7ff ff17 	bl	8000fe4 <nrf24_w_reg>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	2b20      	cmp	r3, #32
 80011d4:	d901      	bls.n	80011da <nrf24_pipe_pld_size+0x1a>
		size = 32;
 80011d6:	2320      	movs	r3, #32
 80011d8:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b05      	cmp	r3, #5
 80011de:	d839      	bhi.n	8001254 <nrf24_pipe_pld_size+0x94>
 80011e0:	a201      	add	r2, pc, #4	@ (adr r2, 80011e8 <nrf24_pipe_pld_size+0x28>)
 80011e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e6:	bf00      	nop
 80011e8:	08001201 	.word	0x08001201
 80011ec:	0800120f 	.word	0x0800120f
 80011f0:	0800121d 	.word	0x0800121d
 80011f4:	0800122b 	.word	0x0800122b
 80011f8:	08001239 	.word	0x08001239
 80011fc:	08001247 	.word	0x08001247
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 8001200:	1dbb      	adds	r3, r7, #6
 8001202:	2201      	movs	r2, #1
 8001204:	4619      	mov	r1, r3
 8001206:	2011      	movs	r0, #17
 8001208:	f7ff feec 	bl	8000fe4 <nrf24_w_reg>

		break;
 800120c:	e022      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 800120e:	1dbb      	adds	r3, r7, #6
 8001210:	2201      	movs	r2, #1
 8001212:	4619      	mov	r1, r3
 8001214:	2012      	movs	r0, #18
 8001216:	f7ff fee5 	bl	8000fe4 <nrf24_w_reg>

		break;
 800121a:	e01b      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 800121c:	1dbb      	adds	r3, r7, #6
 800121e:	2201      	movs	r2, #1
 8001220:	4619      	mov	r1, r3
 8001222:	2013      	movs	r0, #19
 8001224:	f7ff fede 	bl	8000fe4 <nrf24_w_reg>

		break;
 8001228:	e014      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 800122a:	1dbb      	adds	r3, r7, #6
 800122c:	2201      	movs	r2, #1
 800122e:	4619      	mov	r1, r3
 8001230:	2014      	movs	r0, #20
 8001232:	f7ff fed7 	bl	8000fe4 <nrf24_w_reg>

		break;
 8001236:	e00d      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8001238:	1dbb      	adds	r3, r7, #6
 800123a:	2201      	movs	r2, #1
 800123c:	4619      	mov	r1, r3
 800123e:	2015      	movs	r0, #21
 8001240:	f7ff fed0 	bl	8000fe4 <nrf24_w_reg>

		break;
 8001244:	e006      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8001246:	1dbb      	adds	r3, r7, #6
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	2016      	movs	r0, #22
 800124e:	f7ff fec9 	bl	8000fe4 <nrf24_w_reg>

		break;
 8001252:	bf00      	nop
	}
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 800126c:	2101      	movs	r1, #1
 800126e:	2002      	movs	r0, #2
 8001270:	f7ff fee0 	bl	8001034 <nrf24_r_reg>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b05      	cmp	r3, #5
 800127c:	d850      	bhi.n	8001320 <nrf24_open_rx_pipe+0xc4>
 800127e:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <nrf24_open_rx_pipe+0x28>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	0800129d 	.word	0x0800129d
 8001288:	080012b3 	.word	0x080012b3
 800128c:	080012c9 	.word	0x080012c9
 8001290:	080012df 	.word	0x080012df
 8001294:	080012f5 	.word	0x080012f5
 8001298:	0800130b 	.word	0x0800130b
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 800129c:	2205      	movs	r2, #5
 800129e:	6839      	ldr	r1, [r7, #0]
 80012a0:	200a      	movs	r0, #10
 80012a2:	f7ff fe9f 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P0);
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	73fb      	strb	r3, [r7, #15]
		break;
 80012b0:	e036      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 80012b2:	2205      	movs	r2, #5
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	200b      	movs	r0, #11
 80012b8:	f7ff fe94 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P1);
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	73fb      	strb	r3, [r7, #15]
		break;
 80012c6:	e02b      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 80012c8:	2201      	movs	r2, #1
 80012ca:	6839      	ldr	r1, [r7, #0]
 80012cc:	200c      	movs	r0, #12
 80012ce:	f7ff fe89 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P2);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	73fb      	strb	r3, [r7, #15]
		break;
 80012dc:	e020      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 80012de:	2201      	movs	r2, #1
 80012e0:	6839      	ldr	r1, [r7, #0]
 80012e2:	200d      	movs	r0, #13
 80012e4:	f7ff fe7e 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P3);
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	73fb      	strb	r3, [r7, #15]
		break;
 80012f2:	e015      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	6839      	ldr	r1, [r7, #0]
 80012f8:	200e      	movs	r0, #14
 80012fa:	f7ff fe73 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P4);
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	b2db      	uxtb	r3, r3
 8001306:	73fb      	strb	r3, [r7, #15]
		break;
 8001308:	e00a      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 800130a:	2201      	movs	r2, #1
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	200f      	movs	r0, #15
 8001310:	f7ff fe68 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	f043 0320 	orr.w	r3, r3, #32
 800131a:	b2db      	uxtb	r3, r3
 800131c:	73fb      	strb	r3, [r7, #15]
		break;
 800131e:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8001320:	f107 030f 	add.w	r3, r7, #15
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	2002      	movs	r0, #2
 800132a:	f7ff fe5b 	bl	8000fe4 <nrf24_w_reg>
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop

08001338 <nrf24_set_crc>:
	data &= ~(1 << pipe);

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	460a      	mov	r2, r1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 8001348:	2101      	movs	r1, #1
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff fe72 	bl	8001034 <nrf24_r_reg>
 8001350:	4603      	mov	r3, r0
 8001352:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	f023 030c 	bic.w	r3, r3, #12
 800135a:	b2db      	uxtb	r3, r3
 800135c:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	b25a      	sxtb	r2, r3
 8001366:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	b25b      	sxtb	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b25a      	sxtb	r2, r3
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	b25b      	sxtb	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b25b      	sxtb	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 800137e:	f107 030f 	add.w	r3, r7, #15
 8001382:	2201      	movs	r2, #1
 8001384:	4619      	mov	r1, r3
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff fe2c 	bl	8000fe4 <nrf24_w_reg>
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	3b02      	subs	r3, #2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	2201      	movs	r2, #1
 80013aa:	4619      	mov	r1, r3
 80013ac:	2003      	movs	r0, #3
 80013ae:	f7ff fe19 	bl	8000fe4 <nrf24_w_reg>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
	csn_low();
 80013be:	f7ff fded 	bl	8000f9c <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 80013c2:	20e1      	movs	r0, #225	@ 0xe1
 80013c4:	f7ff fe5e 	bl	8001084 <nrf24_w_spec_cmd>
	csn_high();
 80013c8:	f7ff fddc 	bl	8000f84 <csn_high>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	csn_low();
 80013d4:	f7ff fde2 	bl	8000f9c <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 80013d8:	20e2      	movs	r0, #226	@ 0xe2
 80013da:	f7ff fe53 	bl	8001084 <nrf24_w_spec_cmd>
	csn_high();
 80013de:	f7ff fdd1 	bl	8000f84 <csn_high>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 80013f2:	23ff      	movs	r3, #255	@ 0xff
 80013f4:	71bb      	strb	r3, [r7, #6]

	csn_low();
 80013f6:	f7ff fdd1 	bl	8000f9c <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 80013fa:	1dfa      	adds	r2, r7, #7
 80013fc:	1db9      	adds	r1, r7, #6
 80013fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2301      	movs	r3, #1
 8001406:	4805      	ldr	r0, [pc, #20]	@ (800141c <nrf24_r_status+0x34>)
 8001408:	f003 fa00 	bl	800480c <HAL_SPI_TransmitReceive>
	csn_high();
 800140c:	f7ff fdba 	bl	8000f84 <csn_high>

	return data;
 8001410:	79fb      	ldrb	r3, [r7, #7]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000025c 	.word	0x2000025c

08001420 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800142a:	f7ff ffdd 	bl	80013e8 <nrf24_r_status>
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001438:	b2db      	uxtb	r3, r3
 800143a:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	2201      	movs	r2, #1
 8001440:	4619      	mov	r1, r3
 8001442:	2007      	movs	r0, #7
 8001444:	f7ff fdce 	bl	8000fe4 <nrf24_w_reg>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800145a:	f7ff ffc5 	bl	80013e8 <nrf24_r_status>
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f043 0320 	orr.w	r3, r3, #32
 8001468:	b2db      	uxtb	r3, r3
 800146a:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	2201      	movs	r2, #1
 8001470:	4619      	mov	r1, r3
 8001472:	2007      	movs	r0, #7
 8001474:	f7ff fdb6 	bl	8000fe4 <nrf24_w_reg>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800148a:	f7ff ffad 	bl	80013e8 <nrf24_r_status>
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	b2db      	uxtb	r3, r3
 800149a:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	2007      	movs	r0, #7
 80014a4:	f7ff fd9e 	bl	8000fe4 <nrf24_w_reg>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <nrf24_listen>:
	csn_high();

	return width;
}

void nrf24_listen(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80014ba:	2101      	movs	r1, #1
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fdb9 	bl	8001034 <nrf24_r_reg>
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PRIM_RX);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80014d0:	1dfb      	adds	r3, r7, #7
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fd84 	bl	8000fe4 <nrf24_w_reg>

	ce_high();
 80014dc:	f7ff fd6a 	bl	8000fb4 <ce_high>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <nrf24_dpl>:
	data &= ~(1 << PRIM_RX);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_dpl(uint8_t en){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80014f2:	2101      	movs	r1, #1
 80014f4:	201d      	movs	r0, #29
 80014f6:	f7ff fd9d 	bl	8001034 <nrf24_r_reg>
 80014fa:	4603      	mov	r3, r0
 80014fc:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	e004      	b.n	800151a <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	f023 0304 	bic.w	r3, r3, #4
 8001516:	b2db      	uxtb	r3, r3
 8001518:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800151a:	f107 030f 	add.w	r3, r7, #15
 800151e:	2201      	movs	r2, #1
 8001520:	4619      	mov	r1, r3
 8001522:	201d      	movs	r0, #29
 8001524:	f7ff fd5e 	bl	8000fe4 <nrf24_w_reg>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <nrf24_auto_ack_all>:
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
}

void nrf24_auto_ack_all(uint8_t ack){
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 800153a:	2101      	movs	r1, #1
 800153c:	2001      	movs	r0, #1
 800153e:	f7ff fd79 	bl	8001034 <nrf24_r_reg>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]

	if(ack){
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <nrf24_auto_ack_all+0x22>
		enaa = 63;
 800154c:	233f      	movs	r3, #63	@ 0x3f
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e001      	b.n	8001556 <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8001556:	f107 030f 	add.w	r3, r7, #15
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	2001      	movs	r0, #1
 8001560:	f7ff fd40 	bl	8000fe4 <nrf24_w_reg>
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8001576:	2101      	movs	r1, #1
 8001578:	201d      	movs	r0, #29
 800157a:	f7ff fd5b 	bl	8001034 <nrf24_r_reg>
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]

	if(en){
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	b2db      	uxtb	r3, r3
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e004      	b.n	800159e <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f023 0302 	bic.w	r3, r3, #2
 800159a:	b2db      	uxtb	r3, r3
 800159c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800159e:	f107 030f 	add.w	r3, r7, #15
 80015a2:	2201      	movs	r2, #1
 80015a4:	4619      	mov	r1, r3
 80015a6:	201d      	movs	r0, #29
 80015a8:	f7ff fd1c 	bl	8000fe4 <nrf24_w_reg>
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <nrf24_auto_retr_delay>:
	}

	nrf24_w_reg(FEATURE, &feature, 1);
}

void nrf24_auto_retr_delay(uint8_t delay){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 80015be:	2101      	movs	r1, #1
 80015c0:	2004      	movs	r0, #4
 80015c2:	f7ff fd37 	bl	8001034 <nrf24_r_reg>
 80015c6:	4603      	mov	r3, r0
 80015c8:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 80015e8:	f107 030f 	add.w	r3, r7, #15
 80015ec:	2201      	movs	r2, #1
 80015ee:	4619      	mov	r1, r3
 80015f0:	2004      	movs	r0, #4
 80015f2:	f7ff fcf7 	bl	8000fe4 <nrf24_w_reg>
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8001608:	2101      	movs	r1, #1
 800160a:	2004      	movs	r0, #4
 800160c:	f7ff fd12 	bl	8001034 <nrf24_r_reg>
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	f023 030f 	bic.w	r3, r3, #15
 800161a:	b2db      	uxtb	r3, r3
 800161c:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	4313      	orrs	r3, r2
 8001624:	b2db      	uxtb	r3, r3
 8001626:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8001628:	f107 030f 	add.w	r3, r7, #15
 800162c:	2201      	movs	r2, #1
 800162e:	4619      	mov	r1, r3
 8001630:	2004      	movs	r0, #4
 8001632:	f7ff fcd7 	bl	8000fe4 <nrf24_w_reg>
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <nrf24_data_available>:

uint8_t nrf24_carrier_detect(void){
	return nrf24_r_reg(RPD, 1);
}

uint8_t nrf24_data_available(void){
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0

 	uint8_t reg_dt = nrf24_r_reg(FIFO_STATUS, 1);
 8001644:	2101      	movs	r1, #1
 8001646:	2017      	movs	r0, #23
 8001648:	f7ff fcf4 	bl	8001034 <nrf24_r_reg>
 800164c:	4603      	mov	r3, r0
 800164e:	71fb      	strb	r3, [r7, #7]

	if(!(reg_dt & (1 << RX_EMPTY))){
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <nrf24_data_available+0x20>
		return 1;
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <nrf24_data_available+0x22>
	}

	return 0;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <nrf24_receive>:

void nrf24_receive(uint8_t *data, uint8_t size){
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_RX_PAYLOAD;
 8001674:	2361      	movs	r3, #97	@ 0x61
 8001676:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8001678:	f7ff fc90 	bl	8000f9c <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800167c:	f107 010f 	add.w	r1, r7, #15
 8001680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001684:	2201      	movs	r2, #1
 8001686:	4809      	ldr	r0, [pc, #36]	@ (80016ac <nrf24_receive+0x44>)
 8001688:	f002 fe63 	bl	8004352 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	b29a      	uxth	r2, r3
 8001690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4805      	ldr	r0, [pc, #20]	@ (80016ac <nrf24_receive+0x44>)
 8001698:	f002 ff9f 	bl	80045da <HAL_SPI_Receive>
	csn_high();
 800169c:	f7ff fc72 	bl	8000f84 <csn_high>

	nrf24_clear_rx_dr();
 80016a0:	f7ff febe 	bl	8001420 <nrf24_clear_rx_dr>
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000025c 	.word	0x2000025c

080016b0 <nrf24_init>:
	}

	ce_high();
}

void nrf24_init(void){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 80016b4:	f7ff fcf8 	bl	80010a8 <nrf24_pwr_up>

	nrf24_flush_tx();
 80016b8:	f7ff fe7f 	bl	80013ba <nrf24_flush_tx>
	nrf24_flush_rx();
 80016bc:	f7ff fe88 	bl	80013d0 <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 80016c0:	f7ff feae 	bl	8001420 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 80016c4:	f7ff fec4 	bl	8001450 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 80016c8:	f7ff feda 	bl	8001480 <nrf24_clear_max_rt>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <radio_setup>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void radio_setup() {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	  ce_high();
 80016d4:	f7ff fc6e 	bl	8000fb4 <ce_high>
	  HAL_Delay(5);
 80016d8:	2005      	movs	r0, #5
 80016da:	f001 fd3d 	bl	8003158 <HAL_Delay>
	  ce_low();
 80016de:	f7ff fc75 	bl	8000fcc <ce_low>

	  nrf24_init();
 80016e2:	f7ff ffe5 	bl	80016b0 <nrf24_init>

	  nrf24_auto_ack_all(auto_ack);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7ff ff22 	bl	8001530 <nrf24_auto_ack_all>
	  nrf24_en_ack_pld(disable);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff ff3d 	bl	800156c <nrf24_en_ack_pld>
	  nrf24_dpl(disable);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff fef8 	bl	80014e8 <nrf24_dpl>

	  nrf24_tx_pwr(_0dbm);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f7ff fcef 	bl	80010dc <nrf24_tx_pwr>
	  nrf24_data_rate(_2mbps);
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff fd13 	bl	800112a <nrf24_data_rate>
	  nrf24_set_channel(channel);
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <radio_setup+0x84>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fd3c 	bl	8001186 <nrf24_set_channel>
	  nrf24_set_addr_width(5);
 800170e:	2005      	movs	r0, #5
 8001710:	f7ff fe40 	bl	8001394 <nrf24_set_addr_width>

	  nrf24_pipe_pld_size(0, pld_size);
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <radio_setup+0x88>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fd50 	bl	80011c0 <nrf24_pipe_pld_size>
	  nrf24_set_crc(en_crc, _1byte);
 8001720:	2100      	movs	r1, #0
 8001722:	2001      	movs	r0, #1
 8001724:	f7ff fe08 	bl	8001338 <nrf24_set_crc>

	  nrf24_auto_retr_delay(0);
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff ff43 	bl	80015b4 <nrf24_auto_retr_delay>
	  nrf24_auto_retr_limit(5);
 800172e:	2005      	movs	r0, #5
 8001730:	f7ff ff65 	bl	80015fe <nrf24_auto_retr_limit>

	  nrf24_open_tx_pipe(addr);
 8001734:	4809      	ldr	r0, [pc, #36]	@ (800175c <radio_setup+0x8c>)
 8001736:	f7ff fd35 	bl	80011a4 <nrf24_open_tx_pipe>
	  nrf24_open_rx_pipe(0, addr);
 800173a:	4908      	ldr	r1, [pc, #32]	@ (800175c <radio_setup+0x8c>)
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff fd8d 	bl	800125c <nrf24_open_rx_pipe>

	  nrf24_listen();
 8001742:	f7ff feb5 	bl	80014b0 <nrf24_listen>

	  ce_high();
 8001746:	f7ff fc35 	bl	8000fb4 <ce_high>
	  HAL_Delay(5);
 800174a:	2005      	movs	r0, #5
 800174c:	f001 fd04 	bl	8003158 <HAL_Delay>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000005 	.word	0x20000005
 8001758:	20000006 	.word	0x20000006
 800175c:	20000000 	.word	0x20000000

08001760 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM11)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a10      	ldr	r2, [pc, #64]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d117      	bne.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x42>
    {
        if (radio_timeout == 0)
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10f      	bne.n	800179c <HAL_TIM_PeriodElapsedCallback+0x3c>
        {
            vx = 0;
 800177c:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
            vy = 0;
 8001784:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
            vang = 0;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
            kicker = 0;
 8001794:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
        else
        {
            radio_timeout = 0; // Sinal de que rádio está funcionando
        }
    }
}
 800179a:	e002      	b.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x42>
            radio_timeout = 0; // Sinal de que rádio está funcionando
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40014800 	.word	0x40014800
 80017b4:	20000205 	.word	0x20000205
 80017b8:	200001f8 	.word	0x200001f8
 80017bc:	200001fc 	.word	0x200001fc
 80017c0:	20000200 	.word	0x20000200
 80017c4:	20000204 	.word	0x20000204

080017c8 <acionar_motor>:


void acionar_motor(int motor, float dutycycle) {
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	@ 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	ed87 0a00 	vstr	s0, [r7]
    TIM_HandleTypeDef *htimA = NULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
    uint32_t channelA = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
    TIM_HandleTypeDef *htimB = NULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
    uint32_t channelB = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	613b      	str	r3, [r7, #16]

    switch (motor) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	f200 8111 	bhi.w	8001a10 <acionar_motor+0x248>
 80017ee:	a201      	add	r2, pc, #4	@ (adr r2, 80017f4 <acionar_motor+0x2c>)
 80017f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f4:	08001805 	.word	0x08001805
 80017f8:	08001817 	.word	0x08001817
 80017fc:	08001829 	.word	0x08001829
 8001800:	0800183b 	.word	0x0800183b
        case 1:
            htimA = &htim1;
 8001804:	4b85      	ldr	r3, [pc, #532]	@ (8001a1c <acionar_motor+0x254>)
 8001806:	61fb      	str	r3, [r7, #28]
            channelA = TIM_CHANNEL_2;
 8001808:	2304      	movs	r3, #4
 800180a:	61bb      	str	r3, [r7, #24]
            htimB = &htim1;
 800180c:	4b83      	ldr	r3, [pc, #524]	@ (8001a1c <acionar_motor+0x254>)
 800180e:	617b      	str	r3, [r7, #20]
            channelB = TIM_CHANNEL_1;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
            break;
 8001814:	e01a      	b.n	800184c <acionar_motor+0x84>
        case 2:
            htimA = &htim1;
 8001816:	4b81      	ldr	r3, [pc, #516]	@ (8001a1c <acionar_motor+0x254>)
 8001818:	61fb      	str	r3, [r7, #28]
            channelA = TIM_CHANNEL_3;
 800181a:	2308      	movs	r3, #8
 800181c:	61bb      	str	r3, [r7, #24]
            htimB = &htim1;
 800181e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a1c <acionar_motor+0x254>)
 8001820:	617b      	str	r3, [r7, #20]
            channelB = TIM_CHANNEL_4;
 8001822:	230c      	movs	r3, #12
 8001824:	613b      	str	r3, [r7, #16]
            break;
 8001826:	e011      	b.n	800184c <acionar_motor+0x84>
        case 3:
            htimA = &htim2;
 8001828:	4b7d      	ldr	r3, [pc, #500]	@ (8001a20 <acionar_motor+0x258>)
 800182a:	61fb      	str	r3, [r7, #28]
            channelA = TIM_CHANNEL_3;
 800182c:	2308      	movs	r3, #8
 800182e:	61bb      	str	r3, [r7, #24]
            htimB = &htim3;
 8001830:	4b7c      	ldr	r3, [pc, #496]	@ (8001a24 <acionar_motor+0x25c>)
 8001832:	617b      	str	r3, [r7, #20]
            channelB = TIM_CHANNEL_4;
 8001834:	230c      	movs	r3, #12
 8001836:	613b      	str	r3, [r7, #16]
            break;
 8001838:	e008      	b.n	800184c <acionar_motor+0x84>
        case 4:
            htimA = &htim2;
 800183a:	4b79      	ldr	r3, [pc, #484]	@ (8001a20 <acionar_motor+0x258>)
 800183c:	61fb      	str	r3, [r7, #28]
            channelA = TIM_CHANNEL_1;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
            htimB = &htim3;
 8001842:	4b78      	ldr	r3, [pc, #480]	@ (8001a24 <acionar_motor+0x25c>)
 8001844:	617b      	str	r3, [r7, #20]
            channelB = TIM_CHANNEL_3;
 8001846:	2308      	movs	r3, #8
 8001848:	613b      	str	r3, [r7, #16]
            break;
 800184a:	bf00      	nop
        default:
            return;
    }

    // Limita dutycycle
    if (dutycycle > 100.0f) dutycycle = 100.0f;
 800184c:	edd7 7a00 	vldr	s15, [r7]
 8001850:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8001a28 <acionar_motor+0x260>
 8001854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	dd01      	ble.n	8001862 <acionar_motor+0x9a>
 800185e:	4b73      	ldr	r3, [pc, #460]	@ (8001a2c <acionar_motor+0x264>)
 8001860:	603b      	str	r3, [r7, #0]
    if (dutycycle < -100.0f) dutycycle = -100.0f;
 8001862:	edd7 7a00 	vldr	s15, [r7]
 8001866:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8001a30 <acionar_motor+0x268>
 800186a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001872:	d501      	bpl.n	8001878 <acionar_motor+0xb0>
 8001874:	4b6f      	ldr	r3, [pc, #444]	@ (8001a34 <acionar_motor+0x26c>)
 8001876:	603b      	str	r3, [r7, #0]

    uint32_t pwm_value = (uint32_t)((fabsf(dutycycle) / 100.0f) * ARR);
 8001878:	edd7 7a00 	vldr	s15, [r7]
 800187c:	eef0 7ae7 	vabs.f32	s15, s15
 8001880:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8001a28 <acionar_motor+0x260>
 8001884:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001888:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8001a38 <acionar_motor+0x270>
 800188c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001898:	ee17 3a90 	vmov	r3, s15
 800189c:	60fb      	str	r3, [r7, #12]

    if (dutycycle > 0) {
 800189e:	edd7 7a00 	vldr	s15, [r7]
 80018a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018aa:	dd38      	ble.n	800191e <acionar_motor+0x156>
        __HAL_TIM_SET_COMPARE(htimA, channelA, pwm_value);
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d104      	bne.n	80018bc <acionar_motor+0xf4>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ba:	e013      	b.n	80018e4 <acionar_motor+0x11c>
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d104      	bne.n	80018cc <acionar_motor+0x104>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6393      	str	r3, [r2, #56]	@ 0x38
 80018ca:	e00b      	b.n	80018e4 <acionar_motor+0x11c>
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d104      	bne.n	80018dc <acionar_motor+0x114>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80018da:	e003      	b.n	80018e4 <acionar_motor+0x11c>
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htimB, channelB, 0);
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d104      	bne.n	80018f4 <acionar_motor+0x12c>
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80018f2:	e08e      	b.n	8001a12 <acionar_motor+0x24a>
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d104      	bne.n	8001904 <acionar_motor+0x13c>
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2300      	movs	r3, #0
 8001900:	6393      	str	r3, [r2, #56]	@ 0x38
 8001902:	e086      	b.n	8001a12 <acionar_motor+0x24a>
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	2b08      	cmp	r3, #8
 8001908:	d104      	bne.n	8001914 <acionar_motor+0x14c>
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	2300      	movs	r3, #0
 8001910:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001912:	e07e      	b.n	8001a12 <acionar_motor+0x24a>
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2300      	movs	r3, #0
 800191a:	6413      	str	r3, [r2, #64]	@ 0x40
 800191c:	e079      	b.n	8001a12 <acionar_motor+0x24a>
    } else if (dutycycle < 0) {
 800191e:	edd7 7a00 	vldr	s15, [r7]
 8001922:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192a:	d538      	bpl.n	800199e <acionar_motor+0x1d6>
        __HAL_TIM_SET_COMPARE(htimA, channelA, 0);
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d104      	bne.n	800193c <acionar_motor+0x174>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2200      	movs	r2, #0
 8001938:	635a      	str	r2, [r3, #52]	@ 0x34
 800193a:	e013      	b.n	8001964 <acionar_motor+0x19c>
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b04      	cmp	r3, #4
 8001940:	d104      	bne.n	800194c <acionar_motor+0x184>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	6393      	str	r3, [r2, #56]	@ 0x38
 800194a:	e00b      	b.n	8001964 <acionar_motor+0x19c>
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b08      	cmp	r3, #8
 8001950:	d104      	bne.n	800195c <acionar_motor+0x194>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	2300      	movs	r3, #0
 8001958:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800195a:	e003      	b.n	8001964 <acionar_motor+0x19c>
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2300      	movs	r3, #0
 8001962:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htimB, channelB, pwm_value);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d104      	bne.n	8001974 <acionar_motor+0x1ac>
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	635a      	str	r2, [r3, #52]	@ 0x34
 8001972:	e04e      	b.n	8001a12 <acionar_motor+0x24a>
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b04      	cmp	r3, #4
 8001978:	d104      	bne.n	8001984 <acionar_motor+0x1bc>
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6393      	str	r3, [r2, #56]	@ 0x38
 8001982:	e046      	b.n	8001a12 <acionar_motor+0x24a>
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2b08      	cmp	r3, #8
 8001988:	d104      	bne.n	8001994 <acionar_motor+0x1cc>
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001992:	e03e      	b.n	8001a12 <acionar_motor+0x24a>
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6413      	str	r3, [r2, #64]	@ 0x40
 800199c:	e039      	b.n	8001a12 <acionar_motor+0x24a>
    } else {
        __HAL_TIM_SET_COMPARE(htimA, channelA, 0);
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d104      	bne.n	80019ae <acionar_motor+0x1e6>
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80019ac:	e013      	b.n	80019d6 <acionar_motor+0x20e>
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d104      	bne.n	80019be <acionar_motor+0x1f6>
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	2300      	movs	r3, #0
 80019ba:	6393      	str	r3, [r2, #56]	@ 0x38
 80019bc:	e00b      	b.n	80019d6 <acionar_motor+0x20e>
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d104      	bne.n	80019ce <acionar_motor+0x206>
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2300      	movs	r3, #0
 80019ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80019cc:	e003      	b.n	80019d6 <acionar_motor+0x20e>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	2300      	movs	r3, #0
 80019d4:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htimB, channelB, 0);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d104      	bne.n	80019e6 <acionar_motor+0x21e>
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2200      	movs	r2, #0
 80019e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e4:	e015      	b.n	8001a12 <acionar_motor+0x24a>
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d104      	bne.n	80019f6 <acionar_motor+0x22e>
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2300      	movs	r3, #0
 80019f2:	6393      	str	r3, [r2, #56]	@ 0x38
 80019f4:	e00d      	b.n	8001a12 <acionar_motor+0x24a>
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d104      	bne.n	8001a06 <acionar_motor+0x23e>
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2300      	movs	r3, #0
 8001a02:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001a04:	e005      	b.n	8001a12 <acionar_motor+0x24a>
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0e:	e000      	b.n	8001a12 <acionar_motor+0x24a>
            return;
 8001a10:	bf00      	nop
    }
}
 8001a12:	3724      	adds	r7, #36	@ 0x24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	200002b4 	.word	0x200002b4
 8001a20:	200002fc 	.word	0x200002fc
 8001a24:	20000344 	.word	0x20000344
 8001a28:	42c80000 	.word	0x42c80000
 8001a2c:	42c80000 	.word	0x42c80000
 8001a30:	c2c80000 	.word	0xc2c80000
 8001a34:	c2c80000 	.word	0xc2c80000
 8001a38:	000003e8 	.word	0x000003e8
 8001a3c:	00000000 	.word	0x00000000

08001a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a44:	b0a6      	sub	sp, #152	@ 0x98
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a48:	f001 fb14 	bl	8003074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4c:	f000 fcd2 	bl	80023f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a50:	f000 ff30 	bl	80028b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a54:	f000 fd64 	bl	8002520 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001a58:	f000 fd98 	bl	800258c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a5c:	f000 fe3e 	bl	80026dc <MX_TIM2_Init>
  MX_TIM11_Init();
 8001a60:	f000 ff04 	bl	800286c <MX_TIM11_Init>
  MX_TIM3_Init();
 8001a64:	f000 fe9e 	bl	80027a4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001a68:	f000 fd2c 	bl	80024c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	48c6      	ldr	r0, [pc, #792]	@ (8001d88 <main+0x348>)
 8001a70:	f003 faba 	bl	8004fe8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a74:	2104      	movs	r1, #4
 8001a76:	48c4      	ldr	r0, [pc, #784]	@ (8001d88 <main+0x348>)
 8001a78:	f003 fab6 	bl	8004fe8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a7c:	2108      	movs	r1, #8
 8001a7e:	48c2      	ldr	r0, [pc, #776]	@ (8001d88 <main+0x348>)
 8001a80:	f003 fab2 	bl	8004fe8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a84:	210c      	movs	r1, #12
 8001a86:	48c0      	ldr	r0, [pc, #768]	@ (8001d88 <main+0x348>)
 8001a88:	f003 faae 	bl	8004fe8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	48bf      	ldr	r0, [pc, #764]	@ (8001d8c <main+0x34c>)
 8001a90:	f003 faaa 	bl	8004fe8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001a94:	2108      	movs	r1, #8
 8001a96:	48bd      	ldr	r0, [pc, #756]	@ (8001d8c <main+0x34c>)
 8001a98:	f003 faa6 	bl	8004fe8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001a9c:	2108      	movs	r1, #8
 8001a9e:	48bc      	ldr	r0, [pc, #752]	@ (8001d90 <main+0x350>)
 8001aa0:	f003 faa2 	bl	8004fe8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001aa4:	210c      	movs	r1, #12
 8001aa6:	48ba      	ldr	r0, [pc, #744]	@ (8001d90 <main+0x350>)
 8001aa8:	f003 fa9e 	bl	8004fe8 <HAL_TIM_PWM_Start>
  //radio configuration
  radio_setup();
 8001aac:	f7ff fe10 	bl	80016d0 <radio_setup>
  HAL_TIM_Base_Start_IT(&htim11);
 8001ab0:	48b8      	ldr	r0, [pc, #736]	@ (8001d94 <main+0x354>)
 8001ab2:	f003 f9e7 	bl	8004e84 <HAL_TIM_Base_Start_IT>

  //Radio variables
  uint8_t rx_buffer[pld_size];
 8001ab6:	4bb8      	ldr	r3, [pc, #736]	@ (8001d98 <main+0x358>)
 8001ab8:	7819      	ldrb	r1, [r3, #0]
 8001aba:	460b      	mov	r3, r1
 8001abc:	3b01      	subs	r3, #1
 8001abe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ac0:	b2cb      	uxtb	r3, r1
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4698      	mov	r8, r3
 8001ac6:	4691      	mov	r9, r2
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ad4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ad8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001adc:	b2cb      	uxtb	r3, r1
 8001ade:	2200      	movs	r2, #0
 8001ae0:	461c      	mov	r4, r3
 8001ae2:	4615      	mov	r5, r2
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	00eb      	lsls	r3, r5, #3
 8001aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001af2:	00e2      	lsls	r2, r4, #3
 8001af4:	460b      	mov	r3, r1
 8001af6:	3307      	adds	r3, #7
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	ebad 0d03 	sub.w	sp, sp, r3
 8001b00:	466b      	mov	r3, sp
 8001b02:	3300      	adds	r3, #0
 8001b04:	663b      	str	r3, [r7, #96]	@ 0x60
  Pacote pacote_recebido;

  //cinematics variables

  float J[4][3] = {
  	  	    {-sin(a1), cos(a1), R},
 8001b06:	4ba5      	ldr	r3, [pc, #660]	@ (8001d9c <main+0x35c>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd25 	bl	8000558 <__aeabi_f2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	ec43 2b10 	vmov	d0, r2, r3
 8001b16:	f006 fcd3 	bl	80084c0 <sin>
 8001b1a:	ec53 2b10 	vmov	r2, r3, d0
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff f849 	bl	8000bb8 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
  float J[4][3] = {
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eef1 7a67 	vneg.f32	s15, s15
 8001b30:	edc7 7a04 	vstr	s15, [r7, #16]
  	  	    {-sin(a1), cos(a1), R},
 8001b34:	4b99      	ldr	r3, [pc, #612]	@ (8001d9c <main+0x35c>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd0e 	bl	8000558 <__aeabi_f2d>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	ec43 2b10 	vmov	d0, r2, r3
 8001b44:	f006 fc68 	bl	8008418 <cos>
 8001b48:	ec53 2b10 	vmov	r2, r3, d0
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7ff f832 	bl	8000bb8 <__aeabi_d2f>
 8001b54:	4603      	mov	r3, r0
  float J[4][3] = {
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	4b91      	ldr	r3, [pc, #580]	@ (8001da0 <main+0x360>)
 8001b5a:	61bb      	str	r3, [r7, #24]
  	  	    {-sin(a2), cos(a2), R},
 8001b5c:	4b91      	ldr	r3, [pc, #580]	@ (8001da4 <main+0x364>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fcfa 	bl	8000558 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	ec43 2b10 	vmov	d0, r2, r3
 8001b6c:	f006 fca8 	bl	80084c0 <sin>
 8001b70:	ec53 2b10 	vmov	r2, r3, d0
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f7ff f81e 	bl	8000bb8 <__aeabi_d2f>
 8001b7c:	4603      	mov	r3, r0
  float J[4][3] = {
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eef1 7a67 	vneg.f32	s15, s15
 8001b86:	edc7 7a07 	vstr	s15, [r7, #28]
  	  	    {-sin(a2), cos(a2), R},
 8001b8a:	4b86      	ldr	r3, [pc, #536]	@ (8001da4 <main+0x364>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fce3 	bl	8000558 <__aeabi_f2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	ec43 2b10 	vmov	d0, r2, r3
 8001b9a:	f006 fc3d 	bl	8008418 <cos>
 8001b9e:	ec53 2b10 	vmov	r2, r3, d0
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7ff f807 	bl	8000bb8 <__aeabi_d2f>
 8001baa:	4603      	mov	r3, r0
  float J[4][3] = {
 8001bac:	623b      	str	r3, [r7, #32]
 8001bae:	4b7c      	ldr	r3, [pc, #496]	@ (8001da0 <main+0x360>)
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  	  	    {-sin(a3), cos(a3), R},
 8001bb2:	4b7d      	ldr	r3, [pc, #500]	@ (8001da8 <main+0x368>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fccf 	bl	8000558 <__aeabi_f2d>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	ec43 2b10 	vmov	d0, r2, r3
 8001bc2:	f006 fc7d 	bl	80084c0 <sin>
 8001bc6:	ec53 2b10 	vmov	r2, r3, d0
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7fe fff3 	bl	8000bb8 <__aeabi_d2f>
 8001bd2:	4603      	mov	r3, r0
  float J[4][3] = {
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef1 7a67 	vneg.f32	s15, s15
 8001bdc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  	  	    {-sin(a3), cos(a3), R},
 8001be0:	4b71      	ldr	r3, [pc, #452]	@ (8001da8 <main+0x368>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcb8 	bl	8000558 <__aeabi_f2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	ec43 2b10 	vmov	d0, r2, r3
 8001bf0:	f006 fc12 	bl	8008418 <cos>
 8001bf4:	ec53 2b10 	vmov	r2, r3, d0
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f7fe ffdc 	bl	8000bb8 <__aeabi_d2f>
 8001c00:	4603      	mov	r3, r0
  float J[4][3] = {
 8001c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c04:	4b66      	ldr	r3, [pc, #408]	@ (8001da0 <main+0x360>)
 8001c06:	633b      	str	r3, [r7, #48]	@ 0x30
  	  	    {-sin(a4), cos(a4), R}
 8001c08:	4b68      	ldr	r3, [pc, #416]	@ (8001dac <main+0x36c>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fca4 	bl	8000558 <__aeabi_f2d>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	ec43 2b10 	vmov	d0, r2, r3
 8001c18:	f006 fc52 	bl	80084c0 <sin>
 8001c1c:	ec53 2b10 	vmov	r2, r3, d0
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7fe ffc8 	bl	8000bb8 <__aeabi_d2f>
 8001c28:	4603      	mov	r3, r0
  float J[4][3] = {
 8001c2a:	ee07 3a90 	vmov	s15, r3
 8001c2e:	eef1 7a67 	vneg.f32	s15, s15
 8001c32:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  	  	    {-sin(a4), cos(a4), R}
 8001c36:	4b5d      	ldr	r3, [pc, #372]	@ (8001dac <main+0x36c>)
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc8d 	bl	8000558 <__aeabi_f2d>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	ec43 2b10 	vmov	d0, r2, r3
 8001c46:	f006 fbe7 	bl	8008418 <cos>
 8001c4a:	ec53 2b10 	vmov	r2, r3, d0
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe ffb1 	bl	8000bb8 <__aeabi_d2f>
 8001c56:	4603      	mov	r3, r0
  float J[4][3] = {
 8001c58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c5a:	4b51      	ldr	r3, [pc, #324]	@ (8001da0 <main+0x360>)
 8001c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  	  	  };
  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c64:	4852      	ldr	r0, [pc, #328]	@ (8001db0 <main+0x370>)
 8001c66:	f001 fd49 	bl	80036fc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	4851      	ldr	r0, [pc, #324]	@ (8001db4 <main+0x374>)
 8001c6e:	f001 fd2d 	bl	80036cc <HAL_GPIO_ReadPin>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d136      	bne.n	8001ce6 <main+0x2a6>
		  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c7e:	484c      	ldr	r0, [pc, #304]	@ (8001db0 <main+0x370>)
 8001c80:	f001 fd3c 	bl	80036fc <HAL_GPIO_WritePin>
		  HAL_Delay(2000);
 8001c84:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c88:	f001 fa66 	bl	8003158 <HAL_Delay>
		  for (int i = 0; i < id ; i++) {
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c92:	e018      	b.n	8001cc6 <main+0x286>
			  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c9a:	4845      	ldr	r0, [pc, #276]	@ (8001db0 <main+0x370>)
 8001c9c:	f001 fd2e 	bl	80036fc <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 8001ca0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ca4:	f001 fa58 	bl	8003158 <HAL_Delay>
			  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cae:	4840      	ldr	r0, [pc, #256]	@ (8001db0 <main+0x370>)
 8001cb0:	f001 fd24 	bl	80036fc <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 8001cb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cb8:	f001 fa4e 	bl	8003158 <HAL_Delay>
		  for (int i = 0; i < id ; i++) {
 8001cbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	dbe0      	blt.n	8001c94 <main+0x254>
				  HAL_Delay(500);
				  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
				  HAL_Delay(500);
			  }
		  }
		  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cd8:	4835      	ldr	r0, [pc, #212]	@ (8001db0 <main+0x370>)
 8001cda:	f001 fd0f 	bl	80036fc <HAL_GPIO_WritePin>
		  HAL_Delay(2000);
 8001cde:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ce2:	f001 fa39 	bl	8003158 <HAL_Delay>
	  }


  // Inicializa pacote com valores padrão
  pacote_recebido.Vx = 0;
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	f8c7 3041 	str.w	r3, [r7, #65]	@ 0x41
  pacote_recebido.Vy = 0;
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	f8c7 3045 	str.w	r3, [r7, #69]	@ 0x45
  pacote_recebido.Vang = 0;
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	f8c7 3049 	str.w	r3, [r7, #73]	@ 0x49
  pacote_recebido.id = id;
 8001cfe:	2305      	movs	r3, #5
 8001d00:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
  pacote_recebido.kicker = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  // ---- Comunicação via rádio ----
	if(nrf24_data_available()) {
 8001d0a:	f7ff fc98 	bl	800163e <nrf24_data_available>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d05b      	beq.n	8001dcc <main+0x38c>
		nrf24_receive(rx_buffer, pld_size);
 8001d14:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <main+0x358>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001d1c:	f7ff fca4 	bl	8001668 <nrf24_receive>
		memcpy(&pacote_recebido, rx_buffer, sizeof(Pacote));
 8001d20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d26:	4614      	mov	r4, r2
 8001d28:	6820      	ldr	r0, [r4, #0]
 8001d2a:	6861      	ldr	r1, [r4, #4]
 8001d2c:	68a2      	ldr	r2, [r4, #8]
 8001d2e:	c307      	stmia	r3!, {r0, r1, r2}
 8001d30:	89a2      	ldrh	r2, [r4, #12]
 8001d32:	801a      	strh	r2, [r3, #0]

		if(pacote_recebido.id == id){
 8001d34:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001d38:	2205      	movs	r2, #5
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d119      	bne.n	8001d72 <main+0x332>
		  // Atualiza variáveis globais
			vx = pacote_recebido.Vx;
 8001d3e:	f8d7 3041 	ldr.w	r3, [r7, #65]	@ 0x41
 8001d42:	4a1d      	ldr	r2, [pc, #116]	@ (8001db8 <main+0x378>)
 8001d44:	6013      	str	r3, [r2, #0]
			vy = pacote_recebido.Vy;
 8001d46:	f8d7 3045 	ldr.w	r3, [r7, #69]	@ 0x45
 8001d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dbc <main+0x37c>)
 8001d4c:	6013      	str	r3, [r2, #0]
			vang = pacote_recebido.Vang;
 8001d4e:	f8d7 3049 	ldr.w	r3, [r7, #73]	@ 0x49
 8001d52:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc0 <main+0x380>)
 8001d54:	6013      	str	r3, [r2, #0]
			kicker = pacote_recebido.kicker;
 8001d56:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <main+0x384>)
 8001d5c:	701a      	strb	r2, [r3, #0]

			radio_timeout = 1;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <main+0x388>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d6a:	4811      	ldr	r0, [pc, #68]	@ (8001db0 <main+0x370>)
 8001d6c:	f001 fcc6 	bl	80036fc <HAL_GPIO_WritePin>
 8001d70:	e035      	b.n	8001dde <main+0x39e>
		} else {
			HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001d72:	2201      	movs	r2, #1
 8001d74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d78:	480d      	ldr	r0, [pc, #52]	@ (8001db0 <main+0x370>)
 8001d7a:	f001 fcbf 	bl	80036fc <HAL_GPIO_WritePin>
			radio_timeout = 0;
 8001d7e:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <main+0x388>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e02b      	b.n	8001dde <main+0x39e>
 8001d86:	bf00      	nop
 8001d88:	200002b4 	.word	0x200002b4
 8001d8c:	200002fc 	.word	0x200002fc
 8001d90:	20000344 	.word	0x20000344
 8001d94:	2000038c 	.word	0x2000038c
 8001d98:	20000006 	.word	0x20000006
 8001d9c:	3f490fd8 	.word	0x3f490fd8
 8001da0:	3dbb645a 	.word	0x3dbb645a
 8001da4:	4016cbd1 	.word	0x4016cbd1
 8001da8:	407b53ce 	.word	0x407b53ce
 8001dac:	40afede5 	.word	0x40afede5
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	200001f8 	.word	0x200001f8
 8001dbc:	200001fc 	.word	0x200001fc
 8001dc0:	20000200 	.word	0x20000200
 8001dc4:	20000204 	.word	0x20000204
 8001dc8:	20000205 	.word	0x20000205
		}
	} else {
		radio_timeout = 0;
 8001dcc:	4bba      	ldr	r3, [pc, #744]	@ (80020b8 <main+0x678>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dd8:	48b8      	ldr	r0, [pc, #736]	@ (80020bc <main+0x67c>)
 8001dda:	f001 fc8f 	bl	80036fc <HAL_GPIO_WritePin>
	}
  // ---- Testes especiais (kicker) ----
  if(kicker  > 8 && kicker < 12){
 8001dde:	4bb8      	ldr	r3, [pc, #736]	@ (80020c0 <main+0x680>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d942      	bls.n	8001e6e <main+0x42e>
 8001de8:	4bb5      	ldr	r3, [pc, #724]	@ (80020c0 <main+0x680>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b0b      	cmp	r3, #11
 8001df0:	d83d      	bhi.n	8001e6e <main+0x42e>
	  HAL_Delay(4000);
 8001df2:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001df6:	f001 f9af 	bl	8003158 <HAL_Delay>
	  for(int i = 0; i<4; i++){
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e00:	e030      	b.n	8001e64 <main+0x424>
		  acionar_motor(i+1, 1000);
 8001e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e06:	3301      	adds	r3, #1
 8001e08:	ed9f 0aae 	vldr	s0, [pc, #696]	@ 80020c4 <main+0x684>
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fcdb 	bl	80017c8 <acionar_motor>
		  HAL_Delay(1000);
 8001e12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e16:	f001 f99f 	bl	8003158 <HAL_Delay>
		  acionar_motor(i+1, 0);
 8001e1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e1e:	3301      	adds	r3, #1
 8001e20:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 80020c8 <main+0x688>
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fccf 	bl	80017c8 <acionar_motor>
		  HAL_Delay(1000);
 8001e2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e2e:	f001 f993 	bl	8003158 <HAL_Delay>
		  acionar_motor(i+1, -1000);
 8001e32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e36:	3301      	adds	r3, #1
 8001e38:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 80020cc <main+0x68c>
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fcc3 	bl	80017c8 <acionar_motor>
		  HAL_Delay(1000);
 8001e42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e46:	f001 f987 	bl	8003158 <HAL_Delay>
		  acionar_motor(i+1, 0);
 8001e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e4e:	3301      	adds	r3, #1
 8001e50:	ed9f 0a9d 	vldr	s0, [pc, #628]	@ 80020c8 <main+0x688>
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fcb7 	bl	80017c8 <acionar_motor>
	  for(int i = 0; i<4; i++){
 8001e5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	ddca      	ble.n	8001e02 <main+0x3c2>
	  }
	  continue;
 8001e6c:	e2b0      	b.n	80023d0 <main+0x990>
  }
  if(kicker  > 14 && kicker < 16){
 8001e6e:	4b94      	ldr	r3, [pc, #592]	@ (80020c0 <main+0x680>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b0e      	cmp	r3, #14
 8001e76:	d94e      	bls.n	8001f16 <main+0x4d6>
 8001e78:	4b91      	ldr	r3, [pc, #580]	@ (80020c0 <main+0x680>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b0f      	cmp	r3, #15
 8001e80:	d849      	bhi.n	8001f16 <main+0x4d6>
	  HAL_Delay(4000);
 8001e82:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001e86:	f001 f967 	bl	8003158 <HAL_Delay>
	  for(int i = 0; i<4; i++){
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001e90:	e03c      	b.n	8001f0c <main+0x4cc>
		  acionar_motor(1, 100);
 8001e92:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 80020d0 <main+0x690>
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff fc96 	bl	80017c8 <acionar_motor>
		  HAL_Delay(1000);
 8001e9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ea0:	f001 f95a 	bl	8003158 <HAL_Delay>
		  acionar_motor(1, 0);
 8001ea4:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 80020c8 <main+0x688>
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7ff fc8d 	bl	80017c8 <acionar_motor>
		  acionar_motor(2, 100);
 8001eae:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 80020d0 <main+0x690>
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f7ff fc88 	bl	80017c8 <acionar_motor>
		  HAL_Delay(1000);
 8001eb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ebc:	f001 f94c 	bl	8003158 <HAL_Delay>
		  acionar_motor(2, 0);
 8001ec0:	ed9f 0a81 	vldr	s0, [pc, #516]	@ 80020c8 <main+0x688>
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f7ff fc7f 	bl	80017c8 <acionar_motor>
		  acionar_motor(3, 100);
 8001eca:	ed9f 0a81 	vldr	s0, [pc, #516]	@ 80020d0 <main+0x690>
 8001ece:	2003      	movs	r0, #3
 8001ed0:	f7ff fc7a 	bl	80017c8 <acionar_motor>
		  HAL_Delay(1000);
 8001ed4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ed8:	f001 f93e 	bl	8003158 <HAL_Delay>
		  acionar_motor(3, 0);
 8001edc:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 80020c8 <main+0x688>
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f7ff fc71 	bl	80017c8 <acionar_motor>
		  acionar_motor(4, 100);
 8001ee6:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 80020d0 <main+0x690>
 8001eea:	2004      	movs	r0, #4
 8001eec:	f7ff fc6c 	bl	80017c8 <acionar_motor>
		  HAL_Delay(1000);
 8001ef0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ef4:	f001 f930 	bl	8003158 <HAL_Delay>
		  acionar_motor(4, 0);
 8001ef8:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 80020c8 <main+0x688>
 8001efc:	2004      	movs	r0, #4
 8001efe:	f7ff fc63 	bl	80017c8 <acionar_motor>
	  for(int i = 0; i<4; i++){
 8001f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f06:	3301      	adds	r3, #1
 8001f08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	ddbe      	ble.n	8001e92 <main+0x452>
	  }
	  continue;
 8001f14:	e25c      	b.n	80023d0 <main+0x990>
  }
  if(kicker > 18 && kicker < 22){
 8001f16:	4b6a      	ldr	r3, [pc, #424]	@ (80020c0 <main+0x680>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b12      	cmp	r3, #18
 8001f1e:	f240 80a1 	bls.w	8002064 <main+0x624>
 8001f22:	4b67      	ldr	r3, [pc, #412]	@ (80020c0 <main+0x680>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b15      	cmp	r3, #21
 8001f2a:	f200 809b 	bhi.w	8002064 <main+0x624>
	  for(int i = 0; i<11; i++){
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f34:	e044      	b.n	8001fc0 <main+0x580>
		  acionar_motor(1, i*10);
 8001f36:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f7ff fc3a 	bl	80017c8 <acionar_motor>
		  acionar_motor(2, i*10);
 8001f54:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	ee07 3a90 	vmov	s15, r3
 8001f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f68:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6c:	2002      	movs	r0, #2
 8001f6e:	f7ff fc2b 	bl	80017c8 <acionar_motor>
		  acionar_motor(3, i*10);
 8001f72:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f86:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8a:	2003      	movs	r0, #3
 8001f8c:	f7ff fc1c 	bl	80017c8 <acionar_motor>
		  acionar_motor(4, i*10);
 8001f90:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	ee07 3a90 	vmov	s15, r3
 8001fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa8:	2004      	movs	r0, #4
 8001faa:	f7ff fc0d 	bl	80017c8 <acionar_motor>
		  HAL_Delay(2000);
 8001fae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fb2:	f001 f8d1 	bl	8003158 <HAL_Delay>
	  for(int i = 0; i<11; i++){
 8001fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fc4:	2b0a      	cmp	r3, #10
 8001fc6:	ddb6      	ble.n	8001f36 <main+0x4f6>
	  }
	  for(int i = 0; i<11; i++){
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001fce:	e044      	b.n	800205a <main+0x61a>
		  acionar_motor(1, -i*10);
 8001fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fd4:	f06f 0209 	mvn.w	r2, #9
 8001fd8:	fb02 f303 	mul.w	r3, r2, r3
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7ff fbed 	bl	80017c8 <acionar_motor>
		  acionar_motor(2, -i*10);
 8001fee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ff2:	f06f 0209 	mvn.w	r2, #9
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002002:	eeb0 0a67 	vmov.f32	s0, s15
 8002006:	2002      	movs	r0, #2
 8002008:	f7ff fbde 	bl	80017c8 <acionar_motor>
		  acionar_motor(3, -i*10);
 800200c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002010:	f06f 0209 	mvn.w	r2, #9
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002020:	eeb0 0a67 	vmov.f32	s0, s15
 8002024:	2003      	movs	r0, #3
 8002026:	f7ff fbcf 	bl	80017c8 <acionar_motor>
		  acionar_motor(4, -i*10);
 800202a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800202e:	f06f 0209 	mvn.w	r2, #9
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800203e:	eeb0 0a67 	vmov.f32	s0, s15
 8002042:	2004      	movs	r0, #4
 8002044:	f7ff fbc0 	bl	80017c8 <acionar_motor>
		  HAL_Delay(2000);
 8002048:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800204c:	f001 f884 	bl	8003158 <HAL_Delay>
	  for(int i = 0; i<11; i++){
 8002050:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002054:	3301      	adds	r3, #1
 8002056:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800205a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800205e:	2b0a      	cmp	r3, #10
 8002060:	ddb6      	ble.n	8001fd0 <main+0x590>
	  }
	  continue;
 8002062:	e1b5      	b.n	80023d0 <main+0x990>
  }

  // ---- Cinemática do robô ----
  if (vx > 0.71) vx = 0.71;
 8002064:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <main+0x694>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa75 	bl	8000558 <__aeabi_f2d>
 800206e:	a310      	add	r3, pc, #64	@ (adr r3, 80020b0 <main+0x670>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe fd58 	bl	8000b28 <__aeabi_dcmpgt>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <main+0x644>
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <main+0x694>)
 8002080:	4a15      	ldr	r2, [pc, #84]	@ (80020d8 <main+0x698>)
 8002082:	601a      	str	r2, [r3, #0]
  if (vy > 0.71) vy = 0.71;
 8002084:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <main+0x69c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa65 	bl	8000558 <__aeabi_f2d>
 800208e:	a308      	add	r3, pc, #32	@ (adr r3, 80020b0 <main+0x670>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fd48 	bl	8000b28 <__aeabi_dcmpgt>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <main+0x664>
 800209e:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <main+0x69c>)
 80020a0:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <main+0x698>)
 80020a2:	601a      	str	r2, [r3, #0]

  float velocidade_angular[4];
  for (int i = 0; i < 4; i++) {
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020aa:	e064      	b.n	8002176 <main+0x736>
 80020ac:	f3af 8000 	nop.w
 80020b0:	eb851eb8 	.word	0xeb851eb8
 80020b4:	3fe6b851 	.word	0x3fe6b851
 80020b8:	20000205 	.word	0x20000205
 80020bc:	40020800 	.word	0x40020800
 80020c0:	20000204 	.word	0x20000204
 80020c4:	447a0000 	.word	0x447a0000
 80020c8:	00000000 	.word	0x00000000
 80020cc:	c47a0000 	.word	0xc47a0000
 80020d0:	42c80000 	.word	0x42c80000
 80020d4:	200001f8 	.word	0x200001f8
 80020d8:	3f35c28f 	.word	0x3f35c28f
 80020dc:	200001fc 	.word	0x200001fc
 80020e0:	3ca3d70a 	.word	0x3ca3d70a
	  velocidade_angular[i] = (1.0f / Rr) * (J[i][0] * vx + J[i][1] * vy + J[i][2] * vang);
 80020e4:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 80020e0 <main+0x6a0>
 80020e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	3398      	adds	r3, #152	@ 0x98
 80020fe:	443b      	add	r3, r7
 8002100:	3b88      	subs	r3, #136	@ 0x88
 8002102:	edd3 6a00 	vldr	s13, [r3]
 8002106:	4bb3      	ldr	r3, [pc, #716]	@ (80023d4 <main+0x994>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002110:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	3398      	adds	r3, #152	@ 0x98
 800211e:	443b      	add	r3, r7
 8002120:	3b84      	subs	r3, #132	@ 0x84
 8002122:	ed93 6a00 	vldr	s12, [r3]
 8002126:	4bac      	ldr	r3, [pc, #688]	@ (80023d8 <main+0x998>)
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002130:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002134:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	3398      	adds	r3, #152	@ 0x98
 8002142:	443b      	add	r3, r7
 8002144:	3b80      	subs	r3, #128	@ 0x80
 8002146:	ed93 6a00 	vldr	s12, [r3]
 800214a:	4ba4      	ldr	r3, [pc, #656]	@ (80023dc <main+0x99c>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	3398      	adds	r3, #152	@ 0x98
 8002164:	443b      	add	r3, r7
 8002166:	3b98      	subs	r3, #152	@ 0x98
 8002168:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 4; i++) {
 800216c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002170:	3301      	adds	r3, #1
 8002172:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002176:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800217a:	2b03      	cmp	r3, #3
 800217c:	ddb2      	ble.n	80020e4 <main+0x6a4>
  }

  // Normalizar
  float max_val = 0.0f;
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	67fb      	str	r3, [r7, #124]	@ 0x7c
  for (int i = 0; i < 4; i++) {
 8002184:	2300      	movs	r3, #0
 8002186:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002188:	e018      	b.n	80021bc <main+0x77c>
	  float abs_val = fabs(velocidade_angular[i]);
 800218a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	3398      	adds	r3, #152	@ 0x98
 8002190:	443b      	add	r3, r7
 8002192:	3b98      	subs	r3, #152	@ 0x98
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	eef0 7ae7 	vabs.f32	s15, s15
 800219c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	  if (abs_val > max_val) max_val = abs_val;
 80021a0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80021a4:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80021a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b0:	dd01      	ble.n	80021b6 <main+0x776>
 80021b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  for (int i = 0; i < 4; i++) {
 80021b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021b8:	3301      	adds	r3, #1
 80021ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021be:	2b03      	cmp	r3, #3
 80021c0:	dde3      	ble.n	800218a <main+0x74a>
  }
  if (max_val > velocidade_maxima_motor) {
 80021c2:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80023e0 <main+0x9a0>
 80021c6:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80021ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	dd22      	ble.n	800221a <main+0x7da>
	  float escala = velocidade_maxima_motor / max_val;
 80021d4:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80023e0 <main+0x9a0>
 80021d8:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80021dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021e0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	  for (int i = 0; i < 4; i++) {
 80021e4:	2300      	movs	r3, #0
 80021e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80021e8:	e014      	b.n	8002214 <main+0x7d4>
		  velocidade_angular[i] *= escala;
 80021ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	3398      	adds	r3, #152	@ 0x98
 80021f0:	443b      	add	r3, r7
 80021f2:	3b98      	subs	r3, #152	@ 0x98
 80021f4:	ed93 7a00 	vldr	s14, [r3]
 80021f8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80021fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002200:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	3398      	adds	r3, #152	@ 0x98
 8002206:	443b      	add	r3, r7
 8002208:	3b98      	subs	r3, #152	@ 0x98
 800220a:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < 4; i++) {
 800220e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002210:	3301      	adds	r3, #1
 8002212:	677b      	str	r3, [r7, #116]	@ 0x74
 8002214:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002216:	2b03      	cmp	r3, #3
 8002218:	dde7      	ble.n	80021ea <main+0x7aa>
	  }
  }

  // Garantir mínimo
  float min_val = 1e9f;
 800221a:	4b72      	ldr	r3, [pc, #456]	@ (80023e4 <main+0x9a4>)
 800221c:	673b      	str	r3, [r7, #112]	@ 0x70
  for (int i = 0; i < 4; i++) {
 800221e:	2300      	movs	r3, #0
 8002220:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002222:	e021      	b.n	8002268 <main+0x828>
	  float abs_val = fabs(velocidade_angular[i]);
 8002224:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	3398      	adds	r3, #152	@ 0x98
 800222a:	443b      	add	r3, r7
 800222c:	3b98      	subs	r3, #152	@ 0x98
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	eef0 7ae7 	vabs.f32	s15, s15
 8002236:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	  if (abs_val > epsilon && abs_val < min_val) {
 800223a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800223e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224a:	dd0a      	ble.n	8002262 <main+0x822>
 800224c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002250:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225c:	d501      	bpl.n	8002262 <main+0x822>
		  min_val = abs_val;
 800225e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002260:	673b      	str	r3, [r7, #112]	@ 0x70
  for (int i = 0; i < 4; i++) {
 8002262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002264:	3301      	adds	r3, #1
 8002266:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800226a:	2b03      	cmp	r3, #3
 800226c:	ddda      	ble.n	8002224 <main+0x7e4>
	  }
  }
  if (min_val < velocidade_minima_motor && min_val > epsilon) {
 800226e:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80023e8 <main+0x9a8>
 8002272:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	d56b      	bpl.n	8002358 <main+0x918>
 8002280:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002284:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002290:	dd62      	ble.n	8002358 <main+0x918>
	  float escala = velocidade_minima_motor / min_val;
 8002292:	eddf 6a55 	vldr	s13, [pc, #340]	@ 80023e8 <main+0x9a8>
 8002296:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800229a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800229e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	  for (int i = 0; i < 4; i++) {
 80022a2:	2300      	movs	r3, #0
 80022a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022a6:	e054      	b.n	8002352 <main+0x912>
		  if (fabs(velocidade_angular[i]) > epsilon) {
 80022a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	3398      	adds	r3, #152	@ 0x98
 80022ae:	443b      	add	r3, r7
 80022b0:	3b98      	subs	r3, #152	@ 0x98
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	eef0 7ae7 	vabs.f32	s15, s15
 80022ba:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80022be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	dd41      	ble.n	800234c <main+0x90c>
			  velocidade_angular[i] *= escala;
 80022c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	3398      	adds	r3, #152	@ 0x98
 80022ce:	443b      	add	r3, r7
 80022d0:	3b98      	subs	r3, #152	@ 0x98
 80022d2:	ed93 7a00 	vldr	s14, [r3]
 80022d6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80022da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	3398      	adds	r3, #152	@ 0x98
 80022e4:	443b      	add	r3, r7
 80022e6:	3b98      	subs	r3, #152	@ 0x98
 80022e8:	edc3 7a00 	vstr	s15, [r3]
			  if (velocidade_angular[i] > velocidade_maxima_motor) velocidade_angular[i] = velocidade_maxima_motor;
 80022ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	3398      	adds	r3, #152	@ 0x98
 80022f2:	443b      	add	r3, r7
 80022f4:	3b98      	subs	r3, #152	@ 0x98
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80023e0 <main+0x9a0>
 80022fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002306:	dd06      	ble.n	8002316 <main+0x8d6>
 8002308:	4a38      	ldr	r2, [pc, #224]	@ (80023ec <main+0x9ac>)
 800230a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	3398      	adds	r3, #152	@ 0x98
 8002310:	443b      	add	r3, r7
 8002312:	3b98      	subs	r3, #152	@ 0x98
 8002314:	601a      	str	r2, [r3, #0]
			  if (velocidade_angular[i] < -velocidade_maxima_motor) velocidade_angular[i] = -velocidade_maxima_motor;
 8002316:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	3398      	adds	r3, #152	@ 0x98
 800231c:	443b      	add	r3, r7
 800231e:	3b98      	subs	r3, #152	@ 0x98
 8002320:	ed93 7a00 	vldr	s14, [r3]
 8002324:	eddf 7a2e 	vldr	s15, [pc, #184]	@ 80023e0 <main+0x9a0>
 8002328:	eef1 7a67 	vneg.f32	s15, s15
 800232c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002334:	d50a      	bpl.n	800234c <main+0x90c>
 8002336:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 80023e0 <main+0x9a0>
 800233a:	eef1 7a67 	vneg.f32	s15, s15
 800233e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	3398      	adds	r3, #152	@ 0x98
 8002344:	443b      	add	r3, r7
 8002346:	3b98      	subs	r3, #152	@ 0x98
 8002348:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < 4; i++) {
 800234c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800234e:	3301      	adds	r3, #1
 8002350:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002352:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002354:	2b03      	cmp	r3, #3
 8002356:	dda7      	ble.n	80022a8 <main+0x868>
		  }
	  }
  }

  // Aplicar nos motores
  acionar_motor(1, 100.0f*velocidade_angular[0]/velocidade_maxima_motor);
 8002358:	edd7 7a00 	vldr	s15, [r7]
 800235c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80023f0 <main+0x9b0>
 8002360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002364:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80023e0 <main+0x9a0>
 8002368:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800236c:	eeb0 0a47 	vmov.f32	s0, s14
 8002370:	2001      	movs	r0, #1
 8002372:	f7ff fa29 	bl	80017c8 <acionar_motor>
  acionar_motor(2, 100.0f*velocidade_angular[1]/velocidade_maxima_motor);
 8002376:	edd7 7a01 	vldr	s15, [r7, #4]
 800237a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80023f0 <main+0x9b0>
 800237e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002382:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80023e0 <main+0x9a0>
 8002386:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800238a:	eeb0 0a47 	vmov.f32	s0, s14
 800238e:	2002      	movs	r0, #2
 8002390:	f7ff fa1a 	bl	80017c8 <acionar_motor>
  acionar_motor(3, 100.0f*velocidade_angular[2]/velocidade_maxima_motor);
 8002394:	edd7 7a02 	vldr	s15, [r7, #8]
 8002398:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80023f0 <main+0x9b0>
 800239c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a0:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80023e0 <main+0x9a0>
 80023a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023a8:	eeb0 0a47 	vmov.f32	s0, s14
 80023ac:	2003      	movs	r0, #3
 80023ae:	f7ff fa0b 	bl	80017c8 <acionar_motor>
  acionar_motor(4, 100.0f*velocidade_angular[3]/velocidade_maxima_motor);
 80023b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80023b6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80023f0 <main+0x9b0>
 80023ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023be:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80023e0 <main+0x9a0>
 80023c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023c6:	eeb0 0a47 	vmov.f32	s0, s14
 80023ca:	2004      	movs	r0, #4
 80023cc:	f7ff f9fc 	bl	80017c8 <acionar_motor>
  {
 80023d0:	e44b      	b.n	8001c6a <main+0x22a>
 80023d2:	bf00      	nop
 80023d4:	200001f8 	.word	0x200001f8
 80023d8:	200001fc 	.word	0x200001fc
 80023dc:	20000200 	.word	0x20000200
 80023e0:	41ea927e 	.word	0x41ea927e
 80023e4:	4e6e6b28 	.word	0x4e6e6b28
 80023e8:	418cbe4c 	.word	0x418cbe4c
 80023ec:	41ea927e 	.word	0x41ea927e
 80023f0:	42c80000 	.word	0x42c80000

080023f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b094      	sub	sp, #80	@ 0x50
 80023f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023fa:	f107 0320 	add.w	r3, r7, #32
 80023fe:	2230      	movs	r2, #48	@ 0x30
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f004 f8e1 	bl	80065ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002408:	f107 030c 	add.w	r3, r7, #12
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	4b27      	ldr	r3, [pc, #156]	@ (80024bc <SystemClock_Config+0xc8>)
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	4a26      	ldr	r2, [pc, #152]	@ (80024bc <SystemClock_Config+0xc8>)
 8002422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002426:	6413      	str	r3, [r2, #64]	@ 0x40
 8002428:	4b24      	ldr	r3, [pc, #144]	@ (80024bc <SystemClock_Config+0xc8>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002434:	2300      	movs	r3, #0
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	4b21      	ldr	r3, [pc, #132]	@ (80024c0 <SystemClock_Config+0xcc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a20      	ldr	r2, [pc, #128]	@ (80024c0 <SystemClock_Config+0xcc>)
 800243e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b1e      	ldr	r3, [pc, #120]	@ (80024c0 <SystemClock_Config+0xcc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002450:	2302      	movs	r3, #2
 8002452:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002454:	2301      	movs	r3, #1
 8002456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002458:	2310      	movs	r3, #16
 800245a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800245c:	2302      	movs	r3, #2
 800245e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002460:	2300      	movs	r3, #0
 8002462:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002464:	2308      	movs	r3, #8
 8002466:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002468:	2350      	movs	r3, #80	@ 0x50
 800246a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800246c:	2302      	movs	r3, #2
 800246e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002470:	2304      	movs	r3, #4
 8002472:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002474:	f107 0320 	add.w	r3, r7, #32
 8002478:	4618      	mov	r0, r3
 800247a:	f001 fa9d 	bl	80039b8 <HAL_RCC_OscConfig>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002484:	f000 fac6 	bl	8002a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002488:	230f      	movs	r3, #15
 800248a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800248c:	2302      	movs	r3, #2
 800248e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002498:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800249e:	f107 030c 	add.w	r3, r7, #12
 80024a2:	2102      	movs	r1, #2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 fcff 	bl	8003ea8 <HAL_RCC_ClockConfig>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80024b0:	f000 fab0 	bl	8002a14 <Error_Handler>
  }
}
 80024b4:	bf00      	nop
 80024b6:	3750      	adds	r7, #80	@ 0x50
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40007000 	.word	0x40007000

080024c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024c8:	4b12      	ldr	r3, [pc, #72]	@ (8002514 <MX_I2C1_Init+0x50>)
 80024ca:	4a13      	ldr	r2, [pc, #76]	@ (8002518 <MX_I2C1_Init+0x54>)
 80024cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024ce:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <MX_I2C1_Init+0x50>)
 80024d0:	4a12      	ldr	r2, [pc, #72]	@ (800251c <MX_I2C1_Init+0x58>)
 80024d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <MX_I2C1_Init+0x50>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024da:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <MX_I2C1_Init+0x50>)
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <MX_I2C1_Init+0x50>)
 80024e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <MX_I2C1_Init+0x50>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024ee:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <MX_I2C1_Init+0x50>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024f4:	4b07      	ldr	r3, [pc, #28]	@ (8002514 <MX_I2C1_Init+0x50>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <MX_I2C1_Init+0x50>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002500:	4804      	ldr	r0, [pc, #16]	@ (8002514 <MX_I2C1_Init+0x50>)
 8002502:	f001 f915 	bl	8003730 <HAL_I2C_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800250c:	f000 fa82 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000208 	.word	0x20000208
 8002518:	40005400 	.word	0x40005400
 800251c:	000186a0 	.word	0x000186a0

08002520 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002524:	4b17      	ldr	r3, [pc, #92]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002526:	4a18      	ldr	r2, [pc, #96]	@ (8002588 <MX_SPI1_Init+0x68>)
 8002528:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800252a:	4b16      	ldr	r3, [pc, #88]	@ (8002584 <MX_SPI1_Init+0x64>)
 800252c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002530:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002532:	4b14      	ldr	r3, [pc, #80]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002538:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <MX_SPI1_Init+0x64>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800253e:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002544:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002546:	2200      	movs	r2, #0
 8002548:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <MX_SPI1_Init+0x64>)
 800254c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002550:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002552:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002554:	2218      	movs	r2, #24
 8002556:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002558:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <MX_SPI1_Init+0x64>)
 800255a:	2200      	movs	r2, #0
 800255c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002560:	2200      	movs	r2, #0
 8002562:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002564:	4b07      	ldr	r3, [pc, #28]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002566:	2200      	movs	r2, #0
 8002568:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <MX_SPI1_Init+0x64>)
 800256c:	220a      	movs	r2, #10
 800256e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002570:	4804      	ldr	r0, [pc, #16]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002572:	f001 fe65 	bl	8004240 <HAL_SPI_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800257c:	f000 fa4a 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000025c 	.word	0x2000025c
 8002588:	40013000 	.word	0x40013000

0800258c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b092      	sub	sp, #72	@ 0x48
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002592:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800259c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
 80025ac:	615a      	str	r2, [r3, #20]
 80025ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	2220      	movs	r2, #32
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f004 f807 	bl	80065ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025bc:	4b45      	ldr	r3, [pc, #276]	@ (80026d4 <MX_TIM1_Init+0x148>)
 80025be:	4a46      	ldr	r2, [pc, #280]	@ (80026d8 <MX_TIM1_Init+0x14c>)
 80025c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80025c2:	4b44      	ldr	r3, [pc, #272]	@ (80026d4 <MX_TIM1_Init+0x148>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c8:	4b42      	ldr	r3, [pc, #264]	@ (80026d4 <MX_TIM1_Init+0x148>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80025ce:	4b41      	ldr	r3, [pc, #260]	@ (80026d4 <MX_TIM1_Init+0x148>)
 80025d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d6:	4b3f      	ldr	r3, [pc, #252]	@ (80026d4 <MX_TIM1_Init+0x148>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025dc:	4b3d      	ldr	r3, [pc, #244]	@ (80026d4 <MX_TIM1_Init+0x148>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e2:	4b3c      	ldr	r3, [pc, #240]	@ (80026d4 <MX_TIM1_Init+0x148>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80025e8:	483a      	ldr	r0, [pc, #232]	@ (80026d4 <MX_TIM1_Init+0x148>)
 80025ea:	f002 fcad 	bl	8004f48 <HAL_TIM_PWM_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80025f4:	f000 fa0e 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f8:	2300      	movs	r3, #0
 80025fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002600:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002604:	4619      	mov	r1, r3
 8002606:	4833      	ldr	r0, [pc, #204]	@ (80026d4 <MX_TIM1_Init+0x148>)
 8002608:	f003 f9b0 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002612:	f000 f9ff 	bl	8002a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002616:	2360      	movs	r3, #96	@ 0x60
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800261e:	2300      	movs	r3, #0
 8002620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002622:	2300      	movs	r3, #0
 8002624:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002626:	2300      	movs	r3, #0
 8002628:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002636:	2200      	movs	r2, #0
 8002638:	4619      	mov	r1, r3
 800263a:	4826      	ldr	r0, [pc, #152]	@ (80026d4 <MX_TIM1_Init+0x148>)
 800263c:	f002 fe74 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002646:	f000 f9e5 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800264a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800264e:	2204      	movs	r2, #4
 8002650:	4619      	mov	r1, r3
 8002652:	4820      	ldr	r0, [pc, #128]	@ (80026d4 <MX_TIM1_Init+0x148>)
 8002654:	f002 fe68 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800265e:	f000 f9d9 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002666:	2208      	movs	r2, #8
 8002668:	4619      	mov	r1, r3
 800266a:	481a      	ldr	r0, [pc, #104]	@ (80026d4 <MX_TIM1_Init+0x148>)
 800266c:	f002 fe5c 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002676:	f000 f9cd 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800267a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800267e:	220c      	movs	r2, #12
 8002680:	4619      	mov	r1, r3
 8002682:	4814      	ldr	r0, [pc, #80]	@ (80026d4 <MX_TIM1_Init+0x148>)
 8002684:	f002 fe50 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800268e:	f000 f9c1 	bl	8002a14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4807      	ldr	r0, [pc, #28]	@ (80026d4 <MX_TIM1_Init+0x148>)
 80026b6:	f003 f9c7 	bl	8005a48 <HAL_TIMEx_ConfigBreakDeadTime>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80026c0:	f000 f9a8 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026c4:	4803      	ldr	r0, [pc, #12]	@ (80026d4 <MX_TIM1_Init+0x148>)
 80026c6:	f000 fadd 	bl	8002c84 <HAL_TIM_MspPostInit>

}
 80026ca:	bf00      	nop
 80026cc:	3748      	adds	r7, #72	@ 0x48
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200002b4 	.word	0x200002b4
 80026d8:	40010000 	.word	0x40010000

080026dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e2:	f107 0320 	add.w	r3, r7, #32
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
 80026f8:	611a      	str	r2, [r3, #16]
 80026fa:	615a      	str	r2, [r3, #20]
 80026fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026fe:	4b28      	ldr	r3, [pc, #160]	@ (80027a0 <MX_TIM2_Init+0xc4>)
 8002700:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002704:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002706:	4b26      	ldr	r3, [pc, #152]	@ (80027a0 <MX_TIM2_Init+0xc4>)
 8002708:	2200      	movs	r2, #0
 800270a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270c:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <MX_TIM2_Init+0xc4>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002712:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <MX_TIM2_Init+0xc4>)
 8002714:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271a:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <MX_TIM2_Init+0xc4>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002720:	4b1f      	ldr	r3, [pc, #124]	@ (80027a0 <MX_TIM2_Init+0xc4>)
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002726:	481e      	ldr	r0, [pc, #120]	@ (80027a0 <MX_TIM2_Init+0xc4>)
 8002728:	f002 fc0e 	bl	8004f48 <HAL_TIM_PWM_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002732:	f000 f96f 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800273e:	f107 0320 	add.w	r3, r7, #32
 8002742:	4619      	mov	r1, r3
 8002744:	4816      	ldr	r0, [pc, #88]	@ (80027a0 <MX_TIM2_Init+0xc4>)
 8002746:	f003 f911 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002750:	f000 f960 	bl	8002a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002754:	2360      	movs	r3, #96	@ 0x60
 8002756:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002764:	1d3b      	adds	r3, r7, #4
 8002766:	2200      	movs	r2, #0
 8002768:	4619      	mov	r1, r3
 800276a:	480d      	ldr	r0, [pc, #52]	@ (80027a0 <MX_TIM2_Init+0xc4>)
 800276c:	f002 fddc 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002776:	f000 f94d 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	2208      	movs	r2, #8
 800277e:	4619      	mov	r1, r3
 8002780:	4807      	ldr	r0, [pc, #28]	@ (80027a0 <MX_TIM2_Init+0xc4>)
 8002782:	f002 fdd1 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800278c:	f000 f942 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002790:	4803      	ldr	r0, [pc, #12]	@ (80027a0 <MX_TIM2_Init+0xc4>)
 8002792:	f000 fa77 	bl	8002c84 <HAL_TIM_MspPostInit>

}
 8002796:	bf00      	nop
 8002798:	3728      	adds	r7, #40	@ 0x28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200002fc 	.word	0x200002fc

080027a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	@ 0x28
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027aa:	f107 0320 	add.w	r3, r7, #32
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	60da      	str	r2, [r3, #12]
 80027c0:	611a      	str	r2, [r3, #16]
 80027c2:	615a      	str	r2, [r3, #20]
 80027c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027c6:	4b27      	ldr	r3, [pc, #156]	@ (8002864 <MX_TIM3_Init+0xc0>)
 80027c8:	4a27      	ldr	r2, [pc, #156]	@ (8002868 <MX_TIM3_Init+0xc4>)
 80027ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027cc:	4b25      	ldr	r3, [pc, #148]	@ (8002864 <MX_TIM3_Init+0xc0>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d2:	4b24      	ldr	r3, [pc, #144]	@ (8002864 <MX_TIM3_Init+0xc0>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80027d8:	4b22      	ldr	r3, [pc, #136]	@ (8002864 <MX_TIM3_Init+0xc0>)
 80027da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e0:	4b20      	ldr	r3, [pc, #128]	@ (8002864 <MX_TIM3_Init+0xc0>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002864 <MX_TIM3_Init+0xc0>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027ec:	481d      	ldr	r0, [pc, #116]	@ (8002864 <MX_TIM3_Init+0xc0>)
 80027ee:	f002 fbab 	bl	8004f48 <HAL_TIM_PWM_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80027f8:	f000 f90c 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fc:	2300      	movs	r3, #0
 80027fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002804:	f107 0320 	add.w	r3, r7, #32
 8002808:	4619      	mov	r1, r3
 800280a:	4816      	ldr	r0, [pc, #88]	@ (8002864 <MX_TIM3_Init+0xc0>)
 800280c:	f003 f8ae 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002816:	f000 f8fd 	bl	8002a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281a:	2360      	movs	r3, #96	@ 0x60
 800281c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	2208      	movs	r2, #8
 800282e:	4619      	mov	r1, r3
 8002830:	480c      	ldr	r0, [pc, #48]	@ (8002864 <MX_TIM3_Init+0xc0>)
 8002832:	f002 fd79 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800283c:	f000 f8ea 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	220c      	movs	r2, #12
 8002844:	4619      	mov	r1, r3
 8002846:	4807      	ldr	r0, [pc, #28]	@ (8002864 <MX_TIM3_Init+0xc0>)
 8002848:	f002 fd6e 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002852:	f000 f8df 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002856:	4803      	ldr	r0, [pc, #12]	@ (8002864 <MX_TIM3_Init+0xc0>)
 8002858:	f000 fa14 	bl	8002c84 <HAL_TIM_MspPostInit>

}
 800285c:	bf00      	nop
 800285e:	3728      	adds	r7, #40	@ 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000344 	.word	0x20000344
 8002868:	40000400 	.word	0x40000400

0800286c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002870:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <MX_TIM11_Init+0x40>)
 8002872:	4a0f      	ldr	r2, [pc, #60]	@ (80028b0 <MX_TIM11_Init+0x44>)
 8002874:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8399;
 8002876:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <MX_TIM11_Init+0x40>)
 8002878:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800287c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287e:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <MX_TIM11_Init+0x40>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1999;
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <MX_TIM11_Init+0x40>)
 8002886:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800288a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800288c:	4b07      	ldr	r3, [pc, #28]	@ (80028ac <MX_TIM11_Init+0x40>)
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <MX_TIM11_Init+0x40>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002898:	4804      	ldr	r0, [pc, #16]	@ (80028ac <MX_TIM11_Init+0x40>)
 800289a:	f002 faa3 	bl	8004de4 <HAL_TIM_Base_Init>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80028a4:	f000 f8b6 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80028a8:	bf00      	nop
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	2000038c 	.word	0x2000038c
 80028b0:	40014800 	.word	0x40014800

080028b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	@ 0x28
 80028b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002a04 <MX_GPIO_Init+0x150>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4a4c      	ldr	r2, [pc, #304]	@ (8002a04 <MX_GPIO_Init+0x150>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4b4a      	ldr	r3, [pc, #296]	@ (8002a04 <MX_GPIO_Init+0x150>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4b46      	ldr	r3, [pc, #280]	@ (8002a04 <MX_GPIO_Init+0x150>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4a45      	ldr	r2, [pc, #276]	@ (8002a04 <MX_GPIO_Init+0x150>)
 80028f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f6:	4b43      	ldr	r3, [pc, #268]	@ (8002a04 <MX_GPIO_Init+0x150>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	4b3f      	ldr	r3, [pc, #252]	@ (8002a04 <MX_GPIO_Init+0x150>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a04 <MX_GPIO_Init+0x150>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6313      	str	r3, [r2, #48]	@ 0x30
 8002912:	4b3c      	ldr	r3, [pc, #240]	@ (8002a04 <MX_GPIO_Init+0x150>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	4b38      	ldr	r3, [pc, #224]	@ (8002a04 <MX_GPIO_Init+0x150>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a37      	ldr	r2, [pc, #220]	@ (8002a04 <MX_GPIO_Init+0x150>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4b35      	ldr	r3, [pc, #212]	@ (8002a04 <MX_GPIO_Init+0x150>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
 800293a:	2200      	movs	r2, #0
 800293c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002940:	4831      	ldr	r0, [pc, #196]	@ (8002a08 <MX_GPIO_Init+0x154>)
 8002942:	f000 fedb 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CSN_Pin|SPI_CE_Pin, GPIO_PIN_RESET);
 8002946:	2200      	movs	r2, #0
 8002948:	2118      	movs	r1, #24
 800294a:	4830      	ldr	r0, [pc, #192]	@ (8002a0c <MX_GPIO_Init+0x158>)
 800294c:	f000 fed6 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(sinal_kicker_GPIO_Port, sinal_kicker_Pin, GPIO_PIN_RESET);
 8002950:	2200      	movs	r2, #0
 8002952:	2104      	movs	r1, #4
 8002954:	482e      	ldr	r0, [pc, #184]	@ (8002a10 <MX_GPIO_Init+0x15c>)
 8002956:	f000 fed1 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_AZUL_Pin */
  GPIO_InitStruct.Pin = LED_AZUL_Pin;
 800295a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800295e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002960:	2301      	movs	r3, #1
 8002962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002968:	2300      	movs	r3, #0
 800296a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_AZUL_GPIO_Port, &GPIO_InitStruct);
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	4619      	mov	r1, r3
 8002972:	4825      	ldr	r0, [pc, #148]	@ (8002a08 <MX_GPIO_Init+0x154>)
 8002974:	f000 fd26 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002978:	2301      	movs	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800297c:	2300      	movs	r3, #0
 800297e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002980:	2301      	movs	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4619      	mov	r1, r3
 800298a:	4820      	ldr	r0, [pc, #128]	@ (8002a0c <MX_GPIO_Init+0x158>)
 800298c:	f000 fd1a 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CSN_Pin SPI_CE_Pin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CE_Pin;
 8002990:	2318      	movs	r3, #24
 8002992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002994:	2301      	movs	r3, #1
 8002996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4619      	mov	r1, r3
 80029a6:	4819      	ldr	r0, [pc, #100]	@ (8002a0c <MX_GPIO_Init+0x158>)
 80029a8:	f000 fd0c 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : sinal_kicker_Pin */
  GPIO_InitStruct.Pin = sinal_kicker_Pin;
 80029ac:	2304      	movs	r3, #4
 80029ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b0:	2301      	movs	r3, #1
 80029b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b8:	2302      	movs	r3, #2
 80029ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(sinal_kicker_GPIO_Port, &GPIO_InitStruct);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	4813      	ldr	r0, [pc, #76]	@ (8002a10 <MX_GPIO_Init+0x15c>)
 80029c4:	f000 fcfe 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : sinal_hall_1_Pin sinal_hall_2_Pin sinal_hall_3_Pin sinal_hall_4_Pin
                           sinal_hall_5_Pin sinal_hall_6_Pin sinal_hall_7_Pin sinal_hall_8_Pin */
  GPIO_InitStruct.Pin = sinal_hall_1_Pin|sinal_hall_2_Pin|sinal_hall_3_Pin|sinal_hall_4_Pin
 80029c8:	f24f 1338 	movw	r3, #61752	@ 0xf138
 80029cc:	617b      	str	r3, [r7, #20]
                          |sinal_hall_5_Pin|sinal_hall_6_Pin|sinal_hall_7_Pin|sinal_hall_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	480c      	ldr	r0, [pc, #48]	@ (8002a10 <MX_GPIO_Init+0x15c>)
 80029de:	f000 fcf1 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_bola_Pin */
  GPIO_InitStruct.Pin = Sensor_bola_Pin;
 80029e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sensor_bola_GPIO_Port, &GPIO_InitStruct);
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4619      	mov	r1, r3
 80029f6:	4805      	ldr	r0, [pc, #20]	@ (8002a0c <MX_GPIO_Init+0x158>)
 80029f8:	f000 fce4 	bl	80033c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	@ 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020800 	.word	0x40020800
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	40020400 	.word	0x40020400

08002a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a18:	b672      	cpsid	i
}
 8002a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a1c:	bf00      	nop
 8002a1e:	e7fd      	b.n	8002a1c <Error_Handler+0x8>

08002a20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <HAL_MspInit+0x4c>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002a6c <HAL_MspInit+0x4c>)
 8002a30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a36:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <HAL_MspInit+0x4c>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <HAL_MspInit+0x4c>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	4a08      	ldr	r2, [pc, #32]	@ (8002a6c <HAL_MspInit+0x4c>)
 8002a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a52:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HAL_MspInit+0x4c>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800

08002a70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	@ 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	@ (8002af4 <HAL_I2C_MspInit+0x84>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d12b      	bne.n	8002aea <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	4b18      	ldr	r3, [pc, #96]	@ (8002af8 <HAL_I2C_MspInit+0x88>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	4a17      	ldr	r2, [pc, #92]	@ (8002af8 <HAL_I2C_MspInit+0x88>)
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa2:	4b15      	ldr	r3, [pc, #84]	@ (8002af8 <HAL_I2C_MspInit+0x88>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aae:	23c0      	movs	r3, #192	@ 0xc0
 8002ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ab2:	2312      	movs	r3, #18
 8002ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aba:	2303      	movs	r3, #3
 8002abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002abe:	2304      	movs	r3, #4
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480c      	ldr	r0, [pc, #48]	@ (8002afc <HAL_I2C_MspInit+0x8c>)
 8002aca:	f000 fc7b 	bl	80033c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_I2C_MspInit+0x88>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	4a08      	ldr	r2, [pc, #32]	@ (8002af8 <HAL_I2C_MspInit+0x88>)
 8002ad8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ade:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <HAL_I2C_MspInit+0x88>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002aea:	bf00      	nop
 8002aec:	3728      	adds	r7, #40	@ 0x28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40005400 	.word	0x40005400
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020400 	.word	0x40020400

08002b00 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	@ 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a19      	ldr	r2, [pc, #100]	@ (8002b84 <HAL_SPI_MspInit+0x84>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d12b      	bne.n	8002b7a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	4b18      	ldr	r3, [pc, #96]	@ (8002b88 <HAL_SPI_MspInit+0x88>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	4a17      	ldr	r2, [pc, #92]	@ (8002b88 <HAL_SPI_MspInit+0x88>)
 8002b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <HAL_SPI_MspInit+0x88>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <HAL_SPI_MspInit+0x88>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	4a10      	ldr	r2, [pc, #64]	@ (8002b88 <HAL_SPI_MspInit+0x88>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b88 <HAL_SPI_MspInit+0x88>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b5a:	23e0      	movs	r3, #224	@ 0xe0
 8002b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b66:	2303      	movs	r3, #3
 8002b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b6a:	2305      	movs	r3, #5
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6e:	f107 0314 	add.w	r3, r7, #20
 8002b72:	4619      	mov	r1, r3
 8002b74:	4805      	ldr	r0, [pc, #20]	@ (8002b8c <HAL_SPI_MspInit+0x8c>)
 8002b76:	f000 fc25 	bl	80033c4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b7a:	bf00      	nop
 8002b7c:	3728      	adds	r7, #40	@ 0x28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40013000 	.word	0x40013000
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40020000 	.word	0x40020000

08002b90 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a22      	ldr	r2, [pc, #136]	@ (8002c28 <HAL_TIM_PWM_MspInit+0x98>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d116      	bne.n	8002bd0 <HAL_TIM_PWM_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <HAL_TIM_PWM_MspInit+0x9c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	4a20      	ldr	r2, [pc, #128]	@ (8002c2c <HAL_TIM_PWM_MspInit+0x9c>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <HAL_TIM_PWM_MspInit+0x9c>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	201a      	movs	r0, #26
 8002bc4:	f000 fbc7 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002bc8:	201a      	movs	r0, #26
 8002bca:	f000 fbe0 	bl	800338e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002bce:	e026      	b.n	8002c1e <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	4b13      	ldr	r3, [pc, #76]	@ (8002c2c <HAL_TIM_PWM_MspInit+0x9c>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	4a12      	ldr	r2, [pc, #72]	@ (8002c2c <HAL_TIM_PWM_MspInit+0x9c>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bea:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <HAL_TIM_PWM_MspInit+0x9c>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]
}
 8002bf6:	e012      	b.n	8002c1e <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM3)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8002c30 <HAL_TIM_PWM_MspInit+0xa0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10d      	bne.n	8002c1e <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <HAL_TIM_PWM_MspInit+0x9c>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	4a08      	ldr	r2, [pc, #32]	@ (8002c2c <HAL_TIM_PWM_MspInit+0x9c>)
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_TIM_PWM_MspInit+0x9c>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
}
 8002c1e:	bf00      	nop
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40000400 	.word	0x40000400

08002c34 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0e      	ldr	r2, [pc, #56]	@ (8002c7c <HAL_TIM_Base_MspInit+0x48>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d115      	bne.n	8002c72 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM11_MspInit 0 */

    /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <HAL_TIM_Base_MspInit+0x4c>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c80 <HAL_TIM_Base_MspInit+0x4c>)
 8002c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c56:	4b0a      	ldr	r3, [pc, #40]	@ (8002c80 <HAL_TIM_Base_MspInit+0x4c>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	201a      	movs	r0, #26
 8002c68:	f000 fb75 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002c6c:	201a      	movs	r0, #26
 8002c6e:	f000 fb8e 	bl	800338e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM11_MspInit 1 */

  }

}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40014800 	.word	0x40014800
 8002c80:	40023800 	.word	0x40023800

08002c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08c      	sub	sp, #48	@ 0x30
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 031c 	add.w	r3, r7, #28
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8002de0 <HAL_TIM_MspPostInit+0x15c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d130      	bne.n	8002d08 <HAL_TIM_MspPostInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	4b4e      	ldr	r3, [pc, #312]	@ (8002de4 <HAL_TIM_MspPostInit+0x160>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	4a4d      	ldr	r2, [pc, #308]	@ (8002de4 <HAL_TIM_MspPostInit+0x160>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8002de4 <HAL_TIM_MspPostInit+0x160>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = motor1_IN2_PWM2_Pin;
 8002cc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(motor1_IN2_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002cd8:	f107 031c 	add.w	r3, r7, #28
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4842      	ldr	r0, [pc, #264]	@ (8002de8 <HAL_TIM_MspPostInit+0x164>)
 8002ce0:	f000 fb70 	bl	80033c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = motor1_IN1_PWM1_Pin|motor2_IN3_PWM1_Pin|motor2_in4_PWM2_Pin;
 8002ce4:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8002ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfa:	f107 031c 	add.w	r3, r7, #28
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4839      	ldr	r0, [pc, #228]	@ (8002de8 <HAL_TIM_MspPostInit+0x164>)
 8002d02:	f000 fb5f 	bl	80033c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d06:	e066      	b.n	8002dd6 <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d10:	d13e      	bne.n	8002d90 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	4b33      	ldr	r3, [pc, #204]	@ (8002de4 <HAL_TIM_MspPostInit+0x160>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	4a32      	ldr	r2, [pc, #200]	@ (8002de4 <HAL_TIM_MspPostInit+0x160>)
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d22:	4b30      	ldr	r3, [pc, #192]	@ (8002de4 <HAL_TIM_MspPostInit+0x160>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	4b2c      	ldr	r3, [pc, #176]	@ (8002de4 <HAL_TIM_MspPostInit+0x160>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	4a2b      	ldr	r2, [pc, #172]	@ (8002de4 <HAL_TIM_MspPostInit+0x160>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d3e:	4b29      	ldr	r3, [pc, #164]	@ (8002de4 <HAL_TIM_MspPostInit+0x160>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = motor3_in1_PWM1_Pin;
 8002d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(motor3_in1_PWM1_GPIO_Port, &GPIO_InitStruct);
 8002d60:	f107 031c 	add.w	r3, r7, #28
 8002d64:	4619      	mov	r1, r3
 8002d66:	4821      	ldr	r0, [pc, #132]	@ (8002dec <HAL_TIM_MspPostInit+0x168>)
 8002d68:	f000 fb2c 	bl	80033c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = motor4_in4_PWM2_Pin;
 8002d6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(motor4_in4_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002d82:	f107 031c 	add.w	r3, r7, #28
 8002d86:	4619      	mov	r1, r3
 8002d88:	4817      	ldr	r0, [pc, #92]	@ (8002de8 <HAL_TIM_MspPostInit+0x164>)
 8002d8a:	f000 fb1b 	bl	80033c4 <HAL_GPIO_Init>
}
 8002d8e:	e022      	b.n	8002dd6 <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM3)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a16      	ldr	r2, [pc, #88]	@ (8002df0 <HAL_TIM_MspPostInit+0x16c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d11d      	bne.n	8002dd6 <HAL_TIM_MspPostInit+0x152>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <HAL_TIM_MspPostInit+0x160>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	4a10      	ldr	r2, [pc, #64]	@ (8002de4 <HAL_TIM_MspPostInit+0x160>)
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002daa:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <HAL_TIM_MspPostInit+0x160>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = motor4_in3_PWM1_Pin|motor3_in2_PWM2_Pin;
 8002db6:	2303      	movs	r3, #3
 8002db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dca:	f107 031c 	add.w	r3, r7, #28
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4806      	ldr	r0, [pc, #24]	@ (8002dec <HAL_TIM_MspPostInit+0x168>)
 8002dd2:	f000 faf7 	bl	80033c4 <HAL_GPIO_Init>
}
 8002dd6:	bf00      	nop
 8002dd8:	3730      	adds	r7, #48	@ 0x30
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40000400 	.word	0x40000400

08002df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <NMI_Handler+0x4>

08002dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <HardFault_Handler+0x4>

08002e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <MemManage_Handler+0x4>

08002e0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <BusFault_Handler+0x4>

08002e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e18:	bf00      	nop
 8002e1a:	e7fd      	b.n	8002e18 <UsageFault_Handler+0x4>

08002e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e4a:	f000 f965 	bl	8003118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e58:	4803      	ldr	r0, [pc, #12]	@ (8002e68 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002e5a:	f002 f975 	bl	8005148 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002e5e:	4803      	ldr	r0, [pc, #12]	@ (8002e6c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002e60:	f002 f972 	bl	8005148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200002b4 	.word	0x200002b4
 8002e6c:	2000038c 	.word	0x2000038c

08002e70 <_getpid>:
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	2301      	movs	r3, #1
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <_kill>:
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	f003 fbf1 	bl	8006670 <__errno>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2216      	movs	r2, #22
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <_exit>:
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ffe7 	bl	8002e80 <_kill>
 8002eb2:	bf00      	nop
 8002eb4:	e7fd      	b.n	8002eb2 <_exit+0x12>

08002eb6 <_read>:
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b086      	sub	sp, #24
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	e00a      	b.n	8002ede <_read+0x28>
 8002ec8:	f3af 8000 	nop.w
 8002ecc:	4601      	mov	r1, r0
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	60ba      	str	r2, [r7, #8]
 8002ed4:	b2ca      	uxtb	r2, r1
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3301      	adds	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	dbf0      	blt.n	8002ec8 <_read+0x12>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <_write>:
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e009      	b.n	8002f16 <_write+0x26>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	60ba      	str	r2, [r7, #8]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f3af 8000 	nop.w
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	3301      	adds	r3, #1
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	dbf1      	blt.n	8002f02 <_write+0x12>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_close>:
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <_fstat>:
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	2300      	movs	r3, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <_isatty>:
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <_lseek>:
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	2300      	movs	r3, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_sbrk>:
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	4a14      	ldr	r2, [pc, #80]	@ (8002fec <_sbrk+0x5c>)
 8002f9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ff0 <_sbrk+0x60>)
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <_sbrk+0x64>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <_sbrk+0x22>
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <_sbrk+0x64>)
 8002fae:	4a12      	ldr	r2, [pc, #72]	@ (8002ff8 <_sbrk+0x68>)
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <_sbrk+0x64>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d207      	bcs.n	8002fd0 <_sbrk+0x40>
 8002fc0:	f003 fb56 	bl	8006670 <__errno>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fce:	e009      	b.n	8002fe4 <_sbrk+0x54>
 8002fd0:	4b08      	ldr	r3, [pc, #32]	@ (8002ff4 <_sbrk+0x64>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	4b07      	ldr	r3, [pc, #28]	@ (8002ff4 <_sbrk+0x64>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	4a05      	ldr	r2, [pc, #20]	@ (8002ff4 <_sbrk+0x64>)
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20020000 	.word	0x20020000
 8002ff0:	00000400 	.word	0x00000400
 8002ff4:	200003d4 	.word	0x200003d4
 8002ff8:	20000528 	.word	0x20000528

08002ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003000:	4b06      	ldr	r3, [pc, #24]	@ (800301c <SystemInit+0x20>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003006:	4a05      	ldr	r2, [pc, #20]	@ (800301c <SystemInit+0x20>)
 8003008:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800300c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <Reset_Handler>:
 8003020:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003058 <LoopFillZerobss+0xe>
 8003024:	f7ff ffea 	bl	8002ffc <SystemInit>
 8003028:	480c      	ldr	r0, [pc, #48]	@ (800305c <LoopFillZerobss+0x12>)
 800302a:	490d      	ldr	r1, [pc, #52]	@ (8003060 <LoopFillZerobss+0x16>)
 800302c:	4a0d      	ldr	r2, [pc, #52]	@ (8003064 <LoopFillZerobss+0x1a>)
 800302e:	2300      	movs	r3, #0
 8003030:	e002      	b.n	8003038 <LoopCopyDataInit>

08003032 <CopyDataInit>:
 8003032:	58d4      	ldr	r4, [r2, r3]
 8003034:	50c4      	str	r4, [r0, r3]
 8003036:	3304      	adds	r3, #4

08003038 <LoopCopyDataInit>:
 8003038:	18c4      	adds	r4, r0, r3
 800303a:	428c      	cmp	r4, r1
 800303c:	d3f9      	bcc.n	8003032 <CopyDataInit>
 800303e:	4a0a      	ldr	r2, [pc, #40]	@ (8003068 <LoopFillZerobss+0x1e>)
 8003040:	4c0a      	ldr	r4, [pc, #40]	@ (800306c <LoopFillZerobss+0x22>)
 8003042:	2300      	movs	r3, #0
 8003044:	e001      	b.n	800304a <LoopFillZerobss>

08003046 <FillZerobss>:
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	3204      	adds	r2, #4

0800304a <LoopFillZerobss>:
 800304a:	42a2      	cmp	r2, r4
 800304c:	d3fb      	bcc.n	8003046 <FillZerobss>
 800304e:	f003 fb15 	bl	800667c <__libc_init_array>
 8003052:	f7fe fcf5 	bl	8001a40 <main>
 8003056:	4770      	bx	lr
 8003058:	20020000 	.word	0x20020000
 800305c:	20000000 	.word	0x20000000
 8003060:	200001dc 	.word	0x200001dc
 8003064:	08009a98 	.word	0x08009a98
 8003068:	200001dc 	.word	0x200001dc
 800306c:	20000528 	.word	0x20000528

08003070 <ADC_IRQHandler>:
 8003070:	e7fe      	b.n	8003070 <ADC_IRQHandler>
	...

08003074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003078:	4b0e      	ldr	r3, [pc, #56]	@ (80030b4 <HAL_Init+0x40>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0d      	ldr	r2, [pc, #52]	@ (80030b4 <HAL_Init+0x40>)
 800307e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003084:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <HAL_Init+0x40>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0a      	ldr	r2, [pc, #40]	@ (80030b4 <HAL_Init+0x40>)
 800308a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800308e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003090:	4b08      	ldr	r3, [pc, #32]	@ (80030b4 <HAL_Init+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a07      	ldr	r2, [pc, #28]	@ (80030b4 <HAL_Init+0x40>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800309c:	2003      	movs	r0, #3
 800309e:	f000 f94f 	bl	8003340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030a2:	200f      	movs	r0, #15
 80030a4:	f000 f808 	bl	80030b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030a8:	f7ff fcba 	bl	8002a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023c00 	.word	0x40023c00

080030b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030c0:	4b12      	ldr	r3, [pc, #72]	@ (800310c <HAL_InitTick+0x54>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b12      	ldr	r3, [pc, #72]	@ (8003110 <HAL_InitTick+0x58>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80030d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f967 	bl	80033aa <HAL_SYSTICK_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00e      	b.n	8003104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b0f      	cmp	r3, #15
 80030ea:	d80a      	bhi.n	8003102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ec:	2200      	movs	r2, #0
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030f4:	f000 f92f 	bl	8003356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f8:	4a06      	ldr	r2, [pc, #24]	@ (8003114 <HAL_InitTick+0x5c>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000008 	.word	0x20000008
 8003110:	20000010 	.word	0x20000010
 8003114:	2000000c 	.word	0x2000000c

08003118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800311c:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_IncTick+0x20>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_IncTick+0x24>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4413      	add	r3, r2
 8003128:	4a04      	ldr	r2, [pc, #16]	@ (800313c <HAL_IncTick+0x24>)
 800312a:	6013      	str	r3, [r2, #0]
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000010 	.word	0x20000010
 800313c:	200003d8 	.word	0x200003d8

08003140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return uwTick;
 8003144:	4b03      	ldr	r3, [pc, #12]	@ (8003154 <HAL_GetTick+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	200003d8 	.word	0x200003d8

08003158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff ffee 	bl	8003140 <HAL_GetTick>
 8003164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003170:	d005      	beq.n	800317e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003172:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <HAL_Delay+0x44>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800317e:	bf00      	nop
 8003180:	f7ff ffde 	bl	8003140 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	d8f7      	bhi.n	8003180 <HAL_Delay+0x28>
  {
  }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000010 	.word	0x20000010

080031a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b0:	4b0c      	ldr	r3, [pc, #48]	@ (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031bc:	4013      	ands	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d2:	4a04      	ldr	r2, [pc, #16]	@ (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	60d3      	str	r3, [r2, #12]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ec:	4b04      	ldr	r3, [pc, #16]	@ (8003200 <__NVIC_GetPriorityGrouping+0x18>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 0307 	and.w	r3, r3, #7
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	2b00      	cmp	r3, #0
 8003214:	db0b      	blt.n	800322e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4907      	ldr	r1, [pc, #28]	@ (800323c <__NVIC_EnableIRQ+0x38>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2001      	movs	r0, #1
 8003226:	fa00 f202 	lsl.w	r2, r0, r2
 800322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000e100 	.word	0xe000e100

08003240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db0a      	blt.n	800326a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	490c      	ldr	r1, [pc, #48]	@ (800328c <__NVIC_SetPriority+0x4c>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	0112      	lsls	r2, r2, #4
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	440b      	add	r3, r1
 8003264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003268:	e00a      	b.n	8003280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4908      	ldr	r1, [pc, #32]	@ (8003290 <__NVIC_SetPriority+0x50>)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	3b04      	subs	r3, #4
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	440b      	add	r3, r1
 800327e:	761a      	strb	r2, [r3, #24]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000e100 	.word	0xe000e100
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	@ 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f1c3 0307 	rsb	r3, r3, #7
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	bf28      	it	cs
 80032b2:	2304      	movcs	r3, #4
 80032b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d902      	bls.n	80032c4 <NVIC_EncodePriority+0x30>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3b03      	subs	r3, #3
 80032c2:	e000      	b.n	80032c6 <NVIC_EncodePriority+0x32>
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	401a      	ands	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43d9      	mvns	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	4313      	orrs	r3, r2
         );
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	@ 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800330c:	d301      	bcc.n	8003312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330e:	2301      	movs	r3, #1
 8003310:	e00f      	b.n	8003332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003312:	4a0a      	ldr	r2, [pc, #40]	@ (800333c <SysTick_Config+0x40>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331a:	210f      	movs	r1, #15
 800331c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003320:	f7ff ff8e 	bl	8003240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003324:	4b05      	ldr	r3, [pc, #20]	@ (800333c <SysTick_Config+0x40>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332a:	4b04      	ldr	r3, [pc, #16]	@ (800333c <SysTick_Config+0x40>)
 800332c:	2207      	movs	r2, #7
 800332e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	e000e010 	.word	0xe000e010

08003340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff29 	bl	80031a0 <__NVIC_SetPriorityGrouping>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003368:	f7ff ff3e 	bl	80031e8 <__NVIC_GetPriorityGrouping>
 800336c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f7ff ff8e 	bl	8003294 <NVIC_EncodePriority>
 8003378:	4602      	mov	r2, r0
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff5d 	bl	8003240 <__NVIC_SetPriority>
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff31 	bl	8003204 <__NVIC_EnableIRQ>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ffa2 	bl	80032fc <SysTick_Config>
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b089      	sub	sp, #36	@ 0x24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	e159      	b.n	8003694 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033e0:	2201      	movs	r2, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	f040 8148 	bne.w	800368e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d005      	beq.n	8003416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003412:	2b02      	cmp	r3, #2
 8003414:	d130      	bne.n	8003478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	2203      	movs	r2, #3
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800344c:	2201      	movs	r2, #1
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 0201 	and.w	r2, r3, #1
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b03      	cmp	r3, #3
 8003482:	d017      	beq.n	80034b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	2203      	movs	r2, #3
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d123      	bne.n	8003508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	08da      	lsrs	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3208      	adds	r2, #8
 80034c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	220f      	movs	r2, #15
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	08da      	lsrs	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3208      	adds	r2, #8
 8003502:	69b9      	ldr	r1, [r7, #24]
 8003504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	2203      	movs	r2, #3
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0203 	and.w	r2, r3, #3
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80a2 	beq.w	800368e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	4b57      	ldr	r3, [pc, #348]	@ (80036ac <HAL_GPIO_Init+0x2e8>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003552:	4a56      	ldr	r2, [pc, #344]	@ (80036ac <HAL_GPIO_Init+0x2e8>)
 8003554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003558:	6453      	str	r3, [r2, #68]	@ 0x44
 800355a:	4b54      	ldr	r3, [pc, #336]	@ (80036ac <HAL_GPIO_Init+0x2e8>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003566:	4a52      	ldr	r2, [pc, #328]	@ (80036b0 <HAL_GPIO_Init+0x2ec>)
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	3302      	adds	r3, #2
 800356e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	220f      	movs	r2, #15
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a49      	ldr	r2, [pc, #292]	@ (80036b4 <HAL_GPIO_Init+0x2f0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d019      	beq.n	80035c6 <HAL_GPIO_Init+0x202>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a48      	ldr	r2, [pc, #288]	@ (80036b8 <HAL_GPIO_Init+0x2f4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_GPIO_Init+0x1fe>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a47      	ldr	r2, [pc, #284]	@ (80036bc <HAL_GPIO_Init+0x2f8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00d      	beq.n	80035be <HAL_GPIO_Init+0x1fa>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a46      	ldr	r2, [pc, #280]	@ (80036c0 <HAL_GPIO_Init+0x2fc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d007      	beq.n	80035ba <HAL_GPIO_Init+0x1f6>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a45      	ldr	r2, [pc, #276]	@ (80036c4 <HAL_GPIO_Init+0x300>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_GPIO_Init+0x1f2>
 80035b2:	2304      	movs	r3, #4
 80035b4:	e008      	b.n	80035c8 <HAL_GPIO_Init+0x204>
 80035b6:	2307      	movs	r3, #7
 80035b8:	e006      	b.n	80035c8 <HAL_GPIO_Init+0x204>
 80035ba:	2303      	movs	r3, #3
 80035bc:	e004      	b.n	80035c8 <HAL_GPIO_Init+0x204>
 80035be:	2302      	movs	r3, #2
 80035c0:	e002      	b.n	80035c8 <HAL_GPIO_Init+0x204>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_GPIO_Init+0x204>
 80035c6:	2300      	movs	r3, #0
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	f002 0203 	and.w	r2, r2, #3
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	4093      	lsls	r3, r2
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035d8:	4935      	ldr	r1, [pc, #212]	@ (80036b0 <HAL_GPIO_Init+0x2ec>)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	3302      	adds	r3, #2
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035e6:	4b38      	ldr	r3, [pc, #224]	@ (80036c8 <HAL_GPIO_Init+0x304>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800360a:	4a2f      	ldr	r2, [pc, #188]	@ (80036c8 <HAL_GPIO_Init+0x304>)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003610:	4b2d      	ldr	r3, [pc, #180]	@ (80036c8 <HAL_GPIO_Init+0x304>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003634:	4a24      	ldr	r2, [pc, #144]	@ (80036c8 <HAL_GPIO_Init+0x304>)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800363a:	4b23      	ldr	r3, [pc, #140]	@ (80036c8 <HAL_GPIO_Init+0x304>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800365e:	4a1a      	ldr	r2, [pc, #104]	@ (80036c8 <HAL_GPIO_Init+0x304>)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003664:	4b18      	ldr	r3, [pc, #96]	@ (80036c8 <HAL_GPIO_Init+0x304>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003688:	4a0f      	ldr	r2, [pc, #60]	@ (80036c8 <HAL_GPIO_Init+0x304>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3301      	adds	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b0f      	cmp	r3, #15
 8003698:	f67f aea2 	bls.w	80033e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	3724      	adds	r7, #36	@ 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40013800 	.word	0x40013800
 80036b4:	40020000 	.word	0x40020000
 80036b8:	40020400 	.word	0x40020400
 80036bc:	40020800 	.word	0x40020800
 80036c0:	40020c00 	.word	0x40020c00
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	887b      	ldrh	r3, [r7, #2]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
 80036e8:	e001      	b.n	80036ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
 8003708:	4613      	mov	r3, r2
 800370a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800370c:	787b      	ldrb	r3, [r7, #1]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003718:	e003      	b.n	8003722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	041a      	lsls	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	619a      	str	r2, [r3, #24]
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e12b      	b.n	800399a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff f98a 	bl	8002a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2224      	movs	r2, #36	@ 0x24
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003782:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003792:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003794:	f000 fd40 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
 8003798:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4a81      	ldr	r2, [pc, #516]	@ (80039a4 <HAL_I2C_Init+0x274>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d807      	bhi.n	80037b4 <HAL_I2C_Init+0x84>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a80      	ldr	r2, [pc, #512]	@ (80039a8 <HAL_I2C_Init+0x278>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	bf94      	ite	ls
 80037ac:	2301      	movls	r3, #1
 80037ae:	2300      	movhi	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e006      	b.n	80037c2 <HAL_I2C_Init+0x92>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a7d      	ldr	r2, [pc, #500]	@ (80039ac <HAL_I2C_Init+0x27c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	bf94      	ite	ls
 80037bc:	2301      	movls	r3, #1
 80037be:	2300      	movhi	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e0e7      	b.n	800399a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4a78      	ldr	r2, [pc, #480]	@ (80039b0 <HAL_I2C_Init+0x280>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	0c9b      	lsrs	r3, r3, #18
 80037d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4a6a      	ldr	r2, [pc, #424]	@ (80039a4 <HAL_I2C_Init+0x274>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d802      	bhi.n	8003804 <HAL_I2C_Init+0xd4>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	3301      	adds	r3, #1
 8003802:	e009      	b.n	8003818 <HAL_I2C_Init+0xe8>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	4a69      	ldr	r2, [pc, #420]	@ (80039b4 <HAL_I2C_Init+0x284>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	099b      	lsrs	r3, r3, #6
 8003816:	3301      	adds	r3, #1
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	430b      	orrs	r3, r1
 800381e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800382a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	495c      	ldr	r1, [pc, #368]	@ (80039a4 <HAL_I2C_Init+0x274>)
 8003834:	428b      	cmp	r3, r1
 8003836:	d819      	bhi.n	800386c <HAL_I2C_Init+0x13c>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e59      	subs	r1, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	fbb1 f3f3 	udiv	r3, r1, r3
 8003846:	1c59      	adds	r1, r3, #1
 8003848:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800384c:	400b      	ands	r3, r1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_I2C_Init+0x138>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1e59      	subs	r1, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003860:	3301      	adds	r3, #1
 8003862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003866:	e051      	b.n	800390c <HAL_I2C_Init+0x1dc>
 8003868:	2304      	movs	r3, #4
 800386a:	e04f      	b.n	800390c <HAL_I2C_Init+0x1dc>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d111      	bne.n	8003898 <HAL_I2C_Init+0x168>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1e58      	subs	r0, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	440b      	add	r3, r1
 8003882:	fbb0 f3f3 	udiv	r3, r0, r3
 8003886:	3301      	adds	r3, #1
 8003888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e012      	b.n	80038be <HAL_I2C_Init+0x18e>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1e58      	subs	r0, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	0099      	lsls	r1, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ae:	3301      	adds	r3, #1
 80038b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_I2C_Init+0x196>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e022      	b.n	800390c <HAL_I2C_Init+0x1dc>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10e      	bne.n	80038ec <HAL_I2C_Init+0x1bc>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1e58      	subs	r0, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6859      	ldr	r1, [r3, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	440b      	add	r3, r1
 80038dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e0:	3301      	adds	r3, #1
 80038e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ea:	e00f      	b.n	800390c <HAL_I2C_Init+0x1dc>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1e58      	subs	r0, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	0099      	lsls	r1, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003902:	3301      	adds	r3, #1
 8003904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003908:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	6809      	ldr	r1, [r1, #0]
 8003910:	4313      	orrs	r3, r2
 8003912:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800393a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6911      	ldr	r1, [r2, #16]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68d2      	ldr	r2, [r2, #12]
 8003946:	4311      	orrs	r1, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	430b      	orrs	r3, r1
 800394e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	000186a0 	.word	0x000186a0
 80039a8:	001e847f 	.word	0x001e847f
 80039ac:	003d08ff 	.word	0x003d08ff
 80039b0:	431bde83 	.word	0x431bde83
 80039b4:	10624dd3 	.word	0x10624dd3

080039b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e267      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d075      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039d6:	4b88      	ldr	r3, [pc, #544]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d00c      	beq.n	80039fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e2:	4b85      	ldr	r3, [pc, #532]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d112      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ee:	4b82      	ldr	r3, [pc, #520]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039fa:	d10b      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	4b7e      	ldr	r3, [pc, #504]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d05b      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x108>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d157      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e242      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a1c:	d106      	bne.n	8003a2c <HAL_RCC_OscConfig+0x74>
 8003a1e:	4b76      	ldr	r3, [pc, #472]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a75      	ldr	r2, [pc, #468]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e01d      	b.n	8003a68 <HAL_RCC_OscConfig+0xb0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x98>
 8003a36:	4b70      	ldr	r3, [pc, #448]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a6f      	ldr	r2, [pc, #444]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b6d      	ldr	r3, [pc, #436]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6c      	ldr	r2, [pc, #432]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0xb0>
 8003a50:	4b69      	ldr	r3, [pc, #420]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a68      	ldr	r2, [pc, #416]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b66      	ldr	r3, [pc, #408]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a65      	ldr	r2, [pc, #404]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7ff fb66 	bl	8003140 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a78:	f7ff fb62 	bl	8003140 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	@ 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e207      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0xc0>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7ff fb52 	bl	8003140 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7ff fb4e 	bl	8003140 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	@ 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1f3      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	4b51      	ldr	r3, [pc, #324]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0xe8>
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d063      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ace:	4b4a      	ldr	r3, [pc, #296]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ada:	4b47      	ldr	r3, [pc, #284]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d11c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae6:	4b44      	ldr	r3, [pc, #272]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d116      	bne.n	8003b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af2:	4b41      	ldr	r3, [pc, #260]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_RCC_OscConfig+0x152>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e1c7      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4937      	ldr	r1, [pc, #220]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	e03a      	b.n	8003b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b28:	4b34      	ldr	r3, [pc, #208]	@ (8003bfc <HAL_RCC_OscConfig+0x244>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7ff fb07 	bl	8003140 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b36:	f7ff fb03 	bl	8003140 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1a8      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b54:	4b28      	ldr	r3, [pc, #160]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4925      	ldr	r1, [pc, #148]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
 8003b68:	e015      	b.n	8003b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6a:	4b24      	ldr	r3, [pc, #144]	@ (8003bfc <HAL_RCC_OscConfig+0x244>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7ff fae6 	bl	8003140 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b78:	f7ff fae2 	bl	8003140 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e187      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d036      	beq.n	8003c10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003baa:	4b15      	ldr	r3, [pc, #84]	@ (8003c00 <HAL_RCC_OscConfig+0x248>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb0:	f7ff fac6 	bl	8003140 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb8:	f7ff fac2 	bl	8003140 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e167      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x200>
 8003bd6:	e01b      	b.n	8003c10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd8:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <HAL_RCC_OscConfig+0x248>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7ff faaf 	bl	8003140 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be4:	e00e      	b.n	8003c04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be6:	f7ff faab 	bl	8003140 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d907      	bls.n	8003c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e150      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	42470000 	.word	0x42470000
 8003c00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c04:	4b88      	ldr	r3, [pc, #544]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ea      	bne.n	8003be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8097 	beq.w	8003d4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c22:	4b81      	ldr	r3, [pc, #516]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	4b7d      	ldr	r3, [pc, #500]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	4a7c      	ldr	r2, [pc, #496]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c3e:	4b7a      	ldr	r3, [pc, #488]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4e:	4b77      	ldr	r3, [pc, #476]	@ (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c5a:	4b74      	ldr	r3, [pc, #464]	@ (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a73      	ldr	r2, [pc, #460]	@ (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c66:	f7ff fa6b 	bl	8003140 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6e:	f7ff fa67 	bl	8003140 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e10c      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	4b6a      	ldr	r3, [pc, #424]	@ (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x2ea>
 8003c94:	4b64      	ldr	r3, [pc, #400]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c98:	4a63      	ldr	r2, [pc, #396]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca0:	e01c      	b.n	8003cdc <HAL_RCC_OscConfig+0x324>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b05      	cmp	r3, #5
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x30c>
 8003caa:	4b5f      	ldr	r3, [pc, #380]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cae:	4a5e      	ldr	r2, [pc, #376]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	f043 0304 	orr.w	r3, r3, #4
 8003cb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb6:	4b5c      	ldr	r3, [pc, #368]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cba:	4a5b      	ldr	r2, [pc, #364]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCC_OscConfig+0x324>
 8003cc4:	4b58      	ldr	r3, [pc, #352]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc8:	4a57      	ldr	r2, [pc, #348]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd0:	4b55      	ldr	r3, [pc, #340]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd4:	4a54      	ldr	r2, [pc, #336]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	f023 0304 	bic.w	r3, r3, #4
 8003cda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d015      	beq.n	8003d10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7ff fa2c 	bl	8003140 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cec:	f7ff fa28 	bl	8003140 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e0cb      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d02:	4b49      	ldr	r3, [pc, #292]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0ee      	beq.n	8003cec <HAL_RCC_OscConfig+0x334>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d10:	f7ff fa16 	bl	8003140 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d18:	f7ff fa12 	bl	8003140 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0b5      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ee      	bne.n	8003d18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d40:	4b39      	ldr	r3, [pc, #228]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	4a38      	ldr	r2, [pc, #224]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80a1 	beq.w	8003e98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d56:	4b34      	ldr	r3, [pc, #208]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d05c      	beq.n	8003e1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d141      	bne.n	8003dee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	4b31      	ldr	r3, [pc, #196]	@ (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7ff f9e6 	bl	8003140 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7ff f9e2 	bl	8003140 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e087      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	4b27      	ldr	r3, [pc, #156]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	019b      	lsls	r3, r3, #6
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	3b01      	subs	r3, #1
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db8:	061b      	lsls	r3, r3, #24
 8003dba:	491b      	ldr	r1, [pc, #108]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7ff f9bb 	bl	8003140 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dce:	f7ff f9b7 	bl	8003140 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e05c      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de0:	4b11      	ldr	r3, [pc, #68]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x416>
 8003dec:	e054      	b.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b10      	ldr	r3, [pc, #64]	@ (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7ff f9a4 	bl	8003140 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7ff f9a0 	bl	8003140 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e045      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x444>
 8003e1a:	e03d      	b.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e038      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea4 <HAL_RCC_OscConfig+0x4ec>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d028      	beq.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d121      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d11a      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e64:	4013      	ands	r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d111      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d107      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800

08003ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0cc      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b68      	ldr	r3, [pc, #416]	@ (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d90c      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b65      	ldr	r3, [pc, #404]	@ (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b63      	ldr	r3, [pc, #396]	@ (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0b8      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d020      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003efc:	4b59      	ldr	r3, [pc, #356]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a58      	ldr	r2, [pc, #352]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f14:	4b53      	ldr	r3, [pc, #332]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a52      	ldr	r2, [pc, #328]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f20:	4b50      	ldr	r3, [pc, #320]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	494d      	ldr	r1, [pc, #308]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d044      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	4b47      	ldr	r3, [pc, #284]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d119      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e07f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f66:	4b3f      	ldr	r3, [pc, #252]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e06f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f76:	4b3b      	ldr	r3, [pc, #236]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e067      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b37      	ldr	r3, [pc, #220]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4934      	ldr	r1, [pc, #208]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f98:	f7ff f8d2 	bl	8003140 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7ff f8ce 	bl	8003140 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e04f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b25      	ldr	r3, [pc, #148]	@ (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d20c      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b22      	ldr	r3, [pc, #136]	@ (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b20      	ldr	r3, [pc, #128]	@ (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e032      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ffc:	4b19      	ldr	r3, [pc, #100]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4916      	ldr	r1, [pc, #88]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800401a:	4b12      	ldr	r3, [pc, #72]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	490e      	ldr	r1, [pc, #56]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800402e:	f000 f821 	bl	8004074 <HAL_RCC_GetSysClockFreq>
 8004032:	4602      	mov	r2, r0
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	490a      	ldr	r1, [pc, #40]	@ (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8004040:	5ccb      	ldrb	r3, [r1, r3]
 8004042:	fa22 f303 	lsr.w	r3, r2, r3
 8004046:	4a09      	ldr	r2, [pc, #36]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800404a:	4b09      	ldr	r3, [pc, #36]	@ (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff f832 	bl	80030b8 <HAL_InitTick>

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023c00 	.word	0x40023c00
 8004064:	40023800 	.word	0x40023800
 8004068:	08009520 	.word	0x08009520
 800406c:	20000008 	.word	0x20000008
 8004070:	2000000c 	.word	0x2000000c

08004074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004078:	b090      	sub	sp, #64	@ 0x40
 800407a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800408c:	4b59      	ldr	r3, [pc, #356]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b08      	cmp	r3, #8
 8004096:	d00d      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004098:	2b08      	cmp	r3, #8
 800409a:	f200 80a1 	bhi.w	80041e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x34>
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d003      	beq.n	80040ae <HAL_RCC_GetSysClockFreq+0x3a>
 80040a6:	e09b      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a8:	4b53      	ldr	r3, [pc, #332]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80040aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040ac:	e09b      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ae:	4b53      	ldr	r3, [pc, #332]	@ (80041fc <HAL_RCC_GetSysClockFreq+0x188>)
 80040b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040b2:	e098      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040b4:	4b4f      	ldr	r3, [pc, #316]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040be:	4b4d      	ldr	r3, [pc, #308]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d028      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ca:	4b4a      	ldr	r3, [pc, #296]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	2200      	movs	r2, #0
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040dc:	2100      	movs	r1, #0
 80040de:	4b47      	ldr	r3, [pc, #284]	@ (80041fc <HAL_RCC_GetSysClockFreq+0x188>)
 80040e0:	fb03 f201 	mul.w	r2, r3, r1
 80040e4:	2300      	movs	r3, #0
 80040e6:	fb00 f303 	mul.w	r3, r0, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	4a43      	ldr	r2, [pc, #268]	@ (80041fc <HAL_RCC_GetSysClockFreq+0x188>)
 80040ee:	fba0 1202 	umull	r1, r2, r0, r2
 80040f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040f4:	460a      	mov	r2, r1
 80040f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040fa:	4413      	add	r3, r2
 80040fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004100:	2200      	movs	r2, #0
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	61fa      	str	r2, [r7, #28]
 8004106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800410a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800410e:	f7fc fda3 	bl	8000c58 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4613      	mov	r3, r2
 8004118:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800411a:	e053      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411c:	4b35      	ldr	r3, [pc, #212]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	099b      	lsrs	r3, r3, #6
 8004122:	2200      	movs	r2, #0
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	617a      	str	r2, [r7, #20]
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800412e:	f04f 0b00 	mov.w	fp, #0
 8004132:	4652      	mov	r2, sl
 8004134:	465b      	mov	r3, fp
 8004136:	f04f 0000 	mov.w	r0, #0
 800413a:	f04f 0100 	mov.w	r1, #0
 800413e:	0159      	lsls	r1, r3, #5
 8004140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004144:	0150      	lsls	r0, r2, #5
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	ebb2 080a 	subs.w	r8, r2, sl
 800414e:	eb63 090b 	sbc.w	r9, r3, fp
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800415e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004162:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004166:	ebb2 0408 	subs.w	r4, r2, r8
 800416a:	eb63 0509 	sbc.w	r5, r3, r9
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	00eb      	lsls	r3, r5, #3
 8004178:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800417c:	00e2      	lsls	r2, r4, #3
 800417e:	4614      	mov	r4, r2
 8004180:	461d      	mov	r5, r3
 8004182:	eb14 030a 	adds.w	r3, r4, sl
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	eb45 030b 	adc.w	r3, r5, fp
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800419a:	4629      	mov	r1, r5
 800419c:	028b      	lsls	r3, r1, #10
 800419e:	4621      	mov	r1, r4
 80041a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041a4:	4621      	mov	r1, r4
 80041a6:	028a      	lsls	r2, r1, #10
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ae:	2200      	movs	r2, #0
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	60fa      	str	r2, [r7, #12]
 80041b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041b8:	f7fc fd4e 	bl	8000c58 <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4613      	mov	r3, r2
 80041c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80041c4:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	0c1b      	lsrs	r3, r3, #16
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	3301      	adds	r3, #1
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80041d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041de:	e002      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041e0:	4b05      	ldr	r3, [pc, #20]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80041e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3740      	adds	r7, #64	@ 0x40
 80041ec:	46bd      	mov	sp, r7
 80041ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800
 80041f8:	00f42400 	.word	0x00f42400
 80041fc:	017d7840 	.word	0x017d7840

08004200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004204:	4b03      	ldr	r3, [pc, #12]	@ (8004214 <HAL_RCC_GetHCLKFreq+0x14>)
 8004206:	681b      	ldr	r3, [r3, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000008 	.word	0x20000008

08004218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800421c:	f7ff fff0 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8004220:	4602      	mov	r2, r0
 8004222:	4b05      	ldr	r3, [pc, #20]	@ (8004238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	0a9b      	lsrs	r3, r3, #10
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	4903      	ldr	r1, [pc, #12]	@ (800423c <HAL_RCC_GetPCLK1Freq+0x24>)
 800422e:	5ccb      	ldrb	r3, [r1, r3]
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40023800 	.word	0x40023800
 800423c:	08009530 	.word	0x08009530

08004240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e07b      	b.n	800434a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	2b00      	cmp	r3, #0
 8004258:	d108      	bne.n	800426c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004262:	d009      	beq.n	8004278 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	61da      	str	r2, [r3, #28]
 800426a:	e005      	b.n	8004278 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fe fc34 	bl	8002b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042fc:	ea42 0103 	orr.w	r1, r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004304:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	0c1b      	lsrs	r3, r3, #16
 8004316:	f003 0104 	and.w	r1, r3, #4
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431e:	f003 0210 	and.w	r2, r3, #16
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004338:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b088      	sub	sp, #32
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	603b      	str	r3, [r7, #0]
 800435e:	4613      	mov	r3, r2
 8004360:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004362:	f7fe feed 	bl	8003140 <HAL_GetTick>
 8004366:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d001      	beq.n	800437c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004378:	2302      	movs	r3, #2
 800437a:	e12a      	b.n	80045d2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_SPI_Transmit+0x36>
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e122      	b.n	80045d2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_SPI_Transmit+0x48>
 8004396:	2302      	movs	r3, #2
 8004398:	e11b      	b.n	80045d2 <HAL_SPI_Transmit+0x280>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2203      	movs	r2, #3
 80043a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	88fa      	ldrh	r2, [r7, #6]
 80043ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043e8:	d10f      	bne.n	800440a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004408:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004414:	2b40      	cmp	r3, #64	@ 0x40
 8004416:	d007      	beq.n	8004428 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004426:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004430:	d152      	bne.n	80044d8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_SPI_Transmit+0xee>
 800443a:	8b7b      	ldrh	r3, [r7, #26]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d145      	bne.n	80044cc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004444:	881a      	ldrh	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004450:	1c9a      	adds	r2, r3, #2
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004464:	e032      	b.n	80044cc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b02      	cmp	r3, #2
 8004472:	d112      	bne.n	800449a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004478:	881a      	ldrh	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004498:	e018      	b.n	80044cc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800449a:	f7fe fe51 	bl	8003140 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d803      	bhi.n	80044b2 <HAL_SPI_Transmit+0x160>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044b0:	d102      	bne.n	80044b8 <HAL_SPI_Transmit+0x166>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e082      	b.n	80045d2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1c7      	bne.n	8004466 <HAL_SPI_Transmit+0x114>
 80044d6:	e053      	b.n	8004580 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_SPI_Transmit+0x194>
 80044e0:	8b7b      	ldrh	r3, [r7, #26]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d147      	bne.n	8004576 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800450c:	e033      	b.n	8004576 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d113      	bne.n	8004544 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	7812      	ldrb	r2, [r2, #0]
 8004528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004542:	e018      	b.n	8004576 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004544:	f7fe fdfc 	bl	8003140 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d803      	bhi.n	800455c <HAL_SPI_Transmit+0x20a>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800455a:	d102      	bne.n	8004562 <HAL_SPI_Transmit+0x210>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e02d      	b.n	80045d2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1c6      	bne.n	800450e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	6839      	ldr	r1, [r7, #0]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fbd9 	bl	8004d3c <SPI_EndRxTxTransaction>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
  }
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b088      	sub	sp, #32
 80045de:	af02      	add	r7, sp, #8
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	603b      	str	r3, [r7, #0]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d001      	beq.n	80045fa <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80045f6:	2302      	movs	r3, #2
 80045f8:	e104      	b.n	8004804 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_SPI_Receive+0x2c>
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e0fc      	b.n	8004804 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004612:	d112      	bne.n	800463a <HAL_SPI_Receive+0x60>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10e      	bne.n	800463a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2204      	movs	r2, #4
 8004620:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4613      	mov	r3, r2
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f8eb 	bl	800480c <HAL_SPI_TransmitReceive>
 8004636:	4603      	mov	r3, r0
 8004638:	e0e4      	b.n	8004804 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800463a:	f7fe fd81 	bl	8003140 <HAL_GetTick>
 800463e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_SPI_Receive+0x74>
 800464a:	2302      	movs	r3, #2
 800464c:	e0da      	b.n	8004804 <HAL_SPI_Receive+0x22a>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2204      	movs	r2, #4
 800465a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	88fa      	ldrh	r2, [r7, #6]
 800466e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800469c:	d10f      	bne.n	80046be <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c8:	2b40      	cmp	r3, #64	@ 0x40
 80046ca:	d007      	beq.n	80046dc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d170      	bne.n	80047c6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046e4:	e035      	b.n	8004752 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d115      	bne.n	8004720 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f103 020c 	add.w	r2, r3, #12
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800471e:	e018      	b.n	8004752 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004720:	f7fe fd0e 	bl	8003140 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d803      	bhi.n	8004738 <HAL_SPI_Receive+0x15e>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004736:	d102      	bne.n	800473e <HAL_SPI_Receive+0x164>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e058      	b.n	8004804 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1c4      	bne.n	80046e6 <HAL_SPI_Receive+0x10c>
 800475c:	e038      	b.n	80047d0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b01      	cmp	r3, #1
 800476a:	d113      	bne.n	8004794 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004776:	b292      	uxth	r2, r2
 8004778:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477e:	1c9a      	adds	r2, r3, #2
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004792:	e018      	b.n	80047c6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004794:	f7fe fcd4 	bl	8003140 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d803      	bhi.n	80047ac <HAL_SPI_Receive+0x1d2>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047aa:	d102      	bne.n	80047b2 <HAL_SPI_Receive+0x1d8>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e01e      	b.n	8004804 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1c6      	bne.n	800475e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	6839      	ldr	r1, [r7, #0]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 fa4b 	bl	8004c70 <SPI_EndRxTransaction>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004802:	2300      	movs	r3, #0
  }
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	@ 0x28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800481a:	2301      	movs	r3, #1
 800481c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800481e:	f7fe fc8f 	bl	8003140 <HAL_GetTick>
 8004822:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800482a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004832:	887b      	ldrh	r3, [r7, #2]
 8004834:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004836:	7ffb      	ldrb	r3, [r7, #31]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d00c      	beq.n	8004856 <HAL_SPI_TransmitReceive+0x4a>
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004842:	d106      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x46>
 800484c:	7ffb      	ldrb	r3, [r7, #31]
 800484e:	2b04      	cmp	r3, #4
 8004850:	d001      	beq.n	8004856 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004852:	2302      	movs	r3, #2
 8004854:	e17f      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_SPI_TransmitReceive+0x5c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_SPI_TransmitReceive+0x5c>
 8004862:	887b      	ldrh	r3, [r7, #2]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e174      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_SPI_TransmitReceive+0x6e>
 8004876:	2302      	movs	r3, #2
 8004878:	e16d      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x34a>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b04      	cmp	r3, #4
 800488c:	d003      	beq.n	8004896 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2205      	movs	r2, #5
 8004892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	887a      	ldrh	r2, [r7, #2]
 80048a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	887a      	ldrh	r2, [r7, #2]
 80048ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	887a      	ldrh	r2, [r7, #2]
 80048be:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d6:	2b40      	cmp	r3, #64	@ 0x40
 80048d8:	d007      	beq.n	80048ea <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048f2:	d17e      	bne.n	80049f2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_SPI_TransmitReceive+0xf6>
 80048fc:	8afb      	ldrh	r3, [r7, #22]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d16c      	bne.n	80049dc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	881a      	ldrh	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004912:	1c9a      	adds	r2, r3, #2
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004926:	e059      	b.n	80049dc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b02      	cmp	r3, #2
 8004934:	d11b      	bne.n	800496e <HAL_SPI_TransmitReceive+0x162>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d016      	beq.n	800496e <HAL_SPI_TransmitReceive+0x162>
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004942:	2b01      	cmp	r3, #1
 8004944:	d113      	bne.n	800496e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004956:	1c9a      	adds	r2, r3, #2
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b01      	cmp	r3, #1
 800497a:	d119      	bne.n	80049b0 <HAL_SPI_TransmitReceive+0x1a4>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d014      	beq.n	80049b0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004990:	b292      	uxth	r2, r2
 8004992:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004998:	1c9a      	adds	r2, r3, #2
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049ac:	2301      	movs	r3, #1
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049b0:	f7fe fbc6 	bl	8003140 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049bc:	429a      	cmp	r2, r3
 80049be:	d80d      	bhi.n	80049dc <HAL_SPI_TransmitReceive+0x1d0>
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049c6:	d009      	beq.n	80049dc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e0bc      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1a0      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x11c>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d19b      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x11c>
 80049f0:	e082      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_SPI_TransmitReceive+0x1f4>
 80049fa:	8afb      	ldrh	r3, [r7, #22]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d171      	bne.n	8004ae4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	7812      	ldrb	r2, [r2, #0]
 8004a0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a26:	e05d      	b.n	8004ae4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d11c      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0x264>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d017      	beq.n	8004a70 <HAL_SPI_TransmitReceive+0x264>
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d114      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	7812      	ldrb	r2, [r2, #0]
 8004a52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d119      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x2a6>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d014      	beq.n	8004ab2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ab2:	f7fe fb45 	bl	8003140 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d803      	bhi.n	8004aca <HAL_SPI_TransmitReceive+0x2be>
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ac8:	d102      	bne.n	8004ad0 <HAL_SPI_TransmitReceive+0x2c4>
 8004aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e038      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d19c      	bne.n	8004a28 <HAL_SPI_TransmitReceive+0x21c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d197      	bne.n	8004a28 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004af8:	6a3a      	ldr	r2, [r7, #32]
 8004afa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f91d 	bl	8004d3c <SPI_EndRxTxTransaction>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e01d      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004b54:	2300      	movs	r3, #0
  }
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3728      	adds	r7, #40	@ 0x28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b70:	f7fe fae6 	bl	8003140 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b80:	f7fe fade 	bl	8003140 <HAL_GetTick>
 8004b84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b86:	4b39      	ldr	r3, [pc, #228]	@ (8004c6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	015b      	lsls	r3, r3, #5
 8004b8c:	0d1b      	lsrs	r3, r3, #20
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	fb02 f303 	mul.w	r3, r2, r3
 8004b94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b96:	e055      	b.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b9e:	d051      	beq.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ba0:	f7fe face 	bl	8003140 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d902      	bls.n	8004bb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d13d      	bne.n	8004c32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bce:	d111      	bne.n	8004bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd8:	d004      	beq.n	8004be4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be2:	d107      	bne.n	8004bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bfc:	d10f      	bne.n	8004c1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e018      	b.n	8004c64 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d102      	bne.n	8004c3e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]
 8004c3c:	e002      	b.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	bf0c      	ite	eq
 8004c54:	2301      	moveq	r3, #1
 8004c56:	2300      	movne	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d19a      	bne.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000008 	.word	0x20000008

08004c70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c84:	d111      	bne.n	8004caa <SPI_EndRxTransaction+0x3a>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c8e:	d004      	beq.n	8004c9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c98:	d107      	bne.n	8004caa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ca8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cb2:	d12a      	bne.n	8004d0a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cbc:	d012      	beq.n	8004ce4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2180      	movs	r1, #128	@ 0x80
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff ff49 	bl	8004b60 <SPI_WaitFlagStateUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d02d      	beq.n	8004d30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e026      	b.n	8004d32 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2200      	movs	r2, #0
 8004cec:	2101      	movs	r1, #1
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff ff36 	bl	8004b60 <SPI_WaitFlagStateUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01a      	beq.n	8004d30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e013      	b.n	8004d32 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2101      	movs	r1, #1
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff ff23 	bl	8004b60 <SPI_WaitFlagStateUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e000      	b.n	8004d32 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	2102      	movs	r1, #2
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff ff04 	bl	8004b60 <SPI_WaitFlagStateUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d62:	f043 0220 	orr.w	r2, r3, #32
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e032      	b.n	8004dd4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ddc <SPI_EndRxTxTransaction+0xa0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1b      	ldr	r2, [pc, #108]	@ (8004de0 <SPI_EndRxTxTransaction+0xa4>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	0d5b      	lsrs	r3, r3, #21
 8004d7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d8c:	d112      	bne.n	8004db4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2200      	movs	r2, #0
 8004d96:	2180      	movs	r1, #128	@ 0x80
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff fee1 	bl	8004b60 <SPI_WaitFlagStateUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d016      	beq.n	8004dd2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da8:	f043 0220 	orr.w	r2, r3, #32
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e00f      	b.n	8004dd4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dca:	2b80      	cmp	r3, #128	@ 0x80
 8004dcc:	d0f2      	beq.n	8004db4 <SPI_EndRxTxTransaction+0x78>
 8004dce:	e000      	b.n	8004dd2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004dd0:	bf00      	nop
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000008 	.word	0x20000008
 8004de0:	165e9f81 	.word	0x165e9f81

08004de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e041      	b.n	8004e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fd ff12 	bl	8002c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f000 fb6a 	bl	80054fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d001      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e044      	b.n	8004f26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8004f34 <HAL_TIM_Base_Start_IT+0xb0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d018      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec6:	d013      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8004f38 <HAL_TIM_Base_Start_IT+0xb4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00e      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a19      	ldr	r2, [pc, #100]	@ (8004f3c <HAL_TIM_Base_Start_IT+0xb8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d009      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a17      	ldr	r2, [pc, #92]	@ (8004f40 <HAL_TIM_Base_Start_IT+0xbc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x6c>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a16      	ldr	r2, [pc, #88]	@ (8004f44 <HAL_TIM_Base_Start_IT+0xc0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d111      	bne.n	8004f14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b06      	cmp	r3, #6
 8004f00:	d010      	beq.n	8004f24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0201 	orr.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f12:	e007      	b.n	8004f24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40000800 	.word	0x40000800
 8004f40:	40000c00 	.word	0x40000c00
 8004f44:	40014000 	.word	0x40014000

08004f48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e041      	b.n	8004fde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fd fe0e 	bl	8002b90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 fab8 	bl	80054fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d109      	bne.n	800500c <HAL_TIM_PWM_Start+0x24>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b01      	cmp	r3, #1
 8005002:	bf14      	ite	ne
 8005004:	2301      	movne	r3, #1
 8005006:	2300      	moveq	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	e022      	b.n	8005052 <HAL_TIM_PWM_Start+0x6a>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b04      	cmp	r3, #4
 8005010:	d109      	bne.n	8005026 <HAL_TIM_PWM_Start+0x3e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b01      	cmp	r3, #1
 800501c:	bf14      	ite	ne
 800501e:	2301      	movne	r3, #1
 8005020:	2300      	moveq	r3, #0
 8005022:	b2db      	uxtb	r3, r3
 8005024:	e015      	b.n	8005052 <HAL_TIM_PWM_Start+0x6a>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d109      	bne.n	8005040 <HAL_TIM_PWM_Start+0x58>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	bf14      	ite	ne
 8005038:	2301      	movne	r3, #1
 800503a:	2300      	moveq	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	e008      	b.n	8005052 <HAL_TIM_PWM_Start+0x6a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e068      	b.n	800512c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d104      	bne.n	800506a <HAL_TIM_PWM_Start+0x82>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005068:	e013      	b.n	8005092 <HAL_TIM_PWM_Start+0xaa>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d104      	bne.n	800507a <HAL_TIM_PWM_Start+0x92>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005078:	e00b      	b.n	8005092 <HAL_TIM_PWM_Start+0xaa>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d104      	bne.n	800508a <HAL_TIM_PWM_Start+0xa2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005088:	e003      	b.n	8005092 <HAL_TIM_PWM_Start+0xaa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2201      	movs	r2, #1
 8005098:	6839      	ldr	r1, [r7, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fc40 	bl	8005920 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a23      	ldr	r2, [pc, #140]	@ (8005134 <HAL_TIM_PWM_Start+0x14c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d107      	bne.n	80050ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1d      	ldr	r2, [pc, #116]	@ (8005134 <HAL_TIM_PWM_Start+0x14c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d018      	beq.n	80050f6 <HAL_TIM_PWM_Start+0x10e>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050cc:	d013      	beq.n	80050f6 <HAL_TIM_PWM_Start+0x10e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a19      	ldr	r2, [pc, #100]	@ (8005138 <HAL_TIM_PWM_Start+0x150>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <HAL_TIM_PWM_Start+0x10e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a17      	ldr	r2, [pc, #92]	@ (800513c <HAL_TIM_PWM_Start+0x154>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d009      	beq.n	80050f6 <HAL_TIM_PWM_Start+0x10e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a16      	ldr	r2, [pc, #88]	@ (8005140 <HAL_TIM_PWM_Start+0x158>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_TIM_PWM_Start+0x10e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a14      	ldr	r2, [pc, #80]	@ (8005144 <HAL_TIM_PWM_Start+0x15c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d111      	bne.n	800511a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b06      	cmp	r3, #6
 8005106:	d010      	beq.n	800512a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005118:	e007      	b.n	800512a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0201 	orr.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40010000 	.word	0x40010000
 8005138:	40000400 	.word	0x40000400
 800513c:	40000800 	.word	0x40000800
 8005140:	40000c00 	.word	0x40000c00
 8005144:	40014000 	.word	0x40014000

08005148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d020      	beq.n	80051ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01b      	beq.n	80051ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0202 	mvn.w	r2, #2
 800517c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f994 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 8005198:	e005      	b.n	80051a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f986 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f997 	bl	80054d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d020      	beq.n	80051f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01b      	beq.n	80051f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0204 	mvn.w	r2, #4
 80051c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f96e 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 80051e4:	e005      	b.n	80051f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f960 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f971 	bl	80054d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d020      	beq.n	8005244 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01b      	beq.n	8005244 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0208 	mvn.w	r2, #8
 8005214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2204      	movs	r2, #4
 800521a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f948 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f93a 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f94b 	bl	80054d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f003 0310 	and.w	r3, r3, #16
 800524a:	2b00      	cmp	r3, #0
 800524c:	d020      	beq.n	8005290 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01b      	beq.n	8005290 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0210 	mvn.w	r2, #16
 8005260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2208      	movs	r2, #8
 8005266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f922 	bl	80054c0 <HAL_TIM_IC_CaptureCallback>
 800527c:	e005      	b.n	800528a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f914 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f925 	bl	80054d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00c      	beq.n	80052b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0201 	mvn.w	r2, #1
 80052ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fc fa56 	bl	8001760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00c      	beq.n	80052d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80052d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fc14 	bl	8005b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00c      	beq.n	80052fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d007      	beq.n	80052fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f8f6 	bl	80054e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00c      	beq.n	8005320 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b00      	cmp	r3, #0
 800530e:	d007      	beq.n	8005320 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0220 	mvn.w	r2, #32
 8005318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fbe6 	bl	8005aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005342:	2302      	movs	r3, #2
 8005344:	e0ae      	b.n	80054a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b0c      	cmp	r3, #12
 8005352:	f200 809f 	bhi.w	8005494 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005356:	a201      	add	r2, pc, #4	@ (adr r2, 800535c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	08005391 	.word	0x08005391
 8005360:	08005495 	.word	0x08005495
 8005364:	08005495 	.word	0x08005495
 8005368:	08005495 	.word	0x08005495
 800536c:	080053d1 	.word	0x080053d1
 8005370:	08005495 	.word	0x08005495
 8005374:	08005495 	.word	0x08005495
 8005378:	08005495 	.word	0x08005495
 800537c:	08005413 	.word	0x08005413
 8005380:	08005495 	.word	0x08005495
 8005384:	08005495 	.word	0x08005495
 8005388:	08005495 	.word	0x08005495
 800538c:	08005453 	.word	0x08005453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f936 	bl	8005608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0208 	orr.w	r2, r2, #8
 80053aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0204 	bic.w	r2, r2, #4
 80053ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6999      	ldr	r1, [r3, #24]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	619a      	str	r2, [r3, #24]
      break;
 80053ce:	e064      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 f97c 	bl	80056d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	021a      	lsls	r2, r3, #8
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	619a      	str	r2, [r3, #24]
      break;
 8005410:	e043      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f9c7 	bl	80057ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0208 	orr.w	r2, r2, #8
 800542c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0204 	bic.w	r2, r2, #4
 800543c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69d9      	ldr	r1, [r3, #28]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	61da      	str	r2, [r3, #28]
      break;
 8005450:	e023      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fa11 	bl	8005880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800546c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800547c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69d9      	ldr	r1, [r3, #28]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	021a      	lsls	r2, r3, #8
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	61da      	str	r2, [r3, #28]
      break;
 8005492:	e002      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	75fb      	strb	r3, [r7, #23]
      break;
 8005498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a37      	ldr	r2, [pc, #220]	@ (80055ec <TIM_Base_SetConfig+0xf0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00f      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800551a:	d00b      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a34      	ldr	r2, [pc, #208]	@ (80055f0 <TIM_Base_SetConfig+0xf4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a33      	ldr	r2, [pc, #204]	@ (80055f4 <TIM_Base_SetConfig+0xf8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a32      	ldr	r2, [pc, #200]	@ (80055f8 <TIM_Base_SetConfig+0xfc>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d108      	bne.n	8005546 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a28      	ldr	r2, [pc, #160]	@ (80055ec <TIM_Base_SetConfig+0xf0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d01b      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005554:	d017      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a25      	ldr	r2, [pc, #148]	@ (80055f0 <TIM_Base_SetConfig+0xf4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a24      	ldr	r2, [pc, #144]	@ (80055f4 <TIM_Base_SetConfig+0xf8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a23      	ldr	r2, [pc, #140]	@ (80055f8 <TIM_Base_SetConfig+0xfc>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a22      	ldr	r2, [pc, #136]	@ (80055fc <TIM_Base_SetConfig+0x100>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a21      	ldr	r2, [pc, #132]	@ (8005600 <TIM_Base_SetConfig+0x104>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a20      	ldr	r2, [pc, #128]	@ (8005604 <TIM_Base_SetConfig+0x108>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a0c      	ldr	r2, [pc, #48]	@ (80055ec <TIM_Base_SetConfig+0xf0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d103      	bne.n	80055c6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f043 0204 	orr.w	r2, r3, #4
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	601a      	str	r2, [r3, #0]
}
 80055de:	bf00      	nop
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40010000 	.word	0x40010000
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40000800 	.word	0x40000800
 80055f8:	40000c00 	.word	0x40000c00
 80055fc:	40014000 	.word	0x40014000
 8005600:	40014400 	.word	0x40014400
 8005604:	40014800 	.word	0x40014800

08005608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f023 0201 	bic.w	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0303 	bic.w	r3, r3, #3
 800563e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f023 0302 	bic.w	r3, r3, #2
 8005650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a1c      	ldr	r2, [pc, #112]	@ (80056d0 <TIM_OC1_SetConfig+0xc8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d10c      	bne.n	800567e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f023 0308 	bic.w	r3, r3, #8
 800566a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f023 0304 	bic.w	r3, r3, #4
 800567c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a13      	ldr	r2, [pc, #76]	@ (80056d0 <TIM_OC1_SetConfig+0xc8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d111      	bne.n	80056aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800568c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	40010000 	.word	0x40010000

080056d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f023 0210 	bic.w	r2, r3, #16
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800570a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f023 0320 	bic.w	r3, r3, #32
 800571e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a1e      	ldr	r2, [pc, #120]	@ (80057a8 <TIM_OC2_SetConfig+0xd4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d10d      	bne.n	8005750 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800573a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800574e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a15      	ldr	r2, [pc, #84]	@ (80057a8 <TIM_OC2_SetConfig+0xd4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d113      	bne.n	8005780 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800575e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40010000 	.word	0x40010000

080057ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0303 	bic.w	r3, r3, #3
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a1d      	ldr	r2, [pc, #116]	@ (800587c <TIM_OC3_SetConfig+0xd0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d10d      	bne.n	8005826 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a14      	ldr	r2, [pc, #80]	@ (800587c <TIM_OC3_SetConfig+0xd0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d113      	bne.n	8005856 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800583c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	621a      	str	r2, [r3, #32]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	40010000 	.word	0x40010000

08005880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	031b      	lsls	r3, r3, #12
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a10      	ldr	r2, [pc, #64]	@ (800591c <TIM_OC4_SetConfig+0x9c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d109      	bne.n	80058f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	019b      	lsls	r3, r3, #6
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40010000 	.word	0x40010000

08005920 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	2201      	movs	r2, #1
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1a      	ldr	r2, [r3, #32]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	43db      	mvns	r3, r3
 8005942:	401a      	ands	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a1a      	ldr	r2, [r3, #32]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	fa01 f303 	lsl.w	r3, r1, r3
 8005958:	431a      	orrs	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	621a      	str	r2, [r3, #32]
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
	...

0800596c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005980:	2302      	movs	r3, #2
 8005982:	e050      	b.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d018      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d0:	d013      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a18      	ldr	r2, [pc, #96]	@ (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00e      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a16      	ldr	r2, [pc, #88]	@ (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d009      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a15      	ldr	r2, [pc, #84]	@ (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a13      	ldr	r2, [pc, #76]	@ (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d10c      	bne.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800
 8005a40:	40000c00 	.word	0x40000c00
 8005a44:	40014000 	.word	0x40014000

08005a48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e03d      	b.n	8005ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <__cvt>:
 8005b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b18:	ec57 6b10 	vmov	r6, r7, d0
 8005b1c:	2f00      	cmp	r7, #0
 8005b1e:	460c      	mov	r4, r1
 8005b20:	4619      	mov	r1, r3
 8005b22:	463b      	mov	r3, r7
 8005b24:	bfbb      	ittet	lt
 8005b26:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b2a:	461f      	movlt	r7, r3
 8005b2c:	2300      	movge	r3, #0
 8005b2e:	232d      	movlt	r3, #45	@ 0x2d
 8005b30:	700b      	strb	r3, [r1, #0]
 8005b32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005b38:	4691      	mov	r9, r2
 8005b3a:	f023 0820 	bic.w	r8, r3, #32
 8005b3e:	bfbc      	itt	lt
 8005b40:	4632      	movlt	r2, r6
 8005b42:	4616      	movlt	r6, r2
 8005b44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b48:	d005      	beq.n	8005b56 <__cvt+0x42>
 8005b4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005b4e:	d100      	bne.n	8005b52 <__cvt+0x3e>
 8005b50:	3401      	adds	r4, #1
 8005b52:	2102      	movs	r1, #2
 8005b54:	e000      	b.n	8005b58 <__cvt+0x44>
 8005b56:	2103      	movs	r1, #3
 8005b58:	ab03      	add	r3, sp, #12
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	ab02      	add	r3, sp, #8
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	ec47 6b10 	vmov	d0, r6, r7
 8005b64:	4653      	mov	r3, sl
 8005b66:	4622      	mov	r2, r4
 8005b68:	f000 fe3a 	bl	80067e0 <_dtoa_r>
 8005b6c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005b70:	4605      	mov	r5, r0
 8005b72:	d119      	bne.n	8005ba8 <__cvt+0x94>
 8005b74:	f019 0f01 	tst.w	r9, #1
 8005b78:	d00e      	beq.n	8005b98 <__cvt+0x84>
 8005b7a:	eb00 0904 	add.w	r9, r0, r4
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2300      	movs	r3, #0
 8005b82:	4630      	mov	r0, r6
 8005b84:	4639      	mov	r1, r7
 8005b86:	f7fa ffa7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b8a:	b108      	cbz	r0, 8005b90 <__cvt+0x7c>
 8005b8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b90:	2230      	movs	r2, #48	@ 0x30
 8005b92:	9b03      	ldr	r3, [sp, #12]
 8005b94:	454b      	cmp	r3, r9
 8005b96:	d31e      	bcc.n	8005bd6 <__cvt+0xc2>
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b9c:	1b5b      	subs	r3, r3, r5
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	b004      	add	sp, #16
 8005ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bac:	eb00 0904 	add.w	r9, r0, r4
 8005bb0:	d1e5      	bne.n	8005b7e <__cvt+0x6a>
 8005bb2:	7803      	ldrb	r3, [r0, #0]
 8005bb4:	2b30      	cmp	r3, #48	@ 0x30
 8005bb6:	d10a      	bne.n	8005bce <__cvt+0xba>
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2300      	movs	r3, #0
 8005bbc:	4630      	mov	r0, r6
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	f7fa ff8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bc4:	b918      	cbnz	r0, 8005bce <__cvt+0xba>
 8005bc6:	f1c4 0401 	rsb	r4, r4, #1
 8005bca:	f8ca 4000 	str.w	r4, [sl]
 8005bce:	f8da 3000 	ldr.w	r3, [sl]
 8005bd2:	4499      	add	r9, r3
 8005bd4:	e7d3      	b.n	8005b7e <__cvt+0x6a>
 8005bd6:	1c59      	adds	r1, r3, #1
 8005bd8:	9103      	str	r1, [sp, #12]
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e7d9      	b.n	8005b92 <__cvt+0x7e>

08005bde <__exponent>:
 8005bde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005be0:	2900      	cmp	r1, #0
 8005be2:	bfba      	itte	lt
 8005be4:	4249      	neglt	r1, r1
 8005be6:	232d      	movlt	r3, #45	@ 0x2d
 8005be8:	232b      	movge	r3, #43	@ 0x2b
 8005bea:	2909      	cmp	r1, #9
 8005bec:	7002      	strb	r2, [r0, #0]
 8005bee:	7043      	strb	r3, [r0, #1]
 8005bf0:	dd29      	ble.n	8005c46 <__exponent+0x68>
 8005bf2:	f10d 0307 	add.w	r3, sp, #7
 8005bf6:	461d      	mov	r5, r3
 8005bf8:	270a      	movs	r7, #10
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c00:	fb07 1416 	mls	r4, r7, r6, r1
 8005c04:	3430      	adds	r4, #48	@ 0x30
 8005c06:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	2c63      	cmp	r4, #99	@ 0x63
 8005c0e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005c12:	4631      	mov	r1, r6
 8005c14:	dcf1      	bgt.n	8005bfa <__exponent+0x1c>
 8005c16:	3130      	adds	r1, #48	@ 0x30
 8005c18:	1e94      	subs	r4, r2, #2
 8005c1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c1e:	1c41      	adds	r1, r0, #1
 8005c20:	4623      	mov	r3, r4
 8005c22:	42ab      	cmp	r3, r5
 8005c24:	d30a      	bcc.n	8005c3c <__exponent+0x5e>
 8005c26:	f10d 0309 	add.w	r3, sp, #9
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	42ac      	cmp	r4, r5
 8005c2e:	bf88      	it	hi
 8005c30:	2300      	movhi	r3, #0
 8005c32:	3302      	adds	r3, #2
 8005c34:	4403      	add	r3, r0
 8005c36:	1a18      	subs	r0, r3, r0
 8005c38:	b003      	add	sp, #12
 8005c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c3c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c40:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c44:	e7ed      	b.n	8005c22 <__exponent+0x44>
 8005c46:	2330      	movs	r3, #48	@ 0x30
 8005c48:	3130      	adds	r1, #48	@ 0x30
 8005c4a:	7083      	strb	r3, [r0, #2]
 8005c4c:	70c1      	strb	r1, [r0, #3]
 8005c4e:	1d03      	adds	r3, r0, #4
 8005c50:	e7f1      	b.n	8005c36 <__exponent+0x58>
	...

08005c54 <_printf_float>:
 8005c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c58:	b08d      	sub	sp, #52	@ 0x34
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005c60:	4616      	mov	r6, r2
 8005c62:	461f      	mov	r7, r3
 8005c64:	4605      	mov	r5, r0
 8005c66:	f000 fcb9 	bl	80065dc <_localeconv_r>
 8005c6a:	6803      	ldr	r3, [r0, #0]
 8005c6c:	9304      	str	r3, [sp, #16]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fa fb06 	bl	8000280 <strlen>
 8005c74:	2300      	movs	r3, #0
 8005c76:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c78:	f8d8 3000 	ldr.w	r3, [r8]
 8005c7c:	9005      	str	r0, [sp, #20]
 8005c7e:	3307      	adds	r3, #7
 8005c80:	f023 0307 	bic.w	r3, r3, #7
 8005c84:	f103 0208 	add.w	r2, r3, #8
 8005c88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c8c:	f8d4 b000 	ldr.w	fp, [r4]
 8005c90:	f8c8 2000 	str.w	r2, [r8]
 8005c94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005c9c:	9307      	str	r3, [sp, #28]
 8005c9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ca2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005caa:	4b9c      	ldr	r3, [pc, #624]	@ (8005f1c <_printf_float+0x2c8>)
 8005cac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cb0:	f7fa ff44 	bl	8000b3c <__aeabi_dcmpun>
 8005cb4:	bb70      	cbnz	r0, 8005d14 <_printf_float+0xc0>
 8005cb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cba:	4b98      	ldr	r3, [pc, #608]	@ (8005f1c <_printf_float+0x2c8>)
 8005cbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cc0:	f7fa ff1e 	bl	8000b00 <__aeabi_dcmple>
 8005cc4:	bb30      	cbnz	r0, 8005d14 <_printf_float+0xc0>
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2300      	movs	r3, #0
 8005cca:	4640      	mov	r0, r8
 8005ccc:	4649      	mov	r1, r9
 8005cce:	f7fa ff0d 	bl	8000aec <__aeabi_dcmplt>
 8005cd2:	b110      	cbz	r0, 8005cda <_printf_float+0x86>
 8005cd4:	232d      	movs	r3, #45	@ 0x2d
 8005cd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cda:	4a91      	ldr	r2, [pc, #580]	@ (8005f20 <_printf_float+0x2cc>)
 8005cdc:	4b91      	ldr	r3, [pc, #580]	@ (8005f24 <_printf_float+0x2d0>)
 8005cde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ce2:	bf8c      	ite	hi
 8005ce4:	4690      	movhi	r8, r2
 8005ce6:	4698      	movls	r8, r3
 8005ce8:	2303      	movs	r3, #3
 8005cea:	6123      	str	r3, [r4, #16]
 8005cec:	f02b 0304 	bic.w	r3, fp, #4
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	f04f 0900 	mov.w	r9, #0
 8005cf6:	9700      	str	r7, [sp, #0]
 8005cf8:	4633      	mov	r3, r6
 8005cfa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f000 f9d2 	bl	80060a8 <_printf_common>
 8005d04:	3001      	adds	r0, #1
 8005d06:	f040 808d 	bne.w	8005e24 <_printf_float+0x1d0>
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d0e:	b00d      	add	sp, #52	@ 0x34
 8005d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d14:	4642      	mov	r2, r8
 8005d16:	464b      	mov	r3, r9
 8005d18:	4640      	mov	r0, r8
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	f7fa ff0e 	bl	8000b3c <__aeabi_dcmpun>
 8005d20:	b140      	cbz	r0, 8005d34 <_printf_float+0xe0>
 8005d22:	464b      	mov	r3, r9
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	bfbc      	itt	lt
 8005d28:	232d      	movlt	r3, #45	@ 0x2d
 8005d2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8005f28 <_printf_float+0x2d4>)
 8005d30:	4b7e      	ldr	r3, [pc, #504]	@ (8005f2c <_printf_float+0x2d8>)
 8005d32:	e7d4      	b.n	8005cde <_printf_float+0x8a>
 8005d34:	6863      	ldr	r3, [r4, #4]
 8005d36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005d3a:	9206      	str	r2, [sp, #24]
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	d13b      	bne.n	8005db8 <_printf_float+0x164>
 8005d40:	2306      	movs	r3, #6
 8005d42:	6063      	str	r3, [r4, #4]
 8005d44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6022      	str	r2, [r4, #0]
 8005d4c:	9303      	str	r3, [sp, #12]
 8005d4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005d50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005d54:	ab09      	add	r3, sp, #36	@ 0x24
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	6861      	ldr	r1, [r4, #4]
 8005d5a:	ec49 8b10 	vmov	d0, r8, r9
 8005d5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005d62:	4628      	mov	r0, r5
 8005d64:	f7ff fed6 	bl	8005b14 <__cvt>
 8005d68:	9b06      	ldr	r3, [sp, #24]
 8005d6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d6c:	2b47      	cmp	r3, #71	@ 0x47
 8005d6e:	4680      	mov	r8, r0
 8005d70:	d129      	bne.n	8005dc6 <_printf_float+0x172>
 8005d72:	1cc8      	adds	r0, r1, #3
 8005d74:	db02      	blt.n	8005d7c <_printf_float+0x128>
 8005d76:	6863      	ldr	r3, [r4, #4]
 8005d78:	4299      	cmp	r1, r3
 8005d7a:	dd41      	ble.n	8005e00 <_printf_float+0x1ac>
 8005d7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d80:	fa5f fa8a 	uxtb.w	sl, sl
 8005d84:	3901      	subs	r1, #1
 8005d86:	4652      	mov	r2, sl
 8005d88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005d8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d8e:	f7ff ff26 	bl	8005bde <__exponent>
 8005d92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d94:	1813      	adds	r3, r2, r0
 8005d96:	2a01      	cmp	r2, #1
 8005d98:	4681      	mov	r9, r0
 8005d9a:	6123      	str	r3, [r4, #16]
 8005d9c:	dc02      	bgt.n	8005da4 <_printf_float+0x150>
 8005d9e:	6822      	ldr	r2, [r4, #0]
 8005da0:	07d2      	lsls	r2, r2, #31
 8005da2:	d501      	bpl.n	8005da8 <_printf_float+0x154>
 8005da4:	3301      	adds	r3, #1
 8005da6:	6123      	str	r3, [r4, #16]
 8005da8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0a2      	beq.n	8005cf6 <_printf_float+0xa2>
 8005db0:	232d      	movs	r3, #45	@ 0x2d
 8005db2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005db6:	e79e      	b.n	8005cf6 <_printf_float+0xa2>
 8005db8:	9a06      	ldr	r2, [sp, #24]
 8005dba:	2a47      	cmp	r2, #71	@ 0x47
 8005dbc:	d1c2      	bne.n	8005d44 <_printf_float+0xf0>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1c0      	bne.n	8005d44 <_printf_float+0xf0>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e7bd      	b.n	8005d42 <_printf_float+0xee>
 8005dc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005dca:	d9db      	bls.n	8005d84 <_printf_float+0x130>
 8005dcc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005dd0:	d118      	bne.n	8005e04 <_printf_float+0x1b0>
 8005dd2:	2900      	cmp	r1, #0
 8005dd4:	6863      	ldr	r3, [r4, #4]
 8005dd6:	dd0b      	ble.n	8005df0 <_printf_float+0x19c>
 8005dd8:	6121      	str	r1, [r4, #16]
 8005dda:	b913      	cbnz	r3, 8005de2 <_printf_float+0x18e>
 8005ddc:	6822      	ldr	r2, [r4, #0]
 8005dde:	07d0      	lsls	r0, r2, #31
 8005de0:	d502      	bpl.n	8005de8 <_printf_float+0x194>
 8005de2:	3301      	adds	r3, #1
 8005de4:	440b      	add	r3, r1
 8005de6:	6123      	str	r3, [r4, #16]
 8005de8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005dea:	f04f 0900 	mov.w	r9, #0
 8005dee:	e7db      	b.n	8005da8 <_printf_float+0x154>
 8005df0:	b913      	cbnz	r3, 8005df8 <_printf_float+0x1a4>
 8005df2:	6822      	ldr	r2, [r4, #0]
 8005df4:	07d2      	lsls	r2, r2, #31
 8005df6:	d501      	bpl.n	8005dfc <_printf_float+0x1a8>
 8005df8:	3302      	adds	r3, #2
 8005dfa:	e7f4      	b.n	8005de6 <_printf_float+0x192>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e7f2      	b.n	8005de6 <_printf_float+0x192>
 8005e00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e06:	4299      	cmp	r1, r3
 8005e08:	db05      	blt.n	8005e16 <_printf_float+0x1c2>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	6121      	str	r1, [r4, #16]
 8005e0e:	07d8      	lsls	r0, r3, #31
 8005e10:	d5ea      	bpl.n	8005de8 <_printf_float+0x194>
 8005e12:	1c4b      	adds	r3, r1, #1
 8005e14:	e7e7      	b.n	8005de6 <_printf_float+0x192>
 8005e16:	2900      	cmp	r1, #0
 8005e18:	bfd4      	ite	le
 8005e1a:	f1c1 0202 	rsble	r2, r1, #2
 8005e1e:	2201      	movgt	r2, #1
 8005e20:	4413      	add	r3, r2
 8005e22:	e7e0      	b.n	8005de6 <_printf_float+0x192>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	055a      	lsls	r2, r3, #21
 8005e28:	d407      	bmi.n	8005e3a <_printf_float+0x1e6>
 8005e2a:	6923      	ldr	r3, [r4, #16]
 8005e2c:	4642      	mov	r2, r8
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b8      	blx	r7
 8005e34:	3001      	adds	r0, #1
 8005e36:	d12b      	bne.n	8005e90 <_printf_float+0x23c>
 8005e38:	e767      	b.n	8005d0a <_printf_float+0xb6>
 8005e3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e3e:	f240 80dd 	bls.w	8005ffc <_printf_float+0x3a8>
 8005e42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e46:	2200      	movs	r2, #0
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f7fa fe45 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d033      	beq.n	8005eba <_printf_float+0x266>
 8005e52:	4a37      	ldr	r2, [pc, #220]	@ (8005f30 <_printf_float+0x2dc>)
 8005e54:	2301      	movs	r3, #1
 8005e56:	4631      	mov	r1, r6
 8005e58:	4628      	mov	r0, r5
 8005e5a:	47b8      	blx	r7
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	f43f af54 	beq.w	8005d0a <_printf_float+0xb6>
 8005e62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005e66:	4543      	cmp	r3, r8
 8005e68:	db02      	blt.n	8005e70 <_printf_float+0x21c>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	07d8      	lsls	r0, r3, #31
 8005e6e:	d50f      	bpl.n	8005e90 <_printf_float+0x23c>
 8005e70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e74:	4631      	mov	r1, r6
 8005e76:	4628      	mov	r0, r5
 8005e78:	47b8      	blx	r7
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	f43f af45 	beq.w	8005d0a <_printf_float+0xb6>
 8005e80:	f04f 0900 	mov.w	r9, #0
 8005e84:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005e88:	f104 0a1a 	add.w	sl, r4, #26
 8005e8c:	45c8      	cmp	r8, r9
 8005e8e:	dc09      	bgt.n	8005ea4 <_printf_float+0x250>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	079b      	lsls	r3, r3, #30
 8005e94:	f100 8103 	bmi.w	800609e <_printf_float+0x44a>
 8005e98:	68e0      	ldr	r0, [r4, #12]
 8005e9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e9c:	4298      	cmp	r0, r3
 8005e9e:	bfb8      	it	lt
 8005ea0:	4618      	movlt	r0, r3
 8005ea2:	e734      	b.n	8005d0e <_printf_float+0xba>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	4652      	mov	r2, sl
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	4628      	mov	r0, r5
 8005eac:	47b8      	blx	r7
 8005eae:	3001      	adds	r0, #1
 8005eb0:	f43f af2b 	beq.w	8005d0a <_printf_float+0xb6>
 8005eb4:	f109 0901 	add.w	r9, r9, #1
 8005eb8:	e7e8      	b.n	8005e8c <_printf_float+0x238>
 8005eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	dc39      	bgt.n	8005f34 <_printf_float+0x2e0>
 8005ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f30 <_printf_float+0x2dc>)
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f43f af1d 	beq.w	8005d0a <_printf_float+0xb6>
 8005ed0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005ed4:	ea59 0303 	orrs.w	r3, r9, r3
 8005ed8:	d102      	bne.n	8005ee0 <_printf_float+0x28c>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	07d9      	lsls	r1, r3, #31
 8005ede:	d5d7      	bpl.n	8005e90 <_printf_float+0x23c>
 8005ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	47b8      	blx	r7
 8005eea:	3001      	adds	r0, #1
 8005eec:	f43f af0d 	beq.w	8005d0a <_printf_float+0xb6>
 8005ef0:	f04f 0a00 	mov.w	sl, #0
 8005ef4:	f104 0b1a 	add.w	fp, r4, #26
 8005ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005efa:	425b      	negs	r3, r3
 8005efc:	4553      	cmp	r3, sl
 8005efe:	dc01      	bgt.n	8005f04 <_printf_float+0x2b0>
 8005f00:	464b      	mov	r3, r9
 8005f02:	e793      	b.n	8005e2c <_printf_float+0x1d8>
 8005f04:	2301      	movs	r3, #1
 8005f06:	465a      	mov	r2, fp
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	47b8      	blx	r7
 8005f0e:	3001      	adds	r0, #1
 8005f10:	f43f aefb 	beq.w	8005d0a <_printf_float+0xb6>
 8005f14:	f10a 0a01 	add.w	sl, sl, #1
 8005f18:	e7ee      	b.n	8005ef8 <_printf_float+0x2a4>
 8005f1a:	bf00      	nop
 8005f1c:	7fefffff 	.word	0x7fefffff
 8005f20:	0800953c 	.word	0x0800953c
 8005f24:	08009538 	.word	0x08009538
 8005f28:	08009544 	.word	0x08009544
 8005f2c:	08009540 	.word	0x08009540
 8005f30:	08009548 	.word	0x08009548
 8005f34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f3a:	4553      	cmp	r3, sl
 8005f3c:	bfa8      	it	ge
 8005f3e:	4653      	movge	r3, sl
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	4699      	mov	r9, r3
 8005f44:	dc36      	bgt.n	8005fb4 <_printf_float+0x360>
 8005f46:	f04f 0b00 	mov.w	fp, #0
 8005f4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f4e:	f104 021a 	add.w	r2, r4, #26
 8005f52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f54:	9306      	str	r3, [sp, #24]
 8005f56:	eba3 0309 	sub.w	r3, r3, r9
 8005f5a:	455b      	cmp	r3, fp
 8005f5c:	dc31      	bgt.n	8005fc2 <_printf_float+0x36e>
 8005f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f60:	459a      	cmp	sl, r3
 8005f62:	dc3a      	bgt.n	8005fda <_printf_float+0x386>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	07da      	lsls	r2, r3, #31
 8005f68:	d437      	bmi.n	8005fda <_printf_float+0x386>
 8005f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f6c:	ebaa 0903 	sub.w	r9, sl, r3
 8005f70:	9b06      	ldr	r3, [sp, #24]
 8005f72:	ebaa 0303 	sub.w	r3, sl, r3
 8005f76:	4599      	cmp	r9, r3
 8005f78:	bfa8      	it	ge
 8005f7a:	4699      	movge	r9, r3
 8005f7c:	f1b9 0f00 	cmp.w	r9, #0
 8005f80:	dc33      	bgt.n	8005fea <_printf_float+0x396>
 8005f82:	f04f 0800 	mov.w	r8, #0
 8005f86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f8a:	f104 0b1a 	add.w	fp, r4, #26
 8005f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f90:	ebaa 0303 	sub.w	r3, sl, r3
 8005f94:	eba3 0309 	sub.w	r3, r3, r9
 8005f98:	4543      	cmp	r3, r8
 8005f9a:	f77f af79 	ble.w	8005e90 <_printf_float+0x23c>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	465a      	mov	r2, fp
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b8      	blx	r7
 8005fa8:	3001      	adds	r0, #1
 8005faa:	f43f aeae 	beq.w	8005d0a <_printf_float+0xb6>
 8005fae:	f108 0801 	add.w	r8, r8, #1
 8005fb2:	e7ec      	b.n	8005f8e <_printf_float+0x33a>
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b8      	blx	r7
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d1c2      	bne.n	8005f46 <_printf_float+0x2f2>
 8005fc0:	e6a3      	b.n	8005d0a <_printf_float+0xb6>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	9206      	str	r2, [sp, #24]
 8005fca:	47b8      	blx	r7
 8005fcc:	3001      	adds	r0, #1
 8005fce:	f43f ae9c 	beq.w	8005d0a <_printf_float+0xb6>
 8005fd2:	9a06      	ldr	r2, [sp, #24]
 8005fd4:	f10b 0b01 	add.w	fp, fp, #1
 8005fd8:	e7bb      	b.n	8005f52 <_printf_float+0x2fe>
 8005fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	47b8      	blx	r7
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d1c0      	bne.n	8005f6a <_printf_float+0x316>
 8005fe8:	e68f      	b.n	8005d0a <_printf_float+0xb6>
 8005fea:	9a06      	ldr	r2, [sp, #24]
 8005fec:	464b      	mov	r3, r9
 8005fee:	4442      	add	r2, r8
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b8      	blx	r7
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d1c3      	bne.n	8005f82 <_printf_float+0x32e>
 8005ffa:	e686      	b.n	8005d0a <_printf_float+0xb6>
 8005ffc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006000:	f1ba 0f01 	cmp.w	sl, #1
 8006004:	dc01      	bgt.n	800600a <_printf_float+0x3b6>
 8006006:	07db      	lsls	r3, r3, #31
 8006008:	d536      	bpl.n	8006078 <_printf_float+0x424>
 800600a:	2301      	movs	r3, #1
 800600c:	4642      	mov	r2, r8
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	47b8      	blx	r7
 8006014:	3001      	adds	r0, #1
 8006016:	f43f ae78 	beq.w	8005d0a <_printf_float+0xb6>
 800601a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800601e:	4631      	mov	r1, r6
 8006020:	4628      	mov	r0, r5
 8006022:	47b8      	blx	r7
 8006024:	3001      	adds	r0, #1
 8006026:	f43f ae70 	beq.w	8005d0a <_printf_float+0xb6>
 800602a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800602e:	2200      	movs	r2, #0
 8006030:	2300      	movs	r3, #0
 8006032:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006036:	f7fa fd4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800603a:	b9c0      	cbnz	r0, 800606e <_printf_float+0x41a>
 800603c:	4653      	mov	r3, sl
 800603e:	f108 0201 	add.w	r2, r8, #1
 8006042:	4631      	mov	r1, r6
 8006044:	4628      	mov	r0, r5
 8006046:	47b8      	blx	r7
 8006048:	3001      	adds	r0, #1
 800604a:	d10c      	bne.n	8006066 <_printf_float+0x412>
 800604c:	e65d      	b.n	8005d0a <_printf_float+0xb6>
 800604e:	2301      	movs	r3, #1
 8006050:	465a      	mov	r2, fp
 8006052:	4631      	mov	r1, r6
 8006054:	4628      	mov	r0, r5
 8006056:	47b8      	blx	r7
 8006058:	3001      	adds	r0, #1
 800605a:	f43f ae56 	beq.w	8005d0a <_printf_float+0xb6>
 800605e:	f108 0801 	add.w	r8, r8, #1
 8006062:	45d0      	cmp	r8, sl
 8006064:	dbf3      	blt.n	800604e <_printf_float+0x3fa>
 8006066:	464b      	mov	r3, r9
 8006068:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800606c:	e6df      	b.n	8005e2e <_printf_float+0x1da>
 800606e:	f04f 0800 	mov.w	r8, #0
 8006072:	f104 0b1a 	add.w	fp, r4, #26
 8006076:	e7f4      	b.n	8006062 <_printf_float+0x40e>
 8006078:	2301      	movs	r3, #1
 800607a:	4642      	mov	r2, r8
 800607c:	e7e1      	b.n	8006042 <_printf_float+0x3ee>
 800607e:	2301      	movs	r3, #1
 8006080:	464a      	mov	r2, r9
 8006082:	4631      	mov	r1, r6
 8006084:	4628      	mov	r0, r5
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	f43f ae3e 	beq.w	8005d0a <_printf_float+0xb6>
 800608e:	f108 0801 	add.w	r8, r8, #1
 8006092:	68e3      	ldr	r3, [r4, #12]
 8006094:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006096:	1a5b      	subs	r3, r3, r1
 8006098:	4543      	cmp	r3, r8
 800609a:	dcf0      	bgt.n	800607e <_printf_float+0x42a>
 800609c:	e6fc      	b.n	8005e98 <_printf_float+0x244>
 800609e:	f04f 0800 	mov.w	r8, #0
 80060a2:	f104 0919 	add.w	r9, r4, #25
 80060a6:	e7f4      	b.n	8006092 <_printf_float+0x43e>

080060a8 <_printf_common>:
 80060a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	4616      	mov	r6, r2
 80060ae:	4698      	mov	r8, r3
 80060b0:	688a      	ldr	r2, [r1, #8]
 80060b2:	690b      	ldr	r3, [r1, #16]
 80060b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060b8:	4293      	cmp	r3, r2
 80060ba:	bfb8      	it	lt
 80060bc:	4613      	movlt	r3, r2
 80060be:	6033      	str	r3, [r6, #0]
 80060c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060c4:	4607      	mov	r7, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	b10a      	cbz	r2, 80060ce <_printf_common+0x26>
 80060ca:	3301      	adds	r3, #1
 80060cc:	6033      	str	r3, [r6, #0]
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	0699      	lsls	r1, r3, #26
 80060d2:	bf42      	ittt	mi
 80060d4:	6833      	ldrmi	r3, [r6, #0]
 80060d6:	3302      	addmi	r3, #2
 80060d8:	6033      	strmi	r3, [r6, #0]
 80060da:	6825      	ldr	r5, [r4, #0]
 80060dc:	f015 0506 	ands.w	r5, r5, #6
 80060e0:	d106      	bne.n	80060f0 <_printf_common+0x48>
 80060e2:	f104 0a19 	add.w	sl, r4, #25
 80060e6:	68e3      	ldr	r3, [r4, #12]
 80060e8:	6832      	ldr	r2, [r6, #0]
 80060ea:	1a9b      	subs	r3, r3, r2
 80060ec:	42ab      	cmp	r3, r5
 80060ee:	dc26      	bgt.n	800613e <_printf_common+0x96>
 80060f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	3b00      	subs	r3, #0
 80060f8:	bf18      	it	ne
 80060fa:	2301      	movne	r3, #1
 80060fc:	0692      	lsls	r2, r2, #26
 80060fe:	d42b      	bmi.n	8006158 <_printf_common+0xb0>
 8006100:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006104:	4641      	mov	r1, r8
 8006106:	4638      	mov	r0, r7
 8006108:	47c8      	blx	r9
 800610a:	3001      	adds	r0, #1
 800610c:	d01e      	beq.n	800614c <_printf_common+0xa4>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	6922      	ldr	r2, [r4, #16]
 8006112:	f003 0306 	and.w	r3, r3, #6
 8006116:	2b04      	cmp	r3, #4
 8006118:	bf02      	ittt	eq
 800611a:	68e5      	ldreq	r5, [r4, #12]
 800611c:	6833      	ldreq	r3, [r6, #0]
 800611e:	1aed      	subeq	r5, r5, r3
 8006120:	68a3      	ldr	r3, [r4, #8]
 8006122:	bf0c      	ite	eq
 8006124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006128:	2500      	movne	r5, #0
 800612a:	4293      	cmp	r3, r2
 800612c:	bfc4      	itt	gt
 800612e:	1a9b      	subgt	r3, r3, r2
 8006130:	18ed      	addgt	r5, r5, r3
 8006132:	2600      	movs	r6, #0
 8006134:	341a      	adds	r4, #26
 8006136:	42b5      	cmp	r5, r6
 8006138:	d11a      	bne.n	8006170 <_printf_common+0xc8>
 800613a:	2000      	movs	r0, #0
 800613c:	e008      	b.n	8006150 <_printf_common+0xa8>
 800613e:	2301      	movs	r3, #1
 8006140:	4652      	mov	r2, sl
 8006142:	4641      	mov	r1, r8
 8006144:	4638      	mov	r0, r7
 8006146:	47c8      	blx	r9
 8006148:	3001      	adds	r0, #1
 800614a:	d103      	bne.n	8006154 <_printf_common+0xac>
 800614c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006154:	3501      	adds	r5, #1
 8006156:	e7c6      	b.n	80060e6 <_printf_common+0x3e>
 8006158:	18e1      	adds	r1, r4, r3
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	2030      	movs	r0, #48	@ 0x30
 800615e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006162:	4422      	add	r2, r4
 8006164:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006168:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800616c:	3302      	adds	r3, #2
 800616e:	e7c7      	b.n	8006100 <_printf_common+0x58>
 8006170:	2301      	movs	r3, #1
 8006172:	4622      	mov	r2, r4
 8006174:	4641      	mov	r1, r8
 8006176:	4638      	mov	r0, r7
 8006178:	47c8      	blx	r9
 800617a:	3001      	adds	r0, #1
 800617c:	d0e6      	beq.n	800614c <_printf_common+0xa4>
 800617e:	3601      	adds	r6, #1
 8006180:	e7d9      	b.n	8006136 <_printf_common+0x8e>
	...

08006184 <_printf_i>:
 8006184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006188:	7e0f      	ldrb	r7, [r1, #24]
 800618a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800618c:	2f78      	cmp	r7, #120	@ 0x78
 800618e:	4691      	mov	r9, r2
 8006190:	4680      	mov	r8, r0
 8006192:	460c      	mov	r4, r1
 8006194:	469a      	mov	sl, r3
 8006196:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800619a:	d807      	bhi.n	80061ac <_printf_i+0x28>
 800619c:	2f62      	cmp	r7, #98	@ 0x62
 800619e:	d80a      	bhi.n	80061b6 <_printf_i+0x32>
 80061a0:	2f00      	cmp	r7, #0
 80061a2:	f000 80d1 	beq.w	8006348 <_printf_i+0x1c4>
 80061a6:	2f58      	cmp	r7, #88	@ 0x58
 80061a8:	f000 80b8 	beq.w	800631c <_printf_i+0x198>
 80061ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061b4:	e03a      	b.n	800622c <_printf_i+0xa8>
 80061b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061ba:	2b15      	cmp	r3, #21
 80061bc:	d8f6      	bhi.n	80061ac <_printf_i+0x28>
 80061be:	a101      	add	r1, pc, #4	@ (adr r1, 80061c4 <_printf_i+0x40>)
 80061c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061c4:	0800621d 	.word	0x0800621d
 80061c8:	08006231 	.word	0x08006231
 80061cc:	080061ad 	.word	0x080061ad
 80061d0:	080061ad 	.word	0x080061ad
 80061d4:	080061ad 	.word	0x080061ad
 80061d8:	080061ad 	.word	0x080061ad
 80061dc:	08006231 	.word	0x08006231
 80061e0:	080061ad 	.word	0x080061ad
 80061e4:	080061ad 	.word	0x080061ad
 80061e8:	080061ad 	.word	0x080061ad
 80061ec:	080061ad 	.word	0x080061ad
 80061f0:	0800632f 	.word	0x0800632f
 80061f4:	0800625b 	.word	0x0800625b
 80061f8:	080062e9 	.word	0x080062e9
 80061fc:	080061ad 	.word	0x080061ad
 8006200:	080061ad 	.word	0x080061ad
 8006204:	08006351 	.word	0x08006351
 8006208:	080061ad 	.word	0x080061ad
 800620c:	0800625b 	.word	0x0800625b
 8006210:	080061ad 	.word	0x080061ad
 8006214:	080061ad 	.word	0x080061ad
 8006218:	080062f1 	.word	0x080062f1
 800621c:	6833      	ldr	r3, [r6, #0]
 800621e:	1d1a      	adds	r2, r3, #4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6032      	str	r2, [r6, #0]
 8006224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006228:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800622c:	2301      	movs	r3, #1
 800622e:	e09c      	b.n	800636a <_printf_i+0x1e6>
 8006230:	6833      	ldr	r3, [r6, #0]
 8006232:	6820      	ldr	r0, [r4, #0]
 8006234:	1d19      	adds	r1, r3, #4
 8006236:	6031      	str	r1, [r6, #0]
 8006238:	0606      	lsls	r6, r0, #24
 800623a:	d501      	bpl.n	8006240 <_printf_i+0xbc>
 800623c:	681d      	ldr	r5, [r3, #0]
 800623e:	e003      	b.n	8006248 <_printf_i+0xc4>
 8006240:	0645      	lsls	r5, r0, #25
 8006242:	d5fb      	bpl.n	800623c <_printf_i+0xb8>
 8006244:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006248:	2d00      	cmp	r5, #0
 800624a:	da03      	bge.n	8006254 <_printf_i+0xd0>
 800624c:	232d      	movs	r3, #45	@ 0x2d
 800624e:	426d      	negs	r5, r5
 8006250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006254:	4858      	ldr	r0, [pc, #352]	@ (80063b8 <_printf_i+0x234>)
 8006256:	230a      	movs	r3, #10
 8006258:	e011      	b.n	800627e <_printf_i+0xfa>
 800625a:	6821      	ldr	r1, [r4, #0]
 800625c:	6833      	ldr	r3, [r6, #0]
 800625e:	0608      	lsls	r0, r1, #24
 8006260:	f853 5b04 	ldr.w	r5, [r3], #4
 8006264:	d402      	bmi.n	800626c <_printf_i+0xe8>
 8006266:	0649      	lsls	r1, r1, #25
 8006268:	bf48      	it	mi
 800626a:	b2ad      	uxthmi	r5, r5
 800626c:	2f6f      	cmp	r7, #111	@ 0x6f
 800626e:	4852      	ldr	r0, [pc, #328]	@ (80063b8 <_printf_i+0x234>)
 8006270:	6033      	str	r3, [r6, #0]
 8006272:	bf14      	ite	ne
 8006274:	230a      	movne	r3, #10
 8006276:	2308      	moveq	r3, #8
 8006278:	2100      	movs	r1, #0
 800627a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800627e:	6866      	ldr	r6, [r4, #4]
 8006280:	60a6      	str	r6, [r4, #8]
 8006282:	2e00      	cmp	r6, #0
 8006284:	db05      	blt.n	8006292 <_printf_i+0x10e>
 8006286:	6821      	ldr	r1, [r4, #0]
 8006288:	432e      	orrs	r6, r5
 800628a:	f021 0104 	bic.w	r1, r1, #4
 800628e:	6021      	str	r1, [r4, #0]
 8006290:	d04b      	beq.n	800632a <_printf_i+0x1a6>
 8006292:	4616      	mov	r6, r2
 8006294:	fbb5 f1f3 	udiv	r1, r5, r3
 8006298:	fb03 5711 	mls	r7, r3, r1, r5
 800629c:	5dc7      	ldrb	r7, [r0, r7]
 800629e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062a2:	462f      	mov	r7, r5
 80062a4:	42bb      	cmp	r3, r7
 80062a6:	460d      	mov	r5, r1
 80062a8:	d9f4      	bls.n	8006294 <_printf_i+0x110>
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d10b      	bne.n	80062c6 <_printf_i+0x142>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	07df      	lsls	r7, r3, #31
 80062b2:	d508      	bpl.n	80062c6 <_printf_i+0x142>
 80062b4:	6923      	ldr	r3, [r4, #16]
 80062b6:	6861      	ldr	r1, [r4, #4]
 80062b8:	4299      	cmp	r1, r3
 80062ba:	bfde      	ittt	le
 80062bc:	2330      	movle	r3, #48	@ 0x30
 80062be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062c2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80062c6:	1b92      	subs	r2, r2, r6
 80062c8:	6122      	str	r2, [r4, #16]
 80062ca:	f8cd a000 	str.w	sl, [sp]
 80062ce:	464b      	mov	r3, r9
 80062d0:	aa03      	add	r2, sp, #12
 80062d2:	4621      	mov	r1, r4
 80062d4:	4640      	mov	r0, r8
 80062d6:	f7ff fee7 	bl	80060a8 <_printf_common>
 80062da:	3001      	adds	r0, #1
 80062dc:	d14a      	bne.n	8006374 <_printf_i+0x1f0>
 80062de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062e2:	b004      	add	sp, #16
 80062e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	f043 0320 	orr.w	r3, r3, #32
 80062ee:	6023      	str	r3, [r4, #0]
 80062f0:	4832      	ldr	r0, [pc, #200]	@ (80063bc <_printf_i+0x238>)
 80062f2:	2778      	movs	r7, #120	@ 0x78
 80062f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	6831      	ldr	r1, [r6, #0]
 80062fc:	061f      	lsls	r7, r3, #24
 80062fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006302:	d402      	bmi.n	800630a <_printf_i+0x186>
 8006304:	065f      	lsls	r7, r3, #25
 8006306:	bf48      	it	mi
 8006308:	b2ad      	uxthmi	r5, r5
 800630a:	6031      	str	r1, [r6, #0]
 800630c:	07d9      	lsls	r1, r3, #31
 800630e:	bf44      	itt	mi
 8006310:	f043 0320 	orrmi.w	r3, r3, #32
 8006314:	6023      	strmi	r3, [r4, #0]
 8006316:	b11d      	cbz	r5, 8006320 <_printf_i+0x19c>
 8006318:	2310      	movs	r3, #16
 800631a:	e7ad      	b.n	8006278 <_printf_i+0xf4>
 800631c:	4826      	ldr	r0, [pc, #152]	@ (80063b8 <_printf_i+0x234>)
 800631e:	e7e9      	b.n	80062f4 <_printf_i+0x170>
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	f023 0320 	bic.w	r3, r3, #32
 8006326:	6023      	str	r3, [r4, #0]
 8006328:	e7f6      	b.n	8006318 <_printf_i+0x194>
 800632a:	4616      	mov	r6, r2
 800632c:	e7bd      	b.n	80062aa <_printf_i+0x126>
 800632e:	6833      	ldr	r3, [r6, #0]
 8006330:	6825      	ldr	r5, [r4, #0]
 8006332:	6961      	ldr	r1, [r4, #20]
 8006334:	1d18      	adds	r0, r3, #4
 8006336:	6030      	str	r0, [r6, #0]
 8006338:	062e      	lsls	r6, r5, #24
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	d501      	bpl.n	8006342 <_printf_i+0x1be>
 800633e:	6019      	str	r1, [r3, #0]
 8006340:	e002      	b.n	8006348 <_printf_i+0x1c4>
 8006342:	0668      	lsls	r0, r5, #25
 8006344:	d5fb      	bpl.n	800633e <_printf_i+0x1ba>
 8006346:	8019      	strh	r1, [r3, #0]
 8006348:	2300      	movs	r3, #0
 800634a:	6123      	str	r3, [r4, #16]
 800634c:	4616      	mov	r6, r2
 800634e:	e7bc      	b.n	80062ca <_printf_i+0x146>
 8006350:	6833      	ldr	r3, [r6, #0]
 8006352:	1d1a      	adds	r2, r3, #4
 8006354:	6032      	str	r2, [r6, #0]
 8006356:	681e      	ldr	r6, [r3, #0]
 8006358:	6862      	ldr	r2, [r4, #4]
 800635a:	2100      	movs	r1, #0
 800635c:	4630      	mov	r0, r6
 800635e:	f7f9 ff3f 	bl	80001e0 <memchr>
 8006362:	b108      	cbz	r0, 8006368 <_printf_i+0x1e4>
 8006364:	1b80      	subs	r0, r0, r6
 8006366:	6060      	str	r0, [r4, #4]
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	6123      	str	r3, [r4, #16]
 800636c:	2300      	movs	r3, #0
 800636e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006372:	e7aa      	b.n	80062ca <_printf_i+0x146>
 8006374:	6923      	ldr	r3, [r4, #16]
 8006376:	4632      	mov	r2, r6
 8006378:	4649      	mov	r1, r9
 800637a:	4640      	mov	r0, r8
 800637c:	47d0      	blx	sl
 800637e:	3001      	adds	r0, #1
 8006380:	d0ad      	beq.n	80062de <_printf_i+0x15a>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	079b      	lsls	r3, r3, #30
 8006386:	d413      	bmi.n	80063b0 <_printf_i+0x22c>
 8006388:	68e0      	ldr	r0, [r4, #12]
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	4298      	cmp	r0, r3
 800638e:	bfb8      	it	lt
 8006390:	4618      	movlt	r0, r3
 8006392:	e7a6      	b.n	80062e2 <_printf_i+0x15e>
 8006394:	2301      	movs	r3, #1
 8006396:	4632      	mov	r2, r6
 8006398:	4649      	mov	r1, r9
 800639a:	4640      	mov	r0, r8
 800639c:	47d0      	blx	sl
 800639e:	3001      	adds	r0, #1
 80063a0:	d09d      	beq.n	80062de <_printf_i+0x15a>
 80063a2:	3501      	adds	r5, #1
 80063a4:	68e3      	ldr	r3, [r4, #12]
 80063a6:	9903      	ldr	r1, [sp, #12]
 80063a8:	1a5b      	subs	r3, r3, r1
 80063aa:	42ab      	cmp	r3, r5
 80063ac:	dcf2      	bgt.n	8006394 <_printf_i+0x210>
 80063ae:	e7eb      	b.n	8006388 <_printf_i+0x204>
 80063b0:	2500      	movs	r5, #0
 80063b2:	f104 0619 	add.w	r6, r4, #25
 80063b6:	e7f5      	b.n	80063a4 <_printf_i+0x220>
 80063b8:	0800954a 	.word	0x0800954a
 80063bc:	0800955b 	.word	0x0800955b

080063c0 <std>:
 80063c0:	2300      	movs	r3, #0
 80063c2:	b510      	push	{r4, lr}
 80063c4:	4604      	mov	r4, r0
 80063c6:	e9c0 3300 	strd	r3, r3, [r0]
 80063ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063ce:	6083      	str	r3, [r0, #8]
 80063d0:	8181      	strh	r1, [r0, #12]
 80063d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80063d4:	81c2      	strh	r2, [r0, #14]
 80063d6:	6183      	str	r3, [r0, #24]
 80063d8:	4619      	mov	r1, r3
 80063da:	2208      	movs	r2, #8
 80063dc:	305c      	adds	r0, #92	@ 0x5c
 80063de:	f000 f8f4 	bl	80065ca <memset>
 80063e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006418 <std+0x58>)
 80063e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80063e6:	4b0d      	ldr	r3, [pc, #52]	@ (800641c <std+0x5c>)
 80063e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006420 <std+0x60>)
 80063ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006424 <std+0x64>)
 80063f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80063f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006428 <std+0x68>)
 80063f4:	6224      	str	r4, [r4, #32]
 80063f6:	429c      	cmp	r4, r3
 80063f8:	d006      	beq.n	8006408 <std+0x48>
 80063fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063fe:	4294      	cmp	r4, r2
 8006400:	d002      	beq.n	8006408 <std+0x48>
 8006402:	33d0      	adds	r3, #208	@ 0xd0
 8006404:	429c      	cmp	r4, r3
 8006406:	d105      	bne.n	8006414 <std+0x54>
 8006408:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800640c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006410:	f000 b958 	b.w	80066c4 <__retarget_lock_init_recursive>
 8006414:	bd10      	pop	{r4, pc}
 8006416:	bf00      	nop
 8006418:	08006545 	.word	0x08006545
 800641c:	08006567 	.word	0x08006567
 8006420:	0800659f 	.word	0x0800659f
 8006424:	080065c3 	.word	0x080065c3
 8006428:	200003dc 	.word	0x200003dc

0800642c <stdio_exit_handler>:
 800642c:	4a02      	ldr	r2, [pc, #8]	@ (8006438 <stdio_exit_handler+0xc>)
 800642e:	4903      	ldr	r1, [pc, #12]	@ (800643c <stdio_exit_handler+0x10>)
 8006430:	4803      	ldr	r0, [pc, #12]	@ (8006440 <stdio_exit_handler+0x14>)
 8006432:	f000 b869 	b.w	8006508 <_fwalk_sglue>
 8006436:	bf00      	nop
 8006438:	20000014 	.word	0x20000014
 800643c:	08007d7d 	.word	0x08007d7d
 8006440:	20000024 	.word	0x20000024

08006444 <cleanup_stdio>:
 8006444:	6841      	ldr	r1, [r0, #4]
 8006446:	4b0c      	ldr	r3, [pc, #48]	@ (8006478 <cleanup_stdio+0x34>)
 8006448:	4299      	cmp	r1, r3
 800644a:	b510      	push	{r4, lr}
 800644c:	4604      	mov	r4, r0
 800644e:	d001      	beq.n	8006454 <cleanup_stdio+0x10>
 8006450:	f001 fc94 	bl	8007d7c <_fflush_r>
 8006454:	68a1      	ldr	r1, [r4, #8]
 8006456:	4b09      	ldr	r3, [pc, #36]	@ (800647c <cleanup_stdio+0x38>)
 8006458:	4299      	cmp	r1, r3
 800645a:	d002      	beq.n	8006462 <cleanup_stdio+0x1e>
 800645c:	4620      	mov	r0, r4
 800645e:	f001 fc8d 	bl	8007d7c <_fflush_r>
 8006462:	68e1      	ldr	r1, [r4, #12]
 8006464:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <cleanup_stdio+0x3c>)
 8006466:	4299      	cmp	r1, r3
 8006468:	d004      	beq.n	8006474 <cleanup_stdio+0x30>
 800646a:	4620      	mov	r0, r4
 800646c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006470:	f001 bc84 	b.w	8007d7c <_fflush_r>
 8006474:	bd10      	pop	{r4, pc}
 8006476:	bf00      	nop
 8006478:	200003dc 	.word	0x200003dc
 800647c:	20000444 	.word	0x20000444
 8006480:	200004ac 	.word	0x200004ac

08006484 <global_stdio_init.part.0>:
 8006484:	b510      	push	{r4, lr}
 8006486:	4b0b      	ldr	r3, [pc, #44]	@ (80064b4 <global_stdio_init.part.0+0x30>)
 8006488:	4c0b      	ldr	r4, [pc, #44]	@ (80064b8 <global_stdio_init.part.0+0x34>)
 800648a:	4a0c      	ldr	r2, [pc, #48]	@ (80064bc <global_stdio_init.part.0+0x38>)
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	4620      	mov	r0, r4
 8006490:	2200      	movs	r2, #0
 8006492:	2104      	movs	r1, #4
 8006494:	f7ff ff94 	bl	80063c0 <std>
 8006498:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800649c:	2201      	movs	r2, #1
 800649e:	2109      	movs	r1, #9
 80064a0:	f7ff ff8e 	bl	80063c0 <std>
 80064a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064a8:	2202      	movs	r2, #2
 80064aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ae:	2112      	movs	r1, #18
 80064b0:	f7ff bf86 	b.w	80063c0 <std>
 80064b4:	20000514 	.word	0x20000514
 80064b8:	200003dc 	.word	0x200003dc
 80064bc:	0800642d 	.word	0x0800642d

080064c0 <__sfp_lock_acquire>:
 80064c0:	4801      	ldr	r0, [pc, #4]	@ (80064c8 <__sfp_lock_acquire+0x8>)
 80064c2:	f000 b900 	b.w	80066c6 <__retarget_lock_acquire_recursive>
 80064c6:	bf00      	nop
 80064c8:	2000051d 	.word	0x2000051d

080064cc <__sfp_lock_release>:
 80064cc:	4801      	ldr	r0, [pc, #4]	@ (80064d4 <__sfp_lock_release+0x8>)
 80064ce:	f000 b8fb 	b.w	80066c8 <__retarget_lock_release_recursive>
 80064d2:	bf00      	nop
 80064d4:	2000051d 	.word	0x2000051d

080064d8 <__sinit>:
 80064d8:	b510      	push	{r4, lr}
 80064da:	4604      	mov	r4, r0
 80064dc:	f7ff fff0 	bl	80064c0 <__sfp_lock_acquire>
 80064e0:	6a23      	ldr	r3, [r4, #32]
 80064e2:	b11b      	cbz	r3, 80064ec <__sinit+0x14>
 80064e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064e8:	f7ff bff0 	b.w	80064cc <__sfp_lock_release>
 80064ec:	4b04      	ldr	r3, [pc, #16]	@ (8006500 <__sinit+0x28>)
 80064ee:	6223      	str	r3, [r4, #32]
 80064f0:	4b04      	ldr	r3, [pc, #16]	@ (8006504 <__sinit+0x2c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1f5      	bne.n	80064e4 <__sinit+0xc>
 80064f8:	f7ff ffc4 	bl	8006484 <global_stdio_init.part.0>
 80064fc:	e7f2      	b.n	80064e4 <__sinit+0xc>
 80064fe:	bf00      	nop
 8006500:	08006445 	.word	0x08006445
 8006504:	20000514 	.word	0x20000514

08006508 <_fwalk_sglue>:
 8006508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800650c:	4607      	mov	r7, r0
 800650e:	4688      	mov	r8, r1
 8006510:	4614      	mov	r4, r2
 8006512:	2600      	movs	r6, #0
 8006514:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006518:	f1b9 0901 	subs.w	r9, r9, #1
 800651c:	d505      	bpl.n	800652a <_fwalk_sglue+0x22>
 800651e:	6824      	ldr	r4, [r4, #0]
 8006520:	2c00      	cmp	r4, #0
 8006522:	d1f7      	bne.n	8006514 <_fwalk_sglue+0xc>
 8006524:	4630      	mov	r0, r6
 8006526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800652a:	89ab      	ldrh	r3, [r5, #12]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d907      	bls.n	8006540 <_fwalk_sglue+0x38>
 8006530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006534:	3301      	adds	r3, #1
 8006536:	d003      	beq.n	8006540 <_fwalk_sglue+0x38>
 8006538:	4629      	mov	r1, r5
 800653a:	4638      	mov	r0, r7
 800653c:	47c0      	blx	r8
 800653e:	4306      	orrs	r6, r0
 8006540:	3568      	adds	r5, #104	@ 0x68
 8006542:	e7e9      	b.n	8006518 <_fwalk_sglue+0x10>

08006544 <__sread>:
 8006544:	b510      	push	{r4, lr}
 8006546:	460c      	mov	r4, r1
 8006548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800654c:	f000 f86c 	bl	8006628 <_read_r>
 8006550:	2800      	cmp	r0, #0
 8006552:	bfab      	itete	ge
 8006554:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006556:	89a3      	ldrhlt	r3, [r4, #12]
 8006558:	181b      	addge	r3, r3, r0
 800655a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800655e:	bfac      	ite	ge
 8006560:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006562:	81a3      	strhlt	r3, [r4, #12]
 8006564:	bd10      	pop	{r4, pc}

08006566 <__swrite>:
 8006566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800656a:	461f      	mov	r7, r3
 800656c:	898b      	ldrh	r3, [r1, #12]
 800656e:	05db      	lsls	r3, r3, #23
 8006570:	4605      	mov	r5, r0
 8006572:	460c      	mov	r4, r1
 8006574:	4616      	mov	r6, r2
 8006576:	d505      	bpl.n	8006584 <__swrite+0x1e>
 8006578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800657c:	2302      	movs	r3, #2
 800657e:	2200      	movs	r2, #0
 8006580:	f000 f840 	bl	8006604 <_lseek_r>
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800658a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	4632      	mov	r2, r6
 8006592:	463b      	mov	r3, r7
 8006594:	4628      	mov	r0, r5
 8006596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800659a:	f000 b857 	b.w	800664c <_write_r>

0800659e <__sseek>:
 800659e:	b510      	push	{r4, lr}
 80065a0:	460c      	mov	r4, r1
 80065a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a6:	f000 f82d 	bl	8006604 <_lseek_r>
 80065aa:	1c43      	adds	r3, r0, #1
 80065ac:	89a3      	ldrh	r3, [r4, #12]
 80065ae:	bf15      	itete	ne
 80065b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80065b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80065b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80065ba:	81a3      	strheq	r3, [r4, #12]
 80065bc:	bf18      	it	ne
 80065be:	81a3      	strhne	r3, [r4, #12]
 80065c0:	bd10      	pop	{r4, pc}

080065c2 <__sclose>:
 80065c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c6:	f000 b80d 	b.w	80065e4 <_close_r>

080065ca <memset>:
 80065ca:	4402      	add	r2, r0
 80065cc:	4603      	mov	r3, r0
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d100      	bne.n	80065d4 <memset+0xa>
 80065d2:	4770      	bx	lr
 80065d4:	f803 1b01 	strb.w	r1, [r3], #1
 80065d8:	e7f9      	b.n	80065ce <memset+0x4>
	...

080065dc <_localeconv_r>:
 80065dc:	4800      	ldr	r0, [pc, #0]	@ (80065e0 <_localeconv_r+0x4>)
 80065de:	4770      	bx	lr
 80065e0:	20000160 	.word	0x20000160

080065e4 <_close_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4d06      	ldr	r5, [pc, #24]	@ (8006600 <_close_r+0x1c>)
 80065e8:	2300      	movs	r3, #0
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	602b      	str	r3, [r5, #0]
 80065f0:	f7fc fc9a 	bl	8002f28 <_close>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d102      	bne.n	80065fe <_close_r+0x1a>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	b103      	cbz	r3, 80065fe <_close_r+0x1a>
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	20000518 	.word	0x20000518

08006604 <_lseek_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4d07      	ldr	r5, [pc, #28]	@ (8006624 <_lseek_r+0x20>)
 8006608:	4604      	mov	r4, r0
 800660a:	4608      	mov	r0, r1
 800660c:	4611      	mov	r1, r2
 800660e:	2200      	movs	r2, #0
 8006610:	602a      	str	r2, [r5, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	f7fc fcaf 	bl	8002f76 <_lseek>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_lseek_r+0x1e>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_lseek_r+0x1e>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	20000518 	.word	0x20000518

08006628 <_read_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4d07      	ldr	r5, [pc, #28]	@ (8006648 <_read_r+0x20>)
 800662c:	4604      	mov	r4, r0
 800662e:	4608      	mov	r0, r1
 8006630:	4611      	mov	r1, r2
 8006632:	2200      	movs	r2, #0
 8006634:	602a      	str	r2, [r5, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	f7fc fc3d 	bl	8002eb6 <_read>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_read_r+0x1e>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_read_r+0x1e>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	20000518 	.word	0x20000518

0800664c <_write_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d07      	ldr	r5, [pc, #28]	@ (800666c <_write_r+0x20>)
 8006650:	4604      	mov	r4, r0
 8006652:	4608      	mov	r0, r1
 8006654:	4611      	mov	r1, r2
 8006656:	2200      	movs	r2, #0
 8006658:	602a      	str	r2, [r5, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	f7fc fc48 	bl	8002ef0 <_write>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_write_r+0x1e>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	b103      	cbz	r3, 800666a <_write_r+0x1e>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	20000518 	.word	0x20000518

08006670 <__errno>:
 8006670:	4b01      	ldr	r3, [pc, #4]	@ (8006678 <__errno+0x8>)
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	20000020 	.word	0x20000020

0800667c <__libc_init_array>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	4d0d      	ldr	r5, [pc, #52]	@ (80066b4 <__libc_init_array+0x38>)
 8006680:	4c0d      	ldr	r4, [pc, #52]	@ (80066b8 <__libc_init_array+0x3c>)
 8006682:	1b64      	subs	r4, r4, r5
 8006684:	10a4      	asrs	r4, r4, #2
 8006686:	2600      	movs	r6, #0
 8006688:	42a6      	cmp	r6, r4
 800668a:	d109      	bne.n	80066a0 <__libc_init_array+0x24>
 800668c:	4d0b      	ldr	r5, [pc, #44]	@ (80066bc <__libc_init_array+0x40>)
 800668e:	4c0c      	ldr	r4, [pc, #48]	@ (80066c0 <__libc_init_array+0x44>)
 8006690:	f002 ff3a 	bl	8009508 <_init>
 8006694:	1b64      	subs	r4, r4, r5
 8006696:	10a4      	asrs	r4, r4, #2
 8006698:	2600      	movs	r6, #0
 800669a:	42a6      	cmp	r6, r4
 800669c:	d105      	bne.n	80066aa <__libc_init_array+0x2e>
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a4:	4798      	blx	r3
 80066a6:	3601      	adds	r6, #1
 80066a8:	e7ee      	b.n	8006688 <__libc_init_array+0xc>
 80066aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ae:	4798      	blx	r3
 80066b0:	3601      	adds	r6, #1
 80066b2:	e7f2      	b.n	800669a <__libc_init_array+0x1e>
 80066b4:	08009a90 	.word	0x08009a90
 80066b8:	08009a90 	.word	0x08009a90
 80066bc:	08009a90 	.word	0x08009a90
 80066c0:	08009a94 	.word	0x08009a94

080066c4 <__retarget_lock_init_recursive>:
 80066c4:	4770      	bx	lr

080066c6 <__retarget_lock_acquire_recursive>:
 80066c6:	4770      	bx	lr

080066c8 <__retarget_lock_release_recursive>:
 80066c8:	4770      	bx	lr

080066ca <quorem>:
 80066ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ce:	6903      	ldr	r3, [r0, #16]
 80066d0:	690c      	ldr	r4, [r1, #16]
 80066d2:	42a3      	cmp	r3, r4
 80066d4:	4607      	mov	r7, r0
 80066d6:	db7e      	blt.n	80067d6 <quorem+0x10c>
 80066d8:	3c01      	subs	r4, #1
 80066da:	f101 0814 	add.w	r8, r1, #20
 80066de:	00a3      	lsls	r3, r4, #2
 80066e0:	f100 0514 	add.w	r5, r0, #20
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066f4:	3301      	adds	r3, #1
 80066f6:	429a      	cmp	r2, r3
 80066f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006700:	d32e      	bcc.n	8006760 <quorem+0x96>
 8006702:	f04f 0a00 	mov.w	sl, #0
 8006706:	46c4      	mov	ip, r8
 8006708:	46ae      	mov	lr, r5
 800670a:	46d3      	mov	fp, sl
 800670c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006710:	b298      	uxth	r0, r3
 8006712:	fb06 a000 	mla	r0, r6, r0, sl
 8006716:	0c02      	lsrs	r2, r0, #16
 8006718:	0c1b      	lsrs	r3, r3, #16
 800671a:	fb06 2303 	mla	r3, r6, r3, r2
 800671e:	f8de 2000 	ldr.w	r2, [lr]
 8006722:	b280      	uxth	r0, r0
 8006724:	b292      	uxth	r2, r2
 8006726:	1a12      	subs	r2, r2, r0
 8006728:	445a      	add	r2, fp
 800672a:	f8de 0000 	ldr.w	r0, [lr]
 800672e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006732:	b29b      	uxth	r3, r3
 8006734:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006738:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800673c:	b292      	uxth	r2, r2
 800673e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006742:	45e1      	cmp	r9, ip
 8006744:	f84e 2b04 	str.w	r2, [lr], #4
 8006748:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800674c:	d2de      	bcs.n	800670c <quorem+0x42>
 800674e:	9b00      	ldr	r3, [sp, #0]
 8006750:	58eb      	ldr	r3, [r5, r3]
 8006752:	b92b      	cbnz	r3, 8006760 <quorem+0x96>
 8006754:	9b01      	ldr	r3, [sp, #4]
 8006756:	3b04      	subs	r3, #4
 8006758:	429d      	cmp	r5, r3
 800675a:	461a      	mov	r2, r3
 800675c:	d32f      	bcc.n	80067be <quorem+0xf4>
 800675e:	613c      	str	r4, [r7, #16]
 8006760:	4638      	mov	r0, r7
 8006762:	f001 f97f 	bl	8007a64 <__mcmp>
 8006766:	2800      	cmp	r0, #0
 8006768:	db25      	blt.n	80067b6 <quorem+0xec>
 800676a:	4629      	mov	r1, r5
 800676c:	2000      	movs	r0, #0
 800676e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006772:	f8d1 c000 	ldr.w	ip, [r1]
 8006776:	fa1f fe82 	uxth.w	lr, r2
 800677a:	fa1f f38c 	uxth.w	r3, ip
 800677e:	eba3 030e 	sub.w	r3, r3, lr
 8006782:	4403      	add	r3, r0
 8006784:	0c12      	lsrs	r2, r2, #16
 8006786:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800678a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800678e:	b29b      	uxth	r3, r3
 8006790:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006794:	45c1      	cmp	r9, r8
 8006796:	f841 3b04 	str.w	r3, [r1], #4
 800679a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800679e:	d2e6      	bcs.n	800676e <quorem+0xa4>
 80067a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067a8:	b922      	cbnz	r2, 80067b4 <quorem+0xea>
 80067aa:	3b04      	subs	r3, #4
 80067ac:	429d      	cmp	r5, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	d30b      	bcc.n	80067ca <quorem+0x100>
 80067b2:	613c      	str	r4, [r7, #16]
 80067b4:	3601      	adds	r6, #1
 80067b6:	4630      	mov	r0, r6
 80067b8:	b003      	add	sp, #12
 80067ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	3b04      	subs	r3, #4
 80067c2:	2a00      	cmp	r2, #0
 80067c4:	d1cb      	bne.n	800675e <quorem+0x94>
 80067c6:	3c01      	subs	r4, #1
 80067c8:	e7c6      	b.n	8006758 <quorem+0x8e>
 80067ca:	6812      	ldr	r2, [r2, #0]
 80067cc:	3b04      	subs	r3, #4
 80067ce:	2a00      	cmp	r2, #0
 80067d0:	d1ef      	bne.n	80067b2 <quorem+0xe8>
 80067d2:	3c01      	subs	r4, #1
 80067d4:	e7ea      	b.n	80067ac <quorem+0xe2>
 80067d6:	2000      	movs	r0, #0
 80067d8:	e7ee      	b.n	80067b8 <quorem+0xee>
 80067da:	0000      	movs	r0, r0
 80067dc:	0000      	movs	r0, r0
	...

080067e0 <_dtoa_r>:
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	69c7      	ldr	r7, [r0, #28]
 80067e6:	b097      	sub	sp, #92	@ 0x5c
 80067e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80067ec:	ec55 4b10 	vmov	r4, r5, d0
 80067f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80067f2:	9107      	str	r1, [sp, #28]
 80067f4:	4681      	mov	r9, r0
 80067f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80067f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80067fa:	b97f      	cbnz	r7, 800681c <_dtoa_r+0x3c>
 80067fc:	2010      	movs	r0, #16
 80067fe:	f000 fe09 	bl	8007414 <malloc>
 8006802:	4602      	mov	r2, r0
 8006804:	f8c9 001c 	str.w	r0, [r9, #28]
 8006808:	b920      	cbnz	r0, 8006814 <_dtoa_r+0x34>
 800680a:	4ba9      	ldr	r3, [pc, #676]	@ (8006ab0 <_dtoa_r+0x2d0>)
 800680c:	21ef      	movs	r1, #239	@ 0xef
 800680e:	48a9      	ldr	r0, [pc, #676]	@ (8006ab4 <_dtoa_r+0x2d4>)
 8006810:	f001 fafa 	bl	8007e08 <__assert_func>
 8006814:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006818:	6007      	str	r7, [r0, #0]
 800681a:	60c7      	str	r7, [r0, #12]
 800681c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006820:	6819      	ldr	r1, [r3, #0]
 8006822:	b159      	cbz	r1, 800683c <_dtoa_r+0x5c>
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	604a      	str	r2, [r1, #4]
 8006828:	2301      	movs	r3, #1
 800682a:	4093      	lsls	r3, r2
 800682c:	608b      	str	r3, [r1, #8]
 800682e:	4648      	mov	r0, r9
 8006830:	f000 fee6 	bl	8007600 <_Bfree>
 8006834:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	1e2b      	subs	r3, r5, #0
 800683e:	bfb9      	ittee	lt
 8006840:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006844:	9305      	strlt	r3, [sp, #20]
 8006846:	2300      	movge	r3, #0
 8006848:	6033      	strge	r3, [r6, #0]
 800684a:	9f05      	ldr	r7, [sp, #20]
 800684c:	4b9a      	ldr	r3, [pc, #616]	@ (8006ab8 <_dtoa_r+0x2d8>)
 800684e:	bfbc      	itt	lt
 8006850:	2201      	movlt	r2, #1
 8006852:	6032      	strlt	r2, [r6, #0]
 8006854:	43bb      	bics	r3, r7
 8006856:	d112      	bne.n	800687e <_dtoa_r+0x9e>
 8006858:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800685a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006864:	4323      	orrs	r3, r4
 8006866:	f000 855a 	beq.w	800731e <_dtoa_r+0xb3e>
 800686a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800686c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006acc <_dtoa_r+0x2ec>
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 855c 	beq.w	800732e <_dtoa_r+0xb4e>
 8006876:	f10a 0303 	add.w	r3, sl, #3
 800687a:	f000 bd56 	b.w	800732a <_dtoa_r+0xb4a>
 800687e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006882:	2200      	movs	r2, #0
 8006884:	ec51 0b17 	vmov	r0, r1, d7
 8006888:	2300      	movs	r3, #0
 800688a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800688e:	f7fa f923 	bl	8000ad8 <__aeabi_dcmpeq>
 8006892:	4680      	mov	r8, r0
 8006894:	b158      	cbz	r0, 80068ae <_dtoa_r+0xce>
 8006896:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006898:	2301      	movs	r3, #1
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800689e:	b113      	cbz	r3, 80068a6 <_dtoa_r+0xc6>
 80068a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80068a2:	4b86      	ldr	r3, [pc, #536]	@ (8006abc <_dtoa_r+0x2dc>)
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006ad0 <_dtoa_r+0x2f0>
 80068aa:	f000 bd40 	b.w	800732e <_dtoa_r+0xb4e>
 80068ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80068b2:	aa14      	add	r2, sp, #80	@ 0x50
 80068b4:	a915      	add	r1, sp, #84	@ 0x54
 80068b6:	4648      	mov	r0, r9
 80068b8:	f001 f984 	bl	8007bc4 <__d2b>
 80068bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80068c0:	9002      	str	r0, [sp, #8]
 80068c2:	2e00      	cmp	r6, #0
 80068c4:	d078      	beq.n	80069b8 <_dtoa_r+0x1d8>
 80068c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80068cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80068d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80068dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80068e0:	4619      	mov	r1, r3
 80068e2:	2200      	movs	r2, #0
 80068e4:	4b76      	ldr	r3, [pc, #472]	@ (8006ac0 <_dtoa_r+0x2e0>)
 80068e6:	f7f9 fcd7 	bl	8000298 <__aeabi_dsub>
 80068ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8006a98 <_dtoa_r+0x2b8>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f7f9 fe8a 	bl	8000608 <__aeabi_dmul>
 80068f4:	a36a      	add	r3, pc, #424	@ (adr r3, 8006aa0 <_dtoa_r+0x2c0>)
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	f7f9 fccf 	bl	800029c <__adddf3>
 80068fe:	4604      	mov	r4, r0
 8006900:	4630      	mov	r0, r6
 8006902:	460d      	mov	r5, r1
 8006904:	f7f9 fe16 	bl	8000534 <__aeabi_i2d>
 8006908:	a367      	add	r3, pc, #412	@ (adr r3, 8006aa8 <_dtoa_r+0x2c8>)
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	f7f9 fe7b 	bl	8000608 <__aeabi_dmul>
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	4620      	mov	r0, r4
 8006918:	4629      	mov	r1, r5
 800691a:	f7f9 fcbf 	bl	800029c <__adddf3>
 800691e:	4604      	mov	r4, r0
 8006920:	460d      	mov	r5, r1
 8006922:	f7fa f921 	bl	8000b68 <__aeabi_d2iz>
 8006926:	2200      	movs	r2, #0
 8006928:	4607      	mov	r7, r0
 800692a:	2300      	movs	r3, #0
 800692c:	4620      	mov	r0, r4
 800692e:	4629      	mov	r1, r5
 8006930:	f7fa f8dc 	bl	8000aec <__aeabi_dcmplt>
 8006934:	b140      	cbz	r0, 8006948 <_dtoa_r+0x168>
 8006936:	4638      	mov	r0, r7
 8006938:	f7f9 fdfc 	bl	8000534 <__aeabi_i2d>
 800693c:	4622      	mov	r2, r4
 800693e:	462b      	mov	r3, r5
 8006940:	f7fa f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8006944:	b900      	cbnz	r0, 8006948 <_dtoa_r+0x168>
 8006946:	3f01      	subs	r7, #1
 8006948:	2f16      	cmp	r7, #22
 800694a:	d852      	bhi.n	80069f2 <_dtoa_r+0x212>
 800694c:	4b5d      	ldr	r3, [pc, #372]	@ (8006ac4 <_dtoa_r+0x2e4>)
 800694e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006956:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800695a:	f7fa f8c7 	bl	8000aec <__aeabi_dcmplt>
 800695e:	2800      	cmp	r0, #0
 8006960:	d049      	beq.n	80069f6 <_dtoa_r+0x216>
 8006962:	3f01      	subs	r7, #1
 8006964:	2300      	movs	r3, #0
 8006966:	9310      	str	r3, [sp, #64]	@ 0x40
 8006968:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800696a:	1b9b      	subs	r3, r3, r6
 800696c:	1e5a      	subs	r2, r3, #1
 800696e:	bf45      	ittet	mi
 8006970:	f1c3 0301 	rsbmi	r3, r3, #1
 8006974:	9300      	strmi	r3, [sp, #0]
 8006976:	2300      	movpl	r3, #0
 8006978:	2300      	movmi	r3, #0
 800697a:	9206      	str	r2, [sp, #24]
 800697c:	bf54      	ite	pl
 800697e:	9300      	strpl	r3, [sp, #0]
 8006980:	9306      	strmi	r3, [sp, #24]
 8006982:	2f00      	cmp	r7, #0
 8006984:	db39      	blt.n	80069fa <_dtoa_r+0x21a>
 8006986:	9b06      	ldr	r3, [sp, #24]
 8006988:	970d      	str	r7, [sp, #52]	@ 0x34
 800698a:	443b      	add	r3, r7
 800698c:	9306      	str	r3, [sp, #24]
 800698e:	2300      	movs	r3, #0
 8006990:	9308      	str	r3, [sp, #32]
 8006992:	9b07      	ldr	r3, [sp, #28]
 8006994:	2b09      	cmp	r3, #9
 8006996:	d863      	bhi.n	8006a60 <_dtoa_r+0x280>
 8006998:	2b05      	cmp	r3, #5
 800699a:	bfc4      	itt	gt
 800699c:	3b04      	subgt	r3, #4
 800699e:	9307      	strgt	r3, [sp, #28]
 80069a0:	9b07      	ldr	r3, [sp, #28]
 80069a2:	f1a3 0302 	sub.w	r3, r3, #2
 80069a6:	bfcc      	ite	gt
 80069a8:	2400      	movgt	r4, #0
 80069aa:	2401      	movle	r4, #1
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d863      	bhi.n	8006a78 <_dtoa_r+0x298>
 80069b0:	e8df f003 	tbb	[pc, r3]
 80069b4:	2b375452 	.word	0x2b375452
 80069b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80069bc:	441e      	add	r6, r3
 80069be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	bfc1      	itttt	gt
 80069c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80069ca:	409f      	lslgt	r7, r3
 80069cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80069d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80069d4:	bfd6      	itet	le
 80069d6:	f1c3 0320 	rsble	r3, r3, #32
 80069da:	ea47 0003 	orrgt.w	r0, r7, r3
 80069de:	fa04 f003 	lslle.w	r0, r4, r3
 80069e2:	f7f9 fd97 	bl	8000514 <__aeabi_ui2d>
 80069e6:	2201      	movs	r2, #1
 80069e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80069ec:	3e01      	subs	r6, #1
 80069ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80069f0:	e776      	b.n	80068e0 <_dtoa_r+0x100>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e7b7      	b.n	8006966 <_dtoa_r+0x186>
 80069f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80069f8:	e7b6      	b.n	8006968 <_dtoa_r+0x188>
 80069fa:	9b00      	ldr	r3, [sp, #0]
 80069fc:	1bdb      	subs	r3, r3, r7
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	427b      	negs	r3, r7
 8006a02:	9308      	str	r3, [sp, #32]
 8006a04:	2300      	movs	r3, #0
 8006a06:	930d      	str	r3, [sp, #52]	@ 0x34
 8006a08:	e7c3      	b.n	8006992 <_dtoa_r+0x1b2>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a10:	eb07 0b03 	add.w	fp, r7, r3
 8006a14:	f10b 0301 	add.w	r3, fp, #1
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	9303      	str	r3, [sp, #12]
 8006a1c:	bfb8      	it	lt
 8006a1e:	2301      	movlt	r3, #1
 8006a20:	e006      	b.n	8006a30 <_dtoa_r+0x250>
 8006a22:	2301      	movs	r3, #1
 8006a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	dd28      	ble.n	8006a7e <_dtoa_r+0x29e>
 8006a2c:	469b      	mov	fp, r3
 8006a2e:	9303      	str	r3, [sp, #12]
 8006a30:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006a34:	2100      	movs	r1, #0
 8006a36:	2204      	movs	r2, #4
 8006a38:	f102 0514 	add.w	r5, r2, #20
 8006a3c:	429d      	cmp	r5, r3
 8006a3e:	d926      	bls.n	8006a8e <_dtoa_r+0x2ae>
 8006a40:	6041      	str	r1, [r0, #4]
 8006a42:	4648      	mov	r0, r9
 8006a44:	f000 fd9c 	bl	8007580 <_Balloc>
 8006a48:	4682      	mov	sl, r0
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d142      	bne.n	8006ad4 <_dtoa_r+0x2f4>
 8006a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ac8 <_dtoa_r+0x2e8>)
 8006a50:	4602      	mov	r2, r0
 8006a52:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a56:	e6da      	b.n	800680e <_dtoa_r+0x2e>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e7e3      	b.n	8006a24 <_dtoa_r+0x244>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	e7d5      	b.n	8006a0c <_dtoa_r+0x22c>
 8006a60:	2401      	movs	r4, #1
 8006a62:	2300      	movs	r3, #0
 8006a64:	9307      	str	r3, [sp, #28]
 8006a66:	9409      	str	r4, [sp, #36]	@ 0x24
 8006a68:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006a72:	2312      	movs	r3, #18
 8006a74:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a76:	e7db      	b.n	8006a30 <_dtoa_r+0x250>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a7c:	e7f4      	b.n	8006a68 <_dtoa_r+0x288>
 8006a7e:	f04f 0b01 	mov.w	fp, #1
 8006a82:	f8cd b00c 	str.w	fp, [sp, #12]
 8006a86:	465b      	mov	r3, fp
 8006a88:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006a8c:	e7d0      	b.n	8006a30 <_dtoa_r+0x250>
 8006a8e:	3101      	adds	r1, #1
 8006a90:	0052      	lsls	r2, r2, #1
 8006a92:	e7d1      	b.n	8006a38 <_dtoa_r+0x258>
 8006a94:	f3af 8000 	nop.w
 8006a98:	636f4361 	.word	0x636f4361
 8006a9c:	3fd287a7 	.word	0x3fd287a7
 8006aa0:	8b60c8b3 	.word	0x8b60c8b3
 8006aa4:	3fc68a28 	.word	0x3fc68a28
 8006aa8:	509f79fb 	.word	0x509f79fb
 8006aac:	3fd34413 	.word	0x3fd34413
 8006ab0:	08009579 	.word	0x08009579
 8006ab4:	08009590 	.word	0x08009590
 8006ab8:	7ff00000 	.word	0x7ff00000
 8006abc:	08009549 	.word	0x08009549
 8006ac0:	3ff80000 	.word	0x3ff80000
 8006ac4:	080096e0 	.word	0x080096e0
 8006ac8:	080095e8 	.word	0x080095e8
 8006acc:	08009575 	.word	0x08009575
 8006ad0:	08009548 	.word	0x08009548
 8006ad4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ad8:	6018      	str	r0, [r3, #0]
 8006ada:	9b03      	ldr	r3, [sp, #12]
 8006adc:	2b0e      	cmp	r3, #14
 8006ade:	f200 80a1 	bhi.w	8006c24 <_dtoa_r+0x444>
 8006ae2:	2c00      	cmp	r4, #0
 8006ae4:	f000 809e 	beq.w	8006c24 <_dtoa_r+0x444>
 8006ae8:	2f00      	cmp	r7, #0
 8006aea:	dd33      	ble.n	8006b54 <_dtoa_r+0x374>
 8006aec:	4b9c      	ldr	r3, [pc, #624]	@ (8006d60 <_dtoa_r+0x580>)
 8006aee:	f007 020f 	and.w	r2, r7, #15
 8006af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006af6:	ed93 7b00 	vldr	d7, [r3]
 8006afa:	05f8      	lsls	r0, r7, #23
 8006afc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006b00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006b04:	d516      	bpl.n	8006b34 <_dtoa_r+0x354>
 8006b06:	4b97      	ldr	r3, [pc, #604]	@ (8006d64 <_dtoa_r+0x584>)
 8006b08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b10:	f7f9 fea4 	bl	800085c <__aeabi_ddiv>
 8006b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b18:	f004 040f 	and.w	r4, r4, #15
 8006b1c:	2603      	movs	r6, #3
 8006b1e:	4d91      	ldr	r5, [pc, #580]	@ (8006d64 <_dtoa_r+0x584>)
 8006b20:	b954      	cbnz	r4, 8006b38 <_dtoa_r+0x358>
 8006b22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b2a:	f7f9 fe97 	bl	800085c <__aeabi_ddiv>
 8006b2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b32:	e028      	b.n	8006b86 <_dtoa_r+0x3a6>
 8006b34:	2602      	movs	r6, #2
 8006b36:	e7f2      	b.n	8006b1e <_dtoa_r+0x33e>
 8006b38:	07e1      	lsls	r1, r4, #31
 8006b3a:	d508      	bpl.n	8006b4e <_dtoa_r+0x36e>
 8006b3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b44:	f7f9 fd60 	bl	8000608 <__aeabi_dmul>
 8006b48:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b4c:	3601      	adds	r6, #1
 8006b4e:	1064      	asrs	r4, r4, #1
 8006b50:	3508      	adds	r5, #8
 8006b52:	e7e5      	b.n	8006b20 <_dtoa_r+0x340>
 8006b54:	f000 80af 	beq.w	8006cb6 <_dtoa_r+0x4d6>
 8006b58:	427c      	negs	r4, r7
 8006b5a:	4b81      	ldr	r3, [pc, #516]	@ (8006d60 <_dtoa_r+0x580>)
 8006b5c:	4d81      	ldr	r5, [pc, #516]	@ (8006d64 <_dtoa_r+0x584>)
 8006b5e:	f004 020f 	and.w	r2, r4, #15
 8006b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b6e:	f7f9 fd4b 	bl	8000608 <__aeabi_dmul>
 8006b72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b76:	1124      	asrs	r4, r4, #4
 8006b78:	2300      	movs	r3, #0
 8006b7a:	2602      	movs	r6, #2
 8006b7c:	2c00      	cmp	r4, #0
 8006b7e:	f040 808f 	bne.w	8006ca0 <_dtoa_r+0x4c0>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1d3      	bne.n	8006b2e <_dtoa_r+0x34e>
 8006b86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 8094 	beq.w	8006cba <_dtoa_r+0x4da>
 8006b92:	4b75      	ldr	r3, [pc, #468]	@ (8006d68 <_dtoa_r+0x588>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	4620      	mov	r0, r4
 8006b98:	4629      	mov	r1, r5
 8006b9a:	f7f9 ffa7 	bl	8000aec <__aeabi_dcmplt>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	f000 808b 	beq.w	8006cba <_dtoa_r+0x4da>
 8006ba4:	9b03      	ldr	r3, [sp, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 8087 	beq.w	8006cba <_dtoa_r+0x4da>
 8006bac:	f1bb 0f00 	cmp.w	fp, #0
 8006bb0:	dd34      	ble.n	8006c1c <_dtoa_r+0x43c>
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	4b6d      	ldr	r3, [pc, #436]	@ (8006d6c <_dtoa_r+0x58c>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	4629      	mov	r1, r5
 8006bba:	f7f9 fd25 	bl	8000608 <__aeabi_dmul>
 8006bbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bc2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006bc6:	3601      	adds	r6, #1
 8006bc8:	465c      	mov	r4, fp
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f7f9 fcb2 	bl	8000534 <__aeabi_i2d>
 8006bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bd4:	f7f9 fd18 	bl	8000608 <__aeabi_dmul>
 8006bd8:	4b65      	ldr	r3, [pc, #404]	@ (8006d70 <_dtoa_r+0x590>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f7f9 fb5e 	bl	800029c <__adddf3>
 8006be0:	4605      	mov	r5, r0
 8006be2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006be6:	2c00      	cmp	r4, #0
 8006be8:	d16a      	bne.n	8006cc0 <_dtoa_r+0x4e0>
 8006bea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bee:	4b61      	ldr	r3, [pc, #388]	@ (8006d74 <_dtoa_r+0x594>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f7f9 fb51 	bl	8000298 <__aeabi_dsub>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bfe:	462a      	mov	r2, r5
 8006c00:	4633      	mov	r3, r6
 8006c02:	f7f9 ff91 	bl	8000b28 <__aeabi_dcmpgt>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f040 8298 	bne.w	800713c <_dtoa_r+0x95c>
 8006c0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c10:	462a      	mov	r2, r5
 8006c12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006c16:	f7f9 ff69 	bl	8000aec <__aeabi_dcmplt>
 8006c1a:	bb38      	cbnz	r0, 8006c6c <_dtoa_r+0x48c>
 8006c1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006c20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f2c0 8157 	blt.w	8006eda <_dtoa_r+0x6fa>
 8006c2c:	2f0e      	cmp	r7, #14
 8006c2e:	f300 8154 	bgt.w	8006eda <_dtoa_r+0x6fa>
 8006c32:	4b4b      	ldr	r3, [pc, #300]	@ (8006d60 <_dtoa_r+0x580>)
 8006c34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c38:	ed93 7b00 	vldr	d7, [r3]
 8006c3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	ed8d 7b00 	vstr	d7, [sp]
 8006c44:	f280 80e5 	bge.w	8006e12 <_dtoa_r+0x632>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f300 80e1 	bgt.w	8006e12 <_dtoa_r+0x632>
 8006c50:	d10c      	bne.n	8006c6c <_dtoa_r+0x48c>
 8006c52:	4b48      	ldr	r3, [pc, #288]	@ (8006d74 <_dtoa_r+0x594>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	ec51 0b17 	vmov	r0, r1, d7
 8006c5a:	f7f9 fcd5 	bl	8000608 <__aeabi_dmul>
 8006c5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c62:	f7f9 ff57 	bl	8000b14 <__aeabi_dcmpge>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	f000 8266 	beq.w	8007138 <_dtoa_r+0x958>
 8006c6c:	2400      	movs	r4, #0
 8006c6e:	4625      	mov	r5, r4
 8006c70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c72:	4656      	mov	r6, sl
 8006c74:	ea6f 0803 	mvn.w	r8, r3
 8006c78:	2700      	movs	r7, #0
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	4648      	mov	r0, r9
 8006c7e:	f000 fcbf 	bl	8007600 <_Bfree>
 8006c82:	2d00      	cmp	r5, #0
 8006c84:	f000 80bd 	beq.w	8006e02 <_dtoa_r+0x622>
 8006c88:	b12f      	cbz	r7, 8006c96 <_dtoa_r+0x4b6>
 8006c8a:	42af      	cmp	r7, r5
 8006c8c:	d003      	beq.n	8006c96 <_dtoa_r+0x4b6>
 8006c8e:	4639      	mov	r1, r7
 8006c90:	4648      	mov	r0, r9
 8006c92:	f000 fcb5 	bl	8007600 <_Bfree>
 8006c96:	4629      	mov	r1, r5
 8006c98:	4648      	mov	r0, r9
 8006c9a:	f000 fcb1 	bl	8007600 <_Bfree>
 8006c9e:	e0b0      	b.n	8006e02 <_dtoa_r+0x622>
 8006ca0:	07e2      	lsls	r2, r4, #31
 8006ca2:	d505      	bpl.n	8006cb0 <_dtoa_r+0x4d0>
 8006ca4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ca8:	f7f9 fcae 	bl	8000608 <__aeabi_dmul>
 8006cac:	3601      	adds	r6, #1
 8006cae:	2301      	movs	r3, #1
 8006cb0:	1064      	asrs	r4, r4, #1
 8006cb2:	3508      	adds	r5, #8
 8006cb4:	e762      	b.n	8006b7c <_dtoa_r+0x39c>
 8006cb6:	2602      	movs	r6, #2
 8006cb8:	e765      	b.n	8006b86 <_dtoa_r+0x3a6>
 8006cba:	9c03      	ldr	r4, [sp, #12]
 8006cbc:	46b8      	mov	r8, r7
 8006cbe:	e784      	b.n	8006bca <_dtoa_r+0x3ea>
 8006cc0:	4b27      	ldr	r3, [pc, #156]	@ (8006d60 <_dtoa_r+0x580>)
 8006cc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006cc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ccc:	4454      	add	r4, sl
 8006cce:	2900      	cmp	r1, #0
 8006cd0:	d054      	beq.n	8006d7c <_dtoa_r+0x59c>
 8006cd2:	4929      	ldr	r1, [pc, #164]	@ (8006d78 <_dtoa_r+0x598>)
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	f7f9 fdc1 	bl	800085c <__aeabi_ddiv>
 8006cda:	4633      	mov	r3, r6
 8006cdc:	462a      	mov	r2, r5
 8006cde:	f7f9 fadb 	bl	8000298 <__aeabi_dsub>
 8006ce2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ce6:	4656      	mov	r6, sl
 8006ce8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cec:	f7f9 ff3c 	bl	8000b68 <__aeabi_d2iz>
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	f7f9 fc1f 	bl	8000534 <__aeabi_i2d>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cfe:	f7f9 facb 	bl	8000298 <__aeabi_dsub>
 8006d02:	3530      	adds	r5, #48	@ 0x30
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d0c:	f806 5b01 	strb.w	r5, [r6], #1
 8006d10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d14:	f7f9 feea 	bl	8000aec <__aeabi_dcmplt>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d172      	bne.n	8006e02 <_dtoa_r+0x622>
 8006d1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d20:	4911      	ldr	r1, [pc, #68]	@ (8006d68 <_dtoa_r+0x588>)
 8006d22:	2000      	movs	r0, #0
 8006d24:	f7f9 fab8 	bl	8000298 <__aeabi_dsub>
 8006d28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d2c:	f7f9 fede 	bl	8000aec <__aeabi_dcmplt>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f040 80b4 	bne.w	8006e9e <_dtoa_r+0x6be>
 8006d36:	42a6      	cmp	r6, r4
 8006d38:	f43f af70 	beq.w	8006c1c <_dtoa_r+0x43c>
 8006d3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d40:	4b0a      	ldr	r3, [pc, #40]	@ (8006d6c <_dtoa_r+0x58c>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	f7f9 fc60 	bl	8000608 <__aeabi_dmul>
 8006d48:	4b08      	ldr	r3, [pc, #32]	@ (8006d6c <_dtoa_r+0x58c>)
 8006d4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d4e:	2200      	movs	r2, #0
 8006d50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d54:	f7f9 fc58 	bl	8000608 <__aeabi_dmul>
 8006d58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d5c:	e7c4      	b.n	8006ce8 <_dtoa_r+0x508>
 8006d5e:	bf00      	nop
 8006d60:	080096e0 	.word	0x080096e0
 8006d64:	080096b8 	.word	0x080096b8
 8006d68:	3ff00000 	.word	0x3ff00000
 8006d6c:	40240000 	.word	0x40240000
 8006d70:	401c0000 	.word	0x401c0000
 8006d74:	40140000 	.word	0x40140000
 8006d78:	3fe00000 	.word	0x3fe00000
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f7f9 fc42 	bl	8000608 <__aeabi_dmul>
 8006d84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d88:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006d8a:	4656      	mov	r6, sl
 8006d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d90:	f7f9 feea 	bl	8000b68 <__aeabi_d2iz>
 8006d94:	4605      	mov	r5, r0
 8006d96:	f7f9 fbcd 	bl	8000534 <__aeabi_i2d>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006da2:	f7f9 fa79 	bl	8000298 <__aeabi_dsub>
 8006da6:	3530      	adds	r5, #48	@ 0x30
 8006da8:	f806 5b01 	strb.w	r5, [r6], #1
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	42a6      	cmp	r6, r4
 8006db2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	d124      	bne.n	8006e06 <_dtoa_r+0x626>
 8006dbc:	4baf      	ldr	r3, [pc, #700]	@ (800707c <_dtoa_r+0x89c>)
 8006dbe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006dc2:	f7f9 fa6b 	bl	800029c <__adddf3>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dce:	f7f9 feab 	bl	8000b28 <__aeabi_dcmpgt>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d163      	bne.n	8006e9e <_dtoa_r+0x6be>
 8006dd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006dda:	49a8      	ldr	r1, [pc, #672]	@ (800707c <_dtoa_r+0x89c>)
 8006ddc:	2000      	movs	r0, #0
 8006dde:	f7f9 fa5b 	bl	8000298 <__aeabi_dsub>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dea:	f7f9 fe7f 	bl	8000aec <__aeabi_dcmplt>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	f43f af14 	beq.w	8006c1c <_dtoa_r+0x43c>
 8006df4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006df6:	1e73      	subs	r3, r6, #1
 8006df8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006dfe:	2b30      	cmp	r3, #48	@ 0x30
 8006e00:	d0f8      	beq.n	8006df4 <_dtoa_r+0x614>
 8006e02:	4647      	mov	r7, r8
 8006e04:	e03b      	b.n	8006e7e <_dtoa_r+0x69e>
 8006e06:	4b9e      	ldr	r3, [pc, #632]	@ (8007080 <_dtoa_r+0x8a0>)
 8006e08:	f7f9 fbfe 	bl	8000608 <__aeabi_dmul>
 8006e0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e10:	e7bc      	b.n	8006d8c <_dtoa_r+0x5ac>
 8006e12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006e16:	4656      	mov	r6, sl
 8006e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 fd1c 	bl	800085c <__aeabi_ddiv>
 8006e24:	f7f9 fea0 	bl	8000b68 <__aeabi_d2iz>
 8006e28:	4680      	mov	r8, r0
 8006e2a:	f7f9 fb83 	bl	8000534 <__aeabi_i2d>
 8006e2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e32:	f7f9 fbe9 	bl	8000608 <__aeabi_dmul>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e42:	f7f9 fa29 	bl	8000298 <__aeabi_dsub>
 8006e46:	f806 4b01 	strb.w	r4, [r6], #1
 8006e4a:	9d03      	ldr	r5, [sp, #12]
 8006e4c:	eba6 040a 	sub.w	r4, r6, sl
 8006e50:	42a5      	cmp	r5, r4
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	d133      	bne.n	8006ec0 <_dtoa_r+0x6e0>
 8006e58:	f7f9 fa20 	bl	800029c <__adddf3>
 8006e5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e60:	4604      	mov	r4, r0
 8006e62:	460d      	mov	r5, r1
 8006e64:	f7f9 fe60 	bl	8000b28 <__aeabi_dcmpgt>
 8006e68:	b9c0      	cbnz	r0, 8006e9c <_dtoa_r+0x6bc>
 8006e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e6e:	4620      	mov	r0, r4
 8006e70:	4629      	mov	r1, r5
 8006e72:	f7f9 fe31 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e76:	b110      	cbz	r0, 8006e7e <_dtoa_r+0x69e>
 8006e78:	f018 0f01 	tst.w	r8, #1
 8006e7c:	d10e      	bne.n	8006e9c <_dtoa_r+0x6bc>
 8006e7e:	9902      	ldr	r1, [sp, #8]
 8006e80:	4648      	mov	r0, r9
 8006e82:	f000 fbbd 	bl	8007600 <_Bfree>
 8006e86:	2300      	movs	r3, #0
 8006e88:	7033      	strb	r3, [r6, #0]
 8006e8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e8c:	3701      	adds	r7, #1
 8006e8e:	601f      	str	r7, [r3, #0]
 8006e90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 824b 	beq.w	800732e <_dtoa_r+0xb4e>
 8006e98:	601e      	str	r6, [r3, #0]
 8006e9a:	e248      	b.n	800732e <_dtoa_r+0xb4e>
 8006e9c:	46b8      	mov	r8, r7
 8006e9e:	4633      	mov	r3, r6
 8006ea0:	461e      	mov	r6, r3
 8006ea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ea6:	2a39      	cmp	r2, #57	@ 0x39
 8006ea8:	d106      	bne.n	8006eb8 <_dtoa_r+0x6d8>
 8006eaa:	459a      	cmp	sl, r3
 8006eac:	d1f8      	bne.n	8006ea0 <_dtoa_r+0x6c0>
 8006eae:	2230      	movs	r2, #48	@ 0x30
 8006eb0:	f108 0801 	add.w	r8, r8, #1
 8006eb4:	f88a 2000 	strb.w	r2, [sl]
 8006eb8:	781a      	ldrb	r2, [r3, #0]
 8006eba:	3201      	adds	r2, #1
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	e7a0      	b.n	8006e02 <_dtoa_r+0x622>
 8006ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8007080 <_dtoa_r+0x8a0>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f7f9 fba0 	bl	8000608 <__aeabi_dmul>
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2300      	movs	r3, #0
 8006ecc:	4604      	mov	r4, r0
 8006ece:	460d      	mov	r5, r1
 8006ed0:	f7f9 fe02 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d09f      	beq.n	8006e18 <_dtoa_r+0x638>
 8006ed8:	e7d1      	b.n	8006e7e <_dtoa_r+0x69e>
 8006eda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006edc:	2a00      	cmp	r2, #0
 8006ede:	f000 80ea 	beq.w	80070b6 <_dtoa_r+0x8d6>
 8006ee2:	9a07      	ldr	r2, [sp, #28]
 8006ee4:	2a01      	cmp	r2, #1
 8006ee6:	f300 80cd 	bgt.w	8007084 <_dtoa_r+0x8a4>
 8006eea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006eec:	2a00      	cmp	r2, #0
 8006eee:	f000 80c1 	beq.w	8007074 <_dtoa_r+0x894>
 8006ef2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ef6:	9c08      	ldr	r4, [sp, #32]
 8006ef8:	9e00      	ldr	r6, [sp, #0]
 8006efa:	9a00      	ldr	r2, [sp, #0]
 8006efc:	441a      	add	r2, r3
 8006efe:	9200      	str	r2, [sp, #0]
 8006f00:	9a06      	ldr	r2, [sp, #24]
 8006f02:	2101      	movs	r1, #1
 8006f04:	441a      	add	r2, r3
 8006f06:	4648      	mov	r0, r9
 8006f08:	9206      	str	r2, [sp, #24]
 8006f0a:	f000 fc2d 	bl	8007768 <__i2b>
 8006f0e:	4605      	mov	r5, r0
 8006f10:	b166      	cbz	r6, 8006f2c <_dtoa_r+0x74c>
 8006f12:	9b06      	ldr	r3, [sp, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	dd09      	ble.n	8006f2c <_dtoa_r+0x74c>
 8006f18:	42b3      	cmp	r3, r6
 8006f1a:	9a00      	ldr	r2, [sp, #0]
 8006f1c:	bfa8      	it	ge
 8006f1e:	4633      	movge	r3, r6
 8006f20:	1ad2      	subs	r2, r2, r3
 8006f22:	9200      	str	r2, [sp, #0]
 8006f24:	9a06      	ldr	r2, [sp, #24]
 8006f26:	1af6      	subs	r6, r6, r3
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	9306      	str	r3, [sp, #24]
 8006f2c:	9b08      	ldr	r3, [sp, #32]
 8006f2e:	b30b      	cbz	r3, 8006f74 <_dtoa_r+0x794>
 8006f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 80c6 	beq.w	80070c4 <_dtoa_r+0x8e4>
 8006f38:	2c00      	cmp	r4, #0
 8006f3a:	f000 80c0 	beq.w	80070be <_dtoa_r+0x8de>
 8006f3e:	4629      	mov	r1, r5
 8006f40:	4622      	mov	r2, r4
 8006f42:	4648      	mov	r0, r9
 8006f44:	f000 fcc8 	bl	80078d8 <__pow5mult>
 8006f48:	9a02      	ldr	r2, [sp, #8]
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	4648      	mov	r0, r9
 8006f50:	f000 fc20 	bl	8007794 <__multiply>
 8006f54:	9902      	ldr	r1, [sp, #8]
 8006f56:	4680      	mov	r8, r0
 8006f58:	4648      	mov	r0, r9
 8006f5a:	f000 fb51 	bl	8007600 <_Bfree>
 8006f5e:	9b08      	ldr	r3, [sp, #32]
 8006f60:	1b1b      	subs	r3, r3, r4
 8006f62:	9308      	str	r3, [sp, #32]
 8006f64:	f000 80b1 	beq.w	80070ca <_dtoa_r+0x8ea>
 8006f68:	9a08      	ldr	r2, [sp, #32]
 8006f6a:	4641      	mov	r1, r8
 8006f6c:	4648      	mov	r0, r9
 8006f6e:	f000 fcb3 	bl	80078d8 <__pow5mult>
 8006f72:	9002      	str	r0, [sp, #8]
 8006f74:	2101      	movs	r1, #1
 8006f76:	4648      	mov	r0, r9
 8006f78:	f000 fbf6 	bl	8007768 <__i2b>
 8006f7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f7e:	4604      	mov	r4, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 81d8 	beq.w	8007336 <_dtoa_r+0xb56>
 8006f86:	461a      	mov	r2, r3
 8006f88:	4601      	mov	r1, r0
 8006f8a:	4648      	mov	r0, r9
 8006f8c:	f000 fca4 	bl	80078d8 <__pow5mult>
 8006f90:	9b07      	ldr	r3, [sp, #28]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	4604      	mov	r4, r0
 8006f96:	f300 809f 	bgt.w	80070d8 <_dtoa_r+0x8f8>
 8006f9a:	9b04      	ldr	r3, [sp, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f040 8097 	bne.w	80070d0 <_dtoa_r+0x8f0>
 8006fa2:	9b05      	ldr	r3, [sp, #20]
 8006fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f040 8093 	bne.w	80070d4 <_dtoa_r+0x8f4>
 8006fae:	9b05      	ldr	r3, [sp, #20]
 8006fb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fb4:	0d1b      	lsrs	r3, r3, #20
 8006fb6:	051b      	lsls	r3, r3, #20
 8006fb8:	b133      	cbz	r3, 8006fc8 <_dtoa_r+0x7e8>
 8006fba:	9b00      	ldr	r3, [sp, #0]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	9b06      	ldr	r3, [sp, #24]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	9306      	str	r3, [sp, #24]
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	9308      	str	r3, [sp, #32]
 8006fca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 81b8 	beq.w	8007342 <_dtoa_r+0xb62>
 8006fd2:	6923      	ldr	r3, [r4, #16]
 8006fd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fd8:	6918      	ldr	r0, [r3, #16]
 8006fda:	f000 fb79 	bl	80076d0 <__hi0bits>
 8006fde:	f1c0 0020 	rsb	r0, r0, #32
 8006fe2:	9b06      	ldr	r3, [sp, #24]
 8006fe4:	4418      	add	r0, r3
 8006fe6:	f010 001f 	ands.w	r0, r0, #31
 8006fea:	f000 8082 	beq.w	80070f2 <_dtoa_r+0x912>
 8006fee:	f1c0 0320 	rsb	r3, r0, #32
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	dd73      	ble.n	80070de <_dtoa_r+0x8fe>
 8006ff6:	9b00      	ldr	r3, [sp, #0]
 8006ff8:	f1c0 001c 	rsb	r0, r0, #28
 8006ffc:	4403      	add	r3, r0
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	9b06      	ldr	r3, [sp, #24]
 8007002:	4403      	add	r3, r0
 8007004:	4406      	add	r6, r0
 8007006:	9306      	str	r3, [sp, #24]
 8007008:	9b00      	ldr	r3, [sp, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	dd05      	ble.n	800701a <_dtoa_r+0x83a>
 800700e:	9902      	ldr	r1, [sp, #8]
 8007010:	461a      	mov	r2, r3
 8007012:	4648      	mov	r0, r9
 8007014:	f000 fcba 	bl	800798c <__lshift>
 8007018:	9002      	str	r0, [sp, #8]
 800701a:	9b06      	ldr	r3, [sp, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	dd05      	ble.n	800702c <_dtoa_r+0x84c>
 8007020:	4621      	mov	r1, r4
 8007022:	461a      	mov	r2, r3
 8007024:	4648      	mov	r0, r9
 8007026:	f000 fcb1 	bl	800798c <__lshift>
 800702a:	4604      	mov	r4, r0
 800702c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	d061      	beq.n	80070f6 <_dtoa_r+0x916>
 8007032:	9802      	ldr	r0, [sp, #8]
 8007034:	4621      	mov	r1, r4
 8007036:	f000 fd15 	bl	8007a64 <__mcmp>
 800703a:	2800      	cmp	r0, #0
 800703c:	da5b      	bge.n	80070f6 <_dtoa_r+0x916>
 800703e:	2300      	movs	r3, #0
 8007040:	9902      	ldr	r1, [sp, #8]
 8007042:	220a      	movs	r2, #10
 8007044:	4648      	mov	r0, r9
 8007046:	f000 fafd 	bl	8007644 <__multadd>
 800704a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800704c:	9002      	str	r0, [sp, #8]
 800704e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 8177 	beq.w	8007346 <_dtoa_r+0xb66>
 8007058:	4629      	mov	r1, r5
 800705a:	2300      	movs	r3, #0
 800705c:	220a      	movs	r2, #10
 800705e:	4648      	mov	r0, r9
 8007060:	f000 faf0 	bl	8007644 <__multadd>
 8007064:	f1bb 0f00 	cmp.w	fp, #0
 8007068:	4605      	mov	r5, r0
 800706a:	dc6f      	bgt.n	800714c <_dtoa_r+0x96c>
 800706c:	9b07      	ldr	r3, [sp, #28]
 800706e:	2b02      	cmp	r3, #2
 8007070:	dc49      	bgt.n	8007106 <_dtoa_r+0x926>
 8007072:	e06b      	b.n	800714c <_dtoa_r+0x96c>
 8007074:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007076:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800707a:	e73c      	b.n	8006ef6 <_dtoa_r+0x716>
 800707c:	3fe00000 	.word	0x3fe00000
 8007080:	40240000 	.word	0x40240000
 8007084:	9b03      	ldr	r3, [sp, #12]
 8007086:	1e5c      	subs	r4, r3, #1
 8007088:	9b08      	ldr	r3, [sp, #32]
 800708a:	42a3      	cmp	r3, r4
 800708c:	db09      	blt.n	80070a2 <_dtoa_r+0x8c2>
 800708e:	1b1c      	subs	r4, r3, r4
 8007090:	9b03      	ldr	r3, [sp, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	f6bf af30 	bge.w	8006ef8 <_dtoa_r+0x718>
 8007098:	9b00      	ldr	r3, [sp, #0]
 800709a:	9a03      	ldr	r2, [sp, #12]
 800709c:	1a9e      	subs	r6, r3, r2
 800709e:	2300      	movs	r3, #0
 80070a0:	e72b      	b.n	8006efa <_dtoa_r+0x71a>
 80070a2:	9b08      	ldr	r3, [sp, #32]
 80070a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070a6:	9408      	str	r4, [sp, #32]
 80070a8:	1ae3      	subs	r3, r4, r3
 80070aa:	441a      	add	r2, r3
 80070ac:	9e00      	ldr	r6, [sp, #0]
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80070b2:	2400      	movs	r4, #0
 80070b4:	e721      	b.n	8006efa <_dtoa_r+0x71a>
 80070b6:	9c08      	ldr	r4, [sp, #32]
 80070b8:	9e00      	ldr	r6, [sp, #0]
 80070ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80070bc:	e728      	b.n	8006f10 <_dtoa_r+0x730>
 80070be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80070c2:	e751      	b.n	8006f68 <_dtoa_r+0x788>
 80070c4:	9a08      	ldr	r2, [sp, #32]
 80070c6:	9902      	ldr	r1, [sp, #8]
 80070c8:	e750      	b.n	8006f6c <_dtoa_r+0x78c>
 80070ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80070ce:	e751      	b.n	8006f74 <_dtoa_r+0x794>
 80070d0:	2300      	movs	r3, #0
 80070d2:	e779      	b.n	8006fc8 <_dtoa_r+0x7e8>
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	e777      	b.n	8006fc8 <_dtoa_r+0x7e8>
 80070d8:	2300      	movs	r3, #0
 80070da:	9308      	str	r3, [sp, #32]
 80070dc:	e779      	b.n	8006fd2 <_dtoa_r+0x7f2>
 80070de:	d093      	beq.n	8007008 <_dtoa_r+0x828>
 80070e0:	9a00      	ldr	r2, [sp, #0]
 80070e2:	331c      	adds	r3, #28
 80070e4:	441a      	add	r2, r3
 80070e6:	9200      	str	r2, [sp, #0]
 80070e8:	9a06      	ldr	r2, [sp, #24]
 80070ea:	441a      	add	r2, r3
 80070ec:	441e      	add	r6, r3
 80070ee:	9206      	str	r2, [sp, #24]
 80070f0:	e78a      	b.n	8007008 <_dtoa_r+0x828>
 80070f2:	4603      	mov	r3, r0
 80070f4:	e7f4      	b.n	80070e0 <_dtoa_r+0x900>
 80070f6:	9b03      	ldr	r3, [sp, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	46b8      	mov	r8, r7
 80070fc:	dc20      	bgt.n	8007140 <_dtoa_r+0x960>
 80070fe:	469b      	mov	fp, r3
 8007100:	9b07      	ldr	r3, [sp, #28]
 8007102:	2b02      	cmp	r3, #2
 8007104:	dd1e      	ble.n	8007144 <_dtoa_r+0x964>
 8007106:	f1bb 0f00 	cmp.w	fp, #0
 800710a:	f47f adb1 	bne.w	8006c70 <_dtoa_r+0x490>
 800710e:	4621      	mov	r1, r4
 8007110:	465b      	mov	r3, fp
 8007112:	2205      	movs	r2, #5
 8007114:	4648      	mov	r0, r9
 8007116:	f000 fa95 	bl	8007644 <__multadd>
 800711a:	4601      	mov	r1, r0
 800711c:	4604      	mov	r4, r0
 800711e:	9802      	ldr	r0, [sp, #8]
 8007120:	f000 fca0 	bl	8007a64 <__mcmp>
 8007124:	2800      	cmp	r0, #0
 8007126:	f77f ada3 	ble.w	8006c70 <_dtoa_r+0x490>
 800712a:	4656      	mov	r6, sl
 800712c:	2331      	movs	r3, #49	@ 0x31
 800712e:	f806 3b01 	strb.w	r3, [r6], #1
 8007132:	f108 0801 	add.w	r8, r8, #1
 8007136:	e59f      	b.n	8006c78 <_dtoa_r+0x498>
 8007138:	9c03      	ldr	r4, [sp, #12]
 800713a:	46b8      	mov	r8, r7
 800713c:	4625      	mov	r5, r4
 800713e:	e7f4      	b.n	800712a <_dtoa_r+0x94a>
 8007140:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 8101 	beq.w	800734e <_dtoa_r+0xb6e>
 800714c:	2e00      	cmp	r6, #0
 800714e:	dd05      	ble.n	800715c <_dtoa_r+0x97c>
 8007150:	4629      	mov	r1, r5
 8007152:	4632      	mov	r2, r6
 8007154:	4648      	mov	r0, r9
 8007156:	f000 fc19 	bl	800798c <__lshift>
 800715a:	4605      	mov	r5, r0
 800715c:	9b08      	ldr	r3, [sp, #32]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d05c      	beq.n	800721c <_dtoa_r+0xa3c>
 8007162:	6869      	ldr	r1, [r5, #4]
 8007164:	4648      	mov	r0, r9
 8007166:	f000 fa0b 	bl	8007580 <_Balloc>
 800716a:	4606      	mov	r6, r0
 800716c:	b928      	cbnz	r0, 800717a <_dtoa_r+0x99a>
 800716e:	4b82      	ldr	r3, [pc, #520]	@ (8007378 <_dtoa_r+0xb98>)
 8007170:	4602      	mov	r2, r0
 8007172:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007176:	f7ff bb4a 	b.w	800680e <_dtoa_r+0x2e>
 800717a:	692a      	ldr	r2, [r5, #16]
 800717c:	3202      	adds	r2, #2
 800717e:	0092      	lsls	r2, r2, #2
 8007180:	f105 010c 	add.w	r1, r5, #12
 8007184:	300c      	adds	r0, #12
 8007186:	f000 fe31 	bl	8007dec <memcpy>
 800718a:	2201      	movs	r2, #1
 800718c:	4631      	mov	r1, r6
 800718e:	4648      	mov	r0, r9
 8007190:	f000 fbfc 	bl	800798c <__lshift>
 8007194:	f10a 0301 	add.w	r3, sl, #1
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	eb0a 030b 	add.w	r3, sl, fp
 800719e:	9308      	str	r3, [sp, #32]
 80071a0:	9b04      	ldr	r3, [sp, #16]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	462f      	mov	r7, r5
 80071a8:	9306      	str	r3, [sp, #24]
 80071aa:	4605      	mov	r5, r0
 80071ac:	9b00      	ldr	r3, [sp, #0]
 80071ae:	9802      	ldr	r0, [sp, #8]
 80071b0:	4621      	mov	r1, r4
 80071b2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80071b6:	f7ff fa88 	bl	80066ca <quorem>
 80071ba:	4603      	mov	r3, r0
 80071bc:	3330      	adds	r3, #48	@ 0x30
 80071be:	9003      	str	r0, [sp, #12]
 80071c0:	4639      	mov	r1, r7
 80071c2:	9802      	ldr	r0, [sp, #8]
 80071c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071c6:	f000 fc4d 	bl	8007a64 <__mcmp>
 80071ca:	462a      	mov	r2, r5
 80071cc:	9004      	str	r0, [sp, #16]
 80071ce:	4621      	mov	r1, r4
 80071d0:	4648      	mov	r0, r9
 80071d2:	f000 fc63 	bl	8007a9c <__mdiff>
 80071d6:	68c2      	ldr	r2, [r0, #12]
 80071d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071da:	4606      	mov	r6, r0
 80071dc:	bb02      	cbnz	r2, 8007220 <_dtoa_r+0xa40>
 80071de:	4601      	mov	r1, r0
 80071e0:	9802      	ldr	r0, [sp, #8]
 80071e2:	f000 fc3f 	bl	8007a64 <__mcmp>
 80071e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e8:	4602      	mov	r2, r0
 80071ea:	4631      	mov	r1, r6
 80071ec:	4648      	mov	r0, r9
 80071ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80071f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80071f2:	f000 fa05 	bl	8007600 <_Bfree>
 80071f6:	9b07      	ldr	r3, [sp, #28]
 80071f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071fa:	9e00      	ldr	r6, [sp, #0]
 80071fc:	ea42 0103 	orr.w	r1, r2, r3
 8007200:	9b06      	ldr	r3, [sp, #24]
 8007202:	4319      	orrs	r1, r3
 8007204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007206:	d10d      	bne.n	8007224 <_dtoa_r+0xa44>
 8007208:	2b39      	cmp	r3, #57	@ 0x39
 800720a:	d027      	beq.n	800725c <_dtoa_r+0xa7c>
 800720c:	9a04      	ldr	r2, [sp, #16]
 800720e:	2a00      	cmp	r2, #0
 8007210:	dd01      	ble.n	8007216 <_dtoa_r+0xa36>
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	3331      	adds	r3, #49	@ 0x31
 8007216:	f88b 3000 	strb.w	r3, [fp]
 800721a:	e52e      	b.n	8006c7a <_dtoa_r+0x49a>
 800721c:	4628      	mov	r0, r5
 800721e:	e7b9      	b.n	8007194 <_dtoa_r+0x9b4>
 8007220:	2201      	movs	r2, #1
 8007222:	e7e2      	b.n	80071ea <_dtoa_r+0xa0a>
 8007224:	9904      	ldr	r1, [sp, #16]
 8007226:	2900      	cmp	r1, #0
 8007228:	db04      	blt.n	8007234 <_dtoa_r+0xa54>
 800722a:	9807      	ldr	r0, [sp, #28]
 800722c:	4301      	orrs	r1, r0
 800722e:	9806      	ldr	r0, [sp, #24]
 8007230:	4301      	orrs	r1, r0
 8007232:	d120      	bne.n	8007276 <_dtoa_r+0xa96>
 8007234:	2a00      	cmp	r2, #0
 8007236:	ddee      	ble.n	8007216 <_dtoa_r+0xa36>
 8007238:	9902      	ldr	r1, [sp, #8]
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	2201      	movs	r2, #1
 800723e:	4648      	mov	r0, r9
 8007240:	f000 fba4 	bl	800798c <__lshift>
 8007244:	4621      	mov	r1, r4
 8007246:	9002      	str	r0, [sp, #8]
 8007248:	f000 fc0c 	bl	8007a64 <__mcmp>
 800724c:	2800      	cmp	r0, #0
 800724e:	9b00      	ldr	r3, [sp, #0]
 8007250:	dc02      	bgt.n	8007258 <_dtoa_r+0xa78>
 8007252:	d1e0      	bne.n	8007216 <_dtoa_r+0xa36>
 8007254:	07da      	lsls	r2, r3, #31
 8007256:	d5de      	bpl.n	8007216 <_dtoa_r+0xa36>
 8007258:	2b39      	cmp	r3, #57	@ 0x39
 800725a:	d1da      	bne.n	8007212 <_dtoa_r+0xa32>
 800725c:	2339      	movs	r3, #57	@ 0x39
 800725e:	f88b 3000 	strb.w	r3, [fp]
 8007262:	4633      	mov	r3, r6
 8007264:	461e      	mov	r6, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800726c:	2a39      	cmp	r2, #57	@ 0x39
 800726e:	d04e      	beq.n	800730e <_dtoa_r+0xb2e>
 8007270:	3201      	adds	r2, #1
 8007272:	701a      	strb	r2, [r3, #0]
 8007274:	e501      	b.n	8006c7a <_dtoa_r+0x49a>
 8007276:	2a00      	cmp	r2, #0
 8007278:	dd03      	ble.n	8007282 <_dtoa_r+0xaa2>
 800727a:	2b39      	cmp	r3, #57	@ 0x39
 800727c:	d0ee      	beq.n	800725c <_dtoa_r+0xa7c>
 800727e:	3301      	adds	r3, #1
 8007280:	e7c9      	b.n	8007216 <_dtoa_r+0xa36>
 8007282:	9a00      	ldr	r2, [sp, #0]
 8007284:	9908      	ldr	r1, [sp, #32]
 8007286:	f802 3c01 	strb.w	r3, [r2, #-1]
 800728a:	428a      	cmp	r2, r1
 800728c:	d028      	beq.n	80072e0 <_dtoa_r+0xb00>
 800728e:	9902      	ldr	r1, [sp, #8]
 8007290:	2300      	movs	r3, #0
 8007292:	220a      	movs	r2, #10
 8007294:	4648      	mov	r0, r9
 8007296:	f000 f9d5 	bl	8007644 <__multadd>
 800729a:	42af      	cmp	r7, r5
 800729c:	9002      	str	r0, [sp, #8]
 800729e:	f04f 0300 	mov.w	r3, #0
 80072a2:	f04f 020a 	mov.w	r2, #10
 80072a6:	4639      	mov	r1, r7
 80072a8:	4648      	mov	r0, r9
 80072aa:	d107      	bne.n	80072bc <_dtoa_r+0xadc>
 80072ac:	f000 f9ca 	bl	8007644 <__multadd>
 80072b0:	4607      	mov	r7, r0
 80072b2:	4605      	mov	r5, r0
 80072b4:	9b00      	ldr	r3, [sp, #0]
 80072b6:	3301      	adds	r3, #1
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	e777      	b.n	80071ac <_dtoa_r+0x9cc>
 80072bc:	f000 f9c2 	bl	8007644 <__multadd>
 80072c0:	4629      	mov	r1, r5
 80072c2:	4607      	mov	r7, r0
 80072c4:	2300      	movs	r3, #0
 80072c6:	220a      	movs	r2, #10
 80072c8:	4648      	mov	r0, r9
 80072ca:	f000 f9bb 	bl	8007644 <__multadd>
 80072ce:	4605      	mov	r5, r0
 80072d0:	e7f0      	b.n	80072b4 <_dtoa_r+0xad4>
 80072d2:	f1bb 0f00 	cmp.w	fp, #0
 80072d6:	bfcc      	ite	gt
 80072d8:	465e      	movgt	r6, fp
 80072da:	2601      	movle	r6, #1
 80072dc:	4456      	add	r6, sl
 80072de:	2700      	movs	r7, #0
 80072e0:	9902      	ldr	r1, [sp, #8]
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	2201      	movs	r2, #1
 80072e6:	4648      	mov	r0, r9
 80072e8:	f000 fb50 	bl	800798c <__lshift>
 80072ec:	4621      	mov	r1, r4
 80072ee:	9002      	str	r0, [sp, #8]
 80072f0:	f000 fbb8 	bl	8007a64 <__mcmp>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	dcb4      	bgt.n	8007262 <_dtoa_r+0xa82>
 80072f8:	d102      	bne.n	8007300 <_dtoa_r+0xb20>
 80072fa:	9b00      	ldr	r3, [sp, #0]
 80072fc:	07db      	lsls	r3, r3, #31
 80072fe:	d4b0      	bmi.n	8007262 <_dtoa_r+0xa82>
 8007300:	4633      	mov	r3, r6
 8007302:	461e      	mov	r6, r3
 8007304:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007308:	2a30      	cmp	r2, #48	@ 0x30
 800730a:	d0fa      	beq.n	8007302 <_dtoa_r+0xb22>
 800730c:	e4b5      	b.n	8006c7a <_dtoa_r+0x49a>
 800730e:	459a      	cmp	sl, r3
 8007310:	d1a8      	bne.n	8007264 <_dtoa_r+0xa84>
 8007312:	2331      	movs	r3, #49	@ 0x31
 8007314:	f108 0801 	add.w	r8, r8, #1
 8007318:	f88a 3000 	strb.w	r3, [sl]
 800731c:	e4ad      	b.n	8006c7a <_dtoa_r+0x49a>
 800731e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007320:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800737c <_dtoa_r+0xb9c>
 8007324:	b11b      	cbz	r3, 800732e <_dtoa_r+0xb4e>
 8007326:	f10a 0308 	add.w	r3, sl, #8
 800732a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	4650      	mov	r0, sl
 8007330:	b017      	add	sp, #92	@ 0x5c
 8007332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007336:	9b07      	ldr	r3, [sp, #28]
 8007338:	2b01      	cmp	r3, #1
 800733a:	f77f ae2e 	ble.w	8006f9a <_dtoa_r+0x7ba>
 800733e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007340:	9308      	str	r3, [sp, #32]
 8007342:	2001      	movs	r0, #1
 8007344:	e64d      	b.n	8006fe2 <_dtoa_r+0x802>
 8007346:	f1bb 0f00 	cmp.w	fp, #0
 800734a:	f77f aed9 	ble.w	8007100 <_dtoa_r+0x920>
 800734e:	4656      	mov	r6, sl
 8007350:	9802      	ldr	r0, [sp, #8]
 8007352:	4621      	mov	r1, r4
 8007354:	f7ff f9b9 	bl	80066ca <quorem>
 8007358:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800735c:	f806 3b01 	strb.w	r3, [r6], #1
 8007360:	eba6 020a 	sub.w	r2, r6, sl
 8007364:	4593      	cmp	fp, r2
 8007366:	ddb4      	ble.n	80072d2 <_dtoa_r+0xaf2>
 8007368:	9902      	ldr	r1, [sp, #8]
 800736a:	2300      	movs	r3, #0
 800736c:	220a      	movs	r2, #10
 800736e:	4648      	mov	r0, r9
 8007370:	f000 f968 	bl	8007644 <__multadd>
 8007374:	9002      	str	r0, [sp, #8]
 8007376:	e7eb      	b.n	8007350 <_dtoa_r+0xb70>
 8007378:	080095e8 	.word	0x080095e8
 800737c:	0800956c 	.word	0x0800956c

08007380 <_free_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4605      	mov	r5, r0
 8007384:	2900      	cmp	r1, #0
 8007386:	d041      	beq.n	800740c <_free_r+0x8c>
 8007388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800738c:	1f0c      	subs	r4, r1, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	bfb8      	it	lt
 8007392:	18e4      	addlt	r4, r4, r3
 8007394:	f000 f8e8 	bl	8007568 <__malloc_lock>
 8007398:	4a1d      	ldr	r2, [pc, #116]	@ (8007410 <_free_r+0x90>)
 800739a:	6813      	ldr	r3, [r2, #0]
 800739c:	b933      	cbnz	r3, 80073ac <_free_r+0x2c>
 800739e:	6063      	str	r3, [r4, #4]
 80073a0:	6014      	str	r4, [r2, #0]
 80073a2:	4628      	mov	r0, r5
 80073a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073a8:	f000 b8e4 	b.w	8007574 <__malloc_unlock>
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	d908      	bls.n	80073c2 <_free_r+0x42>
 80073b0:	6820      	ldr	r0, [r4, #0]
 80073b2:	1821      	adds	r1, r4, r0
 80073b4:	428b      	cmp	r3, r1
 80073b6:	bf01      	itttt	eq
 80073b8:	6819      	ldreq	r1, [r3, #0]
 80073ba:	685b      	ldreq	r3, [r3, #4]
 80073bc:	1809      	addeq	r1, r1, r0
 80073be:	6021      	streq	r1, [r4, #0]
 80073c0:	e7ed      	b.n	800739e <_free_r+0x1e>
 80073c2:	461a      	mov	r2, r3
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	b10b      	cbz	r3, 80073cc <_free_r+0x4c>
 80073c8:	42a3      	cmp	r3, r4
 80073ca:	d9fa      	bls.n	80073c2 <_free_r+0x42>
 80073cc:	6811      	ldr	r1, [r2, #0]
 80073ce:	1850      	adds	r0, r2, r1
 80073d0:	42a0      	cmp	r0, r4
 80073d2:	d10b      	bne.n	80073ec <_free_r+0x6c>
 80073d4:	6820      	ldr	r0, [r4, #0]
 80073d6:	4401      	add	r1, r0
 80073d8:	1850      	adds	r0, r2, r1
 80073da:	4283      	cmp	r3, r0
 80073dc:	6011      	str	r1, [r2, #0]
 80073de:	d1e0      	bne.n	80073a2 <_free_r+0x22>
 80073e0:	6818      	ldr	r0, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	6053      	str	r3, [r2, #4]
 80073e6:	4408      	add	r0, r1
 80073e8:	6010      	str	r0, [r2, #0]
 80073ea:	e7da      	b.n	80073a2 <_free_r+0x22>
 80073ec:	d902      	bls.n	80073f4 <_free_r+0x74>
 80073ee:	230c      	movs	r3, #12
 80073f0:	602b      	str	r3, [r5, #0]
 80073f2:	e7d6      	b.n	80073a2 <_free_r+0x22>
 80073f4:	6820      	ldr	r0, [r4, #0]
 80073f6:	1821      	adds	r1, r4, r0
 80073f8:	428b      	cmp	r3, r1
 80073fa:	bf04      	itt	eq
 80073fc:	6819      	ldreq	r1, [r3, #0]
 80073fe:	685b      	ldreq	r3, [r3, #4]
 8007400:	6063      	str	r3, [r4, #4]
 8007402:	bf04      	itt	eq
 8007404:	1809      	addeq	r1, r1, r0
 8007406:	6021      	streq	r1, [r4, #0]
 8007408:	6054      	str	r4, [r2, #4]
 800740a:	e7ca      	b.n	80073a2 <_free_r+0x22>
 800740c:	bd38      	pop	{r3, r4, r5, pc}
 800740e:	bf00      	nop
 8007410:	20000524 	.word	0x20000524

08007414 <malloc>:
 8007414:	4b02      	ldr	r3, [pc, #8]	@ (8007420 <malloc+0xc>)
 8007416:	4601      	mov	r1, r0
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	f000 b825 	b.w	8007468 <_malloc_r>
 800741e:	bf00      	nop
 8007420:	20000020 	.word	0x20000020

08007424 <sbrk_aligned>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	4e0f      	ldr	r6, [pc, #60]	@ (8007464 <sbrk_aligned+0x40>)
 8007428:	460c      	mov	r4, r1
 800742a:	6831      	ldr	r1, [r6, #0]
 800742c:	4605      	mov	r5, r0
 800742e:	b911      	cbnz	r1, 8007436 <sbrk_aligned+0x12>
 8007430:	f000 fccc 	bl	8007dcc <_sbrk_r>
 8007434:	6030      	str	r0, [r6, #0]
 8007436:	4621      	mov	r1, r4
 8007438:	4628      	mov	r0, r5
 800743a:	f000 fcc7 	bl	8007dcc <_sbrk_r>
 800743e:	1c43      	adds	r3, r0, #1
 8007440:	d103      	bne.n	800744a <sbrk_aligned+0x26>
 8007442:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007446:	4620      	mov	r0, r4
 8007448:	bd70      	pop	{r4, r5, r6, pc}
 800744a:	1cc4      	adds	r4, r0, #3
 800744c:	f024 0403 	bic.w	r4, r4, #3
 8007450:	42a0      	cmp	r0, r4
 8007452:	d0f8      	beq.n	8007446 <sbrk_aligned+0x22>
 8007454:	1a21      	subs	r1, r4, r0
 8007456:	4628      	mov	r0, r5
 8007458:	f000 fcb8 	bl	8007dcc <_sbrk_r>
 800745c:	3001      	adds	r0, #1
 800745e:	d1f2      	bne.n	8007446 <sbrk_aligned+0x22>
 8007460:	e7ef      	b.n	8007442 <sbrk_aligned+0x1e>
 8007462:	bf00      	nop
 8007464:	20000520 	.word	0x20000520

08007468 <_malloc_r>:
 8007468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800746c:	1ccd      	adds	r5, r1, #3
 800746e:	f025 0503 	bic.w	r5, r5, #3
 8007472:	3508      	adds	r5, #8
 8007474:	2d0c      	cmp	r5, #12
 8007476:	bf38      	it	cc
 8007478:	250c      	movcc	r5, #12
 800747a:	2d00      	cmp	r5, #0
 800747c:	4606      	mov	r6, r0
 800747e:	db01      	blt.n	8007484 <_malloc_r+0x1c>
 8007480:	42a9      	cmp	r1, r5
 8007482:	d904      	bls.n	800748e <_malloc_r+0x26>
 8007484:	230c      	movs	r3, #12
 8007486:	6033      	str	r3, [r6, #0]
 8007488:	2000      	movs	r0, #0
 800748a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800748e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007564 <_malloc_r+0xfc>
 8007492:	f000 f869 	bl	8007568 <__malloc_lock>
 8007496:	f8d8 3000 	ldr.w	r3, [r8]
 800749a:	461c      	mov	r4, r3
 800749c:	bb44      	cbnz	r4, 80074f0 <_malloc_r+0x88>
 800749e:	4629      	mov	r1, r5
 80074a0:	4630      	mov	r0, r6
 80074a2:	f7ff ffbf 	bl	8007424 <sbrk_aligned>
 80074a6:	1c43      	adds	r3, r0, #1
 80074a8:	4604      	mov	r4, r0
 80074aa:	d158      	bne.n	800755e <_malloc_r+0xf6>
 80074ac:	f8d8 4000 	ldr.w	r4, [r8]
 80074b0:	4627      	mov	r7, r4
 80074b2:	2f00      	cmp	r7, #0
 80074b4:	d143      	bne.n	800753e <_malloc_r+0xd6>
 80074b6:	2c00      	cmp	r4, #0
 80074b8:	d04b      	beq.n	8007552 <_malloc_r+0xea>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	4639      	mov	r1, r7
 80074be:	4630      	mov	r0, r6
 80074c0:	eb04 0903 	add.w	r9, r4, r3
 80074c4:	f000 fc82 	bl	8007dcc <_sbrk_r>
 80074c8:	4581      	cmp	r9, r0
 80074ca:	d142      	bne.n	8007552 <_malloc_r+0xea>
 80074cc:	6821      	ldr	r1, [r4, #0]
 80074ce:	1a6d      	subs	r5, r5, r1
 80074d0:	4629      	mov	r1, r5
 80074d2:	4630      	mov	r0, r6
 80074d4:	f7ff ffa6 	bl	8007424 <sbrk_aligned>
 80074d8:	3001      	adds	r0, #1
 80074da:	d03a      	beq.n	8007552 <_malloc_r+0xea>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	442b      	add	r3, r5
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	f8d8 3000 	ldr.w	r3, [r8]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	bb62      	cbnz	r2, 8007544 <_malloc_r+0xdc>
 80074ea:	f8c8 7000 	str.w	r7, [r8]
 80074ee:	e00f      	b.n	8007510 <_malloc_r+0xa8>
 80074f0:	6822      	ldr	r2, [r4, #0]
 80074f2:	1b52      	subs	r2, r2, r5
 80074f4:	d420      	bmi.n	8007538 <_malloc_r+0xd0>
 80074f6:	2a0b      	cmp	r2, #11
 80074f8:	d917      	bls.n	800752a <_malloc_r+0xc2>
 80074fa:	1961      	adds	r1, r4, r5
 80074fc:	42a3      	cmp	r3, r4
 80074fe:	6025      	str	r5, [r4, #0]
 8007500:	bf18      	it	ne
 8007502:	6059      	strne	r1, [r3, #4]
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	bf08      	it	eq
 8007508:	f8c8 1000 	streq.w	r1, [r8]
 800750c:	5162      	str	r2, [r4, r5]
 800750e:	604b      	str	r3, [r1, #4]
 8007510:	4630      	mov	r0, r6
 8007512:	f000 f82f 	bl	8007574 <__malloc_unlock>
 8007516:	f104 000b 	add.w	r0, r4, #11
 800751a:	1d23      	adds	r3, r4, #4
 800751c:	f020 0007 	bic.w	r0, r0, #7
 8007520:	1ac2      	subs	r2, r0, r3
 8007522:	bf1c      	itt	ne
 8007524:	1a1b      	subne	r3, r3, r0
 8007526:	50a3      	strne	r3, [r4, r2]
 8007528:	e7af      	b.n	800748a <_malloc_r+0x22>
 800752a:	6862      	ldr	r2, [r4, #4]
 800752c:	42a3      	cmp	r3, r4
 800752e:	bf0c      	ite	eq
 8007530:	f8c8 2000 	streq.w	r2, [r8]
 8007534:	605a      	strne	r2, [r3, #4]
 8007536:	e7eb      	b.n	8007510 <_malloc_r+0xa8>
 8007538:	4623      	mov	r3, r4
 800753a:	6864      	ldr	r4, [r4, #4]
 800753c:	e7ae      	b.n	800749c <_malloc_r+0x34>
 800753e:	463c      	mov	r4, r7
 8007540:	687f      	ldr	r7, [r7, #4]
 8007542:	e7b6      	b.n	80074b2 <_malloc_r+0x4a>
 8007544:	461a      	mov	r2, r3
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	42a3      	cmp	r3, r4
 800754a:	d1fb      	bne.n	8007544 <_malloc_r+0xdc>
 800754c:	2300      	movs	r3, #0
 800754e:	6053      	str	r3, [r2, #4]
 8007550:	e7de      	b.n	8007510 <_malloc_r+0xa8>
 8007552:	230c      	movs	r3, #12
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	4630      	mov	r0, r6
 8007558:	f000 f80c 	bl	8007574 <__malloc_unlock>
 800755c:	e794      	b.n	8007488 <_malloc_r+0x20>
 800755e:	6005      	str	r5, [r0, #0]
 8007560:	e7d6      	b.n	8007510 <_malloc_r+0xa8>
 8007562:	bf00      	nop
 8007564:	20000524 	.word	0x20000524

08007568 <__malloc_lock>:
 8007568:	4801      	ldr	r0, [pc, #4]	@ (8007570 <__malloc_lock+0x8>)
 800756a:	f7ff b8ac 	b.w	80066c6 <__retarget_lock_acquire_recursive>
 800756e:	bf00      	nop
 8007570:	2000051c 	.word	0x2000051c

08007574 <__malloc_unlock>:
 8007574:	4801      	ldr	r0, [pc, #4]	@ (800757c <__malloc_unlock+0x8>)
 8007576:	f7ff b8a7 	b.w	80066c8 <__retarget_lock_release_recursive>
 800757a:	bf00      	nop
 800757c:	2000051c 	.word	0x2000051c

08007580 <_Balloc>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	69c6      	ldr	r6, [r0, #28]
 8007584:	4604      	mov	r4, r0
 8007586:	460d      	mov	r5, r1
 8007588:	b976      	cbnz	r6, 80075a8 <_Balloc+0x28>
 800758a:	2010      	movs	r0, #16
 800758c:	f7ff ff42 	bl	8007414 <malloc>
 8007590:	4602      	mov	r2, r0
 8007592:	61e0      	str	r0, [r4, #28]
 8007594:	b920      	cbnz	r0, 80075a0 <_Balloc+0x20>
 8007596:	4b18      	ldr	r3, [pc, #96]	@ (80075f8 <_Balloc+0x78>)
 8007598:	4818      	ldr	r0, [pc, #96]	@ (80075fc <_Balloc+0x7c>)
 800759a:	216b      	movs	r1, #107	@ 0x6b
 800759c:	f000 fc34 	bl	8007e08 <__assert_func>
 80075a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075a4:	6006      	str	r6, [r0, #0]
 80075a6:	60c6      	str	r6, [r0, #12]
 80075a8:	69e6      	ldr	r6, [r4, #28]
 80075aa:	68f3      	ldr	r3, [r6, #12]
 80075ac:	b183      	cbz	r3, 80075d0 <_Balloc+0x50>
 80075ae:	69e3      	ldr	r3, [r4, #28]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075b6:	b9b8      	cbnz	r0, 80075e8 <_Balloc+0x68>
 80075b8:	2101      	movs	r1, #1
 80075ba:	fa01 f605 	lsl.w	r6, r1, r5
 80075be:	1d72      	adds	r2, r6, #5
 80075c0:	0092      	lsls	r2, r2, #2
 80075c2:	4620      	mov	r0, r4
 80075c4:	f000 fc3e 	bl	8007e44 <_calloc_r>
 80075c8:	b160      	cbz	r0, 80075e4 <_Balloc+0x64>
 80075ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075ce:	e00e      	b.n	80075ee <_Balloc+0x6e>
 80075d0:	2221      	movs	r2, #33	@ 0x21
 80075d2:	2104      	movs	r1, #4
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fc35 	bl	8007e44 <_calloc_r>
 80075da:	69e3      	ldr	r3, [r4, #28]
 80075dc:	60f0      	str	r0, [r6, #12]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e4      	bne.n	80075ae <_Balloc+0x2e>
 80075e4:	2000      	movs	r0, #0
 80075e6:	bd70      	pop	{r4, r5, r6, pc}
 80075e8:	6802      	ldr	r2, [r0, #0]
 80075ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075ee:	2300      	movs	r3, #0
 80075f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075f4:	e7f7      	b.n	80075e6 <_Balloc+0x66>
 80075f6:	bf00      	nop
 80075f8:	08009579 	.word	0x08009579
 80075fc:	080095f9 	.word	0x080095f9

08007600 <_Bfree>:
 8007600:	b570      	push	{r4, r5, r6, lr}
 8007602:	69c6      	ldr	r6, [r0, #28]
 8007604:	4605      	mov	r5, r0
 8007606:	460c      	mov	r4, r1
 8007608:	b976      	cbnz	r6, 8007628 <_Bfree+0x28>
 800760a:	2010      	movs	r0, #16
 800760c:	f7ff ff02 	bl	8007414 <malloc>
 8007610:	4602      	mov	r2, r0
 8007612:	61e8      	str	r0, [r5, #28]
 8007614:	b920      	cbnz	r0, 8007620 <_Bfree+0x20>
 8007616:	4b09      	ldr	r3, [pc, #36]	@ (800763c <_Bfree+0x3c>)
 8007618:	4809      	ldr	r0, [pc, #36]	@ (8007640 <_Bfree+0x40>)
 800761a:	218f      	movs	r1, #143	@ 0x8f
 800761c:	f000 fbf4 	bl	8007e08 <__assert_func>
 8007620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007624:	6006      	str	r6, [r0, #0]
 8007626:	60c6      	str	r6, [r0, #12]
 8007628:	b13c      	cbz	r4, 800763a <_Bfree+0x3a>
 800762a:	69eb      	ldr	r3, [r5, #28]
 800762c:	6862      	ldr	r2, [r4, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007634:	6021      	str	r1, [r4, #0]
 8007636:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	08009579 	.word	0x08009579
 8007640:	080095f9 	.word	0x080095f9

08007644 <__multadd>:
 8007644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007648:	690d      	ldr	r5, [r1, #16]
 800764a:	4607      	mov	r7, r0
 800764c:	460c      	mov	r4, r1
 800764e:	461e      	mov	r6, r3
 8007650:	f101 0c14 	add.w	ip, r1, #20
 8007654:	2000      	movs	r0, #0
 8007656:	f8dc 3000 	ldr.w	r3, [ip]
 800765a:	b299      	uxth	r1, r3
 800765c:	fb02 6101 	mla	r1, r2, r1, r6
 8007660:	0c1e      	lsrs	r6, r3, #16
 8007662:	0c0b      	lsrs	r3, r1, #16
 8007664:	fb02 3306 	mla	r3, r2, r6, r3
 8007668:	b289      	uxth	r1, r1
 800766a:	3001      	adds	r0, #1
 800766c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007670:	4285      	cmp	r5, r0
 8007672:	f84c 1b04 	str.w	r1, [ip], #4
 8007676:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800767a:	dcec      	bgt.n	8007656 <__multadd+0x12>
 800767c:	b30e      	cbz	r6, 80076c2 <__multadd+0x7e>
 800767e:	68a3      	ldr	r3, [r4, #8]
 8007680:	42ab      	cmp	r3, r5
 8007682:	dc19      	bgt.n	80076b8 <__multadd+0x74>
 8007684:	6861      	ldr	r1, [r4, #4]
 8007686:	4638      	mov	r0, r7
 8007688:	3101      	adds	r1, #1
 800768a:	f7ff ff79 	bl	8007580 <_Balloc>
 800768e:	4680      	mov	r8, r0
 8007690:	b928      	cbnz	r0, 800769e <__multadd+0x5a>
 8007692:	4602      	mov	r2, r0
 8007694:	4b0c      	ldr	r3, [pc, #48]	@ (80076c8 <__multadd+0x84>)
 8007696:	480d      	ldr	r0, [pc, #52]	@ (80076cc <__multadd+0x88>)
 8007698:	21ba      	movs	r1, #186	@ 0xba
 800769a:	f000 fbb5 	bl	8007e08 <__assert_func>
 800769e:	6922      	ldr	r2, [r4, #16]
 80076a0:	3202      	adds	r2, #2
 80076a2:	f104 010c 	add.w	r1, r4, #12
 80076a6:	0092      	lsls	r2, r2, #2
 80076a8:	300c      	adds	r0, #12
 80076aa:	f000 fb9f 	bl	8007dec <memcpy>
 80076ae:	4621      	mov	r1, r4
 80076b0:	4638      	mov	r0, r7
 80076b2:	f7ff ffa5 	bl	8007600 <_Bfree>
 80076b6:	4644      	mov	r4, r8
 80076b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076bc:	3501      	adds	r5, #1
 80076be:	615e      	str	r6, [r3, #20]
 80076c0:	6125      	str	r5, [r4, #16]
 80076c2:	4620      	mov	r0, r4
 80076c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c8:	080095e8 	.word	0x080095e8
 80076cc:	080095f9 	.word	0x080095f9

080076d0 <__hi0bits>:
 80076d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80076d4:	4603      	mov	r3, r0
 80076d6:	bf36      	itet	cc
 80076d8:	0403      	lslcc	r3, r0, #16
 80076da:	2000      	movcs	r0, #0
 80076dc:	2010      	movcc	r0, #16
 80076de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076e2:	bf3c      	itt	cc
 80076e4:	021b      	lslcc	r3, r3, #8
 80076e6:	3008      	addcc	r0, #8
 80076e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076ec:	bf3c      	itt	cc
 80076ee:	011b      	lslcc	r3, r3, #4
 80076f0:	3004      	addcc	r0, #4
 80076f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076f6:	bf3c      	itt	cc
 80076f8:	009b      	lslcc	r3, r3, #2
 80076fa:	3002      	addcc	r0, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	db05      	blt.n	800770c <__hi0bits+0x3c>
 8007700:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007704:	f100 0001 	add.w	r0, r0, #1
 8007708:	bf08      	it	eq
 800770a:	2020      	moveq	r0, #32
 800770c:	4770      	bx	lr

0800770e <__lo0bits>:
 800770e:	6803      	ldr	r3, [r0, #0]
 8007710:	4602      	mov	r2, r0
 8007712:	f013 0007 	ands.w	r0, r3, #7
 8007716:	d00b      	beq.n	8007730 <__lo0bits+0x22>
 8007718:	07d9      	lsls	r1, r3, #31
 800771a:	d421      	bmi.n	8007760 <__lo0bits+0x52>
 800771c:	0798      	lsls	r0, r3, #30
 800771e:	bf49      	itett	mi
 8007720:	085b      	lsrmi	r3, r3, #1
 8007722:	089b      	lsrpl	r3, r3, #2
 8007724:	2001      	movmi	r0, #1
 8007726:	6013      	strmi	r3, [r2, #0]
 8007728:	bf5c      	itt	pl
 800772a:	6013      	strpl	r3, [r2, #0]
 800772c:	2002      	movpl	r0, #2
 800772e:	4770      	bx	lr
 8007730:	b299      	uxth	r1, r3
 8007732:	b909      	cbnz	r1, 8007738 <__lo0bits+0x2a>
 8007734:	0c1b      	lsrs	r3, r3, #16
 8007736:	2010      	movs	r0, #16
 8007738:	b2d9      	uxtb	r1, r3
 800773a:	b909      	cbnz	r1, 8007740 <__lo0bits+0x32>
 800773c:	3008      	adds	r0, #8
 800773e:	0a1b      	lsrs	r3, r3, #8
 8007740:	0719      	lsls	r1, r3, #28
 8007742:	bf04      	itt	eq
 8007744:	091b      	lsreq	r3, r3, #4
 8007746:	3004      	addeq	r0, #4
 8007748:	0799      	lsls	r1, r3, #30
 800774a:	bf04      	itt	eq
 800774c:	089b      	lsreq	r3, r3, #2
 800774e:	3002      	addeq	r0, #2
 8007750:	07d9      	lsls	r1, r3, #31
 8007752:	d403      	bmi.n	800775c <__lo0bits+0x4e>
 8007754:	085b      	lsrs	r3, r3, #1
 8007756:	f100 0001 	add.w	r0, r0, #1
 800775a:	d003      	beq.n	8007764 <__lo0bits+0x56>
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	4770      	bx	lr
 8007760:	2000      	movs	r0, #0
 8007762:	4770      	bx	lr
 8007764:	2020      	movs	r0, #32
 8007766:	4770      	bx	lr

08007768 <__i2b>:
 8007768:	b510      	push	{r4, lr}
 800776a:	460c      	mov	r4, r1
 800776c:	2101      	movs	r1, #1
 800776e:	f7ff ff07 	bl	8007580 <_Balloc>
 8007772:	4602      	mov	r2, r0
 8007774:	b928      	cbnz	r0, 8007782 <__i2b+0x1a>
 8007776:	4b05      	ldr	r3, [pc, #20]	@ (800778c <__i2b+0x24>)
 8007778:	4805      	ldr	r0, [pc, #20]	@ (8007790 <__i2b+0x28>)
 800777a:	f240 1145 	movw	r1, #325	@ 0x145
 800777e:	f000 fb43 	bl	8007e08 <__assert_func>
 8007782:	2301      	movs	r3, #1
 8007784:	6144      	str	r4, [r0, #20]
 8007786:	6103      	str	r3, [r0, #16]
 8007788:	bd10      	pop	{r4, pc}
 800778a:	bf00      	nop
 800778c:	080095e8 	.word	0x080095e8
 8007790:	080095f9 	.word	0x080095f9

08007794 <__multiply>:
 8007794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007798:	4617      	mov	r7, r2
 800779a:	690a      	ldr	r2, [r1, #16]
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	429a      	cmp	r2, r3
 80077a0:	bfa8      	it	ge
 80077a2:	463b      	movge	r3, r7
 80077a4:	4689      	mov	r9, r1
 80077a6:	bfa4      	itt	ge
 80077a8:	460f      	movge	r7, r1
 80077aa:	4699      	movge	r9, r3
 80077ac:	693d      	ldr	r5, [r7, #16]
 80077ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	eb05 060a 	add.w	r6, r5, sl
 80077ba:	42b3      	cmp	r3, r6
 80077bc:	b085      	sub	sp, #20
 80077be:	bfb8      	it	lt
 80077c0:	3101      	addlt	r1, #1
 80077c2:	f7ff fedd 	bl	8007580 <_Balloc>
 80077c6:	b930      	cbnz	r0, 80077d6 <__multiply+0x42>
 80077c8:	4602      	mov	r2, r0
 80077ca:	4b41      	ldr	r3, [pc, #260]	@ (80078d0 <__multiply+0x13c>)
 80077cc:	4841      	ldr	r0, [pc, #260]	@ (80078d4 <__multiply+0x140>)
 80077ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80077d2:	f000 fb19 	bl	8007e08 <__assert_func>
 80077d6:	f100 0414 	add.w	r4, r0, #20
 80077da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80077de:	4623      	mov	r3, r4
 80077e0:	2200      	movs	r2, #0
 80077e2:	4573      	cmp	r3, lr
 80077e4:	d320      	bcc.n	8007828 <__multiply+0x94>
 80077e6:	f107 0814 	add.w	r8, r7, #20
 80077ea:	f109 0114 	add.w	r1, r9, #20
 80077ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80077f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80077f6:	9302      	str	r3, [sp, #8]
 80077f8:	1beb      	subs	r3, r5, r7
 80077fa:	3b15      	subs	r3, #21
 80077fc:	f023 0303 	bic.w	r3, r3, #3
 8007800:	3304      	adds	r3, #4
 8007802:	3715      	adds	r7, #21
 8007804:	42bd      	cmp	r5, r7
 8007806:	bf38      	it	cc
 8007808:	2304      	movcc	r3, #4
 800780a:	9301      	str	r3, [sp, #4]
 800780c:	9b02      	ldr	r3, [sp, #8]
 800780e:	9103      	str	r1, [sp, #12]
 8007810:	428b      	cmp	r3, r1
 8007812:	d80c      	bhi.n	800782e <__multiply+0x9a>
 8007814:	2e00      	cmp	r6, #0
 8007816:	dd03      	ble.n	8007820 <__multiply+0x8c>
 8007818:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800781c:	2b00      	cmp	r3, #0
 800781e:	d055      	beq.n	80078cc <__multiply+0x138>
 8007820:	6106      	str	r6, [r0, #16]
 8007822:	b005      	add	sp, #20
 8007824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007828:	f843 2b04 	str.w	r2, [r3], #4
 800782c:	e7d9      	b.n	80077e2 <__multiply+0x4e>
 800782e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007832:	f1ba 0f00 	cmp.w	sl, #0
 8007836:	d01f      	beq.n	8007878 <__multiply+0xe4>
 8007838:	46c4      	mov	ip, r8
 800783a:	46a1      	mov	r9, r4
 800783c:	2700      	movs	r7, #0
 800783e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007842:	f8d9 3000 	ldr.w	r3, [r9]
 8007846:	fa1f fb82 	uxth.w	fp, r2
 800784a:	b29b      	uxth	r3, r3
 800784c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007850:	443b      	add	r3, r7
 8007852:	f8d9 7000 	ldr.w	r7, [r9]
 8007856:	0c12      	lsrs	r2, r2, #16
 8007858:	0c3f      	lsrs	r7, r7, #16
 800785a:	fb0a 7202 	mla	r2, sl, r2, r7
 800785e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007862:	b29b      	uxth	r3, r3
 8007864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007868:	4565      	cmp	r5, ip
 800786a:	f849 3b04 	str.w	r3, [r9], #4
 800786e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007872:	d8e4      	bhi.n	800783e <__multiply+0xaa>
 8007874:	9b01      	ldr	r3, [sp, #4]
 8007876:	50e7      	str	r7, [r4, r3]
 8007878:	9b03      	ldr	r3, [sp, #12]
 800787a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800787e:	3104      	adds	r1, #4
 8007880:	f1b9 0f00 	cmp.w	r9, #0
 8007884:	d020      	beq.n	80078c8 <__multiply+0x134>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	4647      	mov	r7, r8
 800788a:	46a4      	mov	ip, r4
 800788c:	f04f 0a00 	mov.w	sl, #0
 8007890:	f8b7 b000 	ldrh.w	fp, [r7]
 8007894:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007898:	fb09 220b 	mla	r2, r9, fp, r2
 800789c:	4452      	add	r2, sl
 800789e:	b29b      	uxth	r3, r3
 80078a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078a4:	f84c 3b04 	str.w	r3, [ip], #4
 80078a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80078ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80078b4:	fb09 330a 	mla	r3, r9, sl, r3
 80078b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80078bc:	42bd      	cmp	r5, r7
 80078be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078c2:	d8e5      	bhi.n	8007890 <__multiply+0xfc>
 80078c4:	9a01      	ldr	r2, [sp, #4]
 80078c6:	50a3      	str	r3, [r4, r2]
 80078c8:	3404      	adds	r4, #4
 80078ca:	e79f      	b.n	800780c <__multiply+0x78>
 80078cc:	3e01      	subs	r6, #1
 80078ce:	e7a1      	b.n	8007814 <__multiply+0x80>
 80078d0:	080095e8 	.word	0x080095e8
 80078d4:	080095f9 	.word	0x080095f9

080078d8 <__pow5mult>:
 80078d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078dc:	4615      	mov	r5, r2
 80078de:	f012 0203 	ands.w	r2, r2, #3
 80078e2:	4607      	mov	r7, r0
 80078e4:	460e      	mov	r6, r1
 80078e6:	d007      	beq.n	80078f8 <__pow5mult+0x20>
 80078e8:	4c25      	ldr	r4, [pc, #148]	@ (8007980 <__pow5mult+0xa8>)
 80078ea:	3a01      	subs	r2, #1
 80078ec:	2300      	movs	r3, #0
 80078ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078f2:	f7ff fea7 	bl	8007644 <__multadd>
 80078f6:	4606      	mov	r6, r0
 80078f8:	10ad      	asrs	r5, r5, #2
 80078fa:	d03d      	beq.n	8007978 <__pow5mult+0xa0>
 80078fc:	69fc      	ldr	r4, [r7, #28]
 80078fe:	b97c      	cbnz	r4, 8007920 <__pow5mult+0x48>
 8007900:	2010      	movs	r0, #16
 8007902:	f7ff fd87 	bl	8007414 <malloc>
 8007906:	4602      	mov	r2, r0
 8007908:	61f8      	str	r0, [r7, #28]
 800790a:	b928      	cbnz	r0, 8007918 <__pow5mult+0x40>
 800790c:	4b1d      	ldr	r3, [pc, #116]	@ (8007984 <__pow5mult+0xac>)
 800790e:	481e      	ldr	r0, [pc, #120]	@ (8007988 <__pow5mult+0xb0>)
 8007910:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007914:	f000 fa78 	bl	8007e08 <__assert_func>
 8007918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800791c:	6004      	str	r4, [r0, #0]
 800791e:	60c4      	str	r4, [r0, #12]
 8007920:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007928:	b94c      	cbnz	r4, 800793e <__pow5mult+0x66>
 800792a:	f240 2171 	movw	r1, #625	@ 0x271
 800792e:	4638      	mov	r0, r7
 8007930:	f7ff ff1a 	bl	8007768 <__i2b>
 8007934:	2300      	movs	r3, #0
 8007936:	f8c8 0008 	str.w	r0, [r8, #8]
 800793a:	4604      	mov	r4, r0
 800793c:	6003      	str	r3, [r0, #0]
 800793e:	f04f 0900 	mov.w	r9, #0
 8007942:	07eb      	lsls	r3, r5, #31
 8007944:	d50a      	bpl.n	800795c <__pow5mult+0x84>
 8007946:	4631      	mov	r1, r6
 8007948:	4622      	mov	r2, r4
 800794a:	4638      	mov	r0, r7
 800794c:	f7ff ff22 	bl	8007794 <__multiply>
 8007950:	4631      	mov	r1, r6
 8007952:	4680      	mov	r8, r0
 8007954:	4638      	mov	r0, r7
 8007956:	f7ff fe53 	bl	8007600 <_Bfree>
 800795a:	4646      	mov	r6, r8
 800795c:	106d      	asrs	r5, r5, #1
 800795e:	d00b      	beq.n	8007978 <__pow5mult+0xa0>
 8007960:	6820      	ldr	r0, [r4, #0]
 8007962:	b938      	cbnz	r0, 8007974 <__pow5mult+0x9c>
 8007964:	4622      	mov	r2, r4
 8007966:	4621      	mov	r1, r4
 8007968:	4638      	mov	r0, r7
 800796a:	f7ff ff13 	bl	8007794 <__multiply>
 800796e:	6020      	str	r0, [r4, #0]
 8007970:	f8c0 9000 	str.w	r9, [r0]
 8007974:	4604      	mov	r4, r0
 8007976:	e7e4      	b.n	8007942 <__pow5mult+0x6a>
 8007978:	4630      	mov	r0, r6
 800797a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800797e:	bf00      	nop
 8007980:	080096ac 	.word	0x080096ac
 8007984:	08009579 	.word	0x08009579
 8007988:	080095f9 	.word	0x080095f9

0800798c <__lshift>:
 800798c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007990:	460c      	mov	r4, r1
 8007992:	6849      	ldr	r1, [r1, #4]
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800799a:	68a3      	ldr	r3, [r4, #8]
 800799c:	4607      	mov	r7, r0
 800799e:	4691      	mov	r9, r2
 80079a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079a4:	f108 0601 	add.w	r6, r8, #1
 80079a8:	42b3      	cmp	r3, r6
 80079aa:	db0b      	blt.n	80079c4 <__lshift+0x38>
 80079ac:	4638      	mov	r0, r7
 80079ae:	f7ff fde7 	bl	8007580 <_Balloc>
 80079b2:	4605      	mov	r5, r0
 80079b4:	b948      	cbnz	r0, 80079ca <__lshift+0x3e>
 80079b6:	4602      	mov	r2, r0
 80079b8:	4b28      	ldr	r3, [pc, #160]	@ (8007a5c <__lshift+0xd0>)
 80079ba:	4829      	ldr	r0, [pc, #164]	@ (8007a60 <__lshift+0xd4>)
 80079bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80079c0:	f000 fa22 	bl	8007e08 <__assert_func>
 80079c4:	3101      	adds	r1, #1
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	e7ee      	b.n	80079a8 <__lshift+0x1c>
 80079ca:	2300      	movs	r3, #0
 80079cc:	f100 0114 	add.w	r1, r0, #20
 80079d0:	f100 0210 	add.w	r2, r0, #16
 80079d4:	4618      	mov	r0, r3
 80079d6:	4553      	cmp	r3, sl
 80079d8:	db33      	blt.n	8007a42 <__lshift+0xb6>
 80079da:	6920      	ldr	r0, [r4, #16]
 80079dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079e0:	f104 0314 	add.w	r3, r4, #20
 80079e4:	f019 091f 	ands.w	r9, r9, #31
 80079e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079f0:	d02b      	beq.n	8007a4a <__lshift+0xbe>
 80079f2:	f1c9 0e20 	rsb	lr, r9, #32
 80079f6:	468a      	mov	sl, r1
 80079f8:	2200      	movs	r2, #0
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	fa00 f009 	lsl.w	r0, r0, r9
 8007a00:	4310      	orrs	r0, r2
 8007a02:	f84a 0b04 	str.w	r0, [sl], #4
 8007a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a0a:	459c      	cmp	ip, r3
 8007a0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a10:	d8f3      	bhi.n	80079fa <__lshift+0x6e>
 8007a12:	ebac 0304 	sub.w	r3, ip, r4
 8007a16:	3b15      	subs	r3, #21
 8007a18:	f023 0303 	bic.w	r3, r3, #3
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	f104 0015 	add.w	r0, r4, #21
 8007a22:	4560      	cmp	r0, ip
 8007a24:	bf88      	it	hi
 8007a26:	2304      	movhi	r3, #4
 8007a28:	50ca      	str	r2, [r1, r3]
 8007a2a:	b10a      	cbz	r2, 8007a30 <__lshift+0xa4>
 8007a2c:	f108 0602 	add.w	r6, r8, #2
 8007a30:	3e01      	subs	r6, #1
 8007a32:	4638      	mov	r0, r7
 8007a34:	612e      	str	r6, [r5, #16]
 8007a36:	4621      	mov	r1, r4
 8007a38:	f7ff fde2 	bl	8007600 <_Bfree>
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a42:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a46:	3301      	adds	r3, #1
 8007a48:	e7c5      	b.n	80079d6 <__lshift+0x4a>
 8007a4a:	3904      	subs	r1, #4
 8007a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a50:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a54:	459c      	cmp	ip, r3
 8007a56:	d8f9      	bhi.n	8007a4c <__lshift+0xc0>
 8007a58:	e7ea      	b.n	8007a30 <__lshift+0xa4>
 8007a5a:	bf00      	nop
 8007a5c:	080095e8 	.word	0x080095e8
 8007a60:	080095f9 	.word	0x080095f9

08007a64 <__mcmp>:
 8007a64:	690a      	ldr	r2, [r1, #16]
 8007a66:	4603      	mov	r3, r0
 8007a68:	6900      	ldr	r0, [r0, #16]
 8007a6a:	1a80      	subs	r0, r0, r2
 8007a6c:	b530      	push	{r4, r5, lr}
 8007a6e:	d10e      	bne.n	8007a8e <__mcmp+0x2a>
 8007a70:	3314      	adds	r3, #20
 8007a72:	3114      	adds	r1, #20
 8007a74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a84:	4295      	cmp	r5, r2
 8007a86:	d003      	beq.n	8007a90 <__mcmp+0x2c>
 8007a88:	d205      	bcs.n	8007a96 <__mcmp+0x32>
 8007a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a8e:	bd30      	pop	{r4, r5, pc}
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	d3f3      	bcc.n	8007a7c <__mcmp+0x18>
 8007a94:	e7fb      	b.n	8007a8e <__mcmp+0x2a>
 8007a96:	2001      	movs	r0, #1
 8007a98:	e7f9      	b.n	8007a8e <__mcmp+0x2a>
	...

08007a9c <__mdiff>:
 8007a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa0:	4689      	mov	r9, r1
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	4648      	mov	r0, r9
 8007aa8:	4614      	mov	r4, r2
 8007aaa:	f7ff ffdb 	bl	8007a64 <__mcmp>
 8007aae:	1e05      	subs	r5, r0, #0
 8007ab0:	d112      	bne.n	8007ad8 <__mdiff+0x3c>
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f7ff fd63 	bl	8007580 <_Balloc>
 8007aba:	4602      	mov	r2, r0
 8007abc:	b928      	cbnz	r0, 8007aca <__mdiff+0x2e>
 8007abe:	4b3f      	ldr	r3, [pc, #252]	@ (8007bbc <__mdiff+0x120>)
 8007ac0:	f240 2137 	movw	r1, #567	@ 0x237
 8007ac4:	483e      	ldr	r0, [pc, #248]	@ (8007bc0 <__mdiff+0x124>)
 8007ac6:	f000 f99f 	bl	8007e08 <__assert_func>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	b003      	add	sp, #12
 8007ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad8:	bfbc      	itt	lt
 8007ada:	464b      	movlt	r3, r9
 8007adc:	46a1      	movlt	r9, r4
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ae4:	bfba      	itte	lt
 8007ae6:	461c      	movlt	r4, r3
 8007ae8:	2501      	movlt	r5, #1
 8007aea:	2500      	movge	r5, #0
 8007aec:	f7ff fd48 	bl	8007580 <_Balloc>
 8007af0:	4602      	mov	r2, r0
 8007af2:	b918      	cbnz	r0, 8007afc <__mdiff+0x60>
 8007af4:	4b31      	ldr	r3, [pc, #196]	@ (8007bbc <__mdiff+0x120>)
 8007af6:	f240 2145 	movw	r1, #581	@ 0x245
 8007afa:	e7e3      	b.n	8007ac4 <__mdiff+0x28>
 8007afc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007b00:	6926      	ldr	r6, [r4, #16]
 8007b02:	60c5      	str	r5, [r0, #12]
 8007b04:	f109 0310 	add.w	r3, r9, #16
 8007b08:	f109 0514 	add.w	r5, r9, #20
 8007b0c:	f104 0e14 	add.w	lr, r4, #20
 8007b10:	f100 0b14 	add.w	fp, r0, #20
 8007b14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	46d9      	mov	r9, fp
 8007b20:	f04f 0c00 	mov.w	ip, #0
 8007b24:	9b01      	ldr	r3, [sp, #4]
 8007b26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007b2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	fa1f f38a 	uxth.w	r3, sl
 8007b34:	4619      	mov	r1, r3
 8007b36:	b283      	uxth	r3, r0
 8007b38:	1acb      	subs	r3, r1, r3
 8007b3a:	0c00      	lsrs	r0, r0, #16
 8007b3c:	4463      	add	r3, ip
 8007b3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007b42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b4c:	4576      	cmp	r6, lr
 8007b4e:	f849 3b04 	str.w	r3, [r9], #4
 8007b52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b56:	d8e5      	bhi.n	8007b24 <__mdiff+0x88>
 8007b58:	1b33      	subs	r3, r6, r4
 8007b5a:	3b15      	subs	r3, #21
 8007b5c:	f023 0303 	bic.w	r3, r3, #3
 8007b60:	3415      	adds	r4, #21
 8007b62:	3304      	adds	r3, #4
 8007b64:	42a6      	cmp	r6, r4
 8007b66:	bf38      	it	cc
 8007b68:	2304      	movcc	r3, #4
 8007b6a:	441d      	add	r5, r3
 8007b6c:	445b      	add	r3, fp
 8007b6e:	461e      	mov	r6, r3
 8007b70:	462c      	mov	r4, r5
 8007b72:	4544      	cmp	r4, r8
 8007b74:	d30e      	bcc.n	8007b94 <__mdiff+0xf8>
 8007b76:	f108 0103 	add.w	r1, r8, #3
 8007b7a:	1b49      	subs	r1, r1, r5
 8007b7c:	f021 0103 	bic.w	r1, r1, #3
 8007b80:	3d03      	subs	r5, #3
 8007b82:	45a8      	cmp	r8, r5
 8007b84:	bf38      	it	cc
 8007b86:	2100      	movcc	r1, #0
 8007b88:	440b      	add	r3, r1
 8007b8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b8e:	b191      	cbz	r1, 8007bb6 <__mdiff+0x11a>
 8007b90:	6117      	str	r7, [r2, #16]
 8007b92:	e79d      	b.n	8007ad0 <__mdiff+0x34>
 8007b94:	f854 1b04 	ldr.w	r1, [r4], #4
 8007b98:	46e6      	mov	lr, ip
 8007b9a:	0c08      	lsrs	r0, r1, #16
 8007b9c:	fa1c fc81 	uxtah	ip, ip, r1
 8007ba0:	4471      	add	r1, lr
 8007ba2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ba6:	b289      	uxth	r1, r1
 8007ba8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007bac:	f846 1b04 	str.w	r1, [r6], #4
 8007bb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007bb4:	e7dd      	b.n	8007b72 <__mdiff+0xd6>
 8007bb6:	3f01      	subs	r7, #1
 8007bb8:	e7e7      	b.n	8007b8a <__mdiff+0xee>
 8007bba:	bf00      	nop
 8007bbc:	080095e8 	.word	0x080095e8
 8007bc0:	080095f9 	.word	0x080095f9

08007bc4 <__d2b>:
 8007bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bc8:	460f      	mov	r7, r1
 8007bca:	2101      	movs	r1, #1
 8007bcc:	ec59 8b10 	vmov	r8, r9, d0
 8007bd0:	4616      	mov	r6, r2
 8007bd2:	f7ff fcd5 	bl	8007580 <_Balloc>
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	b930      	cbnz	r0, 8007be8 <__d2b+0x24>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	4b23      	ldr	r3, [pc, #140]	@ (8007c6c <__d2b+0xa8>)
 8007bde:	4824      	ldr	r0, [pc, #144]	@ (8007c70 <__d2b+0xac>)
 8007be0:	f240 310f 	movw	r1, #783	@ 0x30f
 8007be4:	f000 f910 	bl	8007e08 <__assert_func>
 8007be8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007bec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bf0:	b10d      	cbz	r5, 8007bf6 <__d2b+0x32>
 8007bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	f1b8 0300 	subs.w	r3, r8, #0
 8007bfc:	d023      	beq.n	8007c46 <__d2b+0x82>
 8007bfe:	4668      	mov	r0, sp
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	f7ff fd84 	bl	800770e <__lo0bits>
 8007c06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c0a:	b1d0      	cbz	r0, 8007c42 <__d2b+0x7e>
 8007c0c:	f1c0 0320 	rsb	r3, r0, #32
 8007c10:	fa02 f303 	lsl.w	r3, r2, r3
 8007c14:	430b      	orrs	r3, r1
 8007c16:	40c2      	lsrs	r2, r0
 8007c18:	6163      	str	r3, [r4, #20]
 8007c1a:	9201      	str	r2, [sp, #4]
 8007c1c:	9b01      	ldr	r3, [sp, #4]
 8007c1e:	61a3      	str	r3, [r4, #24]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	bf0c      	ite	eq
 8007c24:	2201      	moveq	r2, #1
 8007c26:	2202      	movne	r2, #2
 8007c28:	6122      	str	r2, [r4, #16]
 8007c2a:	b1a5      	cbz	r5, 8007c56 <__d2b+0x92>
 8007c2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007c30:	4405      	add	r5, r0
 8007c32:	603d      	str	r5, [r7, #0]
 8007c34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007c38:	6030      	str	r0, [r6, #0]
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	b003      	add	sp, #12
 8007c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c42:	6161      	str	r1, [r4, #20]
 8007c44:	e7ea      	b.n	8007c1c <__d2b+0x58>
 8007c46:	a801      	add	r0, sp, #4
 8007c48:	f7ff fd61 	bl	800770e <__lo0bits>
 8007c4c:	9b01      	ldr	r3, [sp, #4]
 8007c4e:	6163      	str	r3, [r4, #20]
 8007c50:	3020      	adds	r0, #32
 8007c52:	2201      	movs	r2, #1
 8007c54:	e7e8      	b.n	8007c28 <__d2b+0x64>
 8007c56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007c5e:	6038      	str	r0, [r7, #0]
 8007c60:	6918      	ldr	r0, [r3, #16]
 8007c62:	f7ff fd35 	bl	80076d0 <__hi0bits>
 8007c66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c6a:	e7e5      	b.n	8007c38 <__d2b+0x74>
 8007c6c:	080095e8 	.word	0x080095e8
 8007c70:	080095f9 	.word	0x080095f9

08007c74 <__sflush_r>:
 8007c74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7c:	0716      	lsls	r6, r2, #28
 8007c7e:	4605      	mov	r5, r0
 8007c80:	460c      	mov	r4, r1
 8007c82:	d454      	bmi.n	8007d2e <__sflush_r+0xba>
 8007c84:	684b      	ldr	r3, [r1, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	dc02      	bgt.n	8007c90 <__sflush_r+0x1c>
 8007c8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	dd48      	ble.n	8007d22 <__sflush_r+0xae>
 8007c90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c92:	2e00      	cmp	r6, #0
 8007c94:	d045      	beq.n	8007d22 <__sflush_r+0xae>
 8007c96:	2300      	movs	r3, #0
 8007c98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c9c:	682f      	ldr	r7, [r5, #0]
 8007c9e:	6a21      	ldr	r1, [r4, #32]
 8007ca0:	602b      	str	r3, [r5, #0]
 8007ca2:	d030      	beq.n	8007d06 <__sflush_r+0x92>
 8007ca4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	0759      	lsls	r1, r3, #29
 8007caa:	d505      	bpl.n	8007cb8 <__sflush_r+0x44>
 8007cac:	6863      	ldr	r3, [r4, #4]
 8007cae:	1ad2      	subs	r2, r2, r3
 8007cb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cb2:	b10b      	cbz	r3, 8007cb8 <__sflush_r+0x44>
 8007cb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cb6:	1ad2      	subs	r2, r2, r3
 8007cb8:	2300      	movs	r3, #0
 8007cba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cbc:	6a21      	ldr	r1, [r4, #32]
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b0      	blx	r6
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	d106      	bne.n	8007cd6 <__sflush_r+0x62>
 8007cc8:	6829      	ldr	r1, [r5, #0]
 8007cca:	291d      	cmp	r1, #29
 8007ccc:	d82b      	bhi.n	8007d26 <__sflush_r+0xb2>
 8007cce:	4a2a      	ldr	r2, [pc, #168]	@ (8007d78 <__sflush_r+0x104>)
 8007cd0:	40ca      	lsrs	r2, r1
 8007cd2:	07d6      	lsls	r6, r2, #31
 8007cd4:	d527      	bpl.n	8007d26 <__sflush_r+0xb2>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	6062      	str	r2, [r4, #4]
 8007cda:	04d9      	lsls	r1, r3, #19
 8007cdc:	6922      	ldr	r2, [r4, #16]
 8007cde:	6022      	str	r2, [r4, #0]
 8007ce0:	d504      	bpl.n	8007cec <__sflush_r+0x78>
 8007ce2:	1c42      	adds	r2, r0, #1
 8007ce4:	d101      	bne.n	8007cea <__sflush_r+0x76>
 8007ce6:	682b      	ldr	r3, [r5, #0]
 8007ce8:	b903      	cbnz	r3, 8007cec <__sflush_r+0x78>
 8007cea:	6560      	str	r0, [r4, #84]	@ 0x54
 8007cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cee:	602f      	str	r7, [r5, #0]
 8007cf0:	b1b9      	cbz	r1, 8007d22 <__sflush_r+0xae>
 8007cf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cf6:	4299      	cmp	r1, r3
 8007cf8:	d002      	beq.n	8007d00 <__sflush_r+0x8c>
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	f7ff fb40 	bl	8007380 <_free_r>
 8007d00:	2300      	movs	r3, #0
 8007d02:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d04:	e00d      	b.n	8007d22 <__sflush_r+0xae>
 8007d06:	2301      	movs	r3, #1
 8007d08:	4628      	mov	r0, r5
 8007d0a:	47b0      	blx	r6
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	1c50      	adds	r0, r2, #1
 8007d10:	d1c9      	bne.n	8007ca6 <__sflush_r+0x32>
 8007d12:	682b      	ldr	r3, [r5, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d0c6      	beq.n	8007ca6 <__sflush_r+0x32>
 8007d18:	2b1d      	cmp	r3, #29
 8007d1a:	d001      	beq.n	8007d20 <__sflush_r+0xac>
 8007d1c:	2b16      	cmp	r3, #22
 8007d1e:	d11e      	bne.n	8007d5e <__sflush_r+0xea>
 8007d20:	602f      	str	r7, [r5, #0]
 8007d22:	2000      	movs	r0, #0
 8007d24:	e022      	b.n	8007d6c <__sflush_r+0xf8>
 8007d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d2a:	b21b      	sxth	r3, r3
 8007d2c:	e01b      	b.n	8007d66 <__sflush_r+0xf2>
 8007d2e:	690f      	ldr	r7, [r1, #16]
 8007d30:	2f00      	cmp	r7, #0
 8007d32:	d0f6      	beq.n	8007d22 <__sflush_r+0xae>
 8007d34:	0793      	lsls	r3, r2, #30
 8007d36:	680e      	ldr	r6, [r1, #0]
 8007d38:	bf08      	it	eq
 8007d3a:	694b      	ldreq	r3, [r1, #20]
 8007d3c:	600f      	str	r7, [r1, #0]
 8007d3e:	bf18      	it	ne
 8007d40:	2300      	movne	r3, #0
 8007d42:	eba6 0807 	sub.w	r8, r6, r7
 8007d46:	608b      	str	r3, [r1, #8]
 8007d48:	f1b8 0f00 	cmp.w	r8, #0
 8007d4c:	dde9      	ble.n	8007d22 <__sflush_r+0xae>
 8007d4e:	6a21      	ldr	r1, [r4, #32]
 8007d50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d52:	4643      	mov	r3, r8
 8007d54:	463a      	mov	r2, r7
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b0      	blx	r6
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	dc08      	bgt.n	8007d70 <__sflush_r+0xfc>
 8007d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d66:	81a3      	strh	r3, [r4, #12]
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d70:	4407      	add	r7, r0
 8007d72:	eba8 0800 	sub.w	r8, r8, r0
 8007d76:	e7e7      	b.n	8007d48 <__sflush_r+0xd4>
 8007d78:	20400001 	.word	0x20400001

08007d7c <_fflush_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	690b      	ldr	r3, [r1, #16]
 8007d80:	4605      	mov	r5, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	b913      	cbnz	r3, 8007d8c <_fflush_r+0x10>
 8007d86:	2500      	movs	r5, #0
 8007d88:	4628      	mov	r0, r5
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	b118      	cbz	r0, 8007d96 <_fflush_r+0x1a>
 8007d8e:	6a03      	ldr	r3, [r0, #32]
 8007d90:	b90b      	cbnz	r3, 8007d96 <_fflush_r+0x1a>
 8007d92:	f7fe fba1 	bl	80064d8 <__sinit>
 8007d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0f3      	beq.n	8007d86 <_fflush_r+0xa>
 8007d9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007da0:	07d0      	lsls	r0, r2, #31
 8007da2:	d404      	bmi.n	8007dae <_fflush_r+0x32>
 8007da4:	0599      	lsls	r1, r3, #22
 8007da6:	d402      	bmi.n	8007dae <_fflush_r+0x32>
 8007da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007daa:	f7fe fc8c 	bl	80066c6 <__retarget_lock_acquire_recursive>
 8007dae:	4628      	mov	r0, r5
 8007db0:	4621      	mov	r1, r4
 8007db2:	f7ff ff5f 	bl	8007c74 <__sflush_r>
 8007db6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007db8:	07da      	lsls	r2, r3, #31
 8007dba:	4605      	mov	r5, r0
 8007dbc:	d4e4      	bmi.n	8007d88 <_fflush_r+0xc>
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	059b      	lsls	r3, r3, #22
 8007dc2:	d4e1      	bmi.n	8007d88 <_fflush_r+0xc>
 8007dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dc6:	f7fe fc7f 	bl	80066c8 <__retarget_lock_release_recursive>
 8007dca:	e7dd      	b.n	8007d88 <_fflush_r+0xc>

08007dcc <_sbrk_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4d06      	ldr	r5, [pc, #24]	@ (8007de8 <_sbrk_r+0x1c>)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	602b      	str	r3, [r5, #0]
 8007dd8:	f7fb f8da 	bl	8002f90 <_sbrk>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_sbrk_r+0x1a>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_sbrk_r+0x1a>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	20000518 	.word	0x20000518

08007dec <memcpy>:
 8007dec:	440a      	add	r2, r1
 8007dee:	4291      	cmp	r1, r2
 8007df0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007df4:	d100      	bne.n	8007df8 <memcpy+0xc>
 8007df6:	4770      	bx	lr
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e02:	4291      	cmp	r1, r2
 8007e04:	d1f9      	bne.n	8007dfa <memcpy+0xe>
 8007e06:	bd10      	pop	{r4, pc}

08007e08 <__assert_func>:
 8007e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4b09      	ldr	r3, [pc, #36]	@ (8007e34 <__assert_func+0x2c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4605      	mov	r5, r0
 8007e14:	68d8      	ldr	r0, [r3, #12]
 8007e16:	b14c      	cbz	r4, 8007e2c <__assert_func+0x24>
 8007e18:	4b07      	ldr	r3, [pc, #28]	@ (8007e38 <__assert_func+0x30>)
 8007e1a:	9100      	str	r1, [sp, #0]
 8007e1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e20:	4906      	ldr	r1, [pc, #24]	@ (8007e3c <__assert_func+0x34>)
 8007e22:	462b      	mov	r3, r5
 8007e24:	f000 f842 	bl	8007eac <fiprintf>
 8007e28:	f000 f852 	bl	8007ed0 <abort>
 8007e2c:	4b04      	ldr	r3, [pc, #16]	@ (8007e40 <__assert_func+0x38>)
 8007e2e:	461c      	mov	r4, r3
 8007e30:	e7f3      	b.n	8007e1a <__assert_func+0x12>
 8007e32:	bf00      	nop
 8007e34:	20000020 	.word	0x20000020
 8007e38:	0800965c 	.word	0x0800965c
 8007e3c:	08009669 	.word	0x08009669
 8007e40:	08009697 	.word	0x08009697

08007e44 <_calloc_r>:
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	fba1 5402 	umull	r5, r4, r1, r2
 8007e4a:	b934      	cbnz	r4, 8007e5a <_calloc_r+0x16>
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	f7ff fb0b 	bl	8007468 <_malloc_r>
 8007e52:	4606      	mov	r6, r0
 8007e54:	b928      	cbnz	r0, 8007e62 <_calloc_r+0x1e>
 8007e56:	4630      	mov	r0, r6
 8007e58:	bd70      	pop	{r4, r5, r6, pc}
 8007e5a:	220c      	movs	r2, #12
 8007e5c:	6002      	str	r2, [r0, #0]
 8007e5e:	2600      	movs	r6, #0
 8007e60:	e7f9      	b.n	8007e56 <_calloc_r+0x12>
 8007e62:	462a      	mov	r2, r5
 8007e64:	4621      	mov	r1, r4
 8007e66:	f7fe fbb0 	bl	80065ca <memset>
 8007e6a:	e7f4      	b.n	8007e56 <_calloc_r+0x12>

08007e6c <__ascii_mbtowc>:
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	b901      	cbnz	r1, 8007e72 <__ascii_mbtowc+0x6>
 8007e70:	a901      	add	r1, sp, #4
 8007e72:	b142      	cbz	r2, 8007e86 <__ascii_mbtowc+0x1a>
 8007e74:	b14b      	cbz	r3, 8007e8a <__ascii_mbtowc+0x1e>
 8007e76:	7813      	ldrb	r3, [r2, #0]
 8007e78:	600b      	str	r3, [r1, #0]
 8007e7a:	7812      	ldrb	r2, [r2, #0]
 8007e7c:	1e10      	subs	r0, r2, #0
 8007e7e:	bf18      	it	ne
 8007e80:	2001      	movne	r0, #1
 8007e82:	b002      	add	sp, #8
 8007e84:	4770      	bx	lr
 8007e86:	4610      	mov	r0, r2
 8007e88:	e7fb      	b.n	8007e82 <__ascii_mbtowc+0x16>
 8007e8a:	f06f 0001 	mvn.w	r0, #1
 8007e8e:	e7f8      	b.n	8007e82 <__ascii_mbtowc+0x16>

08007e90 <__ascii_wctomb>:
 8007e90:	4603      	mov	r3, r0
 8007e92:	4608      	mov	r0, r1
 8007e94:	b141      	cbz	r1, 8007ea8 <__ascii_wctomb+0x18>
 8007e96:	2aff      	cmp	r2, #255	@ 0xff
 8007e98:	d904      	bls.n	8007ea4 <__ascii_wctomb+0x14>
 8007e9a:	228a      	movs	r2, #138	@ 0x8a
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ea2:	4770      	bx	lr
 8007ea4:	700a      	strb	r2, [r1, #0]
 8007ea6:	2001      	movs	r0, #1
 8007ea8:	4770      	bx	lr
	...

08007eac <fiprintf>:
 8007eac:	b40e      	push	{r1, r2, r3}
 8007eae:	b503      	push	{r0, r1, lr}
 8007eb0:	4601      	mov	r1, r0
 8007eb2:	ab03      	add	r3, sp, #12
 8007eb4:	4805      	ldr	r0, [pc, #20]	@ (8007ecc <fiprintf+0x20>)
 8007eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eba:	6800      	ldr	r0, [r0, #0]
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	f000 f837 	bl	8007f30 <_vfiprintf_r>
 8007ec2:	b002      	add	sp, #8
 8007ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ec8:	b003      	add	sp, #12
 8007eca:	4770      	bx	lr
 8007ecc:	20000020 	.word	0x20000020

08007ed0 <abort>:
 8007ed0:	b508      	push	{r3, lr}
 8007ed2:	2006      	movs	r0, #6
 8007ed4:	f000 fa00 	bl	80082d8 <raise>
 8007ed8:	2001      	movs	r0, #1
 8007eda:	f7fa ffe1 	bl	8002ea0 <_exit>

08007ede <__sfputc_r>:
 8007ede:	6893      	ldr	r3, [r2, #8]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	b410      	push	{r4}
 8007ee6:	6093      	str	r3, [r2, #8]
 8007ee8:	da08      	bge.n	8007efc <__sfputc_r+0x1e>
 8007eea:	6994      	ldr	r4, [r2, #24]
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	db01      	blt.n	8007ef4 <__sfputc_r+0x16>
 8007ef0:	290a      	cmp	r1, #10
 8007ef2:	d103      	bne.n	8007efc <__sfputc_r+0x1e>
 8007ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ef8:	f000 b932 	b.w	8008160 <__swbuf_r>
 8007efc:	6813      	ldr	r3, [r2, #0]
 8007efe:	1c58      	adds	r0, r3, #1
 8007f00:	6010      	str	r0, [r2, #0]
 8007f02:	7019      	strb	r1, [r3, #0]
 8007f04:	4608      	mov	r0, r1
 8007f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <__sfputs_r>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	4606      	mov	r6, r0
 8007f10:	460f      	mov	r7, r1
 8007f12:	4614      	mov	r4, r2
 8007f14:	18d5      	adds	r5, r2, r3
 8007f16:	42ac      	cmp	r4, r5
 8007f18:	d101      	bne.n	8007f1e <__sfputs_r+0x12>
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	e007      	b.n	8007f2e <__sfputs_r+0x22>
 8007f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f22:	463a      	mov	r2, r7
 8007f24:	4630      	mov	r0, r6
 8007f26:	f7ff ffda 	bl	8007ede <__sfputc_r>
 8007f2a:	1c43      	adds	r3, r0, #1
 8007f2c:	d1f3      	bne.n	8007f16 <__sfputs_r+0xa>
 8007f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f30 <_vfiprintf_r>:
 8007f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f34:	460d      	mov	r5, r1
 8007f36:	b09d      	sub	sp, #116	@ 0x74
 8007f38:	4614      	mov	r4, r2
 8007f3a:	4698      	mov	r8, r3
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	b118      	cbz	r0, 8007f48 <_vfiprintf_r+0x18>
 8007f40:	6a03      	ldr	r3, [r0, #32]
 8007f42:	b90b      	cbnz	r3, 8007f48 <_vfiprintf_r+0x18>
 8007f44:	f7fe fac8 	bl	80064d8 <__sinit>
 8007f48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f4a:	07d9      	lsls	r1, r3, #31
 8007f4c:	d405      	bmi.n	8007f5a <_vfiprintf_r+0x2a>
 8007f4e:	89ab      	ldrh	r3, [r5, #12]
 8007f50:	059a      	lsls	r2, r3, #22
 8007f52:	d402      	bmi.n	8007f5a <_vfiprintf_r+0x2a>
 8007f54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f56:	f7fe fbb6 	bl	80066c6 <__retarget_lock_acquire_recursive>
 8007f5a:	89ab      	ldrh	r3, [r5, #12]
 8007f5c:	071b      	lsls	r3, r3, #28
 8007f5e:	d501      	bpl.n	8007f64 <_vfiprintf_r+0x34>
 8007f60:	692b      	ldr	r3, [r5, #16]
 8007f62:	b99b      	cbnz	r3, 8007f8c <_vfiprintf_r+0x5c>
 8007f64:	4629      	mov	r1, r5
 8007f66:	4630      	mov	r0, r6
 8007f68:	f000 f938 	bl	80081dc <__swsetup_r>
 8007f6c:	b170      	cbz	r0, 8007f8c <_vfiprintf_r+0x5c>
 8007f6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f70:	07dc      	lsls	r4, r3, #31
 8007f72:	d504      	bpl.n	8007f7e <_vfiprintf_r+0x4e>
 8007f74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f78:	b01d      	add	sp, #116	@ 0x74
 8007f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7e:	89ab      	ldrh	r3, [r5, #12]
 8007f80:	0598      	lsls	r0, r3, #22
 8007f82:	d4f7      	bmi.n	8007f74 <_vfiprintf_r+0x44>
 8007f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f86:	f7fe fb9f 	bl	80066c8 <__retarget_lock_release_recursive>
 8007f8a:	e7f3      	b.n	8007f74 <_vfiprintf_r+0x44>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f90:	2320      	movs	r3, #32
 8007f92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f9a:	2330      	movs	r3, #48	@ 0x30
 8007f9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800814c <_vfiprintf_r+0x21c>
 8007fa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fa4:	f04f 0901 	mov.w	r9, #1
 8007fa8:	4623      	mov	r3, r4
 8007faa:	469a      	mov	sl, r3
 8007fac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fb0:	b10a      	cbz	r2, 8007fb6 <_vfiprintf_r+0x86>
 8007fb2:	2a25      	cmp	r2, #37	@ 0x25
 8007fb4:	d1f9      	bne.n	8007faa <_vfiprintf_r+0x7a>
 8007fb6:	ebba 0b04 	subs.w	fp, sl, r4
 8007fba:	d00b      	beq.n	8007fd4 <_vfiprintf_r+0xa4>
 8007fbc:	465b      	mov	r3, fp
 8007fbe:	4622      	mov	r2, r4
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	f7ff ffa2 	bl	8007f0c <__sfputs_r>
 8007fc8:	3001      	adds	r0, #1
 8007fca:	f000 80a7 	beq.w	800811c <_vfiprintf_r+0x1ec>
 8007fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fd0:	445a      	add	r2, fp
 8007fd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 809f 	beq.w	800811c <_vfiprintf_r+0x1ec>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007fe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fe8:	f10a 0a01 	add.w	sl, sl, #1
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	9307      	str	r3, [sp, #28]
 8007ff0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ff4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ff6:	4654      	mov	r4, sl
 8007ff8:	2205      	movs	r2, #5
 8007ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ffe:	4853      	ldr	r0, [pc, #332]	@ (800814c <_vfiprintf_r+0x21c>)
 8008000:	f7f8 f8ee 	bl	80001e0 <memchr>
 8008004:	9a04      	ldr	r2, [sp, #16]
 8008006:	b9d8      	cbnz	r0, 8008040 <_vfiprintf_r+0x110>
 8008008:	06d1      	lsls	r1, r2, #27
 800800a:	bf44      	itt	mi
 800800c:	2320      	movmi	r3, #32
 800800e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008012:	0713      	lsls	r3, r2, #28
 8008014:	bf44      	itt	mi
 8008016:	232b      	movmi	r3, #43	@ 0x2b
 8008018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800801c:	f89a 3000 	ldrb.w	r3, [sl]
 8008020:	2b2a      	cmp	r3, #42	@ 0x2a
 8008022:	d015      	beq.n	8008050 <_vfiprintf_r+0x120>
 8008024:	9a07      	ldr	r2, [sp, #28]
 8008026:	4654      	mov	r4, sl
 8008028:	2000      	movs	r0, #0
 800802a:	f04f 0c0a 	mov.w	ip, #10
 800802e:	4621      	mov	r1, r4
 8008030:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008034:	3b30      	subs	r3, #48	@ 0x30
 8008036:	2b09      	cmp	r3, #9
 8008038:	d94b      	bls.n	80080d2 <_vfiprintf_r+0x1a2>
 800803a:	b1b0      	cbz	r0, 800806a <_vfiprintf_r+0x13a>
 800803c:	9207      	str	r2, [sp, #28]
 800803e:	e014      	b.n	800806a <_vfiprintf_r+0x13a>
 8008040:	eba0 0308 	sub.w	r3, r0, r8
 8008044:	fa09 f303 	lsl.w	r3, r9, r3
 8008048:	4313      	orrs	r3, r2
 800804a:	9304      	str	r3, [sp, #16]
 800804c:	46a2      	mov	sl, r4
 800804e:	e7d2      	b.n	8007ff6 <_vfiprintf_r+0xc6>
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	1d19      	adds	r1, r3, #4
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	9103      	str	r1, [sp, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	bfbb      	ittet	lt
 800805c:	425b      	neglt	r3, r3
 800805e:	f042 0202 	orrlt.w	r2, r2, #2
 8008062:	9307      	strge	r3, [sp, #28]
 8008064:	9307      	strlt	r3, [sp, #28]
 8008066:	bfb8      	it	lt
 8008068:	9204      	strlt	r2, [sp, #16]
 800806a:	7823      	ldrb	r3, [r4, #0]
 800806c:	2b2e      	cmp	r3, #46	@ 0x2e
 800806e:	d10a      	bne.n	8008086 <_vfiprintf_r+0x156>
 8008070:	7863      	ldrb	r3, [r4, #1]
 8008072:	2b2a      	cmp	r3, #42	@ 0x2a
 8008074:	d132      	bne.n	80080dc <_vfiprintf_r+0x1ac>
 8008076:	9b03      	ldr	r3, [sp, #12]
 8008078:	1d1a      	adds	r2, r3, #4
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	9203      	str	r2, [sp, #12]
 800807e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008082:	3402      	adds	r4, #2
 8008084:	9305      	str	r3, [sp, #20]
 8008086:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800815c <_vfiprintf_r+0x22c>
 800808a:	7821      	ldrb	r1, [r4, #0]
 800808c:	2203      	movs	r2, #3
 800808e:	4650      	mov	r0, sl
 8008090:	f7f8 f8a6 	bl	80001e0 <memchr>
 8008094:	b138      	cbz	r0, 80080a6 <_vfiprintf_r+0x176>
 8008096:	9b04      	ldr	r3, [sp, #16]
 8008098:	eba0 000a 	sub.w	r0, r0, sl
 800809c:	2240      	movs	r2, #64	@ 0x40
 800809e:	4082      	lsls	r2, r0
 80080a0:	4313      	orrs	r3, r2
 80080a2:	3401      	adds	r4, #1
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080aa:	4829      	ldr	r0, [pc, #164]	@ (8008150 <_vfiprintf_r+0x220>)
 80080ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080b0:	2206      	movs	r2, #6
 80080b2:	f7f8 f895 	bl	80001e0 <memchr>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d03f      	beq.n	800813a <_vfiprintf_r+0x20a>
 80080ba:	4b26      	ldr	r3, [pc, #152]	@ (8008154 <_vfiprintf_r+0x224>)
 80080bc:	bb1b      	cbnz	r3, 8008106 <_vfiprintf_r+0x1d6>
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	3307      	adds	r3, #7
 80080c2:	f023 0307 	bic.w	r3, r3, #7
 80080c6:	3308      	adds	r3, #8
 80080c8:	9303      	str	r3, [sp, #12]
 80080ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080cc:	443b      	add	r3, r7
 80080ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d0:	e76a      	b.n	8007fa8 <_vfiprintf_r+0x78>
 80080d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80080d6:	460c      	mov	r4, r1
 80080d8:	2001      	movs	r0, #1
 80080da:	e7a8      	b.n	800802e <_vfiprintf_r+0xfe>
 80080dc:	2300      	movs	r3, #0
 80080de:	3401      	adds	r4, #1
 80080e0:	9305      	str	r3, [sp, #20]
 80080e2:	4619      	mov	r1, r3
 80080e4:	f04f 0c0a 	mov.w	ip, #10
 80080e8:	4620      	mov	r0, r4
 80080ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080ee:	3a30      	subs	r2, #48	@ 0x30
 80080f0:	2a09      	cmp	r2, #9
 80080f2:	d903      	bls.n	80080fc <_vfiprintf_r+0x1cc>
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0c6      	beq.n	8008086 <_vfiprintf_r+0x156>
 80080f8:	9105      	str	r1, [sp, #20]
 80080fa:	e7c4      	b.n	8008086 <_vfiprintf_r+0x156>
 80080fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008100:	4604      	mov	r4, r0
 8008102:	2301      	movs	r3, #1
 8008104:	e7f0      	b.n	80080e8 <_vfiprintf_r+0x1b8>
 8008106:	ab03      	add	r3, sp, #12
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	462a      	mov	r2, r5
 800810c:	4b12      	ldr	r3, [pc, #72]	@ (8008158 <_vfiprintf_r+0x228>)
 800810e:	a904      	add	r1, sp, #16
 8008110:	4630      	mov	r0, r6
 8008112:	f7fd fd9f 	bl	8005c54 <_printf_float>
 8008116:	4607      	mov	r7, r0
 8008118:	1c78      	adds	r0, r7, #1
 800811a:	d1d6      	bne.n	80080ca <_vfiprintf_r+0x19a>
 800811c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800811e:	07d9      	lsls	r1, r3, #31
 8008120:	d405      	bmi.n	800812e <_vfiprintf_r+0x1fe>
 8008122:	89ab      	ldrh	r3, [r5, #12]
 8008124:	059a      	lsls	r2, r3, #22
 8008126:	d402      	bmi.n	800812e <_vfiprintf_r+0x1fe>
 8008128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800812a:	f7fe facd 	bl	80066c8 <__retarget_lock_release_recursive>
 800812e:	89ab      	ldrh	r3, [r5, #12]
 8008130:	065b      	lsls	r3, r3, #25
 8008132:	f53f af1f 	bmi.w	8007f74 <_vfiprintf_r+0x44>
 8008136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008138:	e71e      	b.n	8007f78 <_vfiprintf_r+0x48>
 800813a:	ab03      	add	r3, sp, #12
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	462a      	mov	r2, r5
 8008140:	4b05      	ldr	r3, [pc, #20]	@ (8008158 <_vfiprintf_r+0x228>)
 8008142:	a904      	add	r1, sp, #16
 8008144:	4630      	mov	r0, r6
 8008146:	f7fe f81d 	bl	8006184 <_printf_i>
 800814a:	e7e4      	b.n	8008116 <_vfiprintf_r+0x1e6>
 800814c:	08009698 	.word	0x08009698
 8008150:	080096a2 	.word	0x080096a2
 8008154:	08005c55 	.word	0x08005c55
 8008158:	08007f0d 	.word	0x08007f0d
 800815c:	0800969e 	.word	0x0800969e

08008160 <__swbuf_r>:
 8008160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008162:	460e      	mov	r6, r1
 8008164:	4614      	mov	r4, r2
 8008166:	4605      	mov	r5, r0
 8008168:	b118      	cbz	r0, 8008172 <__swbuf_r+0x12>
 800816a:	6a03      	ldr	r3, [r0, #32]
 800816c:	b90b      	cbnz	r3, 8008172 <__swbuf_r+0x12>
 800816e:	f7fe f9b3 	bl	80064d8 <__sinit>
 8008172:	69a3      	ldr	r3, [r4, #24]
 8008174:	60a3      	str	r3, [r4, #8]
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	071a      	lsls	r2, r3, #28
 800817a:	d501      	bpl.n	8008180 <__swbuf_r+0x20>
 800817c:	6923      	ldr	r3, [r4, #16]
 800817e:	b943      	cbnz	r3, 8008192 <__swbuf_r+0x32>
 8008180:	4621      	mov	r1, r4
 8008182:	4628      	mov	r0, r5
 8008184:	f000 f82a 	bl	80081dc <__swsetup_r>
 8008188:	b118      	cbz	r0, 8008192 <__swbuf_r+0x32>
 800818a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800818e:	4638      	mov	r0, r7
 8008190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	6922      	ldr	r2, [r4, #16]
 8008196:	1a98      	subs	r0, r3, r2
 8008198:	6963      	ldr	r3, [r4, #20]
 800819a:	b2f6      	uxtb	r6, r6
 800819c:	4283      	cmp	r3, r0
 800819e:	4637      	mov	r7, r6
 80081a0:	dc05      	bgt.n	80081ae <__swbuf_r+0x4e>
 80081a2:	4621      	mov	r1, r4
 80081a4:	4628      	mov	r0, r5
 80081a6:	f7ff fde9 	bl	8007d7c <_fflush_r>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d1ed      	bne.n	800818a <__swbuf_r+0x2a>
 80081ae:	68a3      	ldr	r3, [r4, #8]
 80081b0:	3b01      	subs	r3, #1
 80081b2:	60a3      	str	r3, [r4, #8]
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	6022      	str	r2, [r4, #0]
 80081ba:	701e      	strb	r6, [r3, #0]
 80081bc:	6962      	ldr	r2, [r4, #20]
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d004      	beq.n	80081ce <__swbuf_r+0x6e>
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	07db      	lsls	r3, r3, #31
 80081c8:	d5e1      	bpl.n	800818e <__swbuf_r+0x2e>
 80081ca:	2e0a      	cmp	r6, #10
 80081cc:	d1df      	bne.n	800818e <__swbuf_r+0x2e>
 80081ce:	4621      	mov	r1, r4
 80081d0:	4628      	mov	r0, r5
 80081d2:	f7ff fdd3 	bl	8007d7c <_fflush_r>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d0d9      	beq.n	800818e <__swbuf_r+0x2e>
 80081da:	e7d6      	b.n	800818a <__swbuf_r+0x2a>

080081dc <__swsetup_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4b29      	ldr	r3, [pc, #164]	@ (8008284 <__swsetup_r+0xa8>)
 80081e0:	4605      	mov	r5, r0
 80081e2:	6818      	ldr	r0, [r3, #0]
 80081e4:	460c      	mov	r4, r1
 80081e6:	b118      	cbz	r0, 80081f0 <__swsetup_r+0x14>
 80081e8:	6a03      	ldr	r3, [r0, #32]
 80081ea:	b90b      	cbnz	r3, 80081f0 <__swsetup_r+0x14>
 80081ec:	f7fe f974 	bl	80064d8 <__sinit>
 80081f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f4:	0719      	lsls	r1, r3, #28
 80081f6:	d422      	bmi.n	800823e <__swsetup_r+0x62>
 80081f8:	06da      	lsls	r2, r3, #27
 80081fa:	d407      	bmi.n	800820c <__swsetup_r+0x30>
 80081fc:	2209      	movs	r2, #9
 80081fe:	602a      	str	r2, [r5, #0]
 8008200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008204:	81a3      	strh	r3, [r4, #12]
 8008206:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800820a:	e033      	b.n	8008274 <__swsetup_r+0x98>
 800820c:	0758      	lsls	r0, r3, #29
 800820e:	d512      	bpl.n	8008236 <__swsetup_r+0x5a>
 8008210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008212:	b141      	cbz	r1, 8008226 <__swsetup_r+0x4a>
 8008214:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008218:	4299      	cmp	r1, r3
 800821a:	d002      	beq.n	8008222 <__swsetup_r+0x46>
 800821c:	4628      	mov	r0, r5
 800821e:	f7ff f8af 	bl	8007380 <_free_r>
 8008222:	2300      	movs	r3, #0
 8008224:	6363      	str	r3, [r4, #52]	@ 0x34
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	2300      	movs	r3, #0
 8008230:	6063      	str	r3, [r4, #4]
 8008232:	6923      	ldr	r3, [r4, #16]
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	f043 0308 	orr.w	r3, r3, #8
 800823c:	81a3      	strh	r3, [r4, #12]
 800823e:	6923      	ldr	r3, [r4, #16]
 8008240:	b94b      	cbnz	r3, 8008256 <__swsetup_r+0x7a>
 8008242:	89a3      	ldrh	r3, [r4, #12]
 8008244:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800824c:	d003      	beq.n	8008256 <__swsetup_r+0x7a>
 800824e:	4621      	mov	r1, r4
 8008250:	4628      	mov	r0, r5
 8008252:	f000 f883 	bl	800835c <__smakebuf_r>
 8008256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825a:	f013 0201 	ands.w	r2, r3, #1
 800825e:	d00a      	beq.n	8008276 <__swsetup_r+0x9a>
 8008260:	2200      	movs	r2, #0
 8008262:	60a2      	str	r2, [r4, #8]
 8008264:	6962      	ldr	r2, [r4, #20]
 8008266:	4252      	negs	r2, r2
 8008268:	61a2      	str	r2, [r4, #24]
 800826a:	6922      	ldr	r2, [r4, #16]
 800826c:	b942      	cbnz	r2, 8008280 <__swsetup_r+0xa4>
 800826e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008272:	d1c5      	bne.n	8008200 <__swsetup_r+0x24>
 8008274:	bd38      	pop	{r3, r4, r5, pc}
 8008276:	0799      	lsls	r1, r3, #30
 8008278:	bf58      	it	pl
 800827a:	6962      	ldrpl	r2, [r4, #20]
 800827c:	60a2      	str	r2, [r4, #8]
 800827e:	e7f4      	b.n	800826a <__swsetup_r+0x8e>
 8008280:	2000      	movs	r0, #0
 8008282:	e7f7      	b.n	8008274 <__swsetup_r+0x98>
 8008284:	20000020 	.word	0x20000020

08008288 <_raise_r>:
 8008288:	291f      	cmp	r1, #31
 800828a:	b538      	push	{r3, r4, r5, lr}
 800828c:	4605      	mov	r5, r0
 800828e:	460c      	mov	r4, r1
 8008290:	d904      	bls.n	800829c <_raise_r+0x14>
 8008292:	2316      	movs	r3, #22
 8008294:	6003      	str	r3, [r0, #0]
 8008296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800829e:	b112      	cbz	r2, 80082a6 <_raise_r+0x1e>
 80082a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082a4:	b94b      	cbnz	r3, 80082ba <_raise_r+0x32>
 80082a6:	4628      	mov	r0, r5
 80082a8:	f000 f830 	bl	800830c <_getpid_r>
 80082ac:	4622      	mov	r2, r4
 80082ae:	4601      	mov	r1, r0
 80082b0:	4628      	mov	r0, r5
 80082b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082b6:	f000 b817 	b.w	80082e8 <_kill_r>
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d00a      	beq.n	80082d4 <_raise_r+0x4c>
 80082be:	1c59      	adds	r1, r3, #1
 80082c0:	d103      	bne.n	80082ca <_raise_r+0x42>
 80082c2:	2316      	movs	r3, #22
 80082c4:	6003      	str	r3, [r0, #0]
 80082c6:	2001      	movs	r0, #1
 80082c8:	e7e7      	b.n	800829a <_raise_r+0x12>
 80082ca:	2100      	movs	r1, #0
 80082cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082d0:	4620      	mov	r0, r4
 80082d2:	4798      	blx	r3
 80082d4:	2000      	movs	r0, #0
 80082d6:	e7e0      	b.n	800829a <_raise_r+0x12>

080082d8 <raise>:
 80082d8:	4b02      	ldr	r3, [pc, #8]	@ (80082e4 <raise+0xc>)
 80082da:	4601      	mov	r1, r0
 80082dc:	6818      	ldr	r0, [r3, #0]
 80082de:	f7ff bfd3 	b.w	8008288 <_raise_r>
 80082e2:	bf00      	nop
 80082e4:	20000020 	.word	0x20000020

080082e8 <_kill_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4d07      	ldr	r5, [pc, #28]	@ (8008308 <_kill_r+0x20>)
 80082ec:	2300      	movs	r3, #0
 80082ee:	4604      	mov	r4, r0
 80082f0:	4608      	mov	r0, r1
 80082f2:	4611      	mov	r1, r2
 80082f4:	602b      	str	r3, [r5, #0]
 80082f6:	f7fa fdc3 	bl	8002e80 <_kill>
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	d102      	bne.n	8008304 <_kill_r+0x1c>
 80082fe:	682b      	ldr	r3, [r5, #0]
 8008300:	b103      	cbz	r3, 8008304 <_kill_r+0x1c>
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	bd38      	pop	{r3, r4, r5, pc}
 8008306:	bf00      	nop
 8008308:	20000518 	.word	0x20000518

0800830c <_getpid_r>:
 800830c:	f7fa bdb0 	b.w	8002e70 <_getpid>

08008310 <__swhatbuf_r>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	460c      	mov	r4, r1
 8008314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008318:	2900      	cmp	r1, #0
 800831a:	b096      	sub	sp, #88	@ 0x58
 800831c:	4615      	mov	r5, r2
 800831e:	461e      	mov	r6, r3
 8008320:	da0d      	bge.n	800833e <__swhatbuf_r+0x2e>
 8008322:	89a3      	ldrh	r3, [r4, #12]
 8008324:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008328:	f04f 0100 	mov.w	r1, #0
 800832c:	bf14      	ite	ne
 800832e:	2340      	movne	r3, #64	@ 0x40
 8008330:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008334:	2000      	movs	r0, #0
 8008336:	6031      	str	r1, [r6, #0]
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	b016      	add	sp, #88	@ 0x58
 800833c:	bd70      	pop	{r4, r5, r6, pc}
 800833e:	466a      	mov	r2, sp
 8008340:	f000 f848 	bl	80083d4 <_fstat_r>
 8008344:	2800      	cmp	r0, #0
 8008346:	dbec      	blt.n	8008322 <__swhatbuf_r+0x12>
 8008348:	9901      	ldr	r1, [sp, #4]
 800834a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800834e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008352:	4259      	negs	r1, r3
 8008354:	4159      	adcs	r1, r3
 8008356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800835a:	e7eb      	b.n	8008334 <__swhatbuf_r+0x24>

0800835c <__smakebuf_r>:
 800835c:	898b      	ldrh	r3, [r1, #12]
 800835e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008360:	079d      	lsls	r5, r3, #30
 8008362:	4606      	mov	r6, r0
 8008364:	460c      	mov	r4, r1
 8008366:	d507      	bpl.n	8008378 <__smakebuf_r+0x1c>
 8008368:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	6123      	str	r3, [r4, #16]
 8008370:	2301      	movs	r3, #1
 8008372:	6163      	str	r3, [r4, #20]
 8008374:	b003      	add	sp, #12
 8008376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008378:	ab01      	add	r3, sp, #4
 800837a:	466a      	mov	r2, sp
 800837c:	f7ff ffc8 	bl	8008310 <__swhatbuf_r>
 8008380:	9f00      	ldr	r7, [sp, #0]
 8008382:	4605      	mov	r5, r0
 8008384:	4639      	mov	r1, r7
 8008386:	4630      	mov	r0, r6
 8008388:	f7ff f86e 	bl	8007468 <_malloc_r>
 800838c:	b948      	cbnz	r0, 80083a2 <__smakebuf_r+0x46>
 800838e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008392:	059a      	lsls	r2, r3, #22
 8008394:	d4ee      	bmi.n	8008374 <__smakebuf_r+0x18>
 8008396:	f023 0303 	bic.w	r3, r3, #3
 800839a:	f043 0302 	orr.w	r3, r3, #2
 800839e:	81a3      	strh	r3, [r4, #12]
 80083a0:	e7e2      	b.n	8008368 <__smakebuf_r+0xc>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	6020      	str	r0, [r4, #0]
 80083a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	9b01      	ldr	r3, [sp, #4]
 80083ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80083b2:	b15b      	cbz	r3, 80083cc <__smakebuf_r+0x70>
 80083b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083b8:	4630      	mov	r0, r6
 80083ba:	f000 f81d 	bl	80083f8 <_isatty_r>
 80083be:	b128      	cbz	r0, 80083cc <__smakebuf_r+0x70>
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	f023 0303 	bic.w	r3, r3, #3
 80083c6:	f043 0301 	orr.w	r3, r3, #1
 80083ca:	81a3      	strh	r3, [r4, #12]
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	431d      	orrs	r5, r3
 80083d0:	81a5      	strh	r5, [r4, #12]
 80083d2:	e7cf      	b.n	8008374 <__smakebuf_r+0x18>

080083d4 <_fstat_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4d07      	ldr	r5, [pc, #28]	@ (80083f4 <_fstat_r+0x20>)
 80083d8:	2300      	movs	r3, #0
 80083da:	4604      	mov	r4, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	4611      	mov	r1, r2
 80083e0:	602b      	str	r3, [r5, #0]
 80083e2:	f7fa fdad 	bl	8002f40 <_fstat>
 80083e6:	1c43      	adds	r3, r0, #1
 80083e8:	d102      	bne.n	80083f0 <_fstat_r+0x1c>
 80083ea:	682b      	ldr	r3, [r5, #0]
 80083ec:	b103      	cbz	r3, 80083f0 <_fstat_r+0x1c>
 80083ee:	6023      	str	r3, [r4, #0]
 80083f0:	bd38      	pop	{r3, r4, r5, pc}
 80083f2:	bf00      	nop
 80083f4:	20000518 	.word	0x20000518

080083f8 <_isatty_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d06      	ldr	r5, [pc, #24]	@ (8008414 <_isatty_r+0x1c>)
 80083fc:	2300      	movs	r3, #0
 80083fe:	4604      	mov	r4, r0
 8008400:	4608      	mov	r0, r1
 8008402:	602b      	str	r3, [r5, #0]
 8008404:	f7fa fdac 	bl	8002f60 <_isatty>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_isatty_r+0x1a>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_isatty_r+0x1a>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	20000518 	.word	0x20000518

08008418 <cos>:
 8008418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800841a:	ec53 2b10 	vmov	r2, r3, d0
 800841e:	4826      	ldr	r0, [pc, #152]	@ (80084b8 <cos+0xa0>)
 8008420:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008424:	4281      	cmp	r1, r0
 8008426:	d806      	bhi.n	8008436 <cos+0x1e>
 8008428:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80084b0 <cos+0x98>
 800842c:	b005      	add	sp, #20
 800842e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008432:	f000 b899 	b.w	8008568 <__kernel_cos>
 8008436:	4821      	ldr	r0, [pc, #132]	@ (80084bc <cos+0xa4>)
 8008438:	4281      	cmp	r1, r0
 800843a:	d908      	bls.n	800844e <cos+0x36>
 800843c:	4610      	mov	r0, r2
 800843e:	4619      	mov	r1, r3
 8008440:	f7f7 ff2a 	bl	8000298 <__aeabi_dsub>
 8008444:	ec41 0b10 	vmov	d0, r0, r1
 8008448:	b005      	add	sp, #20
 800844a:	f85d fb04 	ldr.w	pc, [sp], #4
 800844e:	4668      	mov	r0, sp
 8008450:	f000 fa0e 	bl	8008870 <__ieee754_rem_pio2>
 8008454:	f000 0003 	and.w	r0, r0, #3
 8008458:	2801      	cmp	r0, #1
 800845a:	d00b      	beq.n	8008474 <cos+0x5c>
 800845c:	2802      	cmp	r0, #2
 800845e:	d015      	beq.n	800848c <cos+0x74>
 8008460:	b9d8      	cbnz	r0, 800849a <cos+0x82>
 8008462:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008466:	ed9d 0b00 	vldr	d0, [sp]
 800846a:	f000 f87d 	bl	8008568 <__kernel_cos>
 800846e:	ec51 0b10 	vmov	r0, r1, d0
 8008472:	e7e7      	b.n	8008444 <cos+0x2c>
 8008474:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008478:	ed9d 0b00 	vldr	d0, [sp]
 800847c:	f000 f93c 	bl	80086f8 <__kernel_sin>
 8008480:	ec53 2b10 	vmov	r2, r3, d0
 8008484:	4610      	mov	r0, r2
 8008486:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800848a:	e7db      	b.n	8008444 <cos+0x2c>
 800848c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008490:	ed9d 0b00 	vldr	d0, [sp]
 8008494:	f000 f868 	bl	8008568 <__kernel_cos>
 8008498:	e7f2      	b.n	8008480 <cos+0x68>
 800849a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800849e:	ed9d 0b00 	vldr	d0, [sp]
 80084a2:	2001      	movs	r0, #1
 80084a4:	f000 f928 	bl	80086f8 <__kernel_sin>
 80084a8:	e7e1      	b.n	800846e <cos+0x56>
 80084aa:	bf00      	nop
 80084ac:	f3af 8000 	nop.w
	...
 80084b8:	3fe921fb 	.word	0x3fe921fb
 80084bc:	7fefffff 	.word	0x7fefffff

080084c0 <sin>:
 80084c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084c2:	ec53 2b10 	vmov	r2, r3, d0
 80084c6:	4826      	ldr	r0, [pc, #152]	@ (8008560 <sin+0xa0>)
 80084c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80084cc:	4281      	cmp	r1, r0
 80084ce:	d807      	bhi.n	80084e0 <sin+0x20>
 80084d0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008558 <sin+0x98>
 80084d4:	2000      	movs	r0, #0
 80084d6:	b005      	add	sp, #20
 80084d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084dc:	f000 b90c 	b.w	80086f8 <__kernel_sin>
 80084e0:	4820      	ldr	r0, [pc, #128]	@ (8008564 <sin+0xa4>)
 80084e2:	4281      	cmp	r1, r0
 80084e4:	d908      	bls.n	80084f8 <sin+0x38>
 80084e6:	4610      	mov	r0, r2
 80084e8:	4619      	mov	r1, r3
 80084ea:	f7f7 fed5 	bl	8000298 <__aeabi_dsub>
 80084ee:	ec41 0b10 	vmov	d0, r0, r1
 80084f2:	b005      	add	sp, #20
 80084f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80084f8:	4668      	mov	r0, sp
 80084fa:	f000 f9b9 	bl	8008870 <__ieee754_rem_pio2>
 80084fe:	f000 0003 	and.w	r0, r0, #3
 8008502:	2801      	cmp	r0, #1
 8008504:	d00c      	beq.n	8008520 <sin+0x60>
 8008506:	2802      	cmp	r0, #2
 8008508:	d011      	beq.n	800852e <sin+0x6e>
 800850a:	b9e8      	cbnz	r0, 8008548 <sin+0x88>
 800850c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008510:	ed9d 0b00 	vldr	d0, [sp]
 8008514:	2001      	movs	r0, #1
 8008516:	f000 f8ef 	bl	80086f8 <__kernel_sin>
 800851a:	ec51 0b10 	vmov	r0, r1, d0
 800851e:	e7e6      	b.n	80084ee <sin+0x2e>
 8008520:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008524:	ed9d 0b00 	vldr	d0, [sp]
 8008528:	f000 f81e 	bl	8008568 <__kernel_cos>
 800852c:	e7f5      	b.n	800851a <sin+0x5a>
 800852e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008532:	ed9d 0b00 	vldr	d0, [sp]
 8008536:	2001      	movs	r0, #1
 8008538:	f000 f8de 	bl	80086f8 <__kernel_sin>
 800853c:	ec53 2b10 	vmov	r2, r3, d0
 8008540:	4610      	mov	r0, r2
 8008542:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008546:	e7d2      	b.n	80084ee <sin+0x2e>
 8008548:	ed9d 1b02 	vldr	d1, [sp, #8]
 800854c:	ed9d 0b00 	vldr	d0, [sp]
 8008550:	f000 f80a 	bl	8008568 <__kernel_cos>
 8008554:	e7f2      	b.n	800853c <sin+0x7c>
 8008556:	bf00      	nop
	...
 8008560:	3fe921fb 	.word	0x3fe921fb
 8008564:	7fefffff 	.word	0x7fefffff

08008568 <__kernel_cos>:
 8008568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	ec57 6b10 	vmov	r6, r7, d0
 8008570:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008574:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008578:	ed8d 1b00 	vstr	d1, [sp]
 800857c:	d206      	bcs.n	800858c <__kernel_cos+0x24>
 800857e:	4630      	mov	r0, r6
 8008580:	4639      	mov	r1, r7
 8008582:	f7f8 faf1 	bl	8000b68 <__aeabi_d2iz>
 8008586:	2800      	cmp	r0, #0
 8008588:	f000 8088 	beq.w	800869c <__kernel_cos+0x134>
 800858c:	4632      	mov	r2, r6
 800858e:	463b      	mov	r3, r7
 8008590:	4630      	mov	r0, r6
 8008592:	4639      	mov	r1, r7
 8008594:	f7f8 f838 	bl	8000608 <__aeabi_dmul>
 8008598:	4b51      	ldr	r3, [pc, #324]	@ (80086e0 <__kernel_cos+0x178>)
 800859a:	2200      	movs	r2, #0
 800859c:	4604      	mov	r4, r0
 800859e:	460d      	mov	r5, r1
 80085a0:	f7f8 f832 	bl	8000608 <__aeabi_dmul>
 80085a4:	a340      	add	r3, pc, #256	@ (adr r3, 80086a8 <__kernel_cos+0x140>)
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	4682      	mov	sl, r0
 80085ac:	468b      	mov	fp, r1
 80085ae:	4620      	mov	r0, r4
 80085b0:	4629      	mov	r1, r5
 80085b2:	f7f8 f829 	bl	8000608 <__aeabi_dmul>
 80085b6:	a33e      	add	r3, pc, #248	@ (adr r3, 80086b0 <__kernel_cos+0x148>)
 80085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085bc:	f7f7 fe6e 	bl	800029c <__adddf3>
 80085c0:	4622      	mov	r2, r4
 80085c2:	462b      	mov	r3, r5
 80085c4:	f7f8 f820 	bl	8000608 <__aeabi_dmul>
 80085c8:	a33b      	add	r3, pc, #236	@ (adr r3, 80086b8 <__kernel_cos+0x150>)
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	f7f7 fe63 	bl	8000298 <__aeabi_dsub>
 80085d2:	4622      	mov	r2, r4
 80085d4:	462b      	mov	r3, r5
 80085d6:	f7f8 f817 	bl	8000608 <__aeabi_dmul>
 80085da:	a339      	add	r3, pc, #228	@ (adr r3, 80086c0 <__kernel_cos+0x158>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f7f7 fe5c 	bl	800029c <__adddf3>
 80085e4:	4622      	mov	r2, r4
 80085e6:	462b      	mov	r3, r5
 80085e8:	f7f8 f80e 	bl	8000608 <__aeabi_dmul>
 80085ec:	a336      	add	r3, pc, #216	@ (adr r3, 80086c8 <__kernel_cos+0x160>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	f7f7 fe51 	bl	8000298 <__aeabi_dsub>
 80085f6:	4622      	mov	r2, r4
 80085f8:	462b      	mov	r3, r5
 80085fa:	f7f8 f805 	bl	8000608 <__aeabi_dmul>
 80085fe:	a334      	add	r3, pc, #208	@ (adr r3, 80086d0 <__kernel_cos+0x168>)
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f7f7 fe4a 	bl	800029c <__adddf3>
 8008608:	4622      	mov	r2, r4
 800860a:	462b      	mov	r3, r5
 800860c:	f7f7 fffc 	bl	8000608 <__aeabi_dmul>
 8008610:	4622      	mov	r2, r4
 8008612:	462b      	mov	r3, r5
 8008614:	f7f7 fff8 	bl	8000608 <__aeabi_dmul>
 8008618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800861c:	4604      	mov	r4, r0
 800861e:	460d      	mov	r5, r1
 8008620:	4630      	mov	r0, r6
 8008622:	4639      	mov	r1, r7
 8008624:	f7f7 fff0 	bl	8000608 <__aeabi_dmul>
 8008628:	460b      	mov	r3, r1
 800862a:	4602      	mov	r2, r0
 800862c:	4629      	mov	r1, r5
 800862e:	4620      	mov	r0, r4
 8008630:	f7f7 fe32 	bl	8000298 <__aeabi_dsub>
 8008634:	4b2b      	ldr	r3, [pc, #172]	@ (80086e4 <__kernel_cos+0x17c>)
 8008636:	4598      	cmp	r8, r3
 8008638:	4606      	mov	r6, r0
 800863a:	460f      	mov	r7, r1
 800863c:	d810      	bhi.n	8008660 <__kernel_cos+0xf8>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4650      	mov	r0, sl
 8008644:	4659      	mov	r1, fp
 8008646:	f7f7 fe27 	bl	8000298 <__aeabi_dsub>
 800864a:	460b      	mov	r3, r1
 800864c:	4926      	ldr	r1, [pc, #152]	@ (80086e8 <__kernel_cos+0x180>)
 800864e:	4602      	mov	r2, r0
 8008650:	2000      	movs	r0, #0
 8008652:	f7f7 fe21 	bl	8000298 <__aeabi_dsub>
 8008656:	ec41 0b10 	vmov	d0, r0, r1
 800865a:	b003      	add	sp, #12
 800865c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008660:	4b22      	ldr	r3, [pc, #136]	@ (80086ec <__kernel_cos+0x184>)
 8008662:	4921      	ldr	r1, [pc, #132]	@ (80086e8 <__kernel_cos+0x180>)
 8008664:	4598      	cmp	r8, r3
 8008666:	bf8c      	ite	hi
 8008668:	4d21      	ldrhi	r5, [pc, #132]	@ (80086f0 <__kernel_cos+0x188>)
 800866a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800866e:	2400      	movs	r4, #0
 8008670:	4622      	mov	r2, r4
 8008672:	462b      	mov	r3, r5
 8008674:	2000      	movs	r0, #0
 8008676:	f7f7 fe0f 	bl	8000298 <__aeabi_dsub>
 800867a:	4622      	mov	r2, r4
 800867c:	4680      	mov	r8, r0
 800867e:	4689      	mov	r9, r1
 8008680:	462b      	mov	r3, r5
 8008682:	4650      	mov	r0, sl
 8008684:	4659      	mov	r1, fp
 8008686:	f7f7 fe07 	bl	8000298 <__aeabi_dsub>
 800868a:	4632      	mov	r2, r6
 800868c:	463b      	mov	r3, r7
 800868e:	f7f7 fe03 	bl	8000298 <__aeabi_dsub>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4640      	mov	r0, r8
 8008698:	4649      	mov	r1, r9
 800869a:	e7da      	b.n	8008652 <__kernel_cos+0xea>
 800869c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80086d8 <__kernel_cos+0x170>
 80086a0:	e7db      	b.n	800865a <__kernel_cos+0xf2>
 80086a2:	bf00      	nop
 80086a4:	f3af 8000 	nop.w
 80086a8:	be8838d4 	.word	0xbe8838d4
 80086ac:	bda8fae9 	.word	0xbda8fae9
 80086b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80086b4:	3e21ee9e 	.word	0x3e21ee9e
 80086b8:	809c52ad 	.word	0x809c52ad
 80086bc:	3e927e4f 	.word	0x3e927e4f
 80086c0:	19cb1590 	.word	0x19cb1590
 80086c4:	3efa01a0 	.word	0x3efa01a0
 80086c8:	16c15177 	.word	0x16c15177
 80086cc:	3f56c16c 	.word	0x3f56c16c
 80086d0:	5555554c 	.word	0x5555554c
 80086d4:	3fa55555 	.word	0x3fa55555
 80086d8:	00000000 	.word	0x00000000
 80086dc:	3ff00000 	.word	0x3ff00000
 80086e0:	3fe00000 	.word	0x3fe00000
 80086e4:	3fd33332 	.word	0x3fd33332
 80086e8:	3ff00000 	.word	0x3ff00000
 80086ec:	3fe90000 	.word	0x3fe90000
 80086f0:	3fd20000 	.word	0x3fd20000
 80086f4:	00000000 	.word	0x00000000

080086f8 <__kernel_sin>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	ec55 4b10 	vmov	r4, r5, d0
 8008700:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008704:	b085      	sub	sp, #20
 8008706:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800870a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800870e:	4680      	mov	r8, r0
 8008710:	d205      	bcs.n	800871e <__kernel_sin+0x26>
 8008712:	4620      	mov	r0, r4
 8008714:	4629      	mov	r1, r5
 8008716:	f7f8 fa27 	bl	8000b68 <__aeabi_d2iz>
 800871a:	2800      	cmp	r0, #0
 800871c:	d052      	beq.n	80087c4 <__kernel_sin+0xcc>
 800871e:	4622      	mov	r2, r4
 8008720:	462b      	mov	r3, r5
 8008722:	4620      	mov	r0, r4
 8008724:	4629      	mov	r1, r5
 8008726:	f7f7 ff6f 	bl	8000608 <__aeabi_dmul>
 800872a:	4682      	mov	sl, r0
 800872c:	468b      	mov	fp, r1
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	4620      	mov	r0, r4
 8008734:	4629      	mov	r1, r5
 8008736:	f7f7 ff67 	bl	8000608 <__aeabi_dmul>
 800873a:	a342      	add	r3, pc, #264	@ (adr r3, 8008844 <__kernel_sin+0x14c>)
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	e9cd 0100 	strd	r0, r1, [sp]
 8008744:	4650      	mov	r0, sl
 8008746:	4659      	mov	r1, fp
 8008748:	f7f7 ff5e 	bl	8000608 <__aeabi_dmul>
 800874c:	a33f      	add	r3, pc, #252	@ (adr r3, 800884c <__kernel_sin+0x154>)
 800874e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008752:	f7f7 fda1 	bl	8000298 <__aeabi_dsub>
 8008756:	4652      	mov	r2, sl
 8008758:	465b      	mov	r3, fp
 800875a:	f7f7 ff55 	bl	8000608 <__aeabi_dmul>
 800875e:	a33d      	add	r3, pc, #244	@ (adr r3, 8008854 <__kernel_sin+0x15c>)
 8008760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008764:	f7f7 fd9a 	bl	800029c <__adddf3>
 8008768:	4652      	mov	r2, sl
 800876a:	465b      	mov	r3, fp
 800876c:	f7f7 ff4c 	bl	8000608 <__aeabi_dmul>
 8008770:	a33a      	add	r3, pc, #232	@ (adr r3, 800885c <__kernel_sin+0x164>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	f7f7 fd8f 	bl	8000298 <__aeabi_dsub>
 800877a:	4652      	mov	r2, sl
 800877c:	465b      	mov	r3, fp
 800877e:	f7f7 ff43 	bl	8000608 <__aeabi_dmul>
 8008782:	a338      	add	r3, pc, #224	@ (adr r3, 8008864 <__kernel_sin+0x16c>)
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f7f7 fd88 	bl	800029c <__adddf3>
 800878c:	4606      	mov	r6, r0
 800878e:	460f      	mov	r7, r1
 8008790:	f1b8 0f00 	cmp.w	r8, #0
 8008794:	d11b      	bne.n	80087ce <__kernel_sin+0xd6>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4650      	mov	r0, sl
 800879c:	4659      	mov	r1, fp
 800879e:	f7f7 ff33 	bl	8000608 <__aeabi_dmul>
 80087a2:	a325      	add	r3, pc, #148	@ (adr r3, 8008838 <__kernel_sin+0x140>)
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	f7f7 fd76 	bl	8000298 <__aeabi_dsub>
 80087ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087b0:	f7f7 ff2a 	bl	8000608 <__aeabi_dmul>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4620      	mov	r0, r4
 80087ba:	4629      	mov	r1, r5
 80087bc:	f7f7 fd6e 	bl	800029c <__adddf3>
 80087c0:	4604      	mov	r4, r0
 80087c2:	460d      	mov	r5, r1
 80087c4:	ec45 4b10 	vmov	d0, r4, r5
 80087c8:	b005      	add	sp, #20
 80087ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008840 <__kernel_sin+0x148>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	f7f7 ff17 	bl	8000608 <__aeabi_dmul>
 80087da:	4632      	mov	r2, r6
 80087dc:	4680      	mov	r8, r0
 80087de:	4689      	mov	r9, r1
 80087e0:	463b      	mov	r3, r7
 80087e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087e6:	f7f7 ff0f 	bl	8000608 <__aeabi_dmul>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	4640      	mov	r0, r8
 80087f0:	4649      	mov	r1, r9
 80087f2:	f7f7 fd51 	bl	8000298 <__aeabi_dsub>
 80087f6:	4652      	mov	r2, sl
 80087f8:	465b      	mov	r3, fp
 80087fa:	f7f7 ff05 	bl	8000608 <__aeabi_dmul>
 80087fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008802:	f7f7 fd49 	bl	8000298 <__aeabi_dsub>
 8008806:	a30c      	add	r3, pc, #48	@ (adr r3, 8008838 <__kernel_sin+0x140>)
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	4606      	mov	r6, r0
 800880e:	460f      	mov	r7, r1
 8008810:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008814:	f7f7 fef8 	bl	8000608 <__aeabi_dmul>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4630      	mov	r0, r6
 800881e:	4639      	mov	r1, r7
 8008820:	f7f7 fd3c 	bl	800029c <__adddf3>
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	4620      	mov	r0, r4
 800882a:	4629      	mov	r1, r5
 800882c:	f7f7 fd34 	bl	8000298 <__aeabi_dsub>
 8008830:	e7c6      	b.n	80087c0 <__kernel_sin+0xc8>
 8008832:	bf00      	nop
 8008834:	f3af 8000 	nop.w
 8008838:	55555549 	.word	0x55555549
 800883c:	3fc55555 	.word	0x3fc55555
 8008840:	3fe00000 	.word	0x3fe00000
 8008844:	5acfd57c 	.word	0x5acfd57c
 8008848:	3de5d93a 	.word	0x3de5d93a
 800884c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008850:	3e5ae5e6 	.word	0x3e5ae5e6
 8008854:	57b1fe7d 	.word	0x57b1fe7d
 8008858:	3ec71de3 	.word	0x3ec71de3
 800885c:	19c161d5 	.word	0x19c161d5
 8008860:	3f2a01a0 	.word	0x3f2a01a0
 8008864:	1110f8a6 	.word	0x1110f8a6
 8008868:	3f811111 	.word	0x3f811111
 800886c:	00000000 	.word	0x00000000

08008870 <__ieee754_rem_pio2>:
 8008870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	ec57 6b10 	vmov	r6, r7, d0
 8008878:	4bc5      	ldr	r3, [pc, #788]	@ (8008b90 <__ieee754_rem_pio2+0x320>)
 800887a:	b08d      	sub	sp, #52	@ 0x34
 800887c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008880:	4598      	cmp	r8, r3
 8008882:	4604      	mov	r4, r0
 8008884:	9704      	str	r7, [sp, #16]
 8008886:	d807      	bhi.n	8008898 <__ieee754_rem_pio2+0x28>
 8008888:	2200      	movs	r2, #0
 800888a:	2300      	movs	r3, #0
 800888c:	ed80 0b00 	vstr	d0, [r0]
 8008890:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008894:	2500      	movs	r5, #0
 8008896:	e028      	b.n	80088ea <__ieee754_rem_pio2+0x7a>
 8008898:	4bbe      	ldr	r3, [pc, #760]	@ (8008b94 <__ieee754_rem_pio2+0x324>)
 800889a:	4598      	cmp	r8, r3
 800889c:	d878      	bhi.n	8008990 <__ieee754_rem_pio2+0x120>
 800889e:	9b04      	ldr	r3, [sp, #16]
 80088a0:	4dbd      	ldr	r5, [pc, #756]	@ (8008b98 <__ieee754_rem_pio2+0x328>)
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	4630      	mov	r0, r6
 80088a6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008b58 <__ieee754_rem_pio2+0x2e8>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	4639      	mov	r1, r7
 80088ae:	dd38      	ble.n	8008922 <__ieee754_rem_pio2+0xb2>
 80088b0:	f7f7 fcf2 	bl	8000298 <__aeabi_dsub>
 80088b4:	45a8      	cmp	r8, r5
 80088b6:	4606      	mov	r6, r0
 80088b8:	460f      	mov	r7, r1
 80088ba:	d01a      	beq.n	80088f2 <__ieee754_rem_pio2+0x82>
 80088bc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008b60 <__ieee754_rem_pio2+0x2f0>)
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	f7f7 fce9 	bl	8000298 <__aeabi_dsub>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4680      	mov	r8, r0
 80088cc:	4689      	mov	r9, r1
 80088ce:	4630      	mov	r0, r6
 80088d0:	4639      	mov	r1, r7
 80088d2:	f7f7 fce1 	bl	8000298 <__aeabi_dsub>
 80088d6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008b60 <__ieee754_rem_pio2+0x2f0>)
 80088d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088dc:	f7f7 fcdc 	bl	8000298 <__aeabi_dsub>
 80088e0:	e9c4 8900 	strd	r8, r9, [r4]
 80088e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80088e8:	2501      	movs	r5, #1
 80088ea:	4628      	mov	r0, r5
 80088ec:	b00d      	add	sp, #52	@ 0x34
 80088ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f2:	a39d      	add	r3, pc, #628	@ (adr r3, 8008b68 <__ieee754_rem_pio2+0x2f8>)
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f7f7 fcce 	bl	8000298 <__aeabi_dsub>
 80088fc:	a39c      	add	r3, pc, #624	@ (adr r3, 8008b70 <__ieee754_rem_pio2+0x300>)
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	4606      	mov	r6, r0
 8008904:	460f      	mov	r7, r1
 8008906:	f7f7 fcc7 	bl	8000298 <__aeabi_dsub>
 800890a:	4602      	mov	r2, r0
 800890c:	460b      	mov	r3, r1
 800890e:	4680      	mov	r8, r0
 8008910:	4689      	mov	r9, r1
 8008912:	4630      	mov	r0, r6
 8008914:	4639      	mov	r1, r7
 8008916:	f7f7 fcbf 	bl	8000298 <__aeabi_dsub>
 800891a:	a395      	add	r3, pc, #596	@ (adr r3, 8008b70 <__ieee754_rem_pio2+0x300>)
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	e7dc      	b.n	80088dc <__ieee754_rem_pio2+0x6c>
 8008922:	f7f7 fcbb 	bl	800029c <__adddf3>
 8008926:	45a8      	cmp	r8, r5
 8008928:	4606      	mov	r6, r0
 800892a:	460f      	mov	r7, r1
 800892c:	d018      	beq.n	8008960 <__ieee754_rem_pio2+0xf0>
 800892e:	a38c      	add	r3, pc, #560	@ (adr r3, 8008b60 <__ieee754_rem_pio2+0x2f0>)
 8008930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008934:	f7f7 fcb2 	bl	800029c <__adddf3>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4680      	mov	r8, r0
 800893e:	4689      	mov	r9, r1
 8008940:	4630      	mov	r0, r6
 8008942:	4639      	mov	r1, r7
 8008944:	f7f7 fca8 	bl	8000298 <__aeabi_dsub>
 8008948:	a385      	add	r3, pc, #532	@ (adr r3, 8008b60 <__ieee754_rem_pio2+0x2f0>)
 800894a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894e:	f7f7 fca5 	bl	800029c <__adddf3>
 8008952:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008956:	e9c4 8900 	strd	r8, r9, [r4]
 800895a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800895e:	e7c4      	b.n	80088ea <__ieee754_rem_pio2+0x7a>
 8008960:	a381      	add	r3, pc, #516	@ (adr r3, 8008b68 <__ieee754_rem_pio2+0x2f8>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f7f7 fc99 	bl	800029c <__adddf3>
 800896a:	a381      	add	r3, pc, #516	@ (adr r3, 8008b70 <__ieee754_rem_pio2+0x300>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	4606      	mov	r6, r0
 8008972:	460f      	mov	r7, r1
 8008974:	f7f7 fc92 	bl	800029c <__adddf3>
 8008978:	4602      	mov	r2, r0
 800897a:	460b      	mov	r3, r1
 800897c:	4680      	mov	r8, r0
 800897e:	4689      	mov	r9, r1
 8008980:	4630      	mov	r0, r6
 8008982:	4639      	mov	r1, r7
 8008984:	f7f7 fc88 	bl	8000298 <__aeabi_dsub>
 8008988:	a379      	add	r3, pc, #484	@ (adr r3, 8008b70 <__ieee754_rem_pio2+0x300>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	e7de      	b.n	800894e <__ieee754_rem_pio2+0xde>
 8008990:	4b82      	ldr	r3, [pc, #520]	@ (8008b9c <__ieee754_rem_pio2+0x32c>)
 8008992:	4598      	cmp	r8, r3
 8008994:	f200 80d1 	bhi.w	8008b3a <__ieee754_rem_pio2+0x2ca>
 8008998:	f000 f966 	bl	8008c68 <fabs>
 800899c:	ec57 6b10 	vmov	r6, r7, d0
 80089a0:	a375      	add	r3, pc, #468	@ (adr r3, 8008b78 <__ieee754_rem_pio2+0x308>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	4630      	mov	r0, r6
 80089a8:	4639      	mov	r1, r7
 80089aa:	f7f7 fe2d 	bl	8000608 <__aeabi_dmul>
 80089ae:	4b7c      	ldr	r3, [pc, #496]	@ (8008ba0 <__ieee754_rem_pio2+0x330>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	f7f7 fc73 	bl	800029c <__adddf3>
 80089b6:	f7f8 f8d7 	bl	8000b68 <__aeabi_d2iz>
 80089ba:	4605      	mov	r5, r0
 80089bc:	f7f7 fdba 	bl	8000534 <__aeabi_i2d>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089c8:	a363      	add	r3, pc, #396	@ (adr r3, 8008b58 <__ieee754_rem_pio2+0x2e8>)
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	f7f7 fe1b 	bl	8000608 <__aeabi_dmul>
 80089d2:	4602      	mov	r2, r0
 80089d4:	460b      	mov	r3, r1
 80089d6:	4630      	mov	r0, r6
 80089d8:	4639      	mov	r1, r7
 80089da:	f7f7 fc5d 	bl	8000298 <__aeabi_dsub>
 80089de:	a360      	add	r3, pc, #384	@ (adr r3, 8008b60 <__ieee754_rem_pio2+0x2f0>)
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	4682      	mov	sl, r0
 80089e6:	468b      	mov	fp, r1
 80089e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ec:	f7f7 fe0c 	bl	8000608 <__aeabi_dmul>
 80089f0:	2d1f      	cmp	r5, #31
 80089f2:	4606      	mov	r6, r0
 80089f4:	460f      	mov	r7, r1
 80089f6:	dc0c      	bgt.n	8008a12 <__ieee754_rem_pio2+0x1a2>
 80089f8:	4b6a      	ldr	r3, [pc, #424]	@ (8008ba4 <__ieee754_rem_pio2+0x334>)
 80089fa:	1e6a      	subs	r2, r5, #1
 80089fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a00:	4543      	cmp	r3, r8
 8008a02:	d006      	beq.n	8008a12 <__ieee754_rem_pio2+0x1a2>
 8008a04:	4632      	mov	r2, r6
 8008a06:	463b      	mov	r3, r7
 8008a08:	4650      	mov	r0, sl
 8008a0a:	4659      	mov	r1, fp
 8008a0c:	f7f7 fc44 	bl	8000298 <__aeabi_dsub>
 8008a10:	e00e      	b.n	8008a30 <__ieee754_rem_pio2+0x1c0>
 8008a12:	463b      	mov	r3, r7
 8008a14:	4632      	mov	r2, r6
 8008a16:	4650      	mov	r0, sl
 8008a18:	4659      	mov	r1, fp
 8008a1a:	f7f7 fc3d 	bl	8000298 <__aeabi_dsub>
 8008a1e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008a22:	9305      	str	r3, [sp, #20]
 8008a24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a28:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008a2c:	2b10      	cmp	r3, #16
 8008a2e:	dc02      	bgt.n	8008a36 <__ieee754_rem_pio2+0x1c6>
 8008a30:	e9c4 0100 	strd	r0, r1, [r4]
 8008a34:	e039      	b.n	8008aaa <__ieee754_rem_pio2+0x23a>
 8008a36:	a34c      	add	r3, pc, #304	@ (adr r3, 8008b68 <__ieee754_rem_pio2+0x2f8>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a40:	f7f7 fde2 	bl	8000608 <__aeabi_dmul>
 8008a44:	4606      	mov	r6, r0
 8008a46:	460f      	mov	r7, r1
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4650      	mov	r0, sl
 8008a4e:	4659      	mov	r1, fp
 8008a50:	f7f7 fc22 	bl	8000298 <__aeabi_dsub>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	4680      	mov	r8, r0
 8008a5a:	4689      	mov	r9, r1
 8008a5c:	4650      	mov	r0, sl
 8008a5e:	4659      	mov	r1, fp
 8008a60:	f7f7 fc1a 	bl	8000298 <__aeabi_dsub>
 8008a64:	4632      	mov	r2, r6
 8008a66:	463b      	mov	r3, r7
 8008a68:	f7f7 fc16 	bl	8000298 <__aeabi_dsub>
 8008a6c:	a340      	add	r3, pc, #256	@ (adr r3, 8008b70 <__ieee754_rem_pio2+0x300>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	4606      	mov	r6, r0
 8008a74:	460f      	mov	r7, r1
 8008a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a7a:	f7f7 fdc5 	bl	8000608 <__aeabi_dmul>
 8008a7e:	4632      	mov	r2, r6
 8008a80:	463b      	mov	r3, r7
 8008a82:	f7f7 fc09 	bl	8000298 <__aeabi_dsub>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	460f      	mov	r7, r1
 8008a8e:	4640      	mov	r0, r8
 8008a90:	4649      	mov	r1, r9
 8008a92:	f7f7 fc01 	bl	8000298 <__aeabi_dsub>
 8008a96:	9a05      	ldr	r2, [sp, #20]
 8008a98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	2b31      	cmp	r3, #49	@ 0x31
 8008aa0:	dc20      	bgt.n	8008ae4 <__ieee754_rem_pio2+0x274>
 8008aa2:	e9c4 0100 	strd	r0, r1, [r4]
 8008aa6:	46c2      	mov	sl, r8
 8008aa8:	46cb      	mov	fp, r9
 8008aaa:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008aae:	4650      	mov	r0, sl
 8008ab0:	4642      	mov	r2, r8
 8008ab2:	464b      	mov	r3, r9
 8008ab4:	4659      	mov	r1, fp
 8008ab6:	f7f7 fbef 	bl	8000298 <__aeabi_dsub>
 8008aba:	463b      	mov	r3, r7
 8008abc:	4632      	mov	r2, r6
 8008abe:	f7f7 fbeb 	bl	8000298 <__aeabi_dsub>
 8008ac2:	9b04      	ldr	r3, [sp, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008aca:	f6bf af0e 	bge.w	80088ea <__ieee754_rem_pio2+0x7a>
 8008ace:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008ad2:	6063      	str	r3, [r4, #4]
 8008ad4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ad8:	f8c4 8000 	str.w	r8, [r4]
 8008adc:	60a0      	str	r0, [r4, #8]
 8008ade:	60e3      	str	r3, [r4, #12]
 8008ae0:	426d      	negs	r5, r5
 8008ae2:	e702      	b.n	80088ea <__ieee754_rem_pio2+0x7a>
 8008ae4:	a326      	add	r3, pc, #152	@ (adr r3, 8008b80 <__ieee754_rem_pio2+0x310>)
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aee:	f7f7 fd8b 	bl	8000608 <__aeabi_dmul>
 8008af2:	4606      	mov	r6, r0
 8008af4:	460f      	mov	r7, r1
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4640      	mov	r0, r8
 8008afc:	4649      	mov	r1, r9
 8008afe:	f7f7 fbcb 	bl	8000298 <__aeabi_dsub>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	4682      	mov	sl, r0
 8008b08:	468b      	mov	fp, r1
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	4649      	mov	r1, r9
 8008b0e:	f7f7 fbc3 	bl	8000298 <__aeabi_dsub>
 8008b12:	4632      	mov	r2, r6
 8008b14:	463b      	mov	r3, r7
 8008b16:	f7f7 fbbf 	bl	8000298 <__aeabi_dsub>
 8008b1a:	a31b      	add	r3, pc, #108	@ (adr r3, 8008b88 <__ieee754_rem_pio2+0x318>)
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	4606      	mov	r6, r0
 8008b22:	460f      	mov	r7, r1
 8008b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b28:	f7f7 fd6e 	bl	8000608 <__aeabi_dmul>
 8008b2c:	4632      	mov	r2, r6
 8008b2e:	463b      	mov	r3, r7
 8008b30:	f7f7 fbb2 	bl	8000298 <__aeabi_dsub>
 8008b34:	4606      	mov	r6, r0
 8008b36:	460f      	mov	r7, r1
 8008b38:	e764      	b.n	8008a04 <__ieee754_rem_pio2+0x194>
 8008b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ba8 <__ieee754_rem_pio2+0x338>)
 8008b3c:	4598      	cmp	r8, r3
 8008b3e:	d935      	bls.n	8008bac <__ieee754_rem_pio2+0x33c>
 8008b40:	4632      	mov	r2, r6
 8008b42:	463b      	mov	r3, r7
 8008b44:	4630      	mov	r0, r6
 8008b46:	4639      	mov	r1, r7
 8008b48:	f7f7 fba6 	bl	8000298 <__aeabi_dsub>
 8008b4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b50:	e9c4 0100 	strd	r0, r1, [r4]
 8008b54:	e69e      	b.n	8008894 <__ieee754_rem_pio2+0x24>
 8008b56:	bf00      	nop
 8008b58:	54400000 	.word	0x54400000
 8008b5c:	3ff921fb 	.word	0x3ff921fb
 8008b60:	1a626331 	.word	0x1a626331
 8008b64:	3dd0b461 	.word	0x3dd0b461
 8008b68:	1a600000 	.word	0x1a600000
 8008b6c:	3dd0b461 	.word	0x3dd0b461
 8008b70:	2e037073 	.word	0x2e037073
 8008b74:	3ba3198a 	.word	0x3ba3198a
 8008b78:	6dc9c883 	.word	0x6dc9c883
 8008b7c:	3fe45f30 	.word	0x3fe45f30
 8008b80:	2e000000 	.word	0x2e000000
 8008b84:	3ba3198a 	.word	0x3ba3198a
 8008b88:	252049c1 	.word	0x252049c1
 8008b8c:	397b839a 	.word	0x397b839a
 8008b90:	3fe921fb 	.word	0x3fe921fb
 8008b94:	4002d97b 	.word	0x4002d97b
 8008b98:	3ff921fb 	.word	0x3ff921fb
 8008b9c:	413921fb 	.word	0x413921fb
 8008ba0:	3fe00000 	.word	0x3fe00000
 8008ba4:	080098ac 	.word	0x080098ac
 8008ba8:	7fefffff 	.word	0x7fefffff
 8008bac:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008bb0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008bb4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008bb8:	4630      	mov	r0, r6
 8008bba:	460f      	mov	r7, r1
 8008bbc:	f7f7 ffd4 	bl	8000b68 <__aeabi_d2iz>
 8008bc0:	f7f7 fcb8 	bl	8000534 <__aeabi_i2d>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4630      	mov	r0, r6
 8008bca:	4639      	mov	r1, r7
 8008bcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008bd0:	f7f7 fb62 	bl	8000298 <__aeabi_dsub>
 8008bd4:	4b22      	ldr	r3, [pc, #136]	@ (8008c60 <__ieee754_rem_pio2+0x3f0>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f7f7 fd16 	bl	8000608 <__aeabi_dmul>
 8008bdc:	460f      	mov	r7, r1
 8008bde:	4606      	mov	r6, r0
 8008be0:	f7f7 ffc2 	bl	8000b68 <__aeabi_d2iz>
 8008be4:	f7f7 fca6 	bl	8000534 <__aeabi_i2d>
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	4630      	mov	r0, r6
 8008bee:	4639      	mov	r1, r7
 8008bf0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008bf4:	f7f7 fb50 	bl	8000298 <__aeabi_dsub>
 8008bf8:	4b19      	ldr	r3, [pc, #100]	@ (8008c60 <__ieee754_rem_pio2+0x3f0>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f7f7 fd04 	bl	8000608 <__aeabi_dmul>
 8008c00:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8008c04:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008c08:	f04f 0803 	mov.w	r8, #3
 8008c0c:	2600      	movs	r6, #0
 8008c0e:	2700      	movs	r7, #0
 8008c10:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008c14:	4632      	mov	r2, r6
 8008c16:	463b      	mov	r3, r7
 8008c18:	46c2      	mov	sl, r8
 8008c1a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008c1e:	f7f7 ff5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d1f4      	bne.n	8008c10 <__ieee754_rem_pio2+0x3a0>
 8008c26:	4b0f      	ldr	r3, [pc, #60]	@ (8008c64 <__ieee754_rem_pio2+0x3f4>)
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	462a      	mov	r2, r5
 8008c30:	4653      	mov	r3, sl
 8008c32:	4621      	mov	r1, r4
 8008c34:	a806      	add	r0, sp, #24
 8008c36:	f000 f81f 	bl	8008c78 <__kernel_rem_pio2>
 8008c3a:	9b04      	ldr	r3, [sp, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	4605      	mov	r5, r0
 8008c40:	f6bf ae53 	bge.w	80088ea <__ieee754_rem_pio2+0x7a>
 8008c44:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008c48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c4c:	e9c4 2300 	strd	r2, r3, [r4]
 8008c50:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008c54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c58:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008c5c:	e740      	b.n	8008ae0 <__ieee754_rem_pio2+0x270>
 8008c5e:	bf00      	nop
 8008c60:	41700000 	.word	0x41700000
 8008c64:	0800992c 	.word	0x0800992c

08008c68 <fabs>:
 8008c68:	ec51 0b10 	vmov	r0, r1, d0
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008c72:	ec43 2b10 	vmov	d0, r2, r3
 8008c76:	4770      	bx	lr

08008c78 <__kernel_rem_pio2>:
 8008c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	ed2d 8b02 	vpush	{d8}
 8008c80:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8008c84:	f112 0f14 	cmn.w	r2, #20
 8008c88:	9306      	str	r3, [sp, #24]
 8008c8a:	9104      	str	r1, [sp, #16]
 8008c8c:	4bc2      	ldr	r3, [pc, #776]	@ (8008f98 <__kernel_rem_pio2+0x320>)
 8008c8e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8008c90:	9008      	str	r0, [sp, #32]
 8008c92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	9b06      	ldr	r3, [sp, #24]
 8008c9a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008c9e:	bfa8      	it	ge
 8008ca0:	1ed4      	subge	r4, r2, #3
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	bfb2      	itee	lt
 8008ca6:	2400      	movlt	r4, #0
 8008ca8:	2318      	movge	r3, #24
 8008caa:	fb94 f4f3 	sdivge	r4, r4, r3
 8008cae:	f06f 0317 	mvn.w	r3, #23
 8008cb2:	fb04 3303 	mla	r3, r4, r3, r3
 8008cb6:	eb03 0b02 	add.w	fp, r3, r2
 8008cba:	9b00      	ldr	r3, [sp, #0]
 8008cbc:	9a05      	ldr	r2, [sp, #20]
 8008cbe:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8008f88 <__kernel_rem_pio2+0x310>
 8008cc2:	eb03 0802 	add.w	r8, r3, r2
 8008cc6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008cc8:	1aa7      	subs	r7, r4, r2
 8008cca:	ae20      	add	r6, sp, #128	@ 0x80
 8008ccc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008cd0:	2500      	movs	r5, #0
 8008cd2:	4545      	cmp	r5, r8
 8008cd4:	dd12      	ble.n	8008cfc <__kernel_rem_pio2+0x84>
 8008cd6:	9b06      	ldr	r3, [sp, #24]
 8008cd8:	aa20      	add	r2, sp, #128	@ 0x80
 8008cda:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008cde:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8008ce2:	2700      	movs	r7, #0
 8008ce4:	9b00      	ldr	r3, [sp, #0]
 8008ce6:	429f      	cmp	r7, r3
 8008ce8:	dc2e      	bgt.n	8008d48 <__kernel_rem_pio2+0xd0>
 8008cea:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8008f88 <__kernel_rem_pio2+0x310>
 8008cee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cf2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008cf6:	46a8      	mov	r8, r5
 8008cf8:	2600      	movs	r6, #0
 8008cfa:	e01b      	b.n	8008d34 <__kernel_rem_pio2+0xbc>
 8008cfc:	42ef      	cmn	r7, r5
 8008cfe:	d407      	bmi.n	8008d10 <__kernel_rem_pio2+0x98>
 8008d00:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008d04:	f7f7 fc16 	bl	8000534 <__aeabi_i2d>
 8008d08:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008d0c:	3501      	adds	r5, #1
 8008d0e:	e7e0      	b.n	8008cd2 <__kernel_rem_pio2+0x5a>
 8008d10:	ec51 0b18 	vmov	r0, r1, d8
 8008d14:	e7f8      	b.n	8008d08 <__kernel_rem_pio2+0x90>
 8008d16:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8008d1a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008d1e:	f7f7 fc73 	bl	8000608 <__aeabi_dmul>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d2a:	f7f7 fab7 	bl	800029c <__adddf3>
 8008d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d32:	3601      	adds	r6, #1
 8008d34:	9b05      	ldr	r3, [sp, #20]
 8008d36:	429e      	cmp	r6, r3
 8008d38:	dded      	ble.n	8008d16 <__kernel_rem_pio2+0x9e>
 8008d3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d3e:	3701      	adds	r7, #1
 8008d40:	ecaa 7b02 	vstmia	sl!, {d7}
 8008d44:	3508      	adds	r5, #8
 8008d46:	e7cd      	b.n	8008ce4 <__kernel_rem_pio2+0x6c>
 8008d48:	9b00      	ldr	r3, [sp, #0]
 8008d4a:	f8dd 8000 	ldr.w	r8, [sp]
 8008d4e:	aa0c      	add	r2, sp, #48	@ 0x30
 8008d50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d54:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d56:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008d58:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d5e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8008d62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d64:	ab98      	add	r3, sp, #608	@ 0x260
 8008d66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d6a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8008d6e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d72:	ac0c      	add	r4, sp, #48	@ 0x30
 8008d74:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008d76:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8008d7a:	46a1      	mov	r9, r4
 8008d7c:	46c2      	mov	sl, r8
 8008d7e:	f1ba 0f00 	cmp.w	sl, #0
 8008d82:	dc77      	bgt.n	8008e74 <__kernel_rem_pio2+0x1fc>
 8008d84:	4658      	mov	r0, fp
 8008d86:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008d8a:	f000 fac5 	bl	8009318 <scalbn>
 8008d8e:	ec57 6b10 	vmov	r6, r7, d0
 8008d92:	2200      	movs	r2, #0
 8008d94:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008d98:	4630      	mov	r0, r6
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 fc34 	bl	8000608 <__aeabi_dmul>
 8008da0:	ec41 0b10 	vmov	d0, r0, r1
 8008da4:	f000 fb34 	bl	8009410 <floor>
 8008da8:	4b7c      	ldr	r3, [pc, #496]	@ (8008f9c <__kernel_rem_pio2+0x324>)
 8008daa:	ec51 0b10 	vmov	r0, r1, d0
 8008dae:	2200      	movs	r2, #0
 8008db0:	f7f7 fc2a 	bl	8000608 <__aeabi_dmul>
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	4630      	mov	r0, r6
 8008dba:	4639      	mov	r1, r7
 8008dbc:	f7f7 fa6c 	bl	8000298 <__aeabi_dsub>
 8008dc0:	460f      	mov	r7, r1
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	f7f7 fed0 	bl	8000b68 <__aeabi_d2iz>
 8008dc8:	9002      	str	r0, [sp, #8]
 8008dca:	f7f7 fbb3 	bl	8000534 <__aeabi_i2d>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	4639      	mov	r1, r7
 8008dd6:	f7f7 fa5f 	bl	8000298 <__aeabi_dsub>
 8008dda:	f1bb 0f00 	cmp.w	fp, #0
 8008dde:	4606      	mov	r6, r0
 8008de0:	460f      	mov	r7, r1
 8008de2:	dd6c      	ble.n	8008ebe <__kernel_rem_pio2+0x246>
 8008de4:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8008de8:	ab0c      	add	r3, sp, #48	@ 0x30
 8008dea:	9d02      	ldr	r5, [sp, #8]
 8008dec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008df0:	f1cb 0018 	rsb	r0, fp, #24
 8008df4:	fa43 f200 	asr.w	r2, r3, r0
 8008df8:	4415      	add	r5, r2
 8008dfa:	4082      	lsls	r2, r0
 8008dfc:	1a9b      	subs	r3, r3, r2
 8008dfe:	aa0c      	add	r2, sp, #48	@ 0x30
 8008e00:	9502      	str	r5, [sp, #8]
 8008e02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008e06:	f1cb 0217 	rsb	r2, fp, #23
 8008e0a:	fa43 f902 	asr.w	r9, r3, r2
 8008e0e:	f1b9 0f00 	cmp.w	r9, #0
 8008e12:	dd64      	ble.n	8008ede <__kernel_rem_pio2+0x266>
 8008e14:	9b02      	ldr	r3, [sp, #8]
 8008e16:	2200      	movs	r2, #0
 8008e18:	3301      	adds	r3, #1
 8008e1a:	9302      	str	r3, [sp, #8]
 8008e1c:	4615      	mov	r5, r2
 8008e1e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8008e22:	4590      	cmp	r8, r2
 8008e24:	f300 80a1 	bgt.w	8008f6a <__kernel_rem_pio2+0x2f2>
 8008e28:	f1bb 0f00 	cmp.w	fp, #0
 8008e2c:	dd07      	ble.n	8008e3e <__kernel_rem_pio2+0x1c6>
 8008e2e:	f1bb 0f01 	cmp.w	fp, #1
 8008e32:	f000 80c1 	beq.w	8008fb8 <__kernel_rem_pio2+0x340>
 8008e36:	f1bb 0f02 	cmp.w	fp, #2
 8008e3a:	f000 80c8 	beq.w	8008fce <__kernel_rem_pio2+0x356>
 8008e3e:	f1b9 0f02 	cmp.w	r9, #2
 8008e42:	d14c      	bne.n	8008ede <__kernel_rem_pio2+0x266>
 8008e44:	4632      	mov	r2, r6
 8008e46:	463b      	mov	r3, r7
 8008e48:	4955      	ldr	r1, [pc, #340]	@ (8008fa0 <__kernel_rem_pio2+0x328>)
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	f7f7 fa24 	bl	8000298 <__aeabi_dsub>
 8008e50:	4606      	mov	r6, r0
 8008e52:	460f      	mov	r7, r1
 8008e54:	2d00      	cmp	r5, #0
 8008e56:	d042      	beq.n	8008ede <__kernel_rem_pio2+0x266>
 8008e58:	4658      	mov	r0, fp
 8008e5a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8008f90 <__kernel_rem_pio2+0x318>
 8008e5e:	f000 fa5b 	bl	8009318 <scalbn>
 8008e62:	4630      	mov	r0, r6
 8008e64:	4639      	mov	r1, r7
 8008e66:	ec53 2b10 	vmov	r2, r3, d0
 8008e6a:	f7f7 fa15 	bl	8000298 <__aeabi_dsub>
 8008e6e:	4606      	mov	r6, r0
 8008e70:	460f      	mov	r7, r1
 8008e72:	e034      	b.n	8008ede <__kernel_rem_pio2+0x266>
 8008e74:	4b4b      	ldr	r3, [pc, #300]	@ (8008fa4 <__kernel_rem_pio2+0x32c>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e7c:	f7f7 fbc4 	bl	8000608 <__aeabi_dmul>
 8008e80:	f7f7 fe72 	bl	8000b68 <__aeabi_d2iz>
 8008e84:	f7f7 fb56 	bl	8000534 <__aeabi_i2d>
 8008e88:	4b47      	ldr	r3, [pc, #284]	@ (8008fa8 <__kernel_rem_pio2+0x330>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	460f      	mov	r7, r1
 8008e90:	f7f7 fbba 	bl	8000608 <__aeabi_dmul>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e9c:	f7f7 f9fc 	bl	8000298 <__aeabi_dsub>
 8008ea0:	f7f7 fe62 	bl	8000b68 <__aeabi_d2iz>
 8008ea4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008ea8:	f849 0b04 	str.w	r0, [r9], #4
 8008eac:	4639      	mov	r1, r7
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f7f7 f9f4 	bl	800029c <__adddf3>
 8008eb4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008eb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ebc:	e75f      	b.n	8008d7e <__kernel_rem_pio2+0x106>
 8008ebe:	d107      	bne.n	8008ed0 <__kernel_rem_pio2+0x258>
 8008ec0:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8008ec4:	aa0c      	add	r2, sp, #48	@ 0x30
 8008ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eca:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8008ece:	e79e      	b.n	8008e0e <__kernel_rem_pio2+0x196>
 8008ed0:	4b36      	ldr	r3, [pc, #216]	@ (8008fac <__kernel_rem_pio2+0x334>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f7f7 fe1e 	bl	8000b14 <__aeabi_dcmpge>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d143      	bne.n	8008f64 <__kernel_rem_pio2+0x2ec>
 8008edc:	4681      	mov	r9, r0
 8008ede:	2200      	movs	r2, #0
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	f7f7 fdf7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	f000 80c1 	beq.w	8009072 <__kernel_rem_pio2+0x3fa>
 8008ef0:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	9900      	ldr	r1, [sp, #0]
 8008ef8:	428b      	cmp	r3, r1
 8008efa:	da70      	bge.n	8008fde <__kernel_rem_pio2+0x366>
 8008efc:	2a00      	cmp	r2, #0
 8008efe:	f000 808b 	beq.w	8009018 <__kernel_rem_pio2+0x3a0>
 8008f02:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008f06:	ab0c      	add	r3, sp, #48	@ 0x30
 8008f08:	f1ab 0b18 	sub.w	fp, fp, #24
 8008f0c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d0f6      	beq.n	8008f02 <__kernel_rem_pio2+0x28a>
 8008f14:	4658      	mov	r0, fp
 8008f16:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8008f90 <__kernel_rem_pio2+0x318>
 8008f1a:	f000 f9fd 	bl	8009318 <scalbn>
 8008f1e:	f108 0301 	add.w	r3, r8, #1
 8008f22:	00da      	lsls	r2, r3, #3
 8008f24:	9205      	str	r2, [sp, #20]
 8008f26:	ec55 4b10 	vmov	r4, r5, d0
 8008f2a:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008f2c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8008fa4 <__kernel_rem_pio2+0x32c>
 8008f30:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8008f34:	4646      	mov	r6, r8
 8008f36:	f04f 0a00 	mov.w	sl, #0
 8008f3a:	2e00      	cmp	r6, #0
 8008f3c:	f280 80d1 	bge.w	80090e2 <__kernel_rem_pio2+0x46a>
 8008f40:	4644      	mov	r4, r8
 8008f42:	2c00      	cmp	r4, #0
 8008f44:	f2c0 80ff 	blt.w	8009146 <__kernel_rem_pio2+0x4ce>
 8008f48:	4b19      	ldr	r3, [pc, #100]	@ (8008fb0 <__kernel_rem_pio2+0x338>)
 8008f4a:	461f      	mov	r7, r3
 8008f4c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008f4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f52:	9306      	str	r3, [sp, #24]
 8008f54:	f04f 0a00 	mov.w	sl, #0
 8008f58:	f04f 0b00 	mov.w	fp, #0
 8008f5c:	2600      	movs	r6, #0
 8008f5e:	eba8 0504 	sub.w	r5, r8, r4
 8008f62:	e0e4      	b.n	800912e <__kernel_rem_pio2+0x4b6>
 8008f64:	f04f 0902 	mov.w	r9, #2
 8008f68:	e754      	b.n	8008e14 <__kernel_rem_pio2+0x19c>
 8008f6a:	f854 3b04 	ldr.w	r3, [r4], #4
 8008f6e:	bb0d      	cbnz	r5, 8008fb4 <__kernel_rem_pio2+0x33c>
 8008f70:	b123      	cbz	r3, 8008f7c <__kernel_rem_pio2+0x304>
 8008f72:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8008f76:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	3201      	adds	r2, #1
 8008f7e:	461d      	mov	r5, r3
 8008f80:	e74f      	b.n	8008e22 <__kernel_rem_pio2+0x1aa>
 8008f82:	bf00      	nop
 8008f84:	f3af 8000 	nop.w
	...
 8008f94:	3ff00000 	.word	0x3ff00000
 8008f98:	08009a78 	.word	0x08009a78
 8008f9c:	40200000 	.word	0x40200000
 8008fa0:	3ff00000 	.word	0x3ff00000
 8008fa4:	3e700000 	.word	0x3e700000
 8008fa8:	41700000 	.word	0x41700000
 8008fac:	3fe00000 	.word	0x3fe00000
 8008fb0:	08009a38 	.word	0x08009a38
 8008fb4:	1acb      	subs	r3, r1, r3
 8008fb6:	e7de      	b.n	8008f76 <__kernel_rem_pio2+0x2fe>
 8008fb8:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8008fbc:	ab0c      	add	r3, sp, #48	@ 0x30
 8008fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008fc6:	a90c      	add	r1, sp, #48	@ 0x30
 8008fc8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008fcc:	e737      	b.n	8008e3e <__kernel_rem_pio2+0x1c6>
 8008fce:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8008fd2:	ab0c      	add	r3, sp, #48	@ 0x30
 8008fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008fdc:	e7f3      	b.n	8008fc6 <__kernel_rem_pio2+0x34e>
 8008fde:	a90c      	add	r1, sp, #48	@ 0x30
 8008fe0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	e785      	b.n	8008ef6 <__kernel_rem_pio2+0x27e>
 8008fea:	3401      	adds	r4, #1
 8008fec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008ff0:	2a00      	cmp	r2, #0
 8008ff2:	d0fa      	beq.n	8008fea <__kernel_rem_pio2+0x372>
 8008ff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ff6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008ffa:	eb0d 0503 	add.w	r5, sp, r3
 8008ffe:	9b06      	ldr	r3, [sp, #24]
 8009000:	aa20      	add	r2, sp, #128	@ 0x80
 8009002:	4443      	add	r3, r8
 8009004:	f108 0701 	add.w	r7, r8, #1
 8009008:	3d98      	subs	r5, #152	@ 0x98
 800900a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800900e:	4444      	add	r4, r8
 8009010:	42bc      	cmp	r4, r7
 8009012:	da04      	bge.n	800901e <__kernel_rem_pio2+0x3a6>
 8009014:	46a0      	mov	r8, r4
 8009016:	e6a2      	b.n	8008d5e <__kernel_rem_pio2+0xe6>
 8009018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800901a:	2401      	movs	r4, #1
 800901c:	e7e6      	b.n	8008fec <__kernel_rem_pio2+0x374>
 800901e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009020:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009024:	f7f7 fa86 	bl	8000534 <__aeabi_i2d>
 8009028:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80092e8 <__kernel_rem_pio2+0x670>
 800902c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009030:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009038:	46b2      	mov	sl, r6
 800903a:	f04f 0800 	mov.w	r8, #0
 800903e:	9b05      	ldr	r3, [sp, #20]
 8009040:	4598      	cmp	r8, r3
 8009042:	dd05      	ble.n	8009050 <__kernel_rem_pio2+0x3d8>
 8009044:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009048:	3701      	adds	r7, #1
 800904a:	eca5 7b02 	vstmia	r5!, {d7}
 800904e:	e7df      	b.n	8009010 <__kernel_rem_pio2+0x398>
 8009050:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009054:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009058:	f7f7 fad6 	bl	8000608 <__aeabi_dmul>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009064:	f7f7 f91a 	bl	800029c <__adddf3>
 8009068:	f108 0801 	add.w	r8, r8, #1
 800906c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009070:	e7e5      	b.n	800903e <__kernel_rem_pio2+0x3c6>
 8009072:	f1cb 0000 	rsb	r0, fp, #0
 8009076:	ec47 6b10 	vmov	d0, r6, r7
 800907a:	f000 f94d 	bl	8009318 <scalbn>
 800907e:	ec55 4b10 	vmov	r4, r5, d0
 8009082:	4b9b      	ldr	r3, [pc, #620]	@ (80092f0 <__kernel_rem_pio2+0x678>)
 8009084:	2200      	movs	r2, #0
 8009086:	4620      	mov	r0, r4
 8009088:	4629      	mov	r1, r5
 800908a:	f7f7 fd43 	bl	8000b14 <__aeabi_dcmpge>
 800908e:	b300      	cbz	r0, 80090d2 <__kernel_rem_pio2+0x45a>
 8009090:	4b98      	ldr	r3, [pc, #608]	@ (80092f4 <__kernel_rem_pio2+0x67c>)
 8009092:	2200      	movs	r2, #0
 8009094:	4620      	mov	r0, r4
 8009096:	4629      	mov	r1, r5
 8009098:	f7f7 fab6 	bl	8000608 <__aeabi_dmul>
 800909c:	f7f7 fd64 	bl	8000b68 <__aeabi_d2iz>
 80090a0:	4606      	mov	r6, r0
 80090a2:	f7f7 fa47 	bl	8000534 <__aeabi_i2d>
 80090a6:	4b92      	ldr	r3, [pc, #584]	@ (80092f0 <__kernel_rem_pio2+0x678>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	f7f7 faad 	bl	8000608 <__aeabi_dmul>
 80090ae:	460b      	mov	r3, r1
 80090b0:	4602      	mov	r2, r0
 80090b2:	4629      	mov	r1, r5
 80090b4:	4620      	mov	r0, r4
 80090b6:	f7f7 f8ef 	bl	8000298 <__aeabi_dsub>
 80090ba:	f7f7 fd55 	bl	8000b68 <__aeabi_d2iz>
 80090be:	ab0c      	add	r3, sp, #48	@ 0x30
 80090c0:	f10b 0b18 	add.w	fp, fp, #24
 80090c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80090c8:	f108 0801 	add.w	r8, r8, #1
 80090cc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80090d0:	e720      	b.n	8008f14 <__kernel_rem_pio2+0x29c>
 80090d2:	4620      	mov	r0, r4
 80090d4:	4629      	mov	r1, r5
 80090d6:	f7f7 fd47 	bl	8000b68 <__aeabi_d2iz>
 80090da:	ab0c      	add	r3, sp, #48	@ 0x30
 80090dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80090e0:	e718      	b.n	8008f14 <__kernel_rem_pio2+0x29c>
 80090e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80090e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80090e8:	f7f7 fa24 	bl	8000534 <__aeabi_i2d>
 80090ec:	4622      	mov	r2, r4
 80090ee:	462b      	mov	r3, r5
 80090f0:	f7f7 fa8a 	bl	8000608 <__aeabi_dmul>
 80090f4:	4652      	mov	r2, sl
 80090f6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80090fa:	465b      	mov	r3, fp
 80090fc:	4620      	mov	r0, r4
 80090fe:	4629      	mov	r1, r5
 8009100:	f7f7 fa82 	bl	8000608 <__aeabi_dmul>
 8009104:	3e01      	subs	r6, #1
 8009106:	4604      	mov	r4, r0
 8009108:	460d      	mov	r5, r1
 800910a:	e716      	b.n	8008f3a <__kernel_rem_pio2+0x2c2>
 800910c:	9906      	ldr	r1, [sp, #24]
 800910e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009112:	9106      	str	r1, [sp, #24]
 8009114:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009118:	f7f7 fa76 	bl	8000608 <__aeabi_dmul>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4650      	mov	r0, sl
 8009122:	4659      	mov	r1, fp
 8009124:	f7f7 f8ba 	bl	800029c <__adddf3>
 8009128:	3601      	adds	r6, #1
 800912a:	4682      	mov	sl, r0
 800912c:	468b      	mov	fp, r1
 800912e:	9b00      	ldr	r3, [sp, #0]
 8009130:	429e      	cmp	r6, r3
 8009132:	dc01      	bgt.n	8009138 <__kernel_rem_pio2+0x4c0>
 8009134:	42ae      	cmp	r6, r5
 8009136:	dde9      	ble.n	800910c <__kernel_rem_pio2+0x494>
 8009138:	ab48      	add	r3, sp, #288	@ 0x120
 800913a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800913e:	e9c5 ab00 	strd	sl, fp, [r5]
 8009142:	3c01      	subs	r4, #1
 8009144:	e6fd      	b.n	8008f42 <__kernel_rem_pio2+0x2ca>
 8009146:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009148:	2b02      	cmp	r3, #2
 800914a:	dc0b      	bgt.n	8009164 <__kernel_rem_pio2+0x4ec>
 800914c:	2b00      	cmp	r3, #0
 800914e:	dc35      	bgt.n	80091bc <__kernel_rem_pio2+0x544>
 8009150:	d059      	beq.n	8009206 <__kernel_rem_pio2+0x58e>
 8009152:	9b02      	ldr	r3, [sp, #8]
 8009154:	f003 0007 	and.w	r0, r3, #7
 8009158:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800915c:	ecbd 8b02 	vpop	{d8}
 8009160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009164:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009166:	2b03      	cmp	r3, #3
 8009168:	d1f3      	bne.n	8009152 <__kernel_rem_pio2+0x4da>
 800916a:	9b05      	ldr	r3, [sp, #20]
 800916c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009170:	eb0d 0403 	add.w	r4, sp, r3
 8009174:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009178:	4625      	mov	r5, r4
 800917a:	46c2      	mov	sl, r8
 800917c:	f1ba 0f00 	cmp.w	sl, #0
 8009180:	dc69      	bgt.n	8009256 <__kernel_rem_pio2+0x5de>
 8009182:	4645      	mov	r5, r8
 8009184:	2d01      	cmp	r5, #1
 8009186:	f300 8087 	bgt.w	8009298 <__kernel_rem_pio2+0x620>
 800918a:	9c05      	ldr	r4, [sp, #20]
 800918c:	ab48      	add	r3, sp, #288	@ 0x120
 800918e:	441c      	add	r4, r3
 8009190:	2000      	movs	r0, #0
 8009192:	2100      	movs	r1, #0
 8009194:	f1b8 0f01 	cmp.w	r8, #1
 8009198:	f300 809c 	bgt.w	80092d4 <__kernel_rem_pio2+0x65c>
 800919c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80091a0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80091a4:	f1b9 0f00 	cmp.w	r9, #0
 80091a8:	f040 80a6 	bne.w	80092f8 <__kernel_rem_pio2+0x680>
 80091ac:	9b04      	ldr	r3, [sp, #16]
 80091ae:	e9c3 5600 	strd	r5, r6, [r3]
 80091b2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80091b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80091ba:	e7ca      	b.n	8009152 <__kernel_rem_pio2+0x4da>
 80091bc:	9d05      	ldr	r5, [sp, #20]
 80091be:	ab48      	add	r3, sp, #288	@ 0x120
 80091c0:	441d      	add	r5, r3
 80091c2:	4644      	mov	r4, r8
 80091c4:	2000      	movs	r0, #0
 80091c6:	2100      	movs	r1, #0
 80091c8:	2c00      	cmp	r4, #0
 80091ca:	da35      	bge.n	8009238 <__kernel_rem_pio2+0x5c0>
 80091cc:	f1b9 0f00 	cmp.w	r9, #0
 80091d0:	d038      	beq.n	8009244 <__kernel_rem_pio2+0x5cc>
 80091d2:	4602      	mov	r2, r0
 80091d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80091d8:	9c04      	ldr	r4, [sp, #16]
 80091da:	e9c4 2300 	strd	r2, r3, [r4]
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80091e6:	f7f7 f857 	bl	8000298 <__aeabi_dsub>
 80091ea:	ad4a      	add	r5, sp, #296	@ 0x128
 80091ec:	2401      	movs	r4, #1
 80091ee:	45a0      	cmp	r8, r4
 80091f0:	da2b      	bge.n	800924a <__kernel_rem_pio2+0x5d2>
 80091f2:	f1b9 0f00 	cmp.w	r9, #0
 80091f6:	d002      	beq.n	80091fe <__kernel_rem_pio2+0x586>
 80091f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80091fc:	4619      	mov	r1, r3
 80091fe:	9b04      	ldr	r3, [sp, #16]
 8009200:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009204:	e7a5      	b.n	8009152 <__kernel_rem_pio2+0x4da>
 8009206:	9c05      	ldr	r4, [sp, #20]
 8009208:	ab48      	add	r3, sp, #288	@ 0x120
 800920a:	441c      	add	r4, r3
 800920c:	2000      	movs	r0, #0
 800920e:	2100      	movs	r1, #0
 8009210:	f1b8 0f00 	cmp.w	r8, #0
 8009214:	da09      	bge.n	800922a <__kernel_rem_pio2+0x5b2>
 8009216:	f1b9 0f00 	cmp.w	r9, #0
 800921a:	d002      	beq.n	8009222 <__kernel_rem_pio2+0x5aa>
 800921c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009220:	4619      	mov	r1, r3
 8009222:	9b04      	ldr	r3, [sp, #16]
 8009224:	e9c3 0100 	strd	r0, r1, [r3]
 8009228:	e793      	b.n	8009152 <__kernel_rem_pio2+0x4da>
 800922a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800922e:	f7f7 f835 	bl	800029c <__adddf3>
 8009232:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009236:	e7eb      	b.n	8009210 <__kernel_rem_pio2+0x598>
 8009238:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800923c:	f7f7 f82e 	bl	800029c <__adddf3>
 8009240:	3c01      	subs	r4, #1
 8009242:	e7c1      	b.n	80091c8 <__kernel_rem_pio2+0x550>
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	e7c6      	b.n	80091d8 <__kernel_rem_pio2+0x560>
 800924a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800924e:	f7f7 f825 	bl	800029c <__adddf3>
 8009252:	3401      	adds	r4, #1
 8009254:	e7cb      	b.n	80091ee <__kernel_rem_pio2+0x576>
 8009256:	ed35 7b02 	vldmdb	r5!, {d7}
 800925a:	ed8d 7b00 	vstr	d7, [sp]
 800925e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009262:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009266:	ec53 2b17 	vmov	r2, r3, d7
 800926a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800926e:	f7f7 f815 	bl	800029c <__adddf3>
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	4606      	mov	r6, r0
 8009278:	460f      	mov	r7, r1
 800927a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800927e:	f7f7 f80b 	bl	8000298 <__aeabi_dsub>
 8009282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009286:	f7f7 f809 	bl	800029c <__adddf3>
 800928a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800928e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009292:	e9c5 6700 	strd	r6, r7, [r5]
 8009296:	e771      	b.n	800917c <__kernel_rem_pio2+0x504>
 8009298:	ed34 7b02 	vldmdb	r4!, {d7}
 800929c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80092a0:	ec51 0b17 	vmov	r0, r1, d7
 80092a4:	4652      	mov	r2, sl
 80092a6:	465b      	mov	r3, fp
 80092a8:	ed8d 7b00 	vstr	d7, [sp]
 80092ac:	f7f6 fff6 	bl	800029c <__adddf3>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	4606      	mov	r6, r0
 80092b6:	460f      	mov	r7, r1
 80092b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092bc:	f7f6 ffec 	bl	8000298 <__aeabi_dsub>
 80092c0:	4652      	mov	r2, sl
 80092c2:	465b      	mov	r3, fp
 80092c4:	f7f6 ffea 	bl	800029c <__adddf3>
 80092c8:	3d01      	subs	r5, #1
 80092ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80092ce:	e9c4 6700 	strd	r6, r7, [r4]
 80092d2:	e757      	b.n	8009184 <__kernel_rem_pio2+0x50c>
 80092d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80092d8:	f7f6 ffe0 	bl	800029c <__adddf3>
 80092dc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80092e0:	e758      	b.n	8009194 <__kernel_rem_pio2+0x51c>
 80092e2:	bf00      	nop
 80092e4:	f3af 8000 	nop.w
	...
 80092f0:	41700000 	.word	0x41700000
 80092f4:	3e700000 	.word	0x3e700000
 80092f8:	9b04      	ldr	r3, [sp, #16]
 80092fa:	9a04      	ldr	r2, [sp, #16]
 80092fc:	601d      	str	r5, [r3, #0]
 80092fe:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8009302:	605c      	str	r4, [r3, #4]
 8009304:	609f      	str	r7, [r3, #8]
 8009306:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800930a:	60d3      	str	r3, [r2, #12]
 800930c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009310:	6110      	str	r0, [r2, #16]
 8009312:	6153      	str	r3, [r2, #20]
 8009314:	e71d      	b.n	8009152 <__kernel_rem_pio2+0x4da>
 8009316:	bf00      	nop

08009318 <scalbn>:
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	ec55 4b10 	vmov	r4, r5, d0
 800931e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009322:	4606      	mov	r6, r0
 8009324:	462b      	mov	r3, r5
 8009326:	b991      	cbnz	r1, 800934e <scalbn+0x36>
 8009328:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800932c:	4323      	orrs	r3, r4
 800932e:	d03b      	beq.n	80093a8 <scalbn+0x90>
 8009330:	4b33      	ldr	r3, [pc, #204]	@ (8009400 <scalbn+0xe8>)
 8009332:	4620      	mov	r0, r4
 8009334:	4629      	mov	r1, r5
 8009336:	2200      	movs	r2, #0
 8009338:	f7f7 f966 	bl	8000608 <__aeabi_dmul>
 800933c:	4b31      	ldr	r3, [pc, #196]	@ (8009404 <scalbn+0xec>)
 800933e:	429e      	cmp	r6, r3
 8009340:	4604      	mov	r4, r0
 8009342:	460d      	mov	r5, r1
 8009344:	da0f      	bge.n	8009366 <scalbn+0x4e>
 8009346:	a326      	add	r3, pc, #152	@ (adr r3, 80093e0 <scalbn+0xc8>)
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	e01e      	b.n	800938c <scalbn+0x74>
 800934e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009352:	4291      	cmp	r1, r2
 8009354:	d10b      	bne.n	800936e <scalbn+0x56>
 8009356:	4622      	mov	r2, r4
 8009358:	4620      	mov	r0, r4
 800935a:	4629      	mov	r1, r5
 800935c:	f7f6 ff9e 	bl	800029c <__adddf3>
 8009360:	4604      	mov	r4, r0
 8009362:	460d      	mov	r5, r1
 8009364:	e020      	b.n	80093a8 <scalbn+0x90>
 8009366:	460b      	mov	r3, r1
 8009368:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800936c:	3936      	subs	r1, #54	@ 0x36
 800936e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009372:	4296      	cmp	r6, r2
 8009374:	dd0d      	ble.n	8009392 <scalbn+0x7a>
 8009376:	2d00      	cmp	r5, #0
 8009378:	a11b      	add	r1, pc, #108	@ (adr r1, 80093e8 <scalbn+0xd0>)
 800937a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800937e:	da02      	bge.n	8009386 <scalbn+0x6e>
 8009380:	a11b      	add	r1, pc, #108	@ (adr r1, 80093f0 <scalbn+0xd8>)
 8009382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009386:	a318      	add	r3, pc, #96	@ (adr r3, 80093e8 <scalbn+0xd0>)
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	f7f7 f93c 	bl	8000608 <__aeabi_dmul>
 8009390:	e7e6      	b.n	8009360 <scalbn+0x48>
 8009392:	1872      	adds	r2, r6, r1
 8009394:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009398:	428a      	cmp	r2, r1
 800939a:	dcec      	bgt.n	8009376 <scalbn+0x5e>
 800939c:	2a00      	cmp	r2, #0
 800939e:	dd06      	ble.n	80093ae <scalbn+0x96>
 80093a0:	f36f 531e 	bfc	r3, #20, #11
 80093a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80093a8:	ec45 4b10 	vmov	d0, r4, r5
 80093ac:	bd70      	pop	{r4, r5, r6, pc}
 80093ae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80093b2:	da08      	bge.n	80093c6 <scalbn+0xae>
 80093b4:	2d00      	cmp	r5, #0
 80093b6:	a10a      	add	r1, pc, #40	@ (adr r1, 80093e0 <scalbn+0xc8>)
 80093b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093bc:	dac3      	bge.n	8009346 <scalbn+0x2e>
 80093be:	a10e      	add	r1, pc, #56	@ (adr r1, 80093f8 <scalbn+0xe0>)
 80093c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093c4:	e7bf      	b.n	8009346 <scalbn+0x2e>
 80093c6:	3236      	adds	r2, #54	@ 0x36
 80093c8:	f36f 531e 	bfc	r3, #20, #11
 80093cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80093d0:	4620      	mov	r0, r4
 80093d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009408 <scalbn+0xf0>)
 80093d4:	4629      	mov	r1, r5
 80093d6:	2200      	movs	r2, #0
 80093d8:	e7d8      	b.n	800938c <scalbn+0x74>
 80093da:	bf00      	nop
 80093dc:	f3af 8000 	nop.w
 80093e0:	c2f8f359 	.word	0xc2f8f359
 80093e4:	01a56e1f 	.word	0x01a56e1f
 80093e8:	8800759c 	.word	0x8800759c
 80093ec:	7e37e43c 	.word	0x7e37e43c
 80093f0:	8800759c 	.word	0x8800759c
 80093f4:	fe37e43c 	.word	0xfe37e43c
 80093f8:	c2f8f359 	.word	0xc2f8f359
 80093fc:	81a56e1f 	.word	0x81a56e1f
 8009400:	43500000 	.word	0x43500000
 8009404:	ffff3cb0 	.word	0xffff3cb0
 8009408:	3c900000 	.word	0x3c900000
 800940c:	00000000 	.word	0x00000000

08009410 <floor>:
 8009410:	ec51 0b10 	vmov	r0, r1, d0
 8009414:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009420:	2e13      	cmp	r6, #19
 8009422:	460c      	mov	r4, r1
 8009424:	4605      	mov	r5, r0
 8009426:	4680      	mov	r8, r0
 8009428:	dc34      	bgt.n	8009494 <floor+0x84>
 800942a:	2e00      	cmp	r6, #0
 800942c:	da17      	bge.n	800945e <floor+0x4e>
 800942e:	a332      	add	r3, pc, #200	@ (adr r3, 80094f8 <floor+0xe8>)
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f7f6 ff32 	bl	800029c <__adddf3>
 8009438:	2200      	movs	r2, #0
 800943a:	2300      	movs	r3, #0
 800943c:	f7f7 fb74 	bl	8000b28 <__aeabi_dcmpgt>
 8009440:	b150      	cbz	r0, 8009458 <floor+0x48>
 8009442:	2c00      	cmp	r4, #0
 8009444:	da55      	bge.n	80094f2 <floor+0xe2>
 8009446:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800944a:	432c      	orrs	r4, r5
 800944c:	2500      	movs	r5, #0
 800944e:	42ac      	cmp	r4, r5
 8009450:	4c2b      	ldr	r4, [pc, #172]	@ (8009500 <floor+0xf0>)
 8009452:	bf08      	it	eq
 8009454:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009458:	4621      	mov	r1, r4
 800945a:	4628      	mov	r0, r5
 800945c:	e023      	b.n	80094a6 <floor+0x96>
 800945e:	4f29      	ldr	r7, [pc, #164]	@ (8009504 <floor+0xf4>)
 8009460:	4137      	asrs	r7, r6
 8009462:	ea01 0307 	and.w	r3, r1, r7
 8009466:	4303      	orrs	r3, r0
 8009468:	d01d      	beq.n	80094a6 <floor+0x96>
 800946a:	a323      	add	r3, pc, #140	@ (adr r3, 80094f8 <floor+0xe8>)
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	f7f6 ff14 	bl	800029c <__adddf3>
 8009474:	2200      	movs	r2, #0
 8009476:	2300      	movs	r3, #0
 8009478:	f7f7 fb56 	bl	8000b28 <__aeabi_dcmpgt>
 800947c:	2800      	cmp	r0, #0
 800947e:	d0eb      	beq.n	8009458 <floor+0x48>
 8009480:	2c00      	cmp	r4, #0
 8009482:	bfbe      	ittt	lt
 8009484:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009488:	4133      	asrlt	r3, r6
 800948a:	18e4      	addlt	r4, r4, r3
 800948c:	ea24 0407 	bic.w	r4, r4, r7
 8009490:	2500      	movs	r5, #0
 8009492:	e7e1      	b.n	8009458 <floor+0x48>
 8009494:	2e33      	cmp	r6, #51	@ 0x33
 8009496:	dd0a      	ble.n	80094ae <floor+0x9e>
 8009498:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800949c:	d103      	bne.n	80094a6 <floor+0x96>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	f7f6 fefb 	bl	800029c <__adddf3>
 80094a6:	ec41 0b10 	vmov	d0, r0, r1
 80094aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094ae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80094b2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80094b6:	40df      	lsrs	r7, r3
 80094b8:	4207      	tst	r7, r0
 80094ba:	d0f4      	beq.n	80094a6 <floor+0x96>
 80094bc:	a30e      	add	r3, pc, #56	@ (adr r3, 80094f8 <floor+0xe8>)
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	f7f6 feeb 	bl	800029c <__adddf3>
 80094c6:	2200      	movs	r2, #0
 80094c8:	2300      	movs	r3, #0
 80094ca:	f7f7 fb2d 	bl	8000b28 <__aeabi_dcmpgt>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d0c2      	beq.n	8009458 <floor+0x48>
 80094d2:	2c00      	cmp	r4, #0
 80094d4:	da0a      	bge.n	80094ec <floor+0xdc>
 80094d6:	2e14      	cmp	r6, #20
 80094d8:	d101      	bne.n	80094de <floor+0xce>
 80094da:	3401      	adds	r4, #1
 80094dc:	e006      	b.n	80094ec <floor+0xdc>
 80094de:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80094e2:	2301      	movs	r3, #1
 80094e4:	40b3      	lsls	r3, r6
 80094e6:	441d      	add	r5, r3
 80094e8:	4545      	cmp	r5, r8
 80094ea:	d3f6      	bcc.n	80094da <floor+0xca>
 80094ec:	ea25 0507 	bic.w	r5, r5, r7
 80094f0:	e7b2      	b.n	8009458 <floor+0x48>
 80094f2:	2500      	movs	r5, #0
 80094f4:	462c      	mov	r4, r5
 80094f6:	e7af      	b.n	8009458 <floor+0x48>
 80094f8:	8800759c 	.word	0x8800759c
 80094fc:	7e37e43c 	.word	0x7e37e43c
 8009500:	bff00000 	.word	0xbff00000
 8009504:	000fffff 	.word	0x000fffff

08009508 <_init>:
 8009508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950a:	bf00      	nop
 800950c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950e:	bc08      	pop	{r3}
 8009510:	469e      	mov	lr, r3
 8009512:	4770      	bx	lr

08009514 <_fini>:
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	bf00      	nop
 8009518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951a:	bc08      	pop	{r3}
 800951c:	469e      	mov	lr, r3
 800951e:	4770      	bx	lr
