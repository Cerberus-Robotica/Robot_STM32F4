
Robot_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a30  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08009bd0  08009bd0  0000abd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a138  0800a138  0000c200  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a138  0800a138  0000b138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a140  0800a140  0000c200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a140  0800a140  0000b140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a144  0800a144  0000b144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800a148  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000200  0800a348  0000c200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  0800a348  0000c550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010259  00000000  00000000  0000c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027bc  00000000  00000000  0001c489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0001ec48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e34  00000000  00000000  0001fe88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188fa  00000000  00000000  00020cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f81  00000000  00000000  000395b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094b6f  00000000  00000000  0004c537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e10a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa8  00000000  00000000  000e10ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  000e7094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009bb8 	.word	0x08009bb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	08009bb8 	.word	0x08009bb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2108      	movs	r1, #8
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <csn_high+0x14>)
 8000f8e:	f002 ff0f 	bl	8003db0 <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020000 	.word	0x40020000

08000f9c <csn_low>:

void csn_low(void){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2108      	movs	r1, #8
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <csn_low+0x14>)
 8000fa6:	f002 ff03 	bl	8003db0 <HAL_GPIO_WritePin>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <ce_high>:

void ce_high(void){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 1);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <ce_high+0x14>)
 8000fbe:	f002 fef7 	bl	8003db0 <HAL_GPIO_WritePin>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020000 	.word	0x40020000

08000fcc <ce_low>:

void ce_low(void){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2110      	movs	r1, #16
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <ce_low+0x14>)
 8000fd6:	f002 feeb 	bl	8003db0 <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f043 0320 	orr.w	r3, r3, #32
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8000ffe:	f7ff ffcd 	bl	8000f9c <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8001002:	f107 010f 	add.w	r1, r7, #15
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	2201      	movs	r2, #1
 800100c:	4808      	ldr	r0, [pc, #32]	@ (8001030 <nrf24_w_reg+0x4c>)
 800100e:	f003 fcfa 	bl	8004a06 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	b29a      	uxth	r2, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101a:	6839      	ldr	r1, [r7, #0]
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <nrf24_w_reg+0x4c>)
 800101e:	f003 fcf2 	bl	8004a06 <HAL_SPI_Transmit>

	csn_high();
 8001022:	f7ff ffaf 	bl	8000f84 <csn_high>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000284 	.word	0x20000284

08001034 <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	73bb      	strb	r3, [r7, #14]

	csn_low();
 800104c:	f7ff ffa6 	bl	8000f9c <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8001050:	f107 010f 	add.w	r1, r7, #15
 8001054:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001058:	2201      	movs	r2, #1
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <nrf24_r_reg+0x4c>)
 800105c:	f003 fcd3 	bl	8004a06 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	b29a      	uxth	r2, r3
 8001064:	f107 010e 	add.w	r1, r7, #14
 8001068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <nrf24_r_reg+0x4c>)
 800106e:	f003 fe0e 	bl	8004c8e <HAL_SPI_Receive>

	csn_high();
 8001072:	f7ff ff87 	bl	8000f84 <csn_high>

	return data;
 8001076:	7bbb      	ldrb	r3, [r7, #14]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000284 	.word	0x20000284

08001084 <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800108e:	1df9      	adds	r1, r7, #7
 8001090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001094:	2201      	movs	r2, #1
 8001096:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <nrf24_w_spec_cmd+0x20>)
 8001098:	f003 fcb5 	bl	8004a06 <HAL_SPI_Transmit>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000284 	.word	0x20000284

080010a8 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80010b2:	2101      	movs	r1, #1
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff ffbd 	bl	8001034 <nrf24_r_reg>
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff ff88 	bl	8000fe4 <nrf24_w_reg>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <nrf24_tx_pwr>:
	data &= ~(1 << PWR_UP);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_tx_pwr(uint8_t pwr){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80010ea:	2101      	movs	r1, #1
 80010ec:	2006      	movs	r0, #6
 80010ee:	f7ff ffa1 	bl	8001034 <nrf24_r_reg>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	b25a      	sxtb	r2, r3
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	b25b      	sxtb	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b25b      	sxtb	r3, r3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8001114:	f107 030f 	add.w	r3, r7, #15
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	2006      	movs	r0, #6
 800111e:	f7ff ff61 	bl	8000fe4 <nrf24_w_reg>
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8001138:	2101      	movs	r1, #1
 800113a:	2006      	movs	r0, #6
 800113c:	f7ff ff7a 	bl	8001034 <nrf24_r_reg>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800114a:	b2db      	uxtb	r3, r3
 800114c:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d105      	bne.n	8001160 <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	b2db      	uxtb	r3, r3
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e007      	b.n	8001170 <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d104      	bne.n	8001170 <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	b2db      	uxtb	r3, r3
 800116e:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 8001170:	f107 030f 	add.w	r3, r7, #15
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	2006      	movs	r0, #6
 800117a:	f7ff ff33 	bl	8000fe4 <nrf24_w_reg>
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	2201      	movs	r2, #1
 8001194:	4619      	mov	r1, r3
 8001196:	2005      	movs	r0, #5
 8001198:	f7ff ff24 	bl	8000fe4 <nrf24_w_reg>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 80011ac:	2205      	movs	r2, #5
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	2010      	movs	r0, #16
 80011b2:	f7ff ff17 	bl	8000fe4 <nrf24_w_reg>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	2b20      	cmp	r3, #32
 80011d4:	d901      	bls.n	80011da <nrf24_pipe_pld_size+0x1a>
		size = 32;
 80011d6:	2320      	movs	r3, #32
 80011d8:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b05      	cmp	r3, #5
 80011de:	d839      	bhi.n	8001254 <nrf24_pipe_pld_size+0x94>
 80011e0:	a201      	add	r2, pc, #4	@ (adr r2, 80011e8 <nrf24_pipe_pld_size+0x28>)
 80011e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e6:	bf00      	nop
 80011e8:	08001201 	.word	0x08001201
 80011ec:	0800120f 	.word	0x0800120f
 80011f0:	0800121d 	.word	0x0800121d
 80011f4:	0800122b 	.word	0x0800122b
 80011f8:	08001239 	.word	0x08001239
 80011fc:	08001247 	.word	0x08001247
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 8001200:	1dbb      	adds	r3, r7, #6
 8001202:	2201      	movs	r2, #1
 8001204:	4619      	mov	r1, r3
 8001206:	2011      	movs	r0, #17
 8001208:	f7ff feec 	bl	8000fe4 <nrf24_w_reg>

		break;
 800120c:	e022      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 800120e:	1dbb      	adds	r3, r7, #6
 8001210:	2201      	movs	r2, #1
 8001212:	4619      	mov	r1, r3
 8001214:	2012      	movs	r0, #18
 8001216:	f7ff fee5 	bl	8000fe4 <nrf24_w_reg>

		break;
 800121a:	e01b      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 800121c:	1dbb      	adds	r3, r7, #6
 800121e:	2201      	movs	r2, #1
 8001220:	4619      	mov	r1, r3
 8001222:	2013      	movs	r0, #19
 8001224:	f7ff fede 	bl	8000fe4 <nrf24_w_reg>

		break;
 8001228:	e014      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 800122a:	1dbb      	adds	r3, r7, #6
 800122c:	2201      	movs	r2, #1
 800122e:	4619      	mov	r1, r3
 8001230:	2014      	movs	r0, #20
 8001232:	f7ff fed7 	bl	8000fe4 <nrf24_w_reg>

		break;
 8001236:	e00d      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8001238:	1dbb      	adds	r3, r7, #6
 800123a:	2201      	movs	r2, #1
 800123c:	4619      	mov	r1, r3
 800123e:	2015      	movs	r0, #21
 8001240:	f7ff fed0 	bl	8000fe4 <nrf24_w_reg>

		break;
 8001244:	e006      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8001246:	1dbb      	adds	r3, r7, #6
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	2016      	movs	r0, #22
 800124e:	f7ff fec9 	bl	8000fe4 <nrf24_w_reg>

		break;
 8001252:	bf00      	nop
	}
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 800126c:	2101      	movs	r1, #1
 800126e:	2002      	movs	r0, #2
 8001270:	f7ff fee0 	bl	8001034 <nrf24_r_reg>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b05      	cmp	r3, #5
 800127c:	d850      	bhi.n	8001320 <nrf24_open_rx_pipe+0xc4>
 800127e:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <nrf24_open_rx_pipe+0x28>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	0800129d 	.word	0x0800129d
 8001288:	080012b3 	.word	0x080012b3
 800128c:	080012c9 	.word	0x080012c9
 8001290:	080012df 	.word	0x080012df
 8001294:	080012f5 	.word	0x080012f5
 8001298:	0800130b 	.word	0x0800130b
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 800129c:	2205      	movs	r2, #5
 800129e:	6839      	ldr	r1, [r7, #0]
 80012a0:	200a      	movs	r0, #10
 80012a2:	f7ff fe9f 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P0);
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	73fb      	strb	r3, [r7, #15]
		break;
 80012b0:	e036      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 80012b2:	2205      	movs	r2, #5
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	200b      	movs	r0, #11
 80012b8:	f7ff fe94 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P1);
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	73fb      	strb	r3, [r7, #15]
		break;
 80012c6:	e02b      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 80012c8:	2201      	movs	r2, #1
 80012ca:	6839      	ldr	r1, [r7, #0]
 80012cc:	200c      	movs	r0, #12
 80012ce:	f7ff fe89 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P2);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	73fb      	strb	r3, [r7, #15]
		break;
 80012dc:	e020      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 80012de:	2201      	movs	r2, #1
 80012e0:	6839      	ldr	r1, [r7, #0]
 80012e2:	200d      	movs	r0, #13
 80012e4:	f7ff fe7e 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P3);
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	73fb      	strb	r3, [r7, #15]
		break;
 80012f2:	e015      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	6839      	ldr	r1, [r7, #0]
 80012f8:	200e      	movs	r0, #14
 80012fa:	f7ff fe73 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P4);
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	b2db      	uxtb	r3, r3
 8001306:	73fb      	strb	r3, [r7, #15]
		break;
 8001308:	e00a      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 800130a:	2201      	movs	r2, #1
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	200f      	movs	r0, #15
 8001310:	f7ff fe68 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	f043 0320 	orr.w	r3, r3, #32
 800131a:	b2db      	uxtb	r3, r3
 800131c:	73fb      	strb	r3, [r7, #15]
		break;
 800131e:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8001320:	f107 030f 	add.w	r3, r7, #15
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	2002      	movs	r0, #2
 800132a:	f7ff fe5b 	bl	8000fe4 <nrf24_w_reg>
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop

08001338 <nrf24_set_crc>:
	data &= ~(1 << pipe);

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	460a      	mov	r2, r1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 8001348:	2101      	movs	r1, #1
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff fe72 	bl	8001034 <nrf24_r_reg>
 8001350:	4603      	mov	r3, r0
 8001352:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	f023 030c 	bic.w	r3, r3, #12
 800135a:	b2db      	uxtb	r3, r3
 800135c:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	b25a      	sxtb	r2, r3
 8001366:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	b25b      	sxtb	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b25a      	sxtb	r2, r3
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	b25b      	sxtb	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b25b      	sxtb	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 800137e:	f107 030f 	add.w	r3, r7, #15
 8001382:	2201      	movs	r2, #1
 8001384:	4619      	mov	r1, r3
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff fe2c 	bl	8000fe4 <nrf24_w_reg>
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	3b02      	subs	r3, #2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	2201      	movs	r2, #1
 80013aa:	4619      	mov	r1, r3
 80013ac:	2003      	movs	r0, #3
 80013ae:	f7ff fe19 	bl	8000fe4 <nrf24_w_reg>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
	csn_low();
 80013be:	f7ff fded 	bl	8000f9c <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 80013c2:	20e1      	movs	r0, #225	@ 0xe1
 80013c4:	f7ff fe5e 	bl	8001084 <nrf24_w_spec_cmd>
	csn_high();
 80013c8:	f7ff fddc 	bl	8000f84 <csn_high>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	csn_low();
 80013d4:	f7ff fde2 	bl	8000f9c <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 80013d8:	20e2      	movs	r0, #226	@ 0xe2
 80013da:	f7ff fe53 	bl	8001084 <nrf24_w_spec_cmd>
	csn_high();
 80013de:	f7ff fdd1 	bl	8000f84 <csn_high>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 80013f2:	23ff      	movs	r3, #255	@ 0xff
 80013f4:	71bb      	strb	r3, [r7, #6]

	csn_low();
 80013f6:	f7ff fdd1 	bl	8000f9c <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 80013fa:	1dfa      	adds	r2, r7, #7
 80013fc:	1db9      	adds	r1, r7, #6
 80013fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2301      	movs	r3, #1
 8001406:	4805      	ldr	r0, [pc, #20]	@ (800141c <nrf24_r_status+0x34>)
 8001408:	f003 fd5a 	bl	8004ec0 <HAL_SPI_TransmitReceive>
	csn_high();
 800140c:	f7ff fdba 	bl	8000f84 <csn_high>

	return data;
 8001410:	79fb      	ldrb	r3, [r7, #7]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000284 	.word	0x20000284

08001420 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800142a:	f7ff ffdd 	bl	80013e8 <nrf24_r_status>
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001438:	b2db      	uxtb	r3, r3
 800143a:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	2201      	movs	r2, #1
 8001440:	4619      	mov	r1, r3
 8001442:	2007      	movs	r0, #7
 8001444:	f7ff fdce 	bl	8000fe4 <nrf24_w_reg>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800145a:	f7ff ffc5 	bl	80013e8 <nrf24_r_status>
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f043 0320 	orr.w	r3, r3, #32
 8001468:	b2db      	uxtb	r3, r3
 800146a:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	2201      	movs	r2, #1
 8001470:	4619      	mov	r1, r3
 8001472:	2007      	movs	r0, #7
 8001474:	f7ff fdb6 	bl	8000fe4 <nrf24_w_reg>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800148a:	f7ff ffad 	bl	80013e8 <nrf24_r_status>
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	b2db      	uxtb	r3, r3
 800149a:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	2007      	movs	r0, #7
 80014a4:	f7ff fd9e 	bl	8000fe4 <nrf24_w_reg>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <nrf24_listen>:
	csn_high();

	return width;
}

void nrf24_listen(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80014ba:	2101      	movs	r1, #1
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fdb9 	bl	8001034 <nrf24_r_reg>
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PRIM_RX);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80014d0:	1dfb      	adds	r3, r7, #7
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fd84 	bl	8000fe4 <nrf24_w_reg>

	ce_high();
 80014dc:	f7ff fd6a 	bl	8000fb4 <ce_high>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <nrf24_dpl>:
	data &= ~(1 << PRIM_RX);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_dpl(uint8_t en){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80014f2:	2101      	movs	r1, #1
 80014f4:	201d      	movs	r0, #29
 80014f6:	f7ff fd9d 	bl	8001034 <nrf24_r_reg>
 80014fa:	4603      	mov	r3, r0
 80014fc:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	e004      	b.n	800151a <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	f023 0304 	bic.w	r3, r3, #4
 8001516:	b2db      	uxtb	r3, r3
 8001518:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800151a:	f107 030f 	add.w	r3, r7, #15
 800151e:	2201      	movs	r2, #1
 8001520:	4619      	mov	r1, r3
 8001522:	201d      	movs	r0, #29
 8001524:	f7ff fd5e 	bl	8000fe4 <nrf24_w_reg>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <nrf24_auto_ack_all>:
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
}

void nrf24_auto_ack_all(uint8_t ack){
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 800153a:	2101      	movs	r1, #1
 800153c:	2001      	movs	r0, #1
 800153e:	f7ff fd79 	bl	8001034 <nrf24_r_reg>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]

	if(ack){
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <nrf24_auto_ack_all+0x22>
		enaa = 63;
 800154c:	233f      	movs	r3, #63	@ 0x3f
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e001      	b.n	8001556 <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8001556:	f107 030f 	add.w	r3, r7, #15
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	2001      	movs	r0, #1
 8001560:	f7ff fd40 	bl	8000fe4 <nrf24_w_reg>
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8001576:	2101      	movs	r1, #1
 8001578:	201d      	movs	r0, #29
 800157a:	f7ff fd5b 	bl	8001034 <nrf24_r_reg>
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]

	if(en){
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	b2db      	uxtb	r3, r3
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e004      	b.n	800159e <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f023 0302 	bic.w	r3, r3, #2
 800159a:	b2db      	uxtb	r3, r3
 800159c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800159e:	f107 030f 	add.w	r3, r7, #15
 80015a2:	2201      	movs	r2, #1
 80015a4:	4619      	mov	r1, r3
 80015a6:	201d      	movs	r0, #29
 80015a8:	f7ff fd1c 	bl	8000fe4 <nrf24_w_reg>
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <nrf24_auto_retr_delay>:
	}

	nrf24_w_reg(FEATURE, &feature, 1);
}

void nrf24_auto_retr_delay(uint8_t delay){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 80015be:	2101      	movs	r1, #1
 80015c0:	2004      	movs	r0, #4
 80015c2:	f7ff fd37 	bl	8001034 <nrf24_r_reg>
 80015c6:	4603      	mov	r3, r0
 80015c8:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 80015e8:	f107 030f 	add.w	r3, r7, #15
 80015ec:	2201      	movs	r2, #1
 80015ee:	4619      	mov	r1, r3
 80015f0:	2004      	movs	r0, #4
 80015f2:	f7ff fcf7 	bl	8000fe4 <nrf24_w_reg>
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8001608:	2101      	movs	r1, #1
 800160a:	2004      	movs	r0, #4
 800160c:	f7ff fd12 	bl	8001034 <nrf24_r_reg>
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	f023 030f 	bic.w	r3, r3, #15
 800161a:	b2db      	uxtb	r3, r3
 800161c:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	4313      	orrs	r3, r2
 8001624:	b2db      	uxtb	r3, r3
 8001626:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8001628:	f107 030f 	add.w	r3, r7, #15
 800162c:	2201      	movs	r2, #1
 800162e:	4619      	mov	r1, r3
 8001630:	2004      	movs	r0, #4
 8001632:	f7ff fcd7 	bl	8000fe4 <nrf24_w_reg>
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <nrf24_data_available>:

uint8_t nrf24_carrier_detect(void){
	return nrf24_r_reg(RPD, 1);
}

uint8_t nrf24_data_available(void){
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0

 	uint8_t reg_dt = nrf24_r_reg(FIFO_STATUS, 1);
 8001644:	2101      	movs	r1, #1
 8001646:	2017      	movs	r0, #23
 8001648:	f7ff fcf4 	bl	8001034 <nrf24_r_reg>
 800164c:	4603      	mov	r3, r0
 800164e:	71fb      	strb	r3, [r7, #7]

	if(!(reg_dt & (1 << RX_EMPTY))){
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <nrf24_data_available+0x20>
		return 1;
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <nrf24_data_available+0x22>
	}

	return 0;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <nrf24_receive>:

void nrf24_receive(uint8_t *data, uint8_t size){
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_RX_PAYLOAD;
 8001674:	2361      	movs	r3, #97	@ 0x61
 8001676:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8001678:	f7ff fc90 	bl	8000f9c <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800167c:	f107 010f 	add.w	r1, r7, #15
 8001680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001684:	2201      	movs	r2, #1
 8001686:	4809      	ldr	r0, [pc, #36]	@ (80016ac <nrf24_receive+0x44>)
 8001688:	f003 f9bd 	bl	8004a06 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	b29a      	uxth	r2, r3
 8001690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4805      	ldr	r0, [pc, #20]	@ (80016ac <nrf24_receive+0x44>)
 8001698:	f003 faf9 	bl	8004c8e <HAL_SPI_Receive>
	csn_high();
 800169c:	f7ff fc72 	bl	8000f84 <csn_high>

	nrf24_clear_rx_dr();
 80016a0:	f7ff febe 	bl	8001420 <nrf24_clear_rx_dr>
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000284 	.word	0x20000284

080016b0 <nrf24_init>:
	}

	ce_high();
}

void nrf24_init(void){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 80016b4:	f7ff fcf8 	bl	80010a8 <nrf24_pwr_up>

	nrf24_flush_tx();
 80016b8:	f7ff fe7f 	bl	80013ba <nrf24_flush_tx>
	nrf24_flush_rx();
 80016bc:	f7ff fe88 	bl	80013d0 <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 80016c0:	f7ff feae 	bl	8001420 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 80016c4:	f7ff fec4 	bl	8001450 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 80016c8:	f7ff feda 	bl	8001480 <nrf24_clear_max_rt>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <radio_setup>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void radio_setup() {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	  ce_high();
 80016d4:	f7ff fc6e 	bl	8000fb4 <ce_high>
	  HAL_Delay(5);
 80016d8:	2005      	movs	r0, #5
 80016da:	f001 fdb3 	bl	8003244 <HAL_Delay>
	  ce_low();
 80016de:	f7ff fc75 	bl	8000fcc <ce_low>

	  nrf24_init();
 80016e2:	f7ff ffe5 	bl	80016b0 <nrf24_init>

	  nrf24_auto_ack_all(auto_ack);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7ff ff22 	bl	8001530 <nrf24_auto_ack_all>
	  nrf24_en_ack_pld(disable);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff ff3d 	bl	800156c <nrf24_en_ack_pld>
	  nrf24_dpl(disable);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff fef8 	bl	80014e8 <nrf24_dpl>

	  nrf24_tx_pwr(_0dbm);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f7ff fcef 	bl	80010dc <nrf24_tx_pwr>
	  nrf24_data_rate(_2mbps);
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff fd13 	bl	800112a <nrf24_data_rate>
	  nrf24_set_channel(channel);
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <radio_setup+0x84>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fd3c 	bl	8001186 <nrf24_set_channel>
	  nrf24_set_addr_width(5);
 800170e:	2005      	movs	r0, #5
 8001710:	f7ff fe40 	bl	8001394 <nrf24_set_addr_width>

	  nrf24_pipe_pld_size(0, pld_size);
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <radio_setup+0x88>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fd50 	bl	80011c0 <nrf24_pipe_pld_size>
	  nrf24_set_crc(en_crc, _1byte);
 8001720:	2100      	movs	r1, #0
 8001722:	2001      	movs	r0, #1
 8001724:	f7ff fe08 	bl	8001338 <nrf24_set_crc>

	  nrf24_auto_retr_delay(0);
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff ff43 	bl	80015b4 <nrf24_auto_retr_delay>
	  nrf24_auto_retr_limit(5);
 800172e:	2005      	movs	r0, #5
 8001730:	f7ff ff65 	bl	80015fe <nrf24_auto_retr_limit>

	  nrf24_open_tx_pipe(addr);
 8001734:	4809      	ldr	r0, [pc, #36]	@ (800175c <radio_setup+0x8c>)
 8001736:	f7ff fd35 	bl	80011a4 <nrf24_open_tx_pipe>
	  nrf24_open_rx_pipe(0, addr);
 800173a:	4908      	ldr	r1, [pc, #32]	@ (800175c <radio_setup+0x8c>)
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff fd8d 	bl	800125c <nrf24_open_rx_pipe>

	  nrf24_listen();
 8001742:	f7ff feb5 	bl	80014b0 <nrf24_listen>

	  ce_high();
 8001746:	f7ff fc35 	bl	8000fb4 <ce_high>
	  HAL_Delay(5);
 800174a:	2005      	movs	r0, #5
 800174c:	f001 fd7a 	bl	8003244 <HAL_Delay>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000009 	.word	0x20000009
 8001758:	2000000a 	.word	0x2000000a
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM11)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a13      	ldr	r2, [pc, #76]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d11d      	bne.n	80017ae <HAL_TIM_PeriodElapsedCallback+0x4e>
    {
        if (radio_timeout == 0)
 8001772:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d115      	bne.n	80017a8 <HAL_TIM_PeriodElapsedCallback+0x48>
        {
            vx = 0;
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
            vy = 0;
 8001784:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
            vang = 0;
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
            kicker = 0;
 8001794:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
            config = 0;
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
            param = 0;
 80017a0:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
        else
        {
            radio_timeout = 0; // Sinal de que rádio está funcionando
        }
    }
}
 80017a6:	e002      	b.n	80017ae <HAL_TIM_PeriodElapsedCallback+0x4e>
            radio_timeout = 0; // Sinal de que rádio está funcionando
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40014800 	.word	0x40014800
 80017c0:	2000022f 	.word	0x2000022f
 80017c4:	20000220 	.word	0x20000220
 80017c8:	20000224 	.word	0x20000224
 80017cc:	20000228 	.word	0x20000228
 80017d0:	2000022c 	.word	0x2000022c
 80017d4:	2000022d 	.word	0x2000022d
 80017d8:	2000022e 	.word	0x2000022e

080017dc <acionar_motor>:


void acionar_motor(int motor, float dutycycle) {
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	ed87 0a00 	vstr	s0, [r7]
    TIM_HandleTypeDef *htimA = NULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
    uint32_t channelA = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
    TIM_HandleTypeDef *htimB = NULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
    uint32_t channelB = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]

    switch (motor) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	f200 8111 	bhi.w	8001a24 <acionar_motor+0x248>
 8001802:	a201      	add	r2, pc, #4	@ (adr r2, 8001808 <acionar_motor+0x2c>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001819 	.word	0x08001819
 800180c:	0800182b 	.word	0x0800182b
 8001810:	0800183d 	.word	0x0800183d
 8001814:	0800184f 	.word	0x0800184f
        case 1:
            htimA = &htim1;
 8001818:	4b85      	ldr	r3, [pc, #532]	@ (8001a30 <acionar_motor+0x254>)
 800181a:	61fb      	str	r3, [r7, #28]
            channelA = TIM_CHANNEL_2;
 800181c:	2304      	movs	r3, #4
 800181e:	61bb      	str	r3, [r7, #24]
            htimB = &htim1;
 8001820:	4b83      	ldr	r3, [pc, #524]	@ (8001a30 <acionar_motor+0x254>)
 8001822:	617b      	str	r3, [r7, #20]
            channelB = TIM_CHANNEL_1;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
            break;
 8001828:	e01a      	b.n	8001860 <acionar_motor+0x84>
        case 2:
            htimA = &htim1;
 800182a:	4b81      	ldr	r3, [pc, #516]	@ (8001a30 <acionar_motor+0x254>)
 800182c:	61fb      	str	r3, [r7, #28]
            channelA = TIM_CHANNEL_3;
 800182e:	2308      	movs	r3, #8
 8001830:	61bb      	str	r3, [r7, #24]
            htimB = &htim1;
 8001832:	4b7f      	ldr	r3, [pc, #508]	@ (8001a30 <acionar_motor+0x254>)
 8001834:	617b      	str	r3, [r7, #20]
            channelB = TIM_CHANNEL_4;
 8001836:	230c      	movs	r3, #12
 8001838:	613b      	str	r3, [r7, #16]
            break;
 800183a:	e011      	b.n	8001860 <acionar_motor+0x84>
        case 3:
            htimA = &htim2;
 800183c:	4b7d      	ldr	r3, [pc, #500]	@ (8001a34 <acionar_motor+0x258>)
 800183e:	61fb      	str	r3, [r7, #28]
            channelA = TIM_CHANNEL_3;
 8001840:	2308      	movs	r3, #8
 8001842:	61bb      	str	r3, [r7, #24]
            htimB = &htim3;
 8001844:	4b7c      	ldr	r3, [pc, #496]	@ (8001a38 <acionar_motor+0x25c>)
 8001846:	617b      	str	r3, [r7, #20]
            channelB = TIM_CHANNEL_4;
 8001848:	230c      	movs	r3, #12
 800184a:	613b      	str	r3, [r7, #16]
            break;
 800184c:	e008      	b.n	8001860 <acionar_motor+0x84>
        case 4:
            htimA = &htim2;
 800184e:	4b79      	ldr	r3, [pc, #484]	@ (8001a34 <acionar_motor+0x258>)
 8001850:	61fb      	str	r3, [r7, #28]
            channelA = TIM_CHANNEL_1;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
            htimB = &htim3;
 8001856:	4b78      	ldr	r3, [pc, #480]	@ (8001a38 <acionar_motor+0x25c>)
 8001858:	617b      	str	r3, [r7, #20]
            channelB = TIM_CHANNEL_3;
 800185a:	2308      	movs	r3, #8
 800185c:	613b      	str	r3, [r7, #16]
            break;
 800185e:	bf00      	nop
        default:
            return;
    }

    // Limita dutycycle
    if (dutycycle > 100.0f) dutycycle = 100.0f;
 8001860:	edd7 7a00 	vldr	s15, [r7]
 8001864:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8001a3c <acionar_motor+0x260>
 8001868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd01      	ble.n	8001876 <acionar_motor+0x9a>
 8001872:	4b73      	ldr	r3, [pc, #460]	@ (8001a40 <acionar_motor+0x264>)
 8001874:	603b      	str	r3, [r7, #0]
    if (dutycycle < -100.0f) dutycycle = -100.0f;
 8001876:	edd7 7a00 	vldr	s15, [r7]
 800187a:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8001a44 <acionar_motor+0x268>
 800187e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	d501      	bpl.n	800188c <acionar_motor+0xb0>
 8001888:	4b6f      	ldr	r3, [pc, #444]	@ (8001a48 <acionar_motor+0x26c>)
 800188a:	603b      	str	r3, [r7, #0]

    uint32_t pwm_value = (uint32_t)((fabsf(dutycycle) / 100.0f) * ARR);
 800188c:	edd7 7a00 	vldr	s15, [r7]
 8001890:	eef0 7ae7 	vabs.f32	s15, s15
 8001894:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8001a3c <acionar_motor+0x260>
 8001898:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800189c:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8001a4c <acionar_motor+0x270>
 80018a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ac:	ee17 3a90 	vmov	r3, s15
 80018b0:	60fb      	str	r3, [r7, #12]

    if (dutycycle > 0) {
 80018b2:	edd7 7a00 	vldr	s15, [r7]
 80018b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	dd38      	ble.n	8001932 <acionar_motor+0x156>
        __HAL_TIM_SET_COMPARE(htimA, channelA, pwm_value);
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d104      	bne.n	80018d0 <acionar_motor+0xf4>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ce:	e013      	b.n	80018f8 <acionar_motor+0x11c>
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d104      	bne.n	80018e0 <acionar_motor+0x104>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6393      	str	r3, [r2, #56]	@ 0x38
 80018de:	e00b      	b.n	80018f8 <acionar_motor+0x11c>
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d104      	bne.n	80018f0 <acionar_motor+0x114>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80018ee:	e003      	b.n	80018f8 <acionar_motor+0x11c>
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htimB, channelB, 0);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d104      	bne.n	8001908 <acionar_motor+0x12c>
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	635a      	str	r2, [r3, #52]	@ 0x34
 8001906:	e08e      	b.n	8001a26 <acionar_motor+0x24a>
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	2b04      	cmp	r3, #4
 800190c:	d104      	bne.n	8001918 <acionar_motor+0x13c>
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	6393      	str	r3, [r2, #56]	@ 0x38
 8001916:	e086      	b.n	8001a26 <acionar_motor+0x24a>
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	2b08      	cmp	r3, #8
 800191c:	d104      	bne.n	8001928 <acionar_motor+0x14c>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	2300      	movs	r3, #0
 8001924:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001926:	e07e      	b.n	8001a26 <acionar_motor+0x24a>
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2300      	movs	r3, #0
 800192e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001930:	e079      	b.n	8001a26 <acionar_motor+0x24a>
    } else if (dutycycle < 0) {
 8001932:	edd7 7a00 	vldr	s15, [r7]
 8001936:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193e:	d538      	bpl.n	80019b2 <acionar_motor+0x1d6>
        __HAL_TIM_SET_COMPARE(htimA, channelA, 0);
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d104      	bne.n	8001950 <acionar_motor+0x174>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	635a      	str	r2, [r3, #52]	@ 0x34
 800194e:	e013      	b.n	8001978 <acionar_motor+0x19c>
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b04      	cmp	r3, #4
 8001954:	d104      	bne.n	8001960 <acionar_motor+0x184>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2300      	movs	r3, #0
 800195c:	6393      	str	r3, [r2, #56]	@ 0x38
 800195e:	e00b      	b.n	8001978 <acionar_motor+0x19c>
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b08      	cmp	r3, #8
 8001964:	d104      	bne.n	8001970 <acionar_motor+0x194>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2300      	movs	r3, #0
 800196c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800196e:	e003      	b.n	8001978 <acionar_motor+0x19c>
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2300      	movs	r3, #0
 8001976:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htimB, channelB, pwm_value);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d104      	bne.n	8001988 <acionar_motor+0x1ac>
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	635a      	str	r2, [r3, #52]	@ 0x34
 8001986:	e04e      	b.n	8001a26 <acionar_motor+0x24a>
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2b04      	cmp	r3, #4
 800198c:	d104      	bne.n	8001998 <acionar_motor+0x1bc>
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6393      	str	r3, [r2, #56]	@ 0x38
 8001996:	e046      	b.n	8001a26 <acionar_motor+0x24a>
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2b08      	cmp	r3, #8
 800199c:	d104      	bne.n	80019a8 <acionar_motor+0x1cc>
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80019a6:	e03e      	b.n	8001a26 <acionar_motor+0x24a>
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b0:	e039      	b.n	8001a26 <acionar_motor+0x24a>
    } else {
        __HAL_TIM_SET_COMPARE(htimA, channelA, 0);
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d104      	bne.n	80019c2 <acionar_motor+0x1e6>
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2200      	movs	r2, #0
 80019be:	635a      	str	r2, [r3, #52]	@ 0x34
 80019c0:	e013      	b.n	80019ea <acionar_motor+0x20e>
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d104      	bne.n	80019d2 <acionar_motor+0x1f6>
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2300      	movs	r3, #0
 80019ce:	6393      	str	r3, [r2, #56]	@ 0x38
 80019d0:	e00b      	b.n	80019ea <acionar_motor+0x20e>
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d104      	bne.n	80019e2 <acionar_motor+0x206>
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2300      	movs	r3, #0
 80019de:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80019e0:	e003      	b.n	80019ea <acionar_motor+0x20e>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	2300      	movs	r3, #0
 80019e8:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htimB, channelB, 0);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d104      	bne.n	80019fa <acionar_motor+0x21e>
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2200      	movs	r2, #0
 80019f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80019f8:	e015      	b.n	8001a26 <acionar_motor+0x24a>
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d104      	bne.n	8001a0a <acionar_motor+0x22e>
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2300      	movs	r3, #0
 8001a06:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a08:	e00d      	b.n	8001a26 <acionar_motor+0x24a>
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d104      	bne.n	8001a1a <acionar_motor+0x23e>
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2300      	movs	r3, #0
 8001a16:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001a18:	e005      	b.n	8001a26 <acionar_motor+0x24a>
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a22:	e000      	b.n	8001a26 <acionar_motor+0x24a>
            return;
 8001a24:	bf00      	nop
    }
}
 8001a26:	3724      	adds	r7, #36	@ 0x24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	200002dc 	.word	0x200002dc
 8001a34:	20000324 	.word	0x20000324
 8001a38:	2000036c 	.word	0x2000036c
 8001a3c:	42c80000 	.word	0x42c80000
 8001a40:	42c80000 	.word	0x42c80000
 8001a44:	c2c80000 	.word	0xc2c80000
 8001a48:	c2c80000 	.word	0xc2c80000
 8001a4c:	000003e8 	.word	0x000003e8

08001a50 <gravaFlash>:
    }

    acionar_motor(motor, *pwm_atual);
}

void gravaFlash(Info *info){
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b08c      	sub	sp, #48	@ 0x30
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8001a58:	f001 fd7c 	bl	8003554 <HAL_FLASH_Unlock>

    // Apaga o setor inteiro
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]

    EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
    EraseInitStruct.Sector        = FLASH_USER_SECTOR;
 8001a64:	2307      	movs	r3, #7
 8001a66:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors     = 1;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	623b      	str	r3, [r7, #32]

    HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8001a70:	f107 020c 	add.w	r2, r7, #12
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 fedc 	bl	8003838 <HAL_FLASHEx_Erase>

    // Grava palavra por palavra (32 bits)
    uint32_t *data = (uint32_t*)info;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t words = sizeof(Info) / 4;
 8001a84:	2301      	movs	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24

    for (size_t i = 0; i < words; i++) {
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a8c:	e015      	b.n	8001aba <gravaFlash+0x6a>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
                          FLASH_USER_START_ADDR + i * 4,
 8001a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a90:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001a94:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8001a98:	0099      	lsls	r1, r3, #2
                          data[i]);
 8001a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aa0:	4413      	add	r3, r2
 8001aa2:	681b      	ldr	r3, [r3, #0]
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	461c      	mov	r4, r3
 8001aa8:	4615      	mov	r5, r2
 8001aaa:	4622      	mov	r2, r4
 8001aac:	462b      	mov	r3, r5
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f001 fcfe 	bl	80034b0 <HAL_FLASH_Program>
    for (size_t i = 0; i < words; i++) {
 8001ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d3e5      	bcc.n	8001a8e <gravaFlash+0x3e>
    }

    HAL_FLASH_Lock();
 8001ac2:	f001 fd69 	bl	8003598 <HAL_FLASH_Lock>
}
 8001ac6:	bf00      	nop
 8001ac8:	3730      	adds	r7, #48	@ 0x30
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ad0 <leFlash>:

void leFlash(Info *info)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
    Info *flashCfg = (Info*)FLASH_USER_START_ADDR;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <leFlash+0x20>)
 8001ada:	60fb      	str	r3, [r7, #12]
    *info = *flashCfg; // cópia da flash para RAM
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	601a      	str	r2, [r3, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	08060000 	.word	0x08060000

08001af4 <act_config>:

void act_config(){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
	if(config == 1) {
 8001afa:	4b98      	ldr	r3, [pc, #608]	@ (8001d5c <act_config+0x268>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d10d      	bne.n	8001b20 <act_config+0x2c>
		id = param;
 8001b04:	4b96      	ldr	r3, [pc, #600]	@ (8001d60 <act_config+0x26c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b96      	ldr	r3, [pc, #600]	@ (8001d64 <act_config+0x270>)
 8001b0c:	701a      	strb	r2, [r3, #0]
		info.id = param;
 8001b0e:	4b94      	ldr	r3, [pc, #592]	@ (8001d60 <act_config+0x26c>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b94      	ldr	r3, [pc, #592]	@ (8001d68 <act_config+0x274>)
 8001b18:	601a      	str	r2, [r3, #0]
		gravaFlash(&info);
 8001b1a:	4893      	ldr	r0, [pc, #588]	@ (8001d68 <act_config+0x274>)
 8001b1c:	f7ff ff98 	bl	8001a50 <gravaFlash>
	}
	if(config == 5){
 8001b20:	4b8e      	ldr	r3, [pc, #568]	@ (8001d5c <act_config+0x268>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	f040 8114 	bne.w	8001d54 <act_config+0x260>
		if(param == 0){
 8001b2c:	4b8c      	ldr	r3, [pc, #560]	@ (8001d60 <act_config+0x26c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d134      	bne.n	8001ba0 <act_config+0xac>
			  HAL_Delay(4000);
 8001b36:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001b3a:	f001 fb83 	bl	8003244 <HAL_Delay>
			  for(int i = 0; i<4; i++){
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e02a      	b.n	8001b9a <act_config+0xa6>
				  acionar_motor(i+1, 1000);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3301      	adds	r3, #1
 8001b48:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 8001d6c <act_config+0x278>
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fe45 	bl	80017dc <acionar_motor>
				  HAL_Delay(1000);
 8001b52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b56:	f001 fb75 	bl	8003244 <HAL_Delay>
				  acionar_motor(i+1, 0);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 8001d70 <act_config+0x27c>
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fe3a 	bl	80017dc <acionar_motor>
				  HAL_Delay(1000);
 8001b68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b6c:	f001 fb6a 	bl	8003244 <HAL_Delay>
				  acionar_motor(i+1, -1000);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3301      	adds	r3, #1
 8001b74:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8001d74 <act_config+0x280>
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fe2f 	bl	80017dc <acionar_motor>
				  HAL_Delay(1000);
 8001b7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b82:	f001 fb5f 	bl	8003244 <HAL_Delay>
				  acionar_motor(i+1, 0);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 8001d70 <act_config+0x27c>
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fe24 	bl	80017dc <acionar_motor>
			  for(int i = 0; i<4; i++){
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3301      	adds	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	ddd1      	ble.n	8001b44 <act_config+0x50>
			  }
		  }
		  if(param == 1){
 8001ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8001d60 <act_config+0x26c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d144      	bne.n	8001c34 <act_config+0x140>
			  HAL_Delay(4000);
 8001baa:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001bae:	f001 fb49 	bl	8003244 <HAL_Delay>
			  for(int i = 0; i<4; i++){
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	e03a      	b.n	8001c2e <act_config+0x13a>
				  acionar_motor(1, 100);
 8001bb8:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 8001d78 <act_config+0x284>
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f7ff fe0d 	bl	80017dc <acionar_motor>
				  HAL_Delay(1000);
 8001bc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bc6:	f001 fb3d 	bl	8003244 <HAL_Delay>
				  acionar_motor(1, 0);
 8001bca:	ed9f 0a69 	vldr	s0, [pc, #420]	@ 8001d70 <act_config+0x27c>
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7ff fe04 	bl	80017dc <acionar_motor>
				  acionar_motor(2, 100);
 8001bd4:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 8001d78 <act_config+0x284>
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f7ff fdff 	bl	80017dc <acionar_motor>
				  HAL_Delay(1000);
 8001bde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001be2:	f001 fb2f 	bl	8003244 <HAL_Delay>
				  acionar_motor(2, 0);
 8001be6:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 8001d70 <act_config+0x27c>
 8001bea:	2002      	movs	r0, #2
 8001bec:	f7ff fdf6 	bl	80017dc <acionar_motor>
				  acionar_motor(3, 100);
 8001bf0:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8001d78 <act_config+0x284>
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f7ff fdf1 	bl	80017dc <acionar_motor>
				  HAL_Delay(1000);
 8001bfa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bfe:	f001 fb21 	bl	8003244 <HAL_Delay>
				  acionar_motor(3, 0);
 8001c02:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8001d70 <act_config+0x27c>
 8001c06:	2003      	movs	r0, #3
 8001c08:	f7ff fde8 	bl	80017dc <acionar_motor>
				  acionar_motor(4, 100);
 8001c0c:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8001d78 <act_config+0x284>
 8001c10:	2004      	movs	r0, #4
 8001c12:	f7ff fde3 	bl	80017dc <acionar_motor>
				  HAL_Delay(1000);
 8001c16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c1a:	f001 fb13 	bl	8003244 <HAL_Delay>
				  acionar_motor(4, 0);
 8001c1e:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8001d70 <act_config+0x27c>
 8001c22:	2004      	movs	r0, #4
 8001c24:	f7ff fdda 	bl	80017dc <acionar_motor>
			  for(int i = 0; i<4; i++){
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	ddc1      	ble.n	8001bb8 <act_config+0xc4>
			  }
		  }
		  if(param == 2){
 8001c34:	4b4a      	ldr	r3, [pc, #296]	@ (8001d60 <act_config+0x26c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	f040 808a 	bne.w	8001d54 <act_config+0x260>
			  for(int i = 0; i<11; i++){
 8001c40:	2300      	movs	r3, #0
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	e03e      	b.n	8001cc4 <act_config+0x1d0>
				  acionar_motor(1, i*10);
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c58:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f7ff fdbd 	bl	80017dc <acionar_motor>
				  acionar_motor(2, i*10);
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c74:	eeb0 0a67 	vmov.f32	s0, s15
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f7ff fdaf 	bl	80017dc <acionar_motor>
				  acionar_motor(3, i*10);
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c90:	eeb0 0a67 	vmov.f32	s0, s15
 8001c94:	2003      	movs	r0, #3
 8001c96:	f7ff fda1 	bl	80017dc <acionar_motor>
				  acionar_motor(4, i*10);
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cac:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb0:	2004      	movs	r0, #4
 8001cb2:	f7ff fd93 	bl	80017dc <acionar_motor>
				  HAL_Delay(2000);
 8001cb6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001cba:	f001 fac3 	bl	8003244 <HAL_Delay>
			  for(int i = 0; i<11; i++){
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b0a      	cmp	r3, #10
 8001cc8:	ddbd      	ble.n	8001c46 <act_config+0x152>
			  }
			  for(int i = 0; i<11; i++){
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	e03e      	b.n	8001d4e <act_config+0x25a>
				  acionar_motor(1, -i*10);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f06f 0209 	mvn.w	r2, #9
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f7ff fd78 	bl	80017dc <acionar_motor>
				  acionar_motor(2, -i*10);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f06f 0209 	mvn.w	r2, #9
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001d02:	2002      	movs	r0, #2
 8001d04:	f7ff fd6a 	bl	80017dc <acionar_motor>
				  acionar_motor(3, -i*10);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f06f 0209 	mvn.w	r2, #9
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1e:	2003      	movs	r0, #3
 8001d20:	f7ff fd5c 	bl	80017dc <acionar_motor>
				  acionar_motor(4, -i*10);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	f06f 0209 	mvn.w	r2, #9
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d36:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3a:	2004      	movs	r0, #4
 8001d3c:	f7ff fd4e 	bl	80017dc <acionar_motor>
				  HAL_Delay(2000);
 8001d40:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d44:	f001 fa7e 	bl	8003244 <HAL_Delay>
			  for(int i = 0; i<11; i++){
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b0a      	cmp	r3, #10
 8001d52:	ddbd      	ble.n	8001cd0 <act_config+0x1dc>
			  }
		  }
	}
}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	2000022d 	.word	0x2000022d
 8001d60:	2000022e 	.word	0x2000022e
 8001d64:	20000000 	.word	0x20000000
 8001d68:	2000021c 	.word	0x2000021c
 8001d6c:	447a0000 	.word	0x447a0000
 8001d70:	00000000 	.word	0x00000000
 8001d74:	c47a0000 	.word	0xc47a0000
 8001d78:	42c80000 	.word	0x42c80000
 8001d7c:	00000000 	.word	0x00000000

08001d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d84:	b0a2      	sub	sp, #136	@ 0x88
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d88:	f001 f9ea 	bl	8003160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d8c:	f000 fba8 	bl	80024e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d90:	f000 fe06 	bl	80029a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d94:	f000 fc3a 	bl	800260c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001d98:	f000 fc6e 	bl	8002678 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d9c:	f000 fd14 	bl	80027c8 <MX_TIM2_Init>
  MX_TIM11_Init();
 8001da0:	f000 fdda 	bl	8002958 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001da4:	f000 fd74 	bl	8002890 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001da8:	f000 fc02 	bl	80025b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001dac:	2100      	movs	r1, #0
 8001dae:	488d      	ldr	r0, [pc, #564]	@ (8001fe4 <main+0x264>)
 8001db0:	f003 fc74 	bl	800569c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001db4:	2104      	movs	r1, #4
 8001db6:	488b      	ldr	r0, [pc, #556]	@ (8001fe4 <main+0x264>)
 8001db8:	f003 fc70 	bl	800569c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	4889      	ldr	r0, [pc, #548]	@ (8001fe4 <main+0x264>)
 8001dc0:	f003 fc6c 	bl	800569c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001dc4:	210c      	movs	r1, #12
 8001dc6:	4887      	ldr	r0, [pc, #540]	@ (8001fe4 <main+0x264>)
 8001dc8:	f003 fc68 	bl	800569c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4886      	ldr	r0, [pc, #536]	@ (8001fe8 <main+0x268>)
 8001dd0:	f003 fc64 	bl	800569c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001dd4:	2108      	movs	r1, #8
 8001dd6:	4884      	ldr	r0, [pc, #528]	@ (8001fe8 <main+0x268>)
 8001dd8:	f003 fc60 	bl	800569c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001ddc:	2108      	movs	r1, #8
 8001dde:	4883      	ldr	r0, [pc, #524]	@ (8001fec <main+0x26c>)
 8001de0:	f003 fc5c 	bl	800569c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001de4:	210c      	movs	r1, #12
 8001de6:	4881      	ldr	r0, [pc, #516]	@ (8001fec <main+0x26c>)
 8001de8:	f003 fc58 	bl	800569c <HAL_TIM_PWM_Start>
  //radio configuration
  radio_setup();
 8001dec:	f7ff fc70 	bl	80016d0 <radio_setup>
  HAL_TIM_Base_Start_IT(&htim11);
 8001df0:	487f      	ldr	r0, [pc, #508]	@ (8001ff0 <main+0x270>)
 8001df2:	f003 fba1 	bl	8005538 <HAL_TIM_Base_Start_IT>

  //Radio variables
  uint8_t rx_buffer[pld_size];
 8001df6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff4 <main+0x274>)
 8001df8:	7819      	ldrb	r1, [r3, #0]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e00:	b2cb      	uxtb	r3, r1
 8001e02:	2200      	movs	r2, #0
 8001e04:	4698      	mov	r8, r3
 8001e06:	4691      	mov	r9, r2
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e1c:	b2cb      	uxtb	r3, r1
 8001e1e:	2200      	movs	r2, #0
 8001e20:	461c      	mov	r4, r3
 8001e22:	4615      	mov	r5, r2
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	00eb      	lsls	r3, r5, #3
 8001e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e32:	00e2      	lsls	r2, r4, #3
 8001e34:	460b      	mov	r3, r1
 8001e36:	3307      	adds	r3, #7
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	ebad 0d03 	sub.w	sp, sp, r3
 8001e40:	466b      	mov	r3, sp
 8001e42:	3300      	adds	r3, #0
 8001e44:	663b      	str	r3, [r7, #96]	@ 0x60
  Pacote pacote_recebido;

  //cinematics variables

  float J[4][3] = {
  	  	    {-sin(a1), cos(a1), R},
 8001e46:	4b6c      	ldr	r3, [pc, #432]	@ (8001ff8 <main+0x278>)
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fb85 	bl	8000558 <__aeabi_f2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	ec43 2b10 	vmov	d0, r2, r3
 8001e56:	f006 fe8b 	bl	8008b70 <sin>
 8001e5a:	ec53 2b10 	vmov	r2, r3, d0
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fea9 	bl	8000bb8 <__aeabi_d2f>
 8001e66:	4603      	mov	r3, r0
  float J[4][3] = {
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eef1 7a67 	vneg.f32	s15, s15
 8001e70:	edc7 7a04 	vstr	s15, [r7, #16]
  	  	    {-sin(a1), cos(a1), R},
 8001e74:	4b60      	ldr	r3, [pc, #384]	@ (8001ff8 <main+0x278>)
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb6e 	bl	8000558 <__aeabi_f2d>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	ec43 2b10 	vmov	d0, r2, r3
 8001e84:	f006 fe20 	bl	8008ac8 <cos>
 8001e88:	ec53 2b10 	vmov	r2, r3, d0
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe fe92 	bl	8000bb8 <__aeabi_d2f>
 8001e94:	4603      	mov	r3, r0
  float J[4][3] = {
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	4b58      	ldr	r3, [pc, #352]	@ (8001ffc <main+0x27c>)
 8001e9a:	61bb      	str	r3, [r7, #24]
  	  	    {-sin(a2), cos(a2), R},
 8001e9c:	4b58      	ldr	r3, [pc, #352]	@ (8002000 <main+0x280>)
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fb5a 	bl	8000558 <__aeabi_f2d>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	ec43 2b10 	vmov	d0, r2, r3
 8001eac:	f006 fe60 	bl	8008b70 <sin>
 8001eb0:	ec53 2b10 	vmov	r2, r3, d0
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7fe fe7e 	bl	8000bb8 <__aeabi_d2f>
 8001ebc:	4603      	mov	r3, r0
  float J[4][3] = {
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef1 7a67 	vneg.f32	s15, s15
 8001ec6:	edc7 7a07 	vstr	s15, [r7, #28]
  	  	    {-sin(a2), cos(a2), R},
 8001eca:	4b4d      	ldr	r3, [pc, #308]	@ (8002000 <main+0x280>)
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb43 	bl	8000558 <__aeabi_f2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	ec43 2b10 	vmov	d0, r2, r3
 8001eda:	f006 fdf5 	bl	8008ac8 <cos>
 8001ede:	ec53 2b10 	vmov	r2, r3, d0
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7fe fe67 	bl	8000bb8 <__aeabi_d2f>
 8001eea:	4603      	mov	r3, r0
  float J[4][3] = {
 8001eec:	623b      	str	r3, [r7, #32]
 8001eee:	4b43      	ldr	r3, [pc, #268]	@ (8001ffc <main+0x27c>)
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  	  	    {-sin(a3), cos(a3), R},
 8001ef2:	4b44      	ldr	r3, [pc, #272]	@ (8002004 <main+0x284>)
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb2f 	bl	8000558 <__aeabi_f2d>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	ec43 2b10 	vmov	d0, r2, r3
 8001f02:	f006 fe35 	bl	8008b70 <sin>
 8001f06:	ec53 2b10 	vmov	r2, r3, d0
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f7fe fe53 	bl	8000bb8 <__aeabi_d2f>
 8001f12:	4603      	mov	r3, r0
  float J[4][3] = {
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eef1 7a67 	vneg.f32	s15, s15
 8001f1c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  	  	    {-sin(a3), cos(a3), R},
 8001f20:	4b38      	ldr	r3, [pc, #224]	@ (8002004 <main+0x284>)
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fb18 	bl	8000558 <__aeabi_f2d>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	ec43 2b10 	vmov	d0, r2, r3
 8001f30:	f006 fdca 	bl	8008ac8 <cos>
 8001f34:	ec53 2b10 	vmov	r2, r3, d0
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f7fe fe3c 	bl	8000bb8 <__aeabi_d2f>
 8001f40:	4603      	mov	r3, r0
  float J[4][3] = {
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f44:	4b2d      	ldr	r3, [pc, #180]	@ (8001ffc <main+0x27c>)
 8001f46:	633b      	str	r3, [r7, #48]	@ 0x30
  	  	    {-sin(a4), cos(a4), R}
 8001f48:	4b2f      	ldr	r3, [pc, #188]	@ (8002008 <main+0x288>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fb04 	bl	8000558 <__aeabi_f2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	ec43 2b10 	vmov	d0, r2, r3
 8001f58:	f006 fe0a 	bl	8008b70 <sin>
 8001f5c:	ec53 2b10 	vmov	r2, r3, d0
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7fe fe28 	bl	8000bb8 <__aeabi_d2f>
 8001f68:	4603      	mov	r3, r0
  float J[4][3] = {
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef1 7a67 	vneg.f32	s15, s15
 8001f72:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  	  	    {-sin(a4), cos(a4), R}
 8001f76:	4b24      	ldr	r3, [pc, #144]	@ (8002008 <main+0x288>)
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe faed 	bl	8000558 <__aeabi_f2d>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	ec43 2b10 	vmov	d0, r2, r3
 8001f86:	f006 fd9f 	bl	8008ac8 <cos>
 8001f8a:	ec53 2b10 	vmov	r2, r3, d0
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7fe fe11 	bl	8000bb8 <__aeabi_d2f>
 8001f96:	4603      	mov	r3, r0
  float J[4][3] = {
 8001f98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f9a:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <main+0x27c>)
 8001f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  	  	  };
  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fa4:	4819      	ldr	r0, [pc, #100]	@ (800200c <main+0x28c>)
 8001fa6:	f001 ff03 	bl	8003db0 <HAL_GPIO_WritePin>
  leFlash(&info);
 8001faa:	4819      	ldr	r0, [pc, #100]	@ (8002010 <main+0x290>)
 8001fac:	f7ff fd90 	bl	8001ad0 <leFlash>
  id = info.id;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	@ (8002010 <main+0x290>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b17      	ldr	r3, [pc, #92]	@ (8002014 <main+0x294>)
 8001fb8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8001fba:	2101      	movs	r1, #1
 8001fbc:	4816      	ldr	r0, [pc, #88]	@ (8002018 <main+0x298>)
 8001fbe:	f001 fedf 	bl	8003d80 <HAL_GPIO_ReadPin>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d156      	bne.n	8002076 <main+0x2f6>
		  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fce:	480f      	ldr	r0, [pc, #60]	@ (800200c <main+0x28c>)
 8001fd0:	f001 feee 	bl	8003db0 <HAL_GPIO_WritePin>
		  HAL_Delay(2000);
 8001fd4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fd8:	f001 f934 	bl	8003244 <HAL_Delay>
		  for (int i = 0; i < id ; i++) {
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001fe2:	e034      	b.n	800204e <main+0x2ce>
 8001fe4:	200002dc 	.word	0x200002dc
 8001fe8:	20000324 	.word	0x20000324
 8001fec:	2000036c 	.word	0x2000036c
 8001ff0:	200003b4 	.word	0x200003b4
 8001ff4:	2000000a 	.word	0x2000000a
 8001ff8:	3f490fd8 	.word	0x3f490fd8
 8001ffc:	3dbb645a 	.word	0x3dbb645a
 8002000:	4016cbd1 	.word	0x4016cbd1
 8002004:	407b53ce 	.word	0x407b53ce
 8002008:	40afede5 	.word	0x40afede5
 800200c:	40020800 	.word	0x40020800
 8002010:	2000021c 	.word	0x2000021c
 8002014:	20000000 	.word	0x20000000
 8002018:	40020000 	.word	0x40020000
			  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 800201c:	2201      	movs	r2, #1
 800201e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002022:	48b1      	ldr	r0, [pc, #708]	@ (80022e8 <main+0x568>)
 8002024:	f001 fec4 	bl	8003db0 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 8002028:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800202c:	f001 f90a 	bl	8003244 <HAL_Delay>
			  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
 8002030:	2200      	movs	r2, #0
 8002032:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002036:	48ac      	ldr	r0, [pc, #688]	@ (80022e8 <main+0x568>)
 8002038:	f001 feba 	bl	8003db0 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 800203c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002040:	f001 f900 	bl	8003244 <HAL_Delay>
		  for (int i = 0; i < id ; i++) {
 8002044:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002048:	3301      	adds	r3, #1
 800204a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800204e:	4ba7      	ldr	r3, [pc, #668]	@ (80022ec <main+0x56c>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800205a:	4293      	cmp	r3, r2
 800205c:	dbde      	blt.n	800201c <main+0x29c>
		  }
		  if (id == -1) {
 800205e:	4ba3      	ldr	r3, [pc, #652]	@ (80022ec <main+0x56c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
				  HAL_Delay(500);
				  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
				  HAL_Delay(500);
			  }
		  }
		  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8002062:	2201      	movs	r2, #1
 8002064:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002068:	489f      	ldr	r0, [pc, #636]	@ (80022e8 <main+0x568>)
 800206a:	f001 fea1 	bl	8003db0 <HAL_GPIO_WritePin>
		  HAL_Delay(2000);
 800206e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002072:	f001 f8e7 	bl	8003244 <HAL_Delay>
	  }


  // Inicializa pacote com valores padrão
  pacote_recebido.Vx = 0;
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	f8c7 3041 	str.w	r3, [r7, #65]	@ 0x41
  pacote_recebido.Vy = 0;
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	f8c7 3045 	str.w	r3, [r7, #69]	@ 0x45
  pacote_recebido.Vang = 0;
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	f8c7 3049 	str.w	r3, [r7, #73]	@ 0x49
  pacote_recebido.id = id;
 800208e:	4b97      	ldr	r3, [pc, #604]	@ (80022ec <main+0x56c>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
  pacote_recebido.kicker = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
  pacote_recebido.config = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
  pacote_recebido.param = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


  // ---- Comunicação via rádio ----
	if(nrf24_data_available()) {
 80020aa:	f7ff fac8 	bl	800163e <nrf24_data_available>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d040      	beq.n	8002136 <main+0x3b6>
		nrf24_receive(rx_buffer, pld_size);
 80020b4:	4b8e      	ldr	r3, [pc, #568]	@ (80022f0 <main+0x570>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80020bc:	f7ff fad4 	bl	8001668 <nrf24_receive>
		memcpy(&pacote_recebido, rx_buffer, sizeof(Pacote));
 80020c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020c2:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	6859      	ldr	r1, [r3, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}

		if(pacote_recebido.id == id){
 80020d0:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80020d4:	4b85      	ldr	r3, [pc, #532]	@ (80022ec <main+0x56c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	429a      	cmp	r2, r3
 80020dc:	d121      	bne.n	8002122 <main+0x3a2>
		  // Atualiza variáveis globais
			vx = pacote_recebido.Vx;
 80020de:	f8d7 3041 	ldr.w	r3, [r7, #65]	@ 0x41
 80020e2:	4a84      	ldr	r2, [pc, #528]	@ (80022f4 <main+0x574>)
 80020e4:	6013      	str	r3, [r2, #0]
			vy = pacote_recebido.Vy;
 80020e6:	f8d7 3045 	ldr.w	r3, [r7, #69]	@ 0x45
 80020ea:	4a83      	ldr	r2, [pc, #524]	@ (80022f8 <main+0x578>)
 80020ec:	6013      	str	r3, [r2, #0]
			vang = pacote_recebido.Vang;
 80020ee:	f8d7 3049 	ldr.w	r3, [r7, #73]	@ 0x49
 80020f2:	4a82      	ldr	r2, [pc, #520]	@ (80022fc <main+0x57c>)
 80020f4:	6013      	str	r3, [r2, #0]
			kicker = pacote_recebido.kicker;
 80020f6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80020fa:	4b81      	ldr	r3, [pc, #516]	@ (8002300 <main+0x580>)
 80020fc:	701a      	strb	r2, [r3, #0]
			config = pacote_recebido.config;
 80020fe:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8002102:	4b80      	ldr	r3, [pc, #512]	@ (8002304 <main+0x584>)
 8002104:	701a      	strb	r2, [r3, #0]
			param = pacote_recebido.param;
 8002106:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800210a:	4b7f      	ldr	r3, [pc, #508]	@ (8002308 <main+0x588>)
 800210c:	701a      	strb	r2, [r3, #0]

			radio_timeout = 1;
 800210e:	4b7f      	ldr	r3, [pc, #508]	@ (800230c <main+0x58c>)
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
 8002114:	2200      	movs	r2, #0
 8002116:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800211a:	4873      	ldr	r0, [pc, #460]	@ (80022e8 <main+0x568>)
 800211c:	f001 fe48 	bl	8003db0 <HAL_GPIO_WritePin>
 8002120:	e012      	b.n	8002148 <main+0x3c8>
		} else {
			HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8002122:	2201      	movs	r2, #1
 8002124:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002128:	486f      	ldr	r0, [pc, #444]	@ (80022e8 <main+0x568>)
 800212a:	f001 fe41 	bl	8003db0 <HAL_GPIO_WritePin>
			radio_timeout = 0;
 800212e:	4b77      	ldr	r3, [pc, #476]	@ (800230c <main+0x58c>)
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	e008      	b.n	8002148 <main+0x3c8>
		}
	} else {
		radio_timeout = 0;
 8002136:	4b75      	ldr	r3, [pc, #468]	@ (800230c <main+0x58c>)
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 800213c:	2201      	movs	r2, #1
 800213e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002142:	4869      	ldr	r0, [pc, #420]	@ (80022e8 <main+0x568>)
 8002144:	f001 fe34 	bl	8003db0 <HAL_GPIO_WritePin>
	}
  if (config != 0) {
 8002148:	4b6e      	ldr	r3, [pc, #440]	@ (8002304 <main+0x584>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <main+0x3d8>
	  act_config();
 8002152:	f7ff fccf 	bl	8001af4 <act_config>
 8002156:	e730      	b.n	8001fba <main+0x23a>
	  continue;
  }

  // ---- Cinemática do robô ----
  if (vx > 0.71) vx = 0.71;
 8002158:	4b66      	ldr	r3, [pc, #408]	@ (80022f4 <main+0x574>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe f9fb 	bl	8000558 <__aeabi_f2d>
 8002162:	a35f      	add	r3, pc, #380	@ (adr r3, 80022e0 <main+0x560>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f7fe fcde 	bl	8000b28 <__aeabi_dcmpgt>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <main+0x3f8>
 8002172:	4b60      	ldr	r3, [pc, #384]	@ (80022f4 <main+0x574>)
 8002174:	4a66      	ldr	r2, [pc, #408]	@ (8002310 <main+0x590>)
 8002176:	601a      	str	r2, [r3, #0]
  if (vy > 0.71) vy = 0.71;
 8002178:	4b5f      	ldr	r3, [pc, #380]	@ (80022f8 <main+0x578>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f9eb 	bl	8000558 <__aeabi_f2d>
 8002182:	a357      	add	r3, pc, #348	@ (adr r3, 80022e0 <main+0x560>)
 8002184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002188:	f7fe fcce 	bl	8000b28 <__aeabi_dcmpgt>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <main+0x418>
 8002192:	4b59      	ldr	r3, [pc, #356]	@ (80022f8 <main+0x578>)
 8002194:	4a5e      	ldr	r2, [pc, #376]	@ (8002310 <main+0x590>)
 8002196:	601a      	str	r2, [r3, #0]

  float velocidade_angular[4];
  for (int i = 0; i < 4; i++) {
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800219e:	e048      	b.n	8002232 <main+0x4b2>
	  velocidade_angular[i] = (1.0f / Rr) * (J[i][0] * vx + J[i][1] * vy + J[i][2] * vang);
 80021a0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8002314 <main+0x594>
 80021a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	3388      	adds	r3, #136	@ 0x88
 80021ba:	443b      	add	r3, r7
 80021bc:	3b78      	subs	r3, #120	@ 0x78
 80021be:	edd3 6a00 	vldr	s13, [r3]
 80021c2:	4b4c      	ldr	r3, [pc, #304]	@ (80022f4 <main+0x574>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	3388      	adds	r3, #136	@ 0x88
 80021da:	443b      	add	r3, r7
 80021dc:	3b74      	subs	r3, #116	@ 0x74
 80021de:	ed93 6a00 	vldr	s12, [r3]
 80021e2:	4b45      	ldr	r3, [pc, #276]	@ (80022f8 <main+0x578>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80021f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	3388      	adds	r3, #136	@ 0x88
 80021fe:	443b      	add	r3, r7
 8002200:	3b70      	subs	r3, #112	@ 0x70
 8002202:	ed93 6a00 	vldr	s12, [r3]
 8002206:	4b3d      	ldr	r3, [pc, #244]	@ (80022fc <main+0x57c>)
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002218:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	3388      	adds	r3, #136	@ 0x88
 8002220:	443b      	add	r3, r7
 8002222:	3b88      	subs	r3, #136	@ 0x88
 8002224:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 4; i++) {
 8002228:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800222c:	3301      	adds	r3, #1
 800222e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002232:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002236:	2b03      	cmp	r3, #3
 8002238:	ddb2      	ble.n	80021a0 <main+0x420>
  }

  // Normalizar
  float max_val = 0.0f;
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  for (int i = 0; i < 4; i++) {
 8002240:	2300      	movs	r3, #0
 8002242:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002244:	e018      	b.n	8002278 <main+0x4f8>
	  float abs_val = fabs(velocidade_angular[i]);
 8002246:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	3388      	adds	r3, #136	@ 0x88
 800224c:	443b      	add	r3, r7
 800224e:	3b88      	subs	r3, #136	@ 0x88
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	eef0 7ae7 	vabs.f32	s15, s15
 8002258:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	  if (abs_val > max_val) max_val = abs_val;
 800225c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002260:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002264:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226c:	dd01      	ble.n	8002272 <main+0x4f2>
 800226e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002270:	67fb      	str	r3, [r7, #124]	@ 0x7c
  for (int i = 0; i < 4; i++) {
 8002272:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002274:	3301      	adds	r3, #1
 8002276:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002278:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800227a:	2b03      	cmp	r3, #3
 800227c:	dde3      	ble.n	8002246 <main+0x4c6>
  }
  if (max_val > velocidade_maxima_motor) {
 800227e:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002320 <main+0x5a0>
 8002282:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228e:	dd22      	ble.n	80022d6 <main+0x556>
	  float escala = velocidade_maxima_motor / max_val;
 8002290:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002320 <main+0x5a0>
 8002294:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8002298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800229c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	  for (int i = 0; i < 4; i++) {
 80022a0:	2300      	movs	r3, #0
 80022a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80022a4:	e014      	b.n	80022d0 <main+0x550>
		  velocidade_angular[i] *= escala;
 80022a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	3388      	adds	r3, #136	@ 0x88
 80022ac:	443b      	add	r3, r7
 80022ae:	3b88      	subs	r3, #136	@ 0x88
 80022b0:	ed93 7a00 	vldr	s14, [r3]
 80022b4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80022b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	3388      	adds	r3, #136	@ 0x88
 80022c2:	443b      	add	r3, r7
 80022c4:	3b88      	subs	r3, #136	@ 0x88
 80022c6:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < 4; i++) {
 80022ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022cc:	3301      	adds	r3, #1
 80022ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80022d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	dde7      	ble.n	80022a6 <main+0x526>
	  }
  }

  // Garantir mínimo
  float min_val = 1e9f;
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <main+0x598>)
 80022d8:	673b      	str	r3, [r7, #112]	@ 0x70
  for (int i = 0; i < 4; i++) {
 80022da:	2300      	movs	r3, #0
 80022dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022de:	e043      	b.n	8002368 <main+0x5e8>
 80022e0:	eb851eb8 	.word	0xeb851eb8
 80022e4:	3fe6b851 	.word	0x3fe6b851
 80022e8:	40020800 	.word	0x40020800
 80022ec:	20000000 	.word	0x20000000
 80022f0:	2000000a 	.word	0x2000000a
 80022f4:	20000220 	.word	0x20000220
 80022f8:	20000224 	.word	0x20000224
 80022fc:	20000228 	.word	0x20000228
 8002300:	2000022c 	.word	0x2000022c
 8002304:	2000022d 	.word	0x2000022d
 8002308:	2000022e 	.word	0x2000022e
 800230c:	2000022f 	.word	0x2000022f
 8002310:	3f35c28f 	.word	0x3f35c28f
 8002314:	3ca3d70a 	.word	0x3ca3d70a
 8002318:	4e6e6b28 	.word	0x4e6e6b28
 800231c:	418cbe4c 	.word	0x418cbe4c
 8002320:	41ea927e 	.word	0x41ea927e
	  float abs_val = fabs(velocidade_angular[i]);
 8002324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	3388      	adds	r3, #136	@ 0x88
 800232a:	443b      	add	r3, r7
 800232c:	3b88      	subs	r3, #136	@ 0x88
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	eef0 7ae7 	vabs.f32	s15, s15
 8002336:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	  if (abs_val > epsilon && abs_val < min_val) {
 800233a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800233e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234a:	dd0a      	ble.n	8002362 <main+0x5e2>
 800234c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002350:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235c:	d501      	bpl.n	8002362 <main+0x5e2>
		  min_val = abs_val;
 800235e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002360:	673b      	str	r3, [r7, #112]	@ 0x70
  for (int i = 0; i < 4; i++) {
 8002362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002364:	3301      	adds	r3, #1
 8002366:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800236a:	2b03      	cmp	r3, #3
 800236c:	ddda      	ble.n	8002324 <main+0x5a4>
	  }
  }
  if (min_val < velocidade_minima_motor && min_val > epsilon) {
 800236e:	ed1f 7a15 	vldr	s14, [pc, #-84]	@ 800231c <main+0x59c>
 8002372:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	d56b      	bpl.n	8002458 <main+0x6d8>
 8002380:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002384:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002390:	dd62      	ble.n	8002458 <main+0x6d8>
	  float escala = velocidade_minima_motor / min_val;
 8002392:	ed5f 6a1e 	vldr	s13, [pc, #-120]	@ 800231c <main+0x59c>
 8002396:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800239a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	  for (int i = 0; i < 4; i++) {
 80023a2:	2300      	movs	r3, #0
 80023a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023a6:	e054      	b.n	8002452 <main+0x6d2>
		  if (fabs(velocidade_angular[i]) > epsilon) {
 80023a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	3388      	adds	r3, #136	@ 0x88
 80023ae:	443b      	add	r3, r7
 80023b0:	3b88      	subs	r3, #136	@ 0x88
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	eef0 7ae7 	vabs.f32	s15, s15
 80023ba:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80023be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c6:	dd41      	ble.n	800244c <main+0x6cc>
			  velocidade_angular[i] *= escala;
 80023c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	3388      	adds	r3, #136	@ 0x88
 80023ce:	443b      	add	r3, r7
 80023d0:	3b88      	subs	r3, #136	@ 0x88
 80023d2:	ed93 7a00 	vldr	s14, [r3]
 80023d6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80023da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	3388      	adds	r3, #136	@ 0x88
 80023e4:	443b      	add	r3, r7
 80023e6:	3b88      	subs	r3, #136	@ 0x88
 80023e8:	edc3 7a00 	vstr	s15, [r3]
			  if (velocidade_angular[i] > velocidade_maxima_motor) velocidade_angular[i] = velocidade_maxima_motor;
 80023ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	3388      	adds	r3, #136	@ 0x88
 80023f2:	443b      	add	r3, r7
 80023f4:	3b88      	subs	r3, #136	@ 0x88
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	ed1f 7a37 	vldr	s14, [pc, #-220]	@ 8002320 <main+0x5a0>
 80023fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	dd06      	ble.n	8002416 <main+0x696>
 8002408:	4a32      	ldr	r2, [pc, #200]	@ (80024d4 <main+0x754>)
 800240a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	3388      	adds	r3, #136	@ 0x88
 8002410:	443b      	add	r3, r7
 8002412:	3b88      	subs	r3, #136	@ 0x88
 8002414:	601a      	str	r2, [r3, #0]
			  if (velocidade_angular[i] < -velocidade_maxima_motor) velocidade_angular[i] = -velocidade_maxima_motor;
 8002416:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	3388      	adds	r3, #136	@ 0x88
 800241c:	443b      	add	r3, r7
 800241e:	3b88      	subs	r3, #136	@ 0x88
 8002420:	ed93 7a00 	vldr	s14, [r3]
 8002424:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80024d8 <main+0x758>
 8002428:	eef1 7a67 	vneg.f32	s15, s15
 800242c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002434:	d50a      	bpl.n	800244c <main+0x6cc>
 8002436:	eddf 7a28 	vldr	s15, [pc, #160]	@ 80024d8 <main+0x758>
 800243a:	eef1 7a67 	vneg.f32	s15, s15
 800243e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	3388      	adds	r3, #136	@ 0x88
 8002444:	443b      	add	r3, r7
 8002446:	3b88      	subs	r3, #136	@ 0x88
 8002448:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < 4; i++) {
 800244c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800244e:	3301      	adds	r3, #1
 8002450:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002454:	2b03      	cmp	r3, #3
 8002456:	dda7      	ble.n	80023a8 <main+0x628>
		  }
	  }
  }

  // Aplicar nos motores
  acionar_motor(1, 100.0f*velocidade_angular[0]/velocidade_maxima_motor);
 8002458:	edd7 7a00 	vldr	s15, [r7]
 800245c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80024dc <main+0x75c>
 8002460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002464:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80024d8 <main+0x758>
 8002468:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800246c:	eeb0 0a47 	vmov.f32	s0, s14
 8002470:	2001      	movs	r0, #1
 8002472:	f7ff f9b3 	bl	80017dc <acionar_motor>
  acionar_motor(2, 100.0f*velocidade_angular[1]/velocidade_maxima_motor);
 8002476:	edd7 7a01 	vldr	s15, [r7, #4]
 800247a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80024dc <main+0x75c>
 800247e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002482:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80024d8 <main+0x758>
 8002486:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800248a:	eeb0 0a47 	vmov.f32	s0, s14
 800248e:	2002      	movs	r0, #2
 8002490:	f7ff f9a4 	bl	80017dc <acionar_motor>
  acionar_motor(3, 100.0f*velocidade_angular[2]/velocidade_maxima_motor);
 8002494:	edd7 7a02 	vldr	s15, [r7, #8]
 8002498:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80024dc <main+0x75c>
 800249c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a0:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80024d8 <main+0x758>
 80024a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024a8:	eeb0 0a47 	vmov.f32	s0, s14
 80024ac:	2003      	movs	r0, #3
 80024ae:	f7ff f995 	bl	80017dc <acionar_motor>
  acionar_motor(4, 100.0f*velocidade_angular[3]/velocidade_maxima_motor);
 80024b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80024b6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80024dc <main+0x75c>
 80024ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024be:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80024d8 <main+0x758>
 80024c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024c6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ca:	2004      	movs	r0, #4
 80024cc:	f7ff f986 	bl	80017dc <acionar_motor>
  {
 80024d0:	e573      	b.n	8001fba <main+0x23a>
 80024d2:	bf00      	nop
 80024d4:	41ea927e 	.word	0x41ea927e
 80024d8:	41ea927e 	.word	0x41ea927e
 80024dc:	42c80000 	.word	0x42c80000

080024e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b094      	sub	sp, #80	@ 0x50
 80024e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024e6:	f107 0320 	add.w	r3, r7, #32
 80024ea:	2230      	movs	r2, #48	@ 0x30
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 fbc5 	bl	8006c7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	4b27      	ldr	r3, [pc, #156]	@ (80025a8 <SystemClock_Config+0xc8>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	4a26      	ldr	r2, [pc, #152]	@ (80025a8 <SystemClock_Config+0xc8>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002512:	6413      	str	r3, [r2, #64]	@ 0x40
 8002514:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <SystemClock_Config+0xc8>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002520:	2300      	movs	r3, #0
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <SystemClock_Config+0xcc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a20      	ldr	r2, [pc, #128]	@ (80025ac <SystemClock_Config+0xcc>)
 800252a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <SystemClock_Config+0xcc>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800253c:	2302      	movs	r3, #2
 800253e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002540:	2301      	movs	r3, #1
 8002542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002544:	2310      	movs	r3, #16
 8002546:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002548:	2302      	movs	r3, #2
 800254a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800254c:	2300      	movs	r3, #0
 800254e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002550:	2308      	movs	r3, #8
 8002552:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002554:	2350      	movs	r3, #80	@ 0x50
 8002556:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002558:	2302      	movs	r3, #2
 800255a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800255c:	2304      	movs	r3, #4
 800255e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002560:	f107 0320 	add.w	r3, r7, #32
 8002564:	4618      	mov	r0, r3
 8002566:	f001 fd81 	bl	800406c <HAL_RCC_OscConfig>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002570:	f000 fac6 	bl	8002b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002574:	230f      	movs	r3, #15
 8002576:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002578:	2302      	movs	r3, #2
 800257a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002584:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	2102      	movs	r1, #2
 8002590:	4618      	mov	r0, r3
 8002592:	f001 ffe3 	bl	800455c <HAL_RCC_ClockConfig>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800259c:	f000 fab0 	bl	8002b00 <Error_Handler>
  }
}
 80025a0:	bf00      	nop
 80025a2:	3750      	adds	r7, #80	@ 0x50
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000

080025b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025b4:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <MX_I2C1_Init+0x50>)
 80025b6:	4a13      	ldr	r2, [pc, #76]	@ (8002604 <MX_I2C1_Init+0x54>)
 80025b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025ba:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <MX_I2C1_Init+0x50>)
 80025bc:	4a12      	ldr	r2, [pc, #72]	@ (8002608 <MX_I2C1_Init+0x58>)
 80025be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002600 <MX_I2C1_Init+0x50>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002600 <MX_I2C1_Init+0x50>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <MX_I2C1_Init+0x50>)
 80025ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <MX_I2C1_Init+0x50>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <MX_I2C1_Init+0x50>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025e0:	4b07      	ldr	r3, [pc, #28]	@ (8002600 <MX_I2C1_Init+0x50>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <MX_I2C1_Init+0x50>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025ec:	4804      	ldr	r0, [pc, #16]	@ (8002600 <MX_I2C1_Init+0x50>)
 80025ee:	f001 fbf9 	bl	8003de4 <HAL_I2C_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025f8:	f000 fa82 	bl	8002b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000230 	.word	0x20000230
 8002604:	40005400 	.word	0x40005400
 8002608:	000186a0 	.word	0x000186a0

0800260c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002610:	4b17      	ldr	r3, [pc, #92]	@ (8002670 <MX_SPI1_Init+0x64>)
 8002612:	4a18      	ldr	r2, [pc, #96]	@ (8002674 <MX_SPI1_Init+0x68>)
 8002614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002616:	4b16      	ldr	r3, [pc, #88]	@ (8002670 <MX_SPI1_Init+0x64>)
 8002618:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800261c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800261e:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <MX_SPI1_Init+0x64>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002624:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <MX_SPI1_Init+0x64>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800262a:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <MX_SPI1_Init+0x64>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002630:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <MX_SPI1_Init+0x64>)
 8002632:	2200      	movs	r2, #0
 8002634:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002636:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <MX_SPI1_Init+0x64>)
 8002638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800263c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800263e:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <MX_SPI1_Init+0x64>)
 8002640:	2218      	movs	r2, #24
 8002642:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002644:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <MX_SPI1_Init+0x64>)
 8002646:	2200      	movs	r2, #0
 8002648:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800264a:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <MX_SPI1_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002650:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <MX_SPI1_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002656:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <MX_SPI1_Init+0x64>)
 8002658:	220a      	movs	r2, #10
 800265a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800265c:	4804      	ldr	r0, [pc, #16]	@ (8002670 <MX_SPI1_Init+0x64>)
 800265e:	f002 f949 	bl	80048f4 <HAL_SPI_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002668:	f000 fa4a 	bl	8002b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000284 	.word	0x20000284
 8002674:	40013000 	.word	0x40013000

08002678 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b092      	sub	sp, #72	@ 0x48
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800267e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
 8002698:	615a      	str	r2, [r3, #20]
 800269a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	2220      	movs	r2, #32
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f004 faeb 	bl	8006c7e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026a8:	4b45      	ldr	r3, [pc, #276]	@ (80027c0 <MX_TIM1_Init+0x148>)
 80026aa:	4a46      	ldr	r2, [pc, #280]	@ (80027c4 <MX_TIM1_Init+0x14c>)
 80026ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026ae:	4b44      	ldr	r3, [pc, #272]	@ (80027c0 <MX_TIM1_Init+0x148>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b4:	4b42      	ldr	r3, [pc, #264]	@ (80027c0 <MX_TIM1_Init+0x148>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80026ba:	4b41      	ldr	r3, [pc, #260]	@ (80027c0 <MX_TIM1_Init+0x148>)
 80026bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c2:	4b3f      	ldr	r3, [pc, #252]	@ (80027c0 <MX_TIM1_Init+0x148>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026c8:	4b3d      	ldr	r3, [pc, #244]	@ (80027c0 <MX_TIM1_Init+0x148>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ce:	4b3c      	ldr	r3, [pc, #240]	@ (80027c0 <MX_TIM1_Init+0x148>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026d4:	483a      	ldr	r0, [pc, #232]	@ (80027c0 <MX_TIM1_Init+0x148>)
 80026d6:	f002 ff91 	bl	80055fc <HAL_TIM_PWM_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80026e0:	f000 fa0e 	bl	8002b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026f0:	4619      	mov	r1, r3
 80026f2:	4833      	ldr	r0, [pc, #204]	@ (80027c0 <MX_TIM1_Init+0x148>)
 80026f4:	f003 fc94 	bl	8006020 <HAL_TIMEx_MasterConfigSynchronization>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80026fe:	f000 f9ff 	bl	8002b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002702:	2360      	movs	r3, #96	@ 0x60
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800270a:	2300      	movs	r3, #0
 800270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800270e:	2300      	movs	r3, #0
 8002710:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800271e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002722:	2200      	movs	r2, #0
 8002724:	4619      	mov	r1, r3
 8002726:	4826      	ldr	r0, [pc, #152]	@ (80027c0 <MX_TIM1_Init+0x148>)
 8002728:	f003 f958 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002732:	f000 f9e5 	bl	8002b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800273a:	2204      	movs	r2, #4
 800273c:	4619      	mov	r1, r3
 800273e:	4820      	ldr	r0, [pc, #128]	@ (80027c0 <MX_TIM1_Init+0x148>)
 8002740:	f003 f94c 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800274a:	f000 f9d9 	bl	8002b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800274e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002752:	2208      	movs	r2, #8
 8002754:	4619      	mov	r1, r3
 8002756:	481a      	ldr	r0, [pc, #104]	@ (80027c0 <MX_TIM1_Init+0x148>)
 8002758:	f003 f940 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002762:	f000 f9cd 	bl	8002b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800276a:	220c      	movs	r2, #12
 800276c:	4619      	mov	r1, r3
 800276e:	4814      	ldr	r0, [pc, #80]	@ (80027c0 <MX_TIM1_Init+0x148>)
 8002770:	f003 f934 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800277a:	f000 f9c1 	bl	8002b00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002792:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002796:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4807      	ldr	r0, [pc, #28]	@ (80027c0 <MX_TIM1_Init+0x148>)
 80027a2:	f003 fcab 	bl	80060fc <HAL_TIMEx_ConfigBreakDeadTime>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80027ac:	f000 f9a8 	bl	8002b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027b0:	4803      	ldr	r0, [pc, #12]	@ (80027c0 <MX_TIM1_Init+0x148>)
 80027b2:	f000 fadd 	bl	8002d70 <HAL_TIM_MspPostInit>

}
 80027b6:	bf00      	nop
 80027b8:	3748      	adds	r7, #72	@ 0x48
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200002dc 	.word	0x200002dc
 80027c4:	40010000 	.word	0x40010000

080027c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	@ 0x28
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ce:	f107 0320 	add.w	r3, r7, #32
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	615a      	str	r2, [r3, #20]
 80027e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027ea:	4b28      	ldr	r3, [pc, #160]	@ (800288c <MX_TIM2_Init+0xc4>)
 80027ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027f2:	4b26      	ldr	r3, [pc, #152]	@ (800288c <MX_TIM2_Init+0xc4>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f8:	4b24      	ldr	r3, [pc, #144]	@ (800288c <MX_TIM2_Init+0xc4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80027fe:	4b23      	ldr	r3, [pc, #140]	@ (800288c <MX_TIM2_Init+0xc4>)
 8002800:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002804:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002806:	4b21      	ldr	r3, [pc, #132]	@ (800288c <MX_TIM2_Init+0xc4>)
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280c:	4b1f      	ldr	r3, [pc, #124]	@ (800288c <MX_TIM2_Init+0xc4>)
 800280e:	2200      	movs	r2, #0
 8002810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002812:	481e      	ldr	r0, [pc, #120]	@ (800288c <MX_TIM2_Init+0xc4>)
 8002814:	f002 fef2 	bl	80055fc <HAL_TIM_PWM_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800281e:	f000 f96f 	bl	8002b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800282a:	f107 0320 	add.w	r3, r7, #32
 800282e:	4619      	mov	r1, r3
 8002830:	4816      	ldr	r0, [pc, #88]	@ (800288c <MX_TIM2_Init+0xc4>)
 8002832:	f003 fbf5 	bl	8006020 <HAL_TIMEx_MasterConfigSynchronization>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800283c:	f000 f960 	bl	8002b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002840:	2360      	movs	r3, #96	@ 0x60
 8002842:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	2200      	movs	r2, #0
 8002854:	4619      	mov	r1, r3
 8002856:	480d      	ldr	r0, [pc, #52]	@ (800288c <MX_TIM2_Init+0xc4>)
 8002858:	f003 f8c0 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002862:	f000 f94d 	bl	8002b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	2208      	movs	r2, #8
 800286a:	4619      	mov	r1, r3
 800286c:	4807      	ldr	r0, [pc, #28]	@ (800288c <MX_TIM2_Init+0xc4>)
 800286e:	f003 f8b5 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002878:	f000 f942 	bl	8002b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800287c:	4803      	ldr	r0, [pc, #12]	@ (800288c <MX_TIM2_Init+0xc4>)
 800287e:	f000 fa77 	bl	8002d70 <HAL_TIM_MspPostInit>

}
 8002882:	bf00      	nop
 8002884:	3728      	adds	r7, #40	@ 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000324 	.word	0x20000324

08002890 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	@ 0x28
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002896:	f107 0320 	add.w	r3, r7, #32
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	611a      	str	r2, [r3, #16]
 80028ae:	615a      	str	r2, [r3, #20]
 80028b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028b2:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <MX_TIM3_Init+0xc0>)
 80028b4:	4a27      	ldr	r2, [pc, #156]	@ (8002954 <MX_TIM3_Init+0xc4>)
 80028b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80028b8:	4b25      	ldr	r3, [pc, #148]	@ (8002950 <MX_TIM3_Init+0xc0>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028be:	4b24      	ldr	r3, [pc, #144]	@ (8002950 <MX_TIM3_Init+0xc0>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80028c4:	4b22      	ldr	r3, [pc, #136]	@ (8002950 <MX_TIM3_Init+0xc0>)
 80028c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028cc:	4b20      	ldr	r3, [pc, #128]	@ (8002950 <MX_TIM3_Init+0xc0>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002950 <MX_TIM3_Init+0xc0>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028d8:	481d      	ldr	r0, [pc, #116]	@ (8002950 <MX_TIM3_Init+0xc0>)
 80028da:	f002 fe8f 	bl	80055fc <HAL_TIM_PWM_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80028e4:	f000 f90c 	bl	8002b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e8:	2300      	movs	r3, #0
 80028ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028f0:	f107 0320 	add.w	r3, r7, #32
 80028f4:	4619      	mov	r1, r3
 80028f6:	4816      	ldr	r0, [pc, #88]	@ (8002950 <MX_TIM3_Init+0xc0>)
 80028f8:	f003 fb92 	bl	8006020 <HAL_TIMEx_MasterConfigSynchronization>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002902:	f000 f8fd 	bl	8002b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002906:	2360      	movs	r3, #96	@ 0x60
 8002908:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	2208      	movs	r2, #8
 800291a:	4619      	mov	r1, r3
 800291c:	480c      	ldr	r0, [pc, #48]	@ (8002950 <MX_TIM3_Init+0xc0>)
 800291e:	f003 f85d 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002928:	f000 f8ea 	bl	8002b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	220c      	movs	r2, #12
 8002930:	4619      	mov	r1, r3
 8002932:	4807      	ldr	r0, [pc, #28]	@ (8002950 <MX_TIM3_Init+0xc0>)
 8002934:	f003 f852 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800293e:	f000 f8df 	bl	8002b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002942:	4803      	ldr	r0, [pc, #12]	@ (8002950 <MX_TIM3_Init+0xc0>)
 8002944:	f000 fa14 	bl	8002d70 <HAL_TIM_MspPostInit>

}
 8002948:	bf00      	nop
 800294a:	3728      	adds	r7, #40	@ 0x28
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	2000036c 	.word	0x2000036c
 8002954:	40000400 	.word	0x40000400

08002958 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800295c:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <MX_TIM11_Init+0x40>)
 800295e:	4a0f      	ldr	r2, [pc, #60]	@ (800299c <MX_TIM11_Init+0x44>)
 8002960:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8399;
 8002962:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <MX_TIM11_Init+0x40>)
 8002964:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002968:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296a:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <MX_TIM11_Init+0x40>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1999;
 8002970:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <MX_TIM11_Init+0x40>)
 8002972:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002976:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002978:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <MX_TIM11_Init+0x40>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <MX_TIM11_Init+0x40>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002984:	4804      	ldr	r0, [pc, #16]	@ (8002998 <MX_TIM11_Init+0x40>)
 8002986:	f002 fd87 	bl	8005498 <HAL_TIM_Base_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002990:	f000 f8b6 	bl	8002b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200003b4 	.word	0x200003b4
 800299c:	40014800 	.word	0x40014800

080029a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	@ 0x28
 80029a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	4b4d      	ldr	r3, [pc, #308]	@ (8002af0 <MX_GPIO_Init+0x150>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	4a4c      	ldr	r2, [pc, #304]	@ (8002af0 <MX_GPIO_Init+0x150>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c6:	4b4a      	ldr	r3, [pc, #296]	@ (8002af0 <MX_GPIO_Init+0x150>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b46      	ldr	r3, [pc, #280]	@ (8002af0 <MX_GPIO_Init+0x150>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	4a45      	ldr	r2, [pc, #276]	@ (8002af0 <MX_GPIO_Init+0x150>)
 80029dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e2:	4b43      	ldr	r3, [pc, #268]	@ (8002af0 <MX_GPIO_Init+0x150>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	4b3f      	ldr	r3, [pc, #252]	@ (8002af0 <MX_GPIO_Init+0x150>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a3e      	ldr	r2, [pc, #248]	@ (8002af0 <MX_GPIO_Init+0x150>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b3c      	ldr	r3, [pc, #240]	@ (8002af0 <MX_GPIO_Init+0x150>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	4b38      	ldr	r3, [pc, #224]	@ (8002af0 <MX_GPIO_Init+0x150>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	4a37      	ldr	r2, [pc, #220]	@ (8002af0 <MX_GPIO_Init+0x150>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a1a:	4b35      	ldr	r3, [pc, #212]	@ (8002af0 <MX_GPIO_Init+0x150>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
 8002a26:	2200      	movs	r2, #0
 8002a28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a2c:	4831      	ldr	r0, [pc, #196]	@ (8002af4 <MX_GPIO_Init+0x154>)
 8002a2e:	f001 f9bf 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CSN_Pin|SPI_CE_Pin, GPIO_PIN_RESET);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2118      	movs	r1, #24
 8002a36:	4830      	ldr	r0, [pc, #192]	@ (8002af8 <MX_GPIO_Init+0x158>)
 8002a38:	f001 f9ba 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(sinal_kicker_GPIO_Port, sinal_kicker_Pin, GPIO_PIN_RESET);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2104      	movs	r1, #4
 8002a40:	482e      	ldr	r0, [pc, #184]	@ (8002afc <MX_GPIO_Init+0x15c>)
 8002a42:	f001 f9b5 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_AZUL_Pin */
  GPIO_InitStruct.Pin = LED_AZUL_Pin;
 8002a46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a54:	2300      	movs	r3, #0
 8002a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_AZUL_GPIO_Port, &GPIO_InitStruct);
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4825      	ldr	r0, [pc, #148]	@ (8002af4 <MX_GPIO_Init+0x154>)
 8002a60:	f001 f80a 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002a64:	2301      	movs	r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	4619      	mov	r1, r3
 8002a76:	4820      	ldr	r0, [pc, #128]	@ (8002af8 <MX_GPIO_Init+0x158>)
 8002a78:	f000 fffe 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CSN_Pin SPI_CE_Pin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CE_Pin;
 8002a7c:	2318      	movs	r3, #24
 8002a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a80:	2301      	movs	r3, #1
 8002a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	4619      	mov	r1, r3
 8002a92:	4819      	ldr	r0, [pc, #100]	@ (8002af8 <MX_GPIO_Init+0x158>)
 8002a94:	f000 fff0 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : sinal_kicker_Pin */
  GPIO_InitStruct.Pin = sinal_kicker_Pin;
 8002a98:	2304      	movs	r3, #4
 8002a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(sinal_kicker_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	4813      	ldr	r0, [pc, #76]	@ (8002afc <MX_GPIO_Init+0x15c>)
 8002ab0:	f000 ffe2 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : sinal_hall_1_Pin sinal_hall_2_Pin sinal_hall_3_Pin sinal_hall_4_Pin
                           sinal_hall_5_Pin sinal_hall_6_Pin sinal_hall_7_Pin sinal_hall_8_Pin */
  GPIO_InitStruct.Pin = sinal_hall_1_Pin|sinal_hall_2_Pin|sinal_hall_3_Pin|sinal_hall_4_Pin
 8002ab4:	f24f 1338 	movw	r3, #61752	@ 0xf138
 8002ab8:	617b      	str	r3, [r7, #20]
                          |sinal_hall_5_Pin|sinal_hall_6_Pin|sinal_hall_7_Pin|sinal_hall_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480c      	ldr	r0, [pc, #48]	@ (8002afc <MX_GPIO_Init+0x15c>)
 8002aca:	f000 ffd5 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_bola_Pin */
  GPIO_InitStruct.Pin = Sensor_bola_Pin;
 8002ace:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sensor_bola_GPIO_Port, &GPIO_InitStruct);
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4805      	ldr	r0, [pc, #20]	@ (8002af8 <MX_GPIO_Init+0x158>)
 8002ae4:	f000 ffc8 	bl	8003a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002ae8:	bf00      	nop
 8002aea:	3728      	adds	r7, #40	@ 0x28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40020000 	.word	0x40020000
 8002afc:	40020400 	.word	0x40020400

08002b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b04:	b672      	cpsid	i
}
 8002b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <Error_Handler+0x8>

08002b0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	4b10      	ldr	r3, [pc, #64]	@ (8002b58 <HAL_MspInit+0x4c>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b58 <HAL_MspInit+0x4c>)
 8002b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b22:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <HAL_MspInit+0x4c>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <HAL_MspInit+0x4c>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	4a08      	ldr	r2, [pc, #32]	@ (8002b58 <HAL_MspInit+0x4c>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_MspInit+0x4c>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800

08002b5c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	@ 0x28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a19      	ldr	r2, [pc, #100]	@ (8002be0 <HAL_I2C_MspInit+0x84>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d12b      	bne.n	8002bd6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	4b18      	ldr	r3, [pc, #96]	@ (8002be4 <HAL_I2C_MspInit+0x88>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	4a17      	ldr	r2, [pc, #92]	@ (8002be4 <HAL_I2C_MspInit+0x88>)
 8002b88:	f043 0302 	orr.w	r3, r3, #2
 8002b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b8e:	4b15      	ldr	r3, [pc, #84]	@ (8002be4 <HAL_I2C_MspInit+0x88>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b9a:	23c0      	movs	r3, #192	@ 0xc0
 8002b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b9e:	2312      	movs	r3, #18
 8002ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002baa:	2304      	movs	r3, #4
 8002bac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480c      	ldr	r0, [pc, #48]	@ (8002be8 <HAL_I2C_MspInit+0x8c>)
 8002bb6:	f000 ff5f 	bl	8003a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <HAL_I2C_MspInit+0x88>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	4a08      	ldr	r2, [pc, #32]	@ (8002be4 <HAL_I2C_MspInit+0x88>)
 8002bc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bca:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_I2C_MspInit+0x88>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002bd6:	bf00      	nop
 8002bd8:	3728      	adds	r7, #40	@ 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40005400 	.word	0x40005400
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020400 	.word	0x40020400

08002bec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a19      	ldr	r2, [pc, #100]	@ (8002c70 <HAL_SPI_MspInit+0x84>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d12b      	bne.n	8002c66 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	4b18      	ldr	r3, [pc, #96]	@ (8002c74 <HAL_SPI_MspInit+0x88>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	4a17      	ldr	r2, [pc, #92]	@ (8002c74 <HAL_SPI_MspInit+0x88>)
 8002c18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <HAL_SPI_MspInit+0x88>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <HAL_SPI_MspInit+0x88>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	4a10      	ldr	r2, [pc, #64]	@ (8002c74 <HAL_SPI_MspInit+0x88>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c74 <HAL_SPI_MspInit+0x88>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c46:	23e0      	movs	r3, #224	@ 0xe0
 8002c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c52:	2303      	movs	r3, #3
 8002c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c56:	2305      	movs	r3, #5
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5a:	f107 0314 	add.w	r3, r7, #20
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4805      	ldr	r0, [pc, #20]	@ (8002c78 <HAL_SPI_MspInit+0x8c>)
 8002c62:	f000 ff09 	bl	8003a78 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002c66:	bf00      	nop
 8002c68:	3728      	adds	r7, #40	@ 0x28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40013000 	.word	0x40013000
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40020000 	.word	0x40020000

08002c7c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a22      	ldr	r2, [pc, #136]	@ (8002d14 <HAL_TIM_PWM_MspInit+0x98>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d116      	bne.n	8002cbc <HAL_TIM_PWM_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	4b21      	ldr	r3, [pc, #132]	@ (8002d18 <HAL_TIM_PWM_MspInit+0x9c>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	4a20      	ldr	r2, [pc, #128]	@ (8002d18 <HAL_TIM_PWM_MspInit+0x9c>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d18 <HAL_TIM_PWM_MspInit+0x9c>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002caa:	2200      	movs	r2, #0
 8002cac:	2100      	movs	r1, #0
 8002cae:	201a      	movs	r0, #26
 8002cb0:	f000 fbc7 	bl	8003442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002cb4:	201a      	movs	r0, #26
 8002cb6:	f000 fbe0 	bl	800347a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002cba:	e026      	b.n	8002d0a <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	4b13      	ldr	r3, [pc, #76]	@ (8002d18 <HAL_TIM_PWM_MspInit+0x9c>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	4a12      	ldr	r2, [pc, #72]	@ (8002d18 <HAL_TIM_PWM_MspInit+0x9c>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd6:	4b10      	ldr	r3, [pc, #64]	@ (8002d18 <HAL_TIM_PWM_MspInit+0x9c>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
}
 8002ce2:	e012      	b.n	8002d0a <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM3)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8002d1c <HAL_TIM_PWM_MspInit+0xa0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d10d      	bne.n	8002d0a <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <HAL_TIM_PWM_MspInit+0x9c>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	4a08      	ldr	r2, [pc, #32]	@ (8002d18 <HAL_TIM_PWM_MspInit+0x9c>)
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cfe:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <HAL_TIM_PWM_MspInit+0x9c>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
}
 8002d0a:	bf00      	nop
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40010000 	.word	0x40010000
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40000400 	.word	0x40000400

08002d20 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d68 <HAL_TIM_Base_MspInit+0x48>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d115      	bne.n	8002d5e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM11_MspInit 0 */

    /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b0d      	ldr	r3, [pc, #52]	@ (8002d6c <HAL_TIM_Base_MspInit+0x4c>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002d6c <HAL_TIM_Base_MspInit+0x4c>)
 8002d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d42:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <HAL_TIM_Base_MspInit+0x4c>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	201a      	movs	r0, #26
 8002d54:	f000 fb75 	bl	8003442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002d58:	201a      	movs	r0, #26
 8002d5a:	f000 fb8e 	bl	800347a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM11_MspInit 1 */

  }

}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40014800 	.word	0x40014800
 8002d6c:	40023800 	.word	0x40023800

08002d70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08c      	sub	sp, #48	@ 0x30
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 031c 	add.w	r3, r7, #28
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a4f      	ldr	r2, [pc, #316]	@ (8002ecc <HAL_TIM_MspPostInit+0x15c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d130      	bne.n	8002df4 <HAL_TIM_MspPostInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	4b4e      	ldr	r3, [pc, #312]	@ (8002ed0 <HAL_TIM_MspPostInit+0x160>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	4a4d      	ldr	r2, [pc, #308]	@ (8002ed0 <HAL_TIM_MspPostInit+0x160>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da2:	4b4b      	ldr	r3, [pc, #300]	@ (8002ed0 <HAL_TIM_MspPostInit+0x160>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = motor1_IN2_PWM2_Pin;
 8002dae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(motor1_IN2_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002dc4:	f107 031c 	add.w	r3, r7, #28
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4842      	ldr	r0, [pc, #264]	@ (8002ed4 <HAL_TIM_MspPostInit+0x164>)
 8002dcc:	f000 fe54 	bl	8003a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = motor1_IN1_PWM1_Pin|motor2_IN3_PWM1_Pin|motor2_in4_PWM2_Pin;
 8002dd0:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8002dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dde:	2300      	movs	r3, #0
 8002de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002de2:	2301      	movs	r3, #1
 8002de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de6:	f107 031c 	add.w	r3, r7, #28
 8002dea:	4619      	mov	r1, r3
 8002dec:	4839      	ldr	r0, [pc, #228]	@ (8002ed4 <HAL_TIM_MspPostInit+0x164>)
 8002dee:	f000 fe43 	bl	8003a78 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002df2:	e066      	b.n	8002ec2 <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dfc:	d13e      	bne.n	8002e7c <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	4b33      	ldr	r3, [pc, #204]	@ (8002ed0 <HAL_TIM_MspPostInit+0x160>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	4a32      	ldr	r2, [pc, #200]	@ (8002ed0 <HAL_TIM_MspPostInit+0x160>)
 8002e08:	f043 0302 	orr.w	r3, r3, #2
 8002e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e0e:	4b30      	ldr	r3, [pc, #192]	@ (8002ed0 <HAL_TIM_MspPostInit+0x160>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed0 <HAL_TIM_MspPostInit+0x160>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	4a2b      	ldr	r2, [pc, #172]	@ (8002ed0 <HAL_TIM_MspPostInit+0x160>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2a:	4b29      	ldr	r3, [pc, #164]	@ (8002ed0 <HAL_TIM_MspPostInit+0x160>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = motor3_in1_PWM1_Pin;
 8002e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(motor3_in1_PWM1_GPIO_Port, &GPIO_InitStruct);
 8002e4c:	f107 031c 	add.w	r3, r7, #28
 8002e50:	4619      	mov	r1, r3
 8002e52:	4821      	ldr	r0, [pc, #132]	@ (8002ed8 <HAL_TIM_MspPostInit+0x168>)
 8002e54:	f000 fe10 	bl	8003a78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = motor4_in4_PWM2_Pin;
 8002e58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(motor4_in4_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002e6e:	f107 031c 	add.w	r3, r7, #28
 8002e72:	4619      	mov	r1, r3
 8002e74:	4817      	ldr	r0, [pc, #92]	@ (8002ed4 <HAL_TIM_MspPostInit+0x164>)
 8002e76:	f000 fdff 	bl	8003a78 <HAL_GPIO_Init>
}
 8002e7a:	e022      	b.n	8002ec2 <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM3)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a16      	ldr	r2, [pc, #88]	@ (8002edc <HAL_TIM_MspPostInit+0x16c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d11d      	bne.n	8002ec2 <HAL_TIM_MspPostInit+0x152>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ed0 <HAL_TIM_MspPostInit+0x160>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	4a10      	ldr	r2, [pc, #64]	@ (8002ed0 <HAL_TIM_MspPostInit+0x160>)
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e96:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed0 <HAL_TIM_MspPostInit+0x160>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = motor4_in3_PWM1_Pin|motor3_in2_PWM2_Pin;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb6:	f107 031c 	add.w	r3, r7, #28
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4806      	ldr	r0, [pc, #24]	@ (8002ed8 <HAL_TIM_MspPostInit+0x168>)
 8002ebe:	f000 fddb 	bl	8003a78 <HAL_GPIO_Init>
}
 8002ec2:	bf00      	nop
 8002ec4:	3730      	adds	r7, #48	@ 0x30
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40010000 	.word	0x40010000
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40020000 	.word	0x40020000
 8002ed8:	40020400 	.word	0x40020400
 8002edc:	40000400 	.word	0x40000400

08002ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ee4:	bf00      	nop
 8002ee6:	e7fd      	b.n	8002ee4 <NMI_Handler+0x4>

08002ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <HardFault_Handler+0x4>

08002ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef4:	bf00      	nop
 8002ef6:	e7fd      	b.n	8002ef4 <MemManage_Handler+0x4>

08002ef8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002efc:	bf00      	nop
 8002efe:	e7fd      	b.n	8002efc <BusFault_Handler+0x4>

08002f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <UsageFault_Handler+0x4>

08002f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f36:	f000 f965 	bl	8003204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f44:	4803      	ldr	r0, [pc, #12]	@ (8002f54 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002f46:	f002 fc59 	bl	80057fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002f4a:	4803      	ldr	r0, [pc, #12]	@ (8002f58 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002f4c:	f002 fc56 	bl	80057fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	200002dc 	.word	0x200002dc
 8002f58:	200003b4 	.word	0x200003b4

08002f5c <_getpid>:
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	2301      	movs	r3, #1
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <_kill>:
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
 8002f76:	f003 fed5 	bl	8006d24 <__errno>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2216      	movs	r2, #22
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <_exit>:
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ffe7 	bl	8002f6c <_kill>
 8002f9e:	bf00      	nop
 8002fa0:	e7fd      	b.n	8002f9e <_exit+0x12>

08002fa2 <_read>:
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e00a      	b.n	8002fca <_read+0x28>
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	4601      	mov	r1, r0
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	60ba      	str	r2, [r7, #8]
 8002fc0:	b2ca      	uxtb	r2, r1
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	dbf0      	blt.n	8002fb4 <_read+0x12>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <_write>:
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	e009      	b.n	8003002 <_write+0x26>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	60ba      	str	r2, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f3af 8000 	nop.w
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3301      	adds	r3, #1
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	dbf1      	blt.n	8002fee <_write+0x12>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <_close>:
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <_fstat>:
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	2300      	movs	r3, #0
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <_isatty>:
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	2301      	movs	r3, #1
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <_lseek>:
 8003062:	b480      	push	{r7}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	2300      	movs	r3, #0
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <_sbrk>:
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	4a14      	ldr	r2, [pc, #80]	@ (80030d8 <_sbrk+0x5c>)
 8003086:	4b15      	ldr	r3, [pc, #84]	@ (80030dc <_sbrk+0x60>)
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	4b13      	ldr	r3, [pc, #76]	@ (80030e0 <_sbrk+0x64>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d102      	bne.n	800309e <_sbrk+0x22>
 8003098:	4b11      	ldr	r3, [pc, #68]	@ (80030e0 <_sbrk+0x64>)
 800309a:	4a12      	ldr	r2, [pc, #72]	@ (80030e4 <_sbrk+0x68>)
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	4b10      	ldr	r3, [pc, #64]	@ (80030e0 <_sbrk+0x64>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d207      	bcs.n	80030bc <_sbrk+0x40>
 80030ac:	f003 fe3a 	bl	8006d24 <__errno>
 80030b0:	4603      	mov	r3, r0
 80030b2:	220c      	movs	r2, #12
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030ba:	e009      	b.n	80030d0 <_sbrk+0x54>
 80030bc:	4b08      	ldr	r3, [pc, #32]	@ (80030e0 <_sbrk+0x64>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <_sbrk+0x64>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	4a05      	ldr	r2, [pc, #20]	@ (80030e0 <_sbrk+0x64>)
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20020000 	.word	0x20020000
 80030dc:	00000400 	.word	0x00000400
 80030e0:	200003fc 	.word	0x200003fc
 80030e4:	20000550 	.word	0x20000550

080030e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030ec:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <SystemInit+0x20>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f2:	4a05      	ldr	r2, [pc, #20]	@ (8003108 <SystemInit+0x20>)
 80030f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <Reset_Handler>:
 800310c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003144 <LoopFillZerobss+0xe>
 8003110:	f7ff ffea 	bl	80030e8 <SystemInit>
 8003114:	480c      	ldr	r0, [pc, #48]	@ (8003148 <LoopFillZerobss+0x12>)
 8003116:	490d      	ldr	r1, [pc, #52]	@ (800314c <LoopFillZerobss+0x16>)
 8003118:	4a0d      	ldr	r2, [pc, #52]	@ (8003150 <LoopFillZerobss+0x1a>)
 800311a:	2300      	movs	r3, #0
 800311c:	e002      	b.n	8003124 <LoopCopyDataInit>

0800311e <CopyDataInit>:
 800311e:	58d4      	ldr	r4, [r2, r3]
 8003120:	50c4      	str	r4, [r0, r3]
 8003122:	3304      	adds	r3, #4

08003124 <LoopCopyDataInit>:
 8003124:	18c4      	adds	r4, r0, r3
 8003126:	428c      	cmp	r4, r1
 8003128:	d3f9      	bcc.n	800311e <CopyDataInit>
 800312a:	4a0a      	ldr	r2, [pc, #40]	@ (8003154 <LoopFillZerobss+0x1e>)
 800312c:	4c0a      	ldr	r4, [pc, #40]	@ (8003158 <LoopFillZerobss+0x22>)
 800312e:	2300      	movs	r3, #0
 8003130:	e001      	b.n	8003136 <LoopFillZerobss>

08003132 <FillZerobss>:
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	3204      	adds	r2, #4

08003136 <LoopFillZerobss>:
 8003136:	42a2      	cmp	r2, r4
 8003138:	d3fb      	bcc.n	8003132 <FillZerobss>
 800313a:	f003 fdf9 	bl	8006d30 <__libc_init_array>
 800313e:	f7fe fe1f 	bl	8001d80 <main>
 8003142:	4770      	bx	lr
 8003144:	20020000 	.word	0x20020000
 8003148:	20000000 	.word	0x20000000
 800314c:	20000200 	.word	0x20000200
 8003150:	0800a148 	.word	0x0800a148
 8003154:	20000200 	.word	0x20000200
 8003158:	20000550 	.word	0x20000550

0800315c <ADC_IRQHandler>:
 800315c:	e7fe      	b.n	800315c <ADC_IRQHandler>
	...

08003160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003164:	4b0e      	ldr	r3, [pc, #56]	@ (80031a0 <HAL_Init+0x40>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0d      	ldr	r2, [pc, #52]	@ (80031a0 <HAL_Init+0x40>)
 800316a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800316e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003170:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <HAL_Init+0x40>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0a      	ldr	r2, [pc, #40]	@ (80031a0 <HAL_Init+0x40>)
 8003176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800317a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800317c:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <HAL_Init+0x40>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a07      	ldr	r2, [pc, #28]	@ (80031a0 <HAL_Init+0x40>)
 8003182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003188:	2003      	movs	r0, #3
 800318a:	f000 f94f 	bl	800342c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800318e:	200f      	movs	r0, #15
 8003190:	f000 f808 	bl	80031a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003194:	f7ff fcba 	bl	8002b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023c00 	.word	0x40023c00

080031a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031ac:	4b12      	ldr	r3, [pc, #72]	@ (80031f8 <HAL_InitTick+0x54>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b12      	ldr	r3, [pc, #72]	@ (80031fc <HAL_InitTick+0x58>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	4619      	mov	r1, r3
 80031b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f967 	bl	8003496 <HAL_SYSTICK_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e00e      	b.n	80031f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d80a      	bhi.n	80031ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d8:	2200      	movs	r2, #0
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031e0:	f000 f92f 	bl	8003442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031e4:	4a06      	ldr	r2, [pc, #24]	@ (8003200 <HAL_InitTick+0x5c>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e000      	b.n	80031f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	2000000c 	.word	0x2000000c
 80031fc:	20000014 	.word	0x20000014
 8003200:	20000010 	.word	0x20000010

08003204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <HAL_IncTick+0x20>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	4b06      	ldr	r3, [pc, #24]	@ (8003228 <HAL_IncTick+0x24>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4413      	add	r3, r2
 8003214:	4a04      	ldr	r2, [pc, #16]	@ (8003228 <HAL_IncTick+0x24>)
 8003216:	6013      	str	r3, [r2, #0]
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000014 	.word	0x20000014
 8003228:	20000400 	.word	0x20000400

0800322c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return uwTick;
 8003230:	4b03      	ldr	r3, [pc, #12]	@ (8003240 <HAL_GetTick+0x14>)
 8003232:	681b      	ldr	r3, [r3, #0]
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000400 	.word	0x20000400

08003244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800324c:	f7ff ffee 	bl	800322c <HAL_GetTick>
 8003250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800325c:	d005      	beq.n	800326a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800325e:	4b0a      	ldr	r3, [pc, #40]	@ (8003288 <HAL_Delay+0x44>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800326a:	bf00      	nop
 800326c:	f7ff ffde 	bl	800322c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	429a      	cmp	r2, r3
 800327a:	d8f7      	bhi.n	800326c <HAL_Delay+0x28>
  {
  }
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000014 	.word	0x20000014

0800328c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800329c:	4b0c      	ldr	r3, [pc, #48]	@ (80032d0 <__NVIC_SetPriorityGrouping+0x44>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032a8:	4013      	ands	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032be:	4a04      	ldr	r2, [pc, #16]	@ (80032d0 <__NVIC_SetPriorityGrouping+0x44>)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	60d3      	str	r3, [r2, #12]
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032d8:	4b04      	ldr	r3, [pc, #16]	@ (80032ec <__NVIC_GetPriorityGrouping+0x18>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f003 0307 	and.w	r3, r3, #7
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	db0b      	blt.n	800331a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	f003 021f 	and.w	r2, r3, #31
 8003308:	4907      	ldr	r1, [pc, #28]	@ (8003328 <__NVIC_EnableIRQ+0x38>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2001      	movs	r0, #1
 8003312:	fa00 f202 	lsl.w	r2, r0, r2
 8003316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000e100 	.word	0xe000e100

0800332c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	6039      	str	r1, [r7, #0]
 8003336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333c:	2b00      	cmp	r3, #0
 800333e:	db0a      	blt.n	8003356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	b2da      	uxtb	r2, r3
 8003344:	490c      	ldr	r1, [pc, #48]	@ (8003378 <__NVIC_SetPriority+0x4c>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	0112      	lsls	r2, r2, #4
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	440b      	add	r3, r1
 8003350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003354:	e00a      	b.n	800336c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	4908      	ldr	r1, [pc, #32]	@ (800337c <__NVIC_SetPriority+0x50>)
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	3b04      	subs	r3, #4
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	440b      	add	r3, r1
 800336a:	761a      	strb	r2, [r3, #24]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000e100 	.word	0xe000e100
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	@ 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f1c3 0307 	rsb	r3, r3, #7
 800339a:	2b04      	cmp	r3, #4
 800339c:	bf28      	it	cs
 800339e:	2304      	movcs	r3, #4
 80033a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d902      	bls.n	80033b0 <NVIC_EncodePriority+0x30>
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3b03      	subs	r3, #3
 80033ae:	e000      	b.n	80033b2 <NVIC_EncodePriority+0x32>
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43da      	mvns	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	401a      	ands	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	43d9      	mvns	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d8:	4313      	orrs	r3, r2
         );
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	@ 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033f8:	d301      	bcc.n	80033fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033fa:	2301      	movs	r3, #1
 80033fc:	e00f      	b.n	800341e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003428 <SysTick_Config+0x40>)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3b01      	subs	r3, #1
 8003404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003406:	210f      	movs	r1, #15
 8003408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800340c:	f7ff ff8e 	bl	800332c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003410:	4b05      	ldr	r3, [pc, #20]	@ (8003428 <SysTick_Config+0x40>)
 8003412:	2200      	movs	r2, #0
 8003414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003416:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <SysTick_Config+0x40>)
 8003418:	2207      	movs	r2, #7
 800341a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	e000e010 	.word	0xe000e010

0800342c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff29 	bl	800328c <__NVIC_SetPriorityGrouping>
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003442:	b580      	push	{r7, lr}
 8003444:	b086      	sub	sp, #24
 8003446:	af00      	add	r7, sp, #0
 8003448:	4603      	mov	r3, r0
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003454:	f7ff ff3e 	bl	80032d4 <__NVIC_GetPriorityGrouping>
 8003458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	6978      	ldr	r0, [r7, #20]
 8003460:	f7ff ff8e 	bl	8003380 <NVIC_EncodePriority>
 8003464:	4602      	mov	r2, r0
 8003466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ff5d 	bl	800332c <__NVIC_SetPriority>
}
 8003472:	bf00      	nop
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff31 	bl	80032f0 <__NVIC_EnableIRQ>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff ffa2 	bl	80033e8 <SysTick_Config>
 80034a4:	4603      	mov	r3, r0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80034be:	4b23      	ldr	r3, [pc, #140]	@ (800354c <HAL_FLASH_Program+0x9c>)
 80034c0:	7e1b      	ldrb	r3, [r3, #24]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_FLASH_Program+0x1a>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e03b      	b.n	8003542 <HAL_FLASH_Program+0x92>
 80034ca:	4b20      	ldr	r3, [pc, #128]	@ (800354c <HAL_FLASH_Program+0x9c>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80034d4:	f000 f870 	bl	80035b8 <FLASH_WaitForLastOperation>
 80034d8:	4603      	mov	r3, r0
 80034da:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d12b      	bne.n	800353a <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80034e8:	783b      	ldrb	r3, [r7, #0]
 80034ea:	4619      	mov	r1, r3
 80034ec:	68b8      	ldr	r0, [r7, #8]
 80034ee:	f000 f91b 	bl	8003728 <FLASH_Program_Byte>
 80034f2:	e016      	b.n	8003522 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d105      	bne.n	8003506 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80034fa:	883b      	ldrh	r3, [r7, #0]
 80034fc:	4619      	mov	r1, r3
 80034fe:	68b8      	ldr	r0, [r7, #8]
 8003500:	f000 f8ee 	bl	80036e0 <FLASH_Program_HalfWord>
 8003504:	e00d      	b.n	8003522 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d105      	bne.n	8003518 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4619      	mov	r1, r3
 8003510:	68b8      	ldr	r0, [r7, #8]
 8003512:	f000 f8c3 	bl	800369c <FLASH_Program_Word>
 8003516:	e004      	b.n	8003522 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800351c:	68b8      	ldr	r0, [r7, #8]
 800351e:	f000 f88b 	bl	8003638 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003522:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003526:	f000 f847 	bl	80035b8 <FLASH_WaitForLastOperation>
 800352a:	4603      	mov	r3, r0
 800352c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800352e:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <HAL_FLASH_Program+0xa0>)
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	4a07      	ldr	r2, [pc, #28]	@ (8003550 <HAL_FLASH_Program+0xa0>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800353a:	4b04      	ldr	r3, [pc, #16]	@ (800354c <HAL_FLASH_Program+0x9c>)
 800353c:	2200      	movs	r2, #0
 800353e:	761a      	strb	r2, [r3, #24]

  return status;
 8003540:	7dfb      	ldrb	r3, [r7, #23]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000018 	.word	0x20000018
 8003550:	40023c00 	.word	0x40023c00

08003554 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800355e:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <HAL_FLASH_Unlock+0x38>)
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	da0b      	bge.n	800357e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003566:	4b09      	ldr	r3, [pc, #36]	@ (800358c <HAL_FLASH_Unlock+0x38>)
 8003568:	4a09      	ldr	r2, [pc, #36]	@ (8003590 <HAL_FLASH_Unlock+0x3c>)
 800356a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800356c:	4b07      	ldr	r3, [pc, #28]	@ (800358c <HAL_FLASH_Unlock+0x38>)
 800356e:	4a09      	ldr	r2, [pc, #36]	@ (8003594 <HAL_FLASH_Unlock+0x40>)
 8003570:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003572:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_FLASH_Unlock+0x38>)
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	da01      	bge.n	800357e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800357e:	79fb      	ldrb	r3, [r7, #7]
}
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	40023c00 	.word	0x40023c00
 8003590:	45670123 	.word	0x45670123
 8003594:	cdef89ab 	.word	0xcdef89ab

08003598 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800359c:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <HAL_FLASH_Lock+0x1c>)
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	4a04      	ldr	r2, [pc, #16]	@ (80035b4 <HAL_FLASH_Lock+0x1c>)
 80035a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035a6:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40023c00 	.word	0x40023c00

080035b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003630 <FLASH_WaitForLastOperation+0x78>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80035ca:	f7ff fe2f 	bl	800322c <HAL_GetTick>
 80035ce:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80035d0:	e010      	b.n	80035f4 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035d8:	d00c      	beq.n	80035f4 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <FLASH_WaitForLastOperation+0x38>
 80035e0:	f7ff fe24 	bl	800322c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d201      	bcs.n	80035f4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e019      	b.n	8003628 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80035f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003634 <FLASH_WaitForLastOperation+0x7c>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e8      	bne.n	80035d2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <FLASH_WaitForLastOperation+0x7c>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800360c:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <FLASH_WaitForLastOperation+0x7c>)
 800360e:	2201      	movs	r2, #1
 8003610:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003612:	4b08      	ldr	r3, [pc, #32]	@ (8003634 <FLASH_WaitForLastOperation+0x7c>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800361e:	f000 f8a5 	bl	800376c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003626:	2300      	movs	r3, #0

}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000018 	.word	0x20000018
 8003634:	40023c00 	.word	0x40023c00

08003638 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003644:	4b14      	ldr	r3, [pc, #80]	@ (8003698 <FLASH_Program_DoubleWord+0x60>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	4a13      	ldr	r2, [pc, #76]	@ (8003698 <FLASH_Program_DoubleWord+0x60>)
 800364a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800364e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003650:	4b11      	ldr	r3, [pc, #68]	@ (8003698 <FLASH_Program_DoubleWord+0x60>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4a10      	ldr	r2, [pc, #64]	@ (8003698 <FLASH_Program_DoubleWord+0x60>)
 8003656:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800365a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800365c:	4b0e      	ldr	r3, [pc, #56]	@ (8003698 <FLASH_Program_DoubleWord+0x60>)
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	4a0d      	ldr	r2, [pc, #52]	@ (8003698 <FLASH_Program_DoubleWord+0x60>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800366e:	f3bf 8f6f 	isb	sy
}
 8003672:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8003674:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	000a      	movs	r2, r1
 8003682:	2300      	movs	r3, #0
 8003684:	68f9      	ldr	r1, [r7, #12]
 8003686:	3104      	adds	r1, #4
 8003688:	4613      	mov	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	40023c00 	.word	0x40023c00

0800369c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80036a6:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <FLASH_Program_Word+0x40>)
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	4a0c      	ldr	r2, [pc, #48]	@ (80036dc <FLASH_Program_Word+0x40>)
 80036ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80036b2:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <FLASH_Program_Word+0x40>)
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	4a09      	ldr	r2, [pc, #36]	@ (80036dc <FLASH_Program_Word+0x40>)
 80036b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80036be:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <FLASH_Program_Word+0x40>)
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	4a06      	ldr	r2, [pc, #24]	@ (80036dc <FLASH_Program_Word+0x40>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	601a      	str	r2, [r3, #0]
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40023c00 	.word	0x40023c00

080036e0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80036ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003724 <FLASH_Program_HalfWord+0x44>)
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	4a0c      	ldr	r2, [pc, #48]	@ (8003724 <FLASH_Program_HalfWord+0x44>)
 80036f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80036f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003724 <FLASH_Program_HalfWord+0x44>)
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	4a09      	ldr	r2, [pc, #36]	@ (8003724 <FLASH_Program_HalfWord+0x44>)
 80036fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003702:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003704:	4b07      	ldr	r3, [pc, #28]	@ (8003724 <FLASH_Program_HalfWord+0x44>)
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	4a06      	ldr	r2, [pc, #24]	@ (8003724 <FLASH_Program_HalfWord+0x44>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	801a      	strh	r2, [r3, #0]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40023c00 	.word	0x40023c00

08003728 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003734:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <FLASH_Program_Byte+0x40>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	4a0b      	ldr	r2, [pc, #44]	@ (8003768 <FLASH_Program_Byte+0x40>)
 800373a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003740:	4b09      	ldr	r3, [pc, #36]	@ (8003768 <FLASH_Program_Byte+0x40>)
 8003742:	4a09      	ldr	r2, [pc, #36]	@ (8003768 <FLASH_Program_Byte+0x40>)
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003748:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <FLASH_Program_Byte+0x40>)
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	4a06      	ldr	r2, [pc, #24]	@ (8003768 <FLASH_Program_Byte+0x40>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	701a      	strb	r2, [r3, #0]
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40023c00 	.word	0x40023c00

0800376c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003770:	4b2f      	ldr	r3, [pc, #188]	@ (8003830 <FLASH_SetErrorCode+0xc4>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800377c:	4b2d      	ldr	r3, [pc, #180]	@ (8003834 <FLASH_SetErrorCode+0xc8>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f043 0310 	orr.w	r3, r3, #16
 8003784:	4a2b      	ldr	r2, [pc, #172]	@ (8003834 <FLASH_SetErrorCode+0xc8>)
 8003786:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003788:	4b29      	ldr	r3, [pc, #164]	@ (8003830 <FLASH_SetErrorCode+0xc4>)
 800378a:	2210      	movs	r2, #16
 800378c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800378e:	4b28      	ldr	r3, [pc, #160]	@ (8003830 <FLASH_SetErrorCode+0xc4>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800379a:	4b26      	ldr	r3, [pc, #152]	@ (8003834 <FLASH_SetErrorCode+0xc8>)
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f043 0308 	orr.w	r3, r3, #8
 80037a2:	4a24      	ldr	r2, [pc, #144]	@ (8003834 <FLASH_SetErrorCode+0xc8>)
 80037a4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80037a6:	4b22      	ldr	r3, [pc, #136]	@ (8003830 <FLASH_SetErrorCode+0xc4>)
 80037a8:	2220      	movs	r2, #32
 80037aa:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80037ac:	4b20      	ldr	r3, [pc, #128]	@ (8003830 <FLASH_SetErrorCode+0xc4>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80037b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <FLASH_SetErrorCode+0xc8>)
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	f043 0304 	orr.w	r3, r3, #4
 80037c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003834 <FLASH_SetErrorCode+0xc8>)
 80037c2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80037c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003830 <FLASH_SetErrorCode+0xc4>)
 80037c6:	2240      	movs	r2, #64	@ 0x40
 80037c8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80037ca:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <FLASH_SetErrorCode+0xc4>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80037d6:	4b17      	ldr	r3, [pc, #92]	@ (8003834 <FLASH_SetErrorCode+0xc8>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f043 0302 	orr.w	r3, r3, #2
 80037de:	4a15      	ldr	r2, [pc, #84]	@ (8003834 <FLASH_SetErrorCode+0xc8>)
 80037e0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80037e2:	4b13      	ldr	r3, [pc, #76]	@ (8003830 <FLASH_SetErrorCode+0xc4>)
 80037e4:	2280      	movs	r2, #128	@ 0x80
 80037e6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80037e8:	4b11      	ldr	r3, [pc, #68]	@ (8003830 <FLASH_SetErrorCode+0xc4>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80037f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003834 <FLASH_SetErrorCode+0xc8>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003834 <FLASH_SetErrorCode+0xc8>)
 80037fe:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003800:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <FLASH_SetErrorCode+0xc4>)
 8003802:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003806:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003808:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <FLASH_SetErrorCode+0xc4>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003814:	4b07      	ldr	r3, [pc, #28]	@ (8003834 <FLASH_SetErrorCode+0xc8>)
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f043 0320 	orr.w	r3, r3, #32
 800381c:	4a05      	ldr	r2, [pc, #20]	@ (8003834 <FLASH_SetErrorCode+0xc8>)
 800381e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003820:	4b03      	ldr	r3, [pc, #12]	@ (8003830 <FLASH_SetErrorCode+0xc4>)
 8003822:	2202      	movs	r2, #2
 8003824:	60da      	str	r2, [r3, #12]
  }
}
 8003826:	bf00      	nop
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40023c00 	.word	0x40023c00
 8003834:	20000018 	.word	0x20000018

08003838 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003846:	4b31      	ldr	r3, [pc, #196]	@ (800390c <HAL_FLASHEx_Erase+0xd4>)
 8003848:	7e1b      	ldrb	r3, [r3, #24]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_FLASHEx_Erase+0x1a>
 800384e:	2302      	movs	r3, #2
 8003850:	e058      	b.n	8003904 <HAL_FLASHEx_Erase+0xcc>
 8003852:	4b2e      	ldr	r3, [pc, #184]	@ (800390c <HAL_FLASHEx_Erase+0xd4>)
 8003854:	2201      	movs	r2, #1
 8003856:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003858:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800385c:	f7ff feac 	bl	80035b8 <FLASH_WaitForLastOperation>
 8003860:	4603      	mov	r3, r0
 8003862:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d148      	bne.n	80038fc <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003870:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d115      	bne.n	80038a6 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	b2da      	uxtb	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 f844 	bl	8003914 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800388c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003890:	f7ff fe92 	bl	80035b8 <FLASH_WaitForLastOperation>
 8003894:	4603      	mov	r3, r0
 8003896:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003898:	4b1d      	ldr	r3, [pc, #116]	@ (8003910 <HAL_FLASHEx_Erase+0xd8>)
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	4a1c      	ldr	r2, [pc, #112]	@ (8003910 <HAL_FLASHEx_Erase+0xd8>)
 800389e:	f023 0304 	bic.w	r3, r3, #4
 80038a2:	6113      	str	r3, [r2, #16]
 80038a4:	e028      	b.n	80038f8 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	e01c      	b.n	80038e8 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	4619      	mov	r1, r3
 80038b6:	68b8      	ldr	r0, [r7, #8]
 80038b8:	f000 f850 	bl	800395c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80038bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80038c0:	f7ff fe7a 	bl	80035b8 <FLASH_WaitForLastOperation>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80038c8:	4b11      	ldr	r3, [pc, #68]	@ (8003910 <HAL_FLASHEx_Erase+0xd8>)
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	4a10      	ldr	r2, [pc, #64]	@ (8003910 <HAL_FLASHEx_Erase+0xd8>)
 80038ce:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80038d2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	601a      	str	r2, [r3, #0]
          break;
 80038e0:	e00a      	b.n	80038f8 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3301      	adds	r3, #1
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4413      	add	r3, r2
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d3da      	bcc.n	80038ae <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80038f8:	f000 f878 	bl	80039ec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <HAL_FLASHEx_Erase+0xd4>)
 80038fe:	2200      	movs	r2, #0
 8003900:	761a      	strb	r2, [r3, #24]

  return status;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000018 	.word	0x20000018
 8003910:	40023c00 	.word	0x40023c00

08003914 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	6039      	str	r1, [r7, #0]
 800391e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003920:	4b0d      	ldr	r3, [pc, #52]	@ (8003958 <FLASH_MassErase+0x44>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	4a0c      	ldr	r2, [pc, #48]	@ (8003958 <FLASH_MassErase+0x44>)
 8003926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800392a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800392c:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <FLASH_MassErase+0x44>)
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	4a09      	ldr	r2, [pc, #36]	@ (8003958 <FLASH_MassErase+0x44>)
 8003932:	f043 0304 	orr.w	r3, r3, #4
 8003936:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003938:	4b07      	ldr	r3, [pc, #28]	@ (8003958 <FLASH_MassErase+0x44>)
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	4313      	orrs	r3, r2
 8003942:	4a05      	ldr	r2, [pc, #20]	@ (8003958 <FLASH_MassErase+0x44>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003948:	6113      	str	r3, [r2, #16]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40023c00 	.word	0x40023c00

0800395c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e010      	b.n	800399a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d103      	bne.n	8003986 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800397e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e009      	b.n	800399a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d103      	bne.n	8003994 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800398c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e002      	b.n	800399a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003994:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003998:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800399a:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <FLASH_Erase_Sector+0x8c>)
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	4a12      	ldr	r2, [pc, #72]	@ (80039e8 <FLASH_Erase_Sector+0x8c>)
 80039a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80039a6:	4b10      	ldr	r3, [pc, #64]	@ (80039e8 <FLASH_Erase_Sector+0x8c>)
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	490f      	ldr	r1, [pc, #60]	@ (80039e8 <FLASH_Erase_Sector+0x8c>)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80039b2:	4b0d      	ldr	r3, [pc, #52]	@ (80039e8 <FLASH_Erase_Sector+0x8c>)
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	4a0c      	ldr	r2, [pc, #48]	@ (80039e8 <FLASH_Erase_Sector+0x8c>)
 80039b8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80039bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80039be:	4b0a      	ldr	r3, [pc, #40]	@ (80039e8 <FLASH_Erase_Sector+0x8c>)
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4313      	orrs	r3, r2
 80039c8:	4a07      	ldr	r2, [pc, #28]	@ (80039e8 <FLASH_Erase_Sector+0x8c>)
 80039ca:	f043 0302 	orr.w	r3, r3, #2
 80039ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80039d0:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <FLASH_Erase_Sector+0x8c>)
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	4a04      	ldr	r2, [pc, #16]	@ (80039e8 <FLASH_Erase_Sector+0x8c>)
 80039d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039da:	6113      	str	r3, [r2, #16]
}
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40023c00 	.word	0x40023c00

080039ec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80039f0:	4b20      	ldr	r3, [pc, #128]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d017      	beq.n	8003a2c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80039fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1c      	ldr	r2, [pc, #112]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a02:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a06:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003a08:	4b1a      	ldr	r3, [pc, #104]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b17      	ldr	r3, [pc, #92]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a16      	ldr	r2, [pc, #88]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a1e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a20:	4b14      	ldr	r3, [pc, #80]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a13      	ldr	r2, [pc, #76]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a2a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003a2c:	4b11      	ldr	r3, [pc, #68]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d017      	beq.n	8003a68 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003a38:	4b0e      	ldr	r3, [pc, #56]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a42:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003a44:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0a      	ldr	r2, [pc, #40]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4b08      	ldr	r3, [pc, #32]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a07      	ldr	r2, [pc, #28]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a5a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a5c:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a04      	ldr	r2, [pc, #16]	@ (8003a74 <FLASH_FlushCaches+0x88>)
 8003a62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a66:	6013      	str	r3, [r2, #0]
  }
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40023c00 	.word	0x40023c00

08003a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b089      	sub	sp, #36	@ 0x24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
 8003a92:	e159      	b.n	8003d48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a94:	2201      	movs	r2, #1
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	f040 8148 	bne.w	8003d42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d005      	beq.n	8003aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d130      	bne.n	8003b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b00:	2201      	movs	r2, #1
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 0201 	and.w	r2, r3, #1
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d017      	beq.n	8003b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	2203      	movs	r2, #3
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d123      	bne.n	8003bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	08da      	lsrs	r2, r3, #3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3208      	adds	r2, #8
 8003b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	220f      	movs	r2, #15
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	08da      	lsrs	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3208      	adds	r2, #8
 8003bb6:	69b9      	ldr	r1, [r7, #24]
 8003bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 0203 	and.w	r2, r3, #3
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 80a2 	beq.w	8003d42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	4b57      	ldr	r3, [pc, #348]	@ (8003d60 <HAL_GPIO_Init+0x2e8>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	4a56      	ldr	r2, [pc, #344]	@ (8003d60 <HAL_GPIO_Init+0x2e8>)
 8003c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c0e:	4b54      	ldr	r3, [pc, #336]	@ (8003d60 <HAL_GPIO_Init+0x2e8>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c1a:	4a52      	ldr	r2, [pc, #328]	@ (8003d64 <HAL_GPIO_Init+0x2ec>)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	089b      	lsrs	r3, r3, #2
 8003c20:	3302      	adds	r3, #2
 8003c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	220f      	movs	r2, #15
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a49      	ldr	r2, [pc, #292]	@ (8003d68 <HAL_GPIO_Init+0x2f0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d019      	beq.n	8003c7a <HAL_GPIO_Init+0x202>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a48      	ldr	r2, [pc, #288]	@ (8003d6c <HAL_GPIO_Init+0x2f4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_GPIO_Init+0x1fe>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a47      	ldr	r2, [pc, #284]	@ (8003d70 <HAL_GPIO_Init+0x2f8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00d      	beq.n	8003c72 <HAL_GPIO_Init+0x1fa>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a46      	ldr	r2, [pc, #280]	@ (8003d74 <HAL_GPIO_Init+0x2fc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <HAL_GPIO_Init+0x1f6>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a45      	ldr	r2, [pc, #276]	@ (8003d78 <HAL_GPIO_Init+0x300>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d101      	bne.n	8003c6a <HAL_GPIO_Init+0x1f2>
 8003c66:	2304      	movs	r3, #4
 8003c68:	e008      	b.n	8003c7c <HAL_GPIO_Init+0x204>
 8003c6a:	2307      	movs	r3, #7
 8003c6c:	e006      	b.n	8003c7c <HAL_GPIO_Init+0x204>
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e004      	b.n	8003c7c <HAL_GPIO_Init+0x204>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e002      	b.n	8003c7c <HAL_GPIO_Init+0x204>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_GPIO_Init+0x204>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	f002 0203 	and.w	r2, r2, #3
 8003c82:	0092      	lsls	r2, r2, #2
 8003c84:	4093      	lsls	r3, r2
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c8c:	4935      	ldr	r1, [pc, #212]	@ (8003d64 <HAL_GPIO_Init+0x2ec>)
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	3302      	adds	r3, #2
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c9a:	4b38      	ldr	r3, [pc, #224]	@ (8003d7c <HAL_GPIO_Init+0x304>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8003d7c <HAL_GPIO_Init+0x304>)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8003d7c <HAL_GPIO_Init+0x304>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ce8:	4a24      	ldr	r2, [pc, #144]	@ (8003d7c <HAL_GPIO_Init+0x304>)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cee:	4b23      	ldr	r3, [pc, #140]	@ (8003d7c <HAL_GPIO_Init+0x304>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d12:	4a1a      	ldr	r2, [pc, #104]	@ (8003d7c <HAL_GPIO_Init+0x304>)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d18:	4b18      	ldr	r3, [pc, #96]	@ (8003d7c <HAL_GPIO_Init+0x304>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003d7c <HAL_GPIO_Init+0x304>)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3301      	adds	r3, #1
 8003d46:	61fb      	str	r3, [r7, #28]
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b0f      	cmp	r3, #15
 8003d4c:	f67f aea2 	bls.w	8003a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	3724      	adds	r7, #36	@ 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40013800 	.word	0x40013800
 8003d68:	40020000 	.word	0x40020000
 8003d6c:	40020400 	.word	0x40020400
 8003d70:	40020800 	.word	0x40020800
 8003d74:	40020c00 	.word	0x40020c00
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40013c00 	.word	0x40013c00

08003d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	887b      	ldrh	r3, [r7, #2]
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
 8003d9c:	e001      	b.n	8003da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	807b      	strh	r3, [r7, #2]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc0:	787b      	ldrb	r3, [r7, #1]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dcc:	e003      	b.n	8003dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	041a      	lsls	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	619a      	str	r2, [r3, #24]
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e12b      	b.n	800404e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fe fea6 	bl	8002b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2224      	movs	r2, #36	@ 0x24
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0201 	bic.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e48:	f000 fd40 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8003e4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4a81      	ldr	r2, [pc, #516]	@ (8004058 <HAL_I2C_Init+0x274>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d807      	bhi.n	8003e68 <HAL_I2C_Init+0x84>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4a80      	ldr	r2, [pc, #512]	@ (800405c <HAL_I2C_Init+0x278>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	bf94      	ite	ls
 8003e60:	2301      	movls	r3, #1
 8003e62:	2300      	movhi	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e006      	b.n	8003e76 <HAL_I2C_Init+0x92>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a7d      	ldr	r2, [pc, #500]	@ (8004060 <HAL_I2C_Init+0x27c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	bf94      	ite	ls
 8003e70:	2301      	movls	r3, #1
 8003e72:	2300      	movhi	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e0e7      	b.n	800404e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4a78      	ldr	r2, [pc, #480]	@ (8004064 <HAL_I2C_Init+0x280>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	0c9b      	lsrs	r3, r3, #18
 8003e88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4a6a      	ldr	r2, [pc, #424]	@ (8004058 <HAL_I2C_Init+0x274>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d802      	bhi.n	8003eb8 <HAL_I2C_Init+0xd4>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	e009      	b.n	8003ecc <HAL_I2C_Init+0xe8>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	4a69      	ldr	r2, [pc, #420]	@ (8004068 <HAL_I2C_Init+0x284>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	099b      	lsrs	r3, r3, #6
 8003eca:	3301      	adds	r3, #1
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ede:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	495c      	ldr	r1, [pc, #368]	@ (8004058 <HAL_I2C_Init+0x274>)
 8003ee8:	428b      	cmp	r3, r1
 8003eea:	d819      	bhi.n	8003f20 <HAL_I2C_Init+0x13c>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1e59      	subs	r1, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003efa:	1c59      	adds	r1, r3, #1
 8003efc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f00:	400b      	ands	r3, r1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_I2C_Init+0x138>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1e59      	subs	r1, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f14:	3301      	adds	r3, #1
 8003f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1a:	e051      	b.n	8003fc0 <HAL_I2C_Init+0x1dc>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	e04f      	b.n	8003fc0 <HAL_I2C_Init+0x1dc>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d111      	bne.n	8003f4c <HAL_I2C_Init+0x168>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1e58      	subs	r0, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6859      	ldr	r1, [r3, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	440b      	add	r3, r1
 8003f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf0c      	ite	eq
 8003f44:	2301      	moveq	r3, #1
 8003f46:	2300      	movne	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e012      	b.n	8003f72 <HAL_I2C_Init+0x18e>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1e58      	subs	r0, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	0099      	lsls	r1, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f62:	3301      	adds	r3, #1
 8003f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_I2C_Init+0x196>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e022      	b.n	8003fc0 <HAL_I2C_Init+0x1dc>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10e      	bne.n	8003fa0 <HAL_I2C_Init+0x1bc>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1e58      	subs	r0, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6859      	ldr	r1, [r3, #4]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	440b      	add	r3, r1
 8003f90:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f94:	3301      	adds	r3, #1
 8003f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f9e:	e00f      	b.n	8003fc0 <HAL_I2C_Init+0x1dc>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1e58      	subs	r0, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6859      	ldr	r1, [r3, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	0099      	lsls	r1, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	6809      	ldr	r1, [r1, #0]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003fee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6911      	ldr	r1, [r2, #16]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68d2      	ldr	r2, [r2, #12]
 8003ffa:	4311      	orrs	r1, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	430b      	orrs	r3, r1
 8004002:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	000186a0 	.word	0x000186a0
 800405c:	001e847f 	.word	0x001e847f
 8004060:	003d08ff 	.word	0x003d08ff
 8004064:	431bde83 	.word	0x431bde83
 8004068:	10624dd3 	.word	0x10624dd3

0800406c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e267      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d075      	beq.n	8004176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800408a:	4b88      	ldr	r3, [pc, #544]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b04      	cmp	r3, #4
 8004094:	d00c      	beq.n	80040b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004096:	4b85      	ldr	r3, [pc, #532]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d112      	bne.n	80040c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a2:	4b82      	ldr	r3, [pc, #520]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ae:	d10b      	bne.n	80040c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	4b7e      	ldr	r3, [pc, #504]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d05b      	beq.n	8004174 <HAL_RCC_OscConfig+0x108>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d157      	bne.n	8004174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e242      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d0:	d106      	bne.n	80040e0 <HAL_RCC_OscConfig+0x74>
 80040d2:	4b76      	ldr	r3, [pc, #472]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a75      	ldr	r2, [pc, #468]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e01d      	b.n	800411c <HAL_RCC_OscConfig+0xb0>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040e8:	d10c      	bne.n	8004104 <HAL_RCC_OscConfig+0x98>
 80040ea:	4b70      	ldr	r3, [pc, #448]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a6f      	ldr	r2, [pc, #444]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 80040f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b6d      	ldr	r3, [pc, #436]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a6c      	ldr	r2, [pc, #432]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 80040fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e00b      	b.n	800411c <HAL_RCC_OscConfig+0xb0>
 8004104:	4b69      	ldr	r3, [pc, #420]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a68      	ldr	r2, [pc, #416]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 800410a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	4b66      	ldr	r3, [pc, #408]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a65      	ldr	r2, [pc, #404]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 8004116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800411a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d013      	beq.n	800414c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7ff f882 	bl	800322c <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800412c:	f7ff f87e 	bl	800322c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	@ 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e207      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	4b5b      	ldr	r3, [pc, #364]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0xc0>
 800414a:	e014      	b.n	8004176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414c:	f7ff f86e 	bl	800322c <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004154:	f7ff f86a 	bl	800322c <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b64      	cmp	r3, #100	@ 0x64
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e1f3      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004166:	4b51      	ldr	r3, [pc, #324]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0xe8>
 8004172:	e000      	b.n	8004176 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d063      	beq.n	800424a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004182:	4b4a      	ldr	r3, [pc, #296]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418e:	4b47      	ldr	r3, [pc, #284]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004196:	2b08      	cmp	r3, #8
 8004198:	d11c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419a:	4b44      	ldr	r3, [pc, #272]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d116      	bne.n	80041d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a6:	4b41      	ldr	r3, [pc, #260]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <HAL_RCC_OscConfig+0x152>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d001      	beq.n	80041be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e1c7      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041be:	4b3b      	ldr	r3, [pc, #236]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4937      	ldr	r1, [pc, #220]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d2:	e03a      	b.n	800424a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d020      	beq.n	800421e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041dc:	4b34      	ldr	r3, [pc, #208]	@ (80042b0 <HAL_RCC_OscConfig+0x244>)
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e2:	f7ff f823 	bl	800322c <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ea:	f7ff f81f 	bl	800322c <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e1a8      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fc:	4b2b      	ldr	r3, [pc, #172]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004208:	4b28      	ldr	r3, [pc, #160]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4925      	ldr	r1, [pc, #148]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]
 800421c:	e015      	b.n	800424a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421e:	4b24      	ldr	r3, [pc, #144]	@ (80042b0 <HAL_RCC_OscConfig+0x244>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7ff f802 	bl	800322c <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800422c:	f7fe fffe 	bl	800322c <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e187      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	4b1b      	ldr	r3, [pc, #108]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d036      	beq.n	80042c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d016      	beq.n	800428c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800425e:	4b15      	ldr	r3, [pc, #84]	@ (80042b4 <HAL_RCC_OscConfig+0x248>)
 8004260:	2201      	movs	r2, #1
 8004262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7fe ffe2 	bl	800322c <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800426c:	f7fe ffde 	bl	800322c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e167      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <HAL_RCC_OscConfig+0x240>)
 8004280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0x200>
 800428a:	e01b      	b.n	80042c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800428c:	4b09      	ldr	r3, [pc, #36]	@ (80042b4 <HAL_RCC_OscConfig+0x248>)
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004292:	f7fe ffcb 	bl	800322c <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004298:	e00e      	b.n	80042b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800429a:	f7fe ffc7 	bl	800322c <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d907      	bls.n	80042b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e150      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
 80042ac:	40023800 	.word	0x40023800
 80042b0:	42470000 	.word	0x42470000
 80042b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b8:	4b88      	ldr	r3, [pc, #544]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 80042ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1ea      	bne.n	800429a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8097 	beq.w	8004400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d6:	4b81      	ldr	r3, [pc, #516]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	4b7d      	ldr	r3, [pc, #500]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	4a7c      	ldr	r2, [pc, #496]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 80042ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042f2:	4b7a      	ldr	r3, [pc, #488]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	4b77      	ldr	r3, [pc, #476]	@ (80044e0 <HAL_RCC_OscConfig+0x474>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d118      	bne.n	8004340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430e:	4b74      	ldr	r3, [pc, #464]	@ (80044e0 <HAL_RCC_OscConfig+0x474>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a73      	ldr	r2, [pc, #460]	@ (80044e0 <HAL_RCC_OscConfig+0x474>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431a:	f7fe ff87 	bl	800322c <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004322:	f7fe ff83 	bl	800322c <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e10c      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	4b6a      	ldr	r3, [pc, #424]	@ (80044e0 <HAL_RCC_OscConfig+0x474>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d106      	bne.n	8004356 <HAL_RCC_OscConfig+0x2ea>
 8004348:	4b64      	ldr	r3, [pc, #400]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434c:	4a63      	ldr	r2, [pc, #396]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	6713      	str	r3, [r2, #112]	@ 0x70
 8004354:	e01c      	b.n	8004390 <HAL_RCC_OscConfig+0x324>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b05      	cmp	r3, #5
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x30c>
 800435e:	4b5f      	ldr	r3, [pc, #380]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004362:	4a5e      	ldr	r2, [pc, #376]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	6713      	str	r3, [r2, #112]	@ 0x70
 800436a:	4b5c      	ldr	r3, [pc, #368]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436e:	4a5b      	ldr	r2, [pc, #364]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6713      	str	r3, [r2, #112]	@ 0x70
 8004376:	e00b      	b.n	8004390 <HAL_RCC_OscConfig+0x324>
 8004378:	4b58      	ldr	r3, [pc, #352]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437c:	4a57      	ldr	r2, [pc, #348]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	6713      	str	r3, [r2, #112]	@ 0x70
 8004384:	4b55      	ldr	r3, [pc, #340]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004388:	4a54      	ldr	r2, [pc, #336]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 800438a:	f023 0304 	bic.w	r3, r3, #4
 800438e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d015      	beq.n	80043c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fe ff48 	bl	800322c <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a0:	f7fe ff44 	bl	800322c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e0cb      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b6:	4b49      	ldr	r3, [pc, #292]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0ee      	beq.n	80043a0 <HAL_RCC_OscConfig+0x334>
 80043c2:	e014      	b.n	80043ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c4:	f7fe ff32 	bl	800322c <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043cc:	f7fe ff2e 	bl	800322c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e0b5      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e2:	4b3e      	ldr	r3, [pc, #248]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1ee      	bne.n	80043cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d105      	bne.n	8004400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f4:	4b39      	ldr	r3, [pc, #228]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	4a38      	ldr	r2, [pc, #224]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 80043fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80a1 	beq.w	800454c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800440a:	4b34      	ldr	r3, [pc, #208]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b08      	cmp	r3, #8
 8004414:	d05c      	beq.n	80044d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d141      	bne.n	80044a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441e:	4b31      	ldr	r3, [pc, #196]	@ (80044e4 <HAL_RCC_OscConfig+0x478>)
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fe ff02 	bl	800322c <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442c:	f7fe fefe 	bl	800322c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e087      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	4b27      	ldr	r3, [pc, #156]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69da      	ldr	r2, [r3, #28]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	019b      	lsls	r3, r3, #6
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	3b01      	subs	r3, #1
 8004464:	041b      	lsls	r3, r3, #16
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	061b      	lsls	r3, r3, #24
 800446e:	491b      	ldr	r1, [pc, #108]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 8004470:	4313      	orrs	r3, r2
 8004472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004474:	4b1b      	ldr	r3, [pc, #108]	@ (80044e4 <HAL_RCC_OscConfig+0x478>)
 8004476:	2201      	movs	r2, #1
 8004478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447a:	f7fe fed7 	bl	800322c <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004482:	f7fe fed3 	bl	800322c <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e05c      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004494:	4b11      	ldr	r3, [pc, #68]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x416>
 80044a0:	e054      	b.n	800454c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a2:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <HAL_RCC_OscConfig+0x478>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fe fec0 	bl	800322c <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fe febc 	bl	800322c <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e045      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c2:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <HAL_RCC_OscConfig+0x470>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x444>
 80044ce:	e03d      	b.n	800454c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d107      	bne.n	80044e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e038      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
 80044dc:	40023800 	.word	0x40023800
 80044e0:	40007000 	.word	0x40007000
 80044e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004558 <HAL_RCC_OscConfig+0x4ec>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d028      	beq.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d121      	bne.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d11a      	bne.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004518:	4013      	ands	r3, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800451e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004520:	4293      	cmp	r3, r2
 8004522:	d111      	bne.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	3b01      	subs	r3, #1
 8004532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d107      	bne.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800

0800455c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0cc      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b68      	ldr	r3, [pc, #416]	@ (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d90c      	bls.n	8004598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b65      	ldr	r3, [pc, #404]	@ (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b63      	ldr	r3, [pc, #396]	@ (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0b8      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b0:	4b59      	ldr	r3, [pc, #356]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a58      	ldr	r2, [pc, #352]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c8:	4b53      	ldr	r3, [pc, #332]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4a52      	ldr	r2, [pc, #328]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d4:	4b50      	ldr	r3, [pc, #320]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	494d      	ldr	r1, [pc, #308]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d044      	beq.n	800467c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b47      	ldr	r3, [pc, #284]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d119      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e07f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d003      	beq.n	800461a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004616:	2b03      	cmp	r3, #3
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461a:	4b3f      	ldr	r3, [pc, #252]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e06f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462a:	4b3b      	ldr	r3, [pc, #236]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e067      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463a:	4b37      	ldr	r3, [pc, #220]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4934      	ldr	r1, [pc, #208]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800464c:	f7fe fdee 	bl	800322c <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	e00a      	b.n	800466a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004654:	f7fe fdea 	bl	800322c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e04f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	4b2b      	ldr	r3, [pc, #172]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 020c 	and.w	r2, r3, #12
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	429a      	cmp	r2, r3
 800467a:	d1eb      	bne.n	8004654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800467c:	4b25      	ldr	r3, [pc, #148]	@ (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d20c      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b22      	ldr	r3, [pc, #136]	@ (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004692:	4b20      	ldr	r3, [pc, #128]	@ (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e032      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b0:	4b19      	ldr	r3, [pc, #100]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4916      	ldr	r1, [pc, #88]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ce:	4b12      	ldr	r3, [pc, #72]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	490e      	ldr	r1, [pc, #56]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046e2:	f000 f821 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 80046e6:	4602      	mov	r2, r0
 80046e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	490a      	ldr	r1, [pc, #40]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 80046f4:	5ccb      	ldrb	r3, [r1, r3]
 80046f6:	fa22 f303 	lsr.w	r3, r2, r3
 80046fa:	4a09      	ldr	r2, [pc, #36]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046fe:	4b09      	ldr	r3, [pc, #36]	@ (8004724 <HAL_RCC_ClockConfig+0x1c8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe fd4e 	bl	80031a4 <HAL_InitTick>

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40023c00 	.word	0x40023c00
 8004718:	40023800 	.word	0x40023800
 800471c:	08009bd0 	.word	0x08009bd0
 8004720:	2000000c 	.word	0x2000000c
 8004724:	20000010 	.word	0x20000010

08004728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800472c:	b090      	sub	sp, #64	@ 0x40
 800472e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004740:	4b59      	ldr	r3, [pc, #356]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 030c 	and.w	r3, r3, #12
 8004748:	2b08      	cmp	r3, #8
 800474a:	d00d      	beq.n	8004768 <HAL_RCC_GetSysClockFreq+0x40>
 800474c:	2b08      	cmp	r3, #8
 800474e:	f200 80a1 	bhi.w	8004894 <HAL_RCC_GetSysClockFreq+0x16c>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0x34>
 8004756:	2b04      	cmp	r3, #4
 8004758:	d003      	beq.n	8004762 <HAL_RCC_GetSysClockFreq+0x3a>
 800475a:	e09b      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800475c:	4b53      	ldr	r3, [pc, #332]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x184>)
 800475e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004760:	e09b      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004762:	4b53      	ldr	r3, [pc, #332]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004764:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004766:	e098      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004768:	4b4f      	ldr	r3, [pc, #316]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004770:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004772:	4b4d      	ldr	r3, [pc, #308]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d028      	beq.n	80047d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477e:	4b4a      	ldr	r3, [pc, #296]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	099b      	lsrs	r3, r3, #6
 8004784:	2200      	movs	r2, #0
 8004786:	623b      	str	r3, [r7, #32]
 8004788:	627a      	str	r2, [r7, #36]	@ 0x24
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004790:	2100      	movs	r1, #0
 8004792:	4b47      	ldr	r3, [pc, #284]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004794:	fb03 f201 	mul.w	r2, r3, r1
 8004798:	2300      	movs	r3, #0
 800479a:	fb00 f303 	mul.w	r3, r0, r3
 800479e:	4413      	add	r3, r2
 80047a0:	4a43      	ldr	r2, [pc, #268]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80047a2:	fba0 1202 	umull	r1, r2, r0, r2
 80047a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047a8:	460a      	mov	r2, r1
 80047aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80047ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047ae:	4413      	add	r3, r2
 80047b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b4:	2200      	movs	r2, #0
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	61fa      	str	r2, [r7, #28]
 80047ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80047c2:	f7fc fa49 	bl	8000c58 <__aeabi_uldivmod>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4613      	mov	r3, r2
 80047cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047ce:	e053      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d0:	4b35      	ldr	r3, [pc, #212]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	099b      	lsrs	r3, r3, #6
 80047d6:	2200      	movs	r2, #0
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	617a      	str	r2, [r7, #20]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047e2:	f04f 0b00 	mov.w	fp, #0
 80047e6:	4652      	mov	r2, sl
 80047e8:	465b      	mov	r3, fp
 80047ea:	f04f 0000 	mov.w	r0, #0
 80047ee:	f04f 0100 	mov.w	r1, #0
 80047f2:	0159      	lsls	r1, r3, #5
 80047f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047f8:	0150      	lsls	r0, r2, #5
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	ebb2 080a 	subs.w	r8, r2, sl
 8004802:	eb63 090b 	sbc.w	r9, r3, fp
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004812:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004816:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800481a:	ebb2 0408 	subs.w	r4, r2, r8
 800481e:	eb63 0509 	sbc.w	r5, r3, r9
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	00eb      	lsls	r3, r5, #3
 800482c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004830:	00e2      	lsls	r2, r4, #3
 8004832:	4614      	mov	r4, r2
 8004834:	461d      	mov	r5, r3
 8004836:	eb14 030a 	adds.w	r3, r4, sl
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	eb45 030b 	adc.w	r3, r5, fp
 8004840:	607b      	str	r3, [r7, #4]
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800484e:	4629      	mov	r1, r5
 8004850:	028b      	lsls	r3, r1, #10
 8004852:	4621      	mov	r1, r4
 8004854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004858:	4621      	mov	r1, r4
 800485a:	028a      	lsls	r2, r1, #10
 800485c:	4610      	mov	r0, r2
 800485e:	4619      	mov	r1, r3
 8004860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004862:	2200      	movs	r2, #0
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	60fa      	str	r2, [r7, #12]
 8004868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800486c:	f7fc f9f4 	bl	8000c58 <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4613      	mov	r3, r2
 8004876:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004878:	4b0b      	ldr	r3, [pc, #44]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	3301      	adds	r3, #1
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004888:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800488a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004892:	e002      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004894:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x184>)
 8004896:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800489a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800489c:	4618      	mov	r0, r3
 800489e:	3740      	adds	r7, #64	@ 0x40
 80048a0:	46bd      	mov	sp, r7
 80048a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800
 80048ac:	00f42400 	.word	0x00f42400
 80048b0:	017d7840 	.word	0x017d7840

080048b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b8:	4b03      	ldr	r3, [pc, #12]	@ (80048c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	2000000c 	.word	0x2000000c

080048cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048d0:	f7ff fff0 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0a9b      	lsrs	r3, r3, #10
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4903      	ldr	r1, [pc, #12]	@ (80048f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e2:	5ccb      	ldrb	r3, [r1, r3]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	08009be0 	.word	0x08009be0

080048f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e07b      	b.n	80049fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004916:	d009      	beq.n	800492c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	61da      	str	r2, [r3, #28]
 800491e:	e005      	b.n	800492c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fe f950 	bl	8002bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b0:	ea42 0103 	orr.w	r1, r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	f003 0104 	and.w	r1, r3, #4
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	f003 0210 	and.w	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b088      	sub	sp, #32
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a16:	f7fe fc09 	bl	800322c <HAL_GetTick>
 8004a1a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d001      	beq.n	8004a30 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e12a      	b.n	8004c86 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_Transmit+0x36>
 8004a36:	88fb      	ldrh	r3, [r7, #6]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e122      	b.n	8004c86 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_SPI_Transmit+0x48>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e11b      	b.n	8004c86 <HAL_SPI_Transmit+0x280>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2203      	movs	r2, #3
 8004a5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	88fa      	ldrh	r2, [r7, #6]
 8004a6e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a9c:	d10f      	bne.n	8004abe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004abc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac8:	2b40      	cmp	r3, #64	@ 0x40
 8004aca:	d007      	beq.n	8004adc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ada:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ae4:	d152      	bne.n	8004b8c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_SPI_Transmit+0xee>
 8004aee:	8b7b      	ldrh	r3, [r7, #26]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d145      	bne.n	8004b80 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b04:	1c9a      	adds	r2, r3, #2
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b18:	e032      	b.n	8004b80 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d112      	bne.n	8004b4e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2c:	881a      	ldrh	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b38:	1c9a      	adds	r2, r3, #2
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004b4c:	e018      	b.n	8004b80 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b4e:	f7fe fb6d 	bl	800322c <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d803      	bhi.n	8004b66 <HAL_SPI_Transmit+0x160>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b64:	d102      	bne.n	8004b6c <HAL_SPI_Transmit+0x166>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d109      	bne.n	8004b80 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e082      	b.n	8004c86 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1c7      	bne.n	8004b1a <HAL_SPI_Transmit+0x114>
 8004b8a:	e053      	b.n	8004c34 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_SPI_Transmit+0x194>
 8004b94:	8b7b      	ldrh	r3, [r7, #26]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d147      	bne.n	8004c2a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bc0:	e033      	b.n	8004c2a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d113      	bne.n	8004bf8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	7812      	ldrb	r2, [r2, #0]
 8004bdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004bf6:	e018      	b.n	8004c2a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bf8:	f7fe fb18 	bl	800322c <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d803      	bhi.n	8004c10 <HAL_SPI_Transmit+0x20a>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c0e:	d102      	bne.n	8004c16 <HAL_SPI_Transmit+0x210>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e02d      	b.n	8004c86 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1c6      	bne.n	8004bc2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	6839      	ldr	r1, [r7, #0]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 fbd9 	bl	80053f0 <SPI_EndRxTxTransaction>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004c84:	2300      	movs	r3, #0
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b088      	sub	sp, #32
 8004c92:	af02      	add	r7, sp, #8
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d001      	beq.n	8004cae <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004caa:	2302      	movs	r3, #2
 8004cac:	e104      	b.n	8004eb8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_SPI_Receive+0x2c>
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e0fc      	b.n	8004eb8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cc6:	d112      	bne.n	8004cee <HAL_SPI_Receive+0x60>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10e      	bne.n	8004cee <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004cd8:	88fa      	ldrh	r2, [r7, #6]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f8eb 	bl	8004ec0 <HAL_SPI_TransmitReceive>
 8004cea:	4603      	mov	r3, r0
 8004cec:	e0e4      	b.n	8004eb8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cee:	f7fe fa9d 	bl	800322c <HAL_GetTick>
 8004cf2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_SPI_Receive+0x74>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e0da      	b.n	8004eb8 <HAL_SPI_Receive+0x22a>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	88fa      	ldrh	r2, [r7, #6]
 8004d22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	88fa      	ldrh	r2, [r7, #6]
 8004d28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d50:	d10f      	bne.n	8004d72 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7c:	2b40      	cmp	r3, #64	@ 0x40
 8004d7e:	d007      	beq.n	8004d90 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d170      	bne.n	8004e7a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d98:	e035      	b.n	8004e06 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d115      	bne.n	8004dd4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f103 020c 	add.w	r2, r3, #12
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db4:	7812      	ldrb	r2, [r2, #0]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dd2:	e018      	b.n	8004e06 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd4:	f7fe fa2a 	bl	800322c <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d803      	bhi.n	8004dec <HAL_SPI_Receive+0x15e>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dea:	d102      	bne.n	8004df2 <HAL_SPI_Receive+0x164>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e058      	b.n	8004eb8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1c4      	bne.n	8004d9a <HAL_SPI_Receive+0x10c>
 8004e10:	e038      	b.n	8004e84 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d113      	bne.n	8004e48 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2a:	b292      	uxth	r2, r2
 8004e2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e32:	1c9a      	adds	r2, r3, #2
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e46:	e018      	b.n	8004e7a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e48:	f7fe f9f0 	bl	800322c <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d803      	bhi.n	8004e60 <HAL_SPI_Receive+0x1d2>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e5e:	d102      	bne.n	8004e66 <HAL_SPI_Receive+0x1d8>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e01e      	b.n	8004eb8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1c6      	bne.n	8004e12 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	6839      	ldr	r1, [r7, #0]
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 fa4b 	bl	8005324 <SPI_EndRxTransaction>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	@ 0x28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ed2:	f7fe f9ab 	bl	800322c <HAL_GetTick>
 8004ed6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ede:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004ee6:	887b      	ldrh	r3, [r7, #2]
 8004ee8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004eea:	7ffb      	ldrb	r3, [r7, #31]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d00c      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x4a>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ef6:	d106      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x46>
 8004f00:	7ffb      	ldrb	r3, [r7, #31]
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d001      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004f06:	2302      	movs	r3, #2
 8004f08:	e17f      	b.n	800520a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x5c>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x5c>
 8004f16:	887b      	ldrh	r3, [r7, #2]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e174      	b.n	800520a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x6e>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e16d      	b.n	800520a <HAL_SPI_TransmitReceive+0x34a>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d003      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2205      	movs	r2, #5
 8004f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	887a      	ldrh	r2, [r7, #2]
 8004f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	887a      	ldrh	r2, [r7, #2]
 8004f60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	887a      	ldrh	r2, [r7, #2]
 8004f6c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	887a      	ldrh	r2, [r7, #2]
 8004f72:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8a:	2b40      	cmp	r3, #64	@ 0x40
 8004f8c:	d007      	beq.n	8004f9e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fa6:	d17e      	bne.n	80050a6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_SPI_TransmitReceive+0xf6>
 8004fb0:	8afb      	ldrh	r3, [r7, #22]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d16c      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fba:	881a      	ldrh	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc6:	1c9a      	adds	r2, r3, #2
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fda:	e059      	b.n	8005090 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d11b      	bne.n	8005022 <HAL_SPI_TransmitReceive+0x162>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d016      	beq.n	8005022 <HAL_SPI_TransmitReceive+0x162>
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d113      	bne.n	8005022 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffe:	881a      	ldrh	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500a:	1c9a      	adds	r2, r3, #2
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b01      	cmp	r3, #1
 800502e:	d119      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x1a4>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d014      	beq.n	8005064 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005044:	b292      	uxth	r2, r2
 8005046:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504c:	1c9a      	adds	r2, r3, #2
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005060:	2301      	movs	r3, #1
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005064:	f7fe f8e2 	bl	800322c <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005070:	429a      	cmp	r2, r3
 8005072:	d80d      	bhi.n	8005090 <HAL_SPI_TransmitReceive+0x1d0>
 8005074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800507a:	d009      	beq.n	8005090 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e0bc      	b.n	800520a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1a0      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x11c>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d19b      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x11c>
 80050a4:	e082      	b.n	80051ac <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x1f4>
 80050ae:	8afb      	ldrh	r3, [r7, #22]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d171      	bne.n	8005198 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330c      	adds	r3, #12
 80050be:	7812      	ldrb	r2, [r2, #0]
 80050c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050da:	e05d      	b.n	8005198 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d11c      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x264>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d017      	beq.n	8005124 <HAL_SPI_TransmitReceive+0x264>
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d114      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	330c      	adds	r3, #12
 8005104:	7812      	ldrb	r2, [r2, #0]
 8005106:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b01      	cmp	r3, #1
 8005130:	d119      	bne.n	8005166 <HAL_SPI_TransmitReceive+0x2a6>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d014      	beq.n	8005166 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005162:	2301      	movs	r3, #1
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005166:	f7fe f861 	bl	800322c <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005172:	429a      	cmp	r2, r3
 8005174:	d803      	bhi.n	800517e <HAL_SPI_TransmitReceive+0x2be>
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800517c:	d102      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x2c4>
 800517e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005180:	2b00      	cmp	r3, #0
 8005182:	d109      	bne.n	8005198 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e038      	b.n	800520a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d19c      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x21c>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d197      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051ac:	6a3a      	ldr	r2, [r7, #32]
 80051ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f91d 	bl	80053f0 <SPI_EndRxTxTransaction>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e01d      	b.n	800520a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051d6:	2300      	movs	r3, #0
 80051d8:	613b      	str	r3, [r7, #16]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005208:	2300      	movs	r3, #0
  }
}
 800520a:	4618      	mov	r0, r3
 800520c:	3728      	adds	r7, #40	@ 0x28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	4613      	mov	r3, r2
 8005222:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005224:	f7fe f802 	bl	800322c <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	4413      	add	r3, r2
 8005232:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005234:	f7fd fffa 	bl	800322c <HAL_GetTick>
 8005238:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800523a:	4b39      	ldr	r3, [pc, #228]	@ (8005320 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	015b      	lsls	r3, r3, #5
 8005240:	0d1b      	lsrs	r3, r3, #20
 8005242:	69fa      	ldr	r2, [r7, #28]
 8005244:	fb02 f303 	mul.w	r3, r2, r3
 8005248:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800524a:	e055      	b.n	80052f8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005252:	d051      	beq.n	80052f8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005254:	f7fd ffea 	bl	800322c <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	429a      	cmp	r2, r3
 8005262:	d902      	bls.n	800526a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d13d      	bne.n	80052e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005278:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005282:	d111      	bne.n	80052a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800528c:	d004      	beq.n	8005298 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005296:	d107      	bne.n	80052a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052b0:	d10f      	bne.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e018      	b.n	8005318 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d102      	bne.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61fb      	str	r3, [r7, #28]
 80052f0:	e002      	b.n	80052f8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	429a      	cmp	r2, r3
 8005314:	d19a      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	2000000c 	.word	0x2000000c

08005324 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005338:	d111      	bne.n	800535e <SPI_EndRxTransaction+0x3a>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005342:	d004      	beq.n	800534e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800534c:	d107      	bne.n	800535e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800535c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005366:	d12a      	bne.n	80053be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005370:	d012      	beq.n	8005398 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2200      	movs	r2, #0
 800537a:	2180      	movs	r1, #128	@ 0x80
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff ff49 	bl	8005214 <SPI_WaitFlagStateUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d02d      	beq.n	80053e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e026      	b.n	80053e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2200      	movs	r2, #0
 80053a0:	2101      	movs	r1, #1
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff ff36 	bl	8005214 <SPI_WaitFlagStateUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01a      	beq.n	80053e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b2:	f043 0220 	orr.w	r2, r3, #32
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e013      	b.n	80053e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2200      	movs	r2, #0
 80053c6:	2101      	movs	r1, #1
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f7ff ff23 	bl	8005214 <SPI_WaitFlagStateUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d8:	f043 0220 	orr.w	r2, r3, #32
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e000      	b.n	80053e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2201      	movs	r2, #1
 8005404:	2102      	movs	r1, #2
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7ff ff04 	bl	8005214 <SPI_WaitFlagStateUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d007      	beq.n	8005422 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005416:	f043 0220 	orr.w	r2, r3, #32
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e032      	b.n	8005488 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005422:	4b1b      	ldr	r3, [pc, #108]	@ (8005490 <SPI_EndRxTxTransaction+0xa0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1b      	ldr	r2, [pc, #108]	@ (8005494 <SPI_EndRxTxTransaction+0xa4>)
 8005428:	fba2 2303 	umull	r2, r3, r2, r3
 800542c:	0d5b      	lsrs	r3, r3, #21
 800542e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005432:	fb02 f303 	mul.w	r3, r2, r3
 8005436:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005440:	d112      	bne.n	8005468 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2200      	movs	r2, #0
 800544a:	2180      	movs	r1, #128	@ 0x80
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7ff fee1 	bl	8005214 <SPI_WaitFlagStateUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d016      	beq.n	8005486 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545c:	f043 0220 	orr.w	r2, r3, #32
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e00f      	b.n	8005488 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	3b01      	subs	r3, #1
 8005472:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547e:	2b80      	cmp	r3, #128	@ 0x80
 8005480:	d0f2      	beq.n	8005468 <SPI_EndRxTxTransaction+0x78>
 8005482:	e000      	b.n	8005486 <SPI_EndRxTxTransaction+0x96>
        break;
 8005484:	bf00      	nop
  }

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	2000000c 	.word	0x2000000c
 8005494:	165e9f81 	.word	0x165e9f81

08005498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e041      	b.n	800552e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fd fc2e 	bl	8002d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f000 fb6a 	bl	8005bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b01      	cmp	r3, #1
 800554a:	d001      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e044      	b.n	80055da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1e      	ldr	r2, [pc, #120]	@ (80055e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d018      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557a:	d013      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x6c>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1a      	ldr	r2, [pc, #104]	@ (80055ec <HAL_TIM_Base_Start_IT+0xb4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00e      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a19      	ldr	r2, [pc, #100]	@ (80055f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a17      	ldr	r2, [pc, #92]	@ (80055f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x6c>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a16      	ldr	r2, [pc, #88]	@ (80055f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d111      	bne.n	80055c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b06      	cmp	r3, #6
 80055b4:	d010      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0201 	orr.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c6:	e007      	b.n	80055d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40010000 	.word	0x40010000
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40000c00 	.word	0x40000c00
 80055f8:	40014000 	.word	0x40014000

080055fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e041      	b.n	8005692 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fd fb2a 	bl	8002c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3304      	adds	r3, #4
 8005638:	4619      	mov	r1, r3
 800563a:	4610      	mov	r0, r2
 800563c:	f000 fab8 	bl	8005bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d109      	bne.n	80056c0 <HAL_TIM_PWM_Start+0x24>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	bf14      	ite	ne
 80056b8:	2301      	movne	r3, #1
 80056ba:	2300      	moveq	r3, #0
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	e022      	b.n	8005706 <HAL_TIM_PWM_Start+0x6a>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d109      	bne.n	80056da <HAL_TIM_PWM_Start+0x3e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	bf14      	ite	ne
 80056d2:	2301      	movne	r3, #1
 80056d4:	2300      	moveq	r3, #0
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	e015      	b.n	8005706 <HAL_TIM_PWM_Start+0x6a>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d109      	bne.n	80056f4 <HAL_TIM_PWM_Start+0x58>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	bf14      	ite	ne
 80056ec:	2301      	movne	r3, #1
 80056ee:	2300      	moveq	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	e008      	b.n	8005706 <HAL_TIM_PWM_Start+0x6a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	bf14      	ite	ne
 8005700:	2301      	movne	r3, #1
 8005702:	2300      	moveq	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e068      	b.n	80057e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d104      	bne.n	800571e <HAL_TIM_PWM_Start+0x82>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800571c:	e013      	b.n	8005746 <HAL_TIM_PWM_Start+0xaa>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b04      	cmp	r3, #4
 8005722:	d104      	bne.n	800572e <HAL_TIM_PWM_Start+0x92>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800572c:	e00b      	b.n	8005746 <HAL_TIM_PWM_Start+0xaa>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b08      	cmp	r3, #8
 8005732:	d104      	bne.n	800573e <HAL_TIM_PWM_Start+0xa2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800573c:	e003      	b.n	8005746 <HAL_TIM_PWM_Start+0xaa>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2201      	movs	r2, #1
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fc40 	bl	8005fd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a23      	ldr	r2, [pc, #140]	@ (80057e8 <HAL_TIM_PWM_Start+0x14c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d107      	bne.n	800576e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800576c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1d      	ldr	r2, [pc, #116]	@ (80057e8 <HAL_TIM_PWM_Start+0x14c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d018      	beq.n	80057aa <HAL_TIM_PWM_Start+0x10e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005780:	d013      	beq.n	80057aa <HAL_TIM_PWM_Start+0x10e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a19      	ldr	r2, [pc, #100]	@ (80057ec <HAL_TIM_PWM_Start+0x150>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00e      	beq.n	80057aa <HAL_TIM_PWM_Start+0x10e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a17      	ldr	r2, [pc, #92]	@ (80057f0 <HAL_TIM_PWM_Start+0x154>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d009      	beq.n	80057aa <HAL_TIM_PWM_Start+0x10e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a16      	ldr	r2, [pc, #88]	@ (80057f4 <HAL_TIM_PWM_Start+0x158>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <HAL_TIM_PWM_Start+0x10e>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a14      	ldr	r2, [pc, #80]	@ (80057f8 <HAL_TIM_PWM_Start+0x15c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d111      	bne.n	80057ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b06      	cmp	r3, #6
 80057ba:	d010      	beq.n	80057de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057cc:	e007      	b.n	80057de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0201 	orr.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40010000 	.word	0x40010000
 80057ec:	40000400 	.word	0x40000400
 80057f0:	40000800 	.word	0x40000800
 80057f4:	40000c00 	.word	0x40000c00
 80057f8:	40014000 	.word	0x40014000

080057fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d020      	beq.n	8005860 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01b      	beq.n	8005860 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0202 	mvn.w	r2, #2
 8005830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f994 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
 800584c:	e005      	b.n	800585a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f986 	bl	8005b60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f997 	bl	8005b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b00      	cmp	r3, #0
 8005868:	d020      	beq.n	80058ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01b      	beq.n	80058ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0204 	mvn.w	r2, #4
 800587c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f96e 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
 8005898:	e005      	b.n	80058a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f960 	bl	8005b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f971 	bl	8005b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d020      	beq.n	80058f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01b      	beq.n	80058f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0208 	mvn.w	r2, #8
 80058c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2204      	movs	r2, #4
 80058ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f948 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
 80058e4:	e005      	b.n	80058f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f93a 	bl	8005b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f94b 	bl	8005b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d020      	beq.n	8005944 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01b      	beq.n	8005944 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0210 	mvn.w	r2, #16
 8005914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2208      	movs	r2, #8
 800591a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f922 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
 8005930:	e005      	b.n	800593e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f914 	bl	8005b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f925 	bl	8005b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0201 	mvn.w	r2, #1
 8005960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fb fefc 	bl	8001760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00c      	beq.n	800598c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fc14 	bl	80061b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00c      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f8f6 	bl	8005b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00c      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0220 	mvn.w	r2, #32
 80059cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fbe6 	bl	80061a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059d4:	bf00      	nop
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e0ae      	b.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b0c      	cmp	r3, #12
 8005a06:	f200 809f 	bhi.w	8005b48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a45 	.word	0x08005a45
 8005a14:	08005b49 	.word	0x08005b49
 8005a18:	08005b49 	.word	0x08005b49
 8005a1c:	08005b49 	.word	0x08005b49
 8005a20:	08005a85 	.word	0x08005a85
 8005a24:	08005b49 	.word	0x08005b49
 8005a28:	08005b49 	.word	0x08005b49
 8005a2c:	08005b49 	.word	0x08005b49
 8005a30:	08005ac7 	.word	0x08005ac7
 8005a34:	08005b49 	.word	0x08005b49
 8005a38:	08005b49 	.word	0x08005b49
 8005a3c:	08005b49 	.word	0x08005b49
 8005a40:	08005b07 	.word	0x08005b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 f936 	bl	8005cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0208 	orr.w	r2, r2, #8
 8005a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0204 	bic.w	r2, r2, #4
 8005a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6999      	ldr	r1, [r3, #24]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	691a      	ldr	r2, [r3, #16]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	619a      	str	r2, [r3, #24]
      break;
 8005a82:	e064      	b.n	8005b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 f97c 	bl	8005d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699a      	ldr	r2, [r3, #24]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6999      	ldr	r1, [r3, #24]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	021a      	lsls	r2, r3, #8
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	619a      	str	r2, [r3, #24]
      break;
 8005ac4:	e043      	b.n	8005b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68b9      	ldr	r1, [r7, #8]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f9c7 	bl	8005e60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69da      	ldr	r2, [r3, #28]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f042 0208 	orr.w	r2, r2, #8
 8005ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0204 	bic.w	r2, r2, #4
 8005af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69d9      	ldr	r1, [r3, #28]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	691a      	ldr	r2, [r3, #16]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	61da      	str	r2, [r3, #28]
      break;
 8005b04:	e023      	b.n	8005b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fa11 	bl	8005f34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69da      	ldr	r2, [r3, #28]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69d9      	ldr	r1, [r3, #28]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	021a      	lsls	r2, r3, #8
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	61da      	str	r2, [r3, #28]
      break;
 8005b46:	e002      	b.n	8005b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a37      	ldr	r2, [pc, #220]	@ (8005ca0 <TIM_Base_SetConfig+0xf0>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00f      	beq.n	8005be8 <TIM_Base_SetConfig+0x38>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bce:	d00b      	beq.n	8005be8 <TIM_Base_SetConfig+0x38>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a34      	ldr	r2, [pc, #208]	@ (8005ca4 <TIM_Base_SetConfig+0xf4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d007      	beq.n	8005be8 <TIM_Base_SetConfig+0x38>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a33      	ldr	r2, [pc, #204]	@ (8005ca8 <TIM_Base_SetConfig+0xf8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_Base_SetConfig+0x38>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a32      	ldr	r2, [pc, #200]	@ (8005cac <TIM_Base_SetConfig+0xfc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d108      	bne.n	8005bfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a28      	ldr	r2, [pc, #160]	@ (8005ca0 <TIM_Base_SetConfig+0xf0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d01b      	beq.n	8005c3a <TIM_Base_SetConfig+0x8a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c08:	d017      	beq.n	8005c3a <TIM_Base_SetConfig+0x8a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a25      	ldr	r2, [pc, #148]	@ (8005ca4 <TIM_Base_SetConfig+0xf4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <TIM_Base_SetConfig+0x8a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a24      	ldr	r2, [pc, #144]	@ (8005ca8 <TIM_Base_SetConfig+0xf8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00f      	beq.n	8005c3a <TIM_Base_SetConfig+0x8a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a23      	ldr	r2, [pc, #140]	@ (8005cac <TIM_Base_SetConfig+0xfc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00b      	beq.n	8005c3a <TIM_Base_SetConfig+0x8a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a22      	ldr	r2, [pc, #136]	@ (8005cb0 <TIM_Base_SetConfig+0x100>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d007      	beq.n	8005c3a <TIM_Base_SetConfig+0x8a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a21      	ldr	r2, [pc, #132]	@ (8005cb4 <TIM_Base_SetConfig+0x104>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d003      	beq.n	8005c3a <TIM_Base_SetConfig+0x8a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a20      	ldr	r2, [pc, #128]	@ (8005cb8 <TIM_Base_SetConfig+0x108>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d108      	bne.n	8005c4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ca0 <TIM_Base_SetConfig+0xf0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d103      	bne.n	8005c7a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f043 0204 	orr.w	r2, r3, #4
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	601a      	str	r2, [r3, #0]
}
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800
 8005cac:	40000c00 	.word	0x40000c00
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800

08005cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f023 0201 	bic.w	r2, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f023 0302 	bic.w	r3, r3, #2
 8005d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a1c      	ldr	r2, [pc, #112]	@ (8005d84 <TIM_OC1_SetConfig+0xc8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d10c      	bne.n	8005d32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f023 0308 	bic.w	r3, r3, #8
 8005d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f023 0304 	bic.w	r3, r3, #4
 8005d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a13      	ldr	r2, [pc, #76]	@ (8005d84 <TIM_OC1_SetConfig+0xc8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d111      	bne.n	8005d5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	621a      	str	r2, [r3, #32]
}
 8005d78:	bf00      	nop
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	40010000 	.word	0x40010000

08005d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f023 0210 	bic.w	r2, r3, #16
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f023 0320 	bic.w	r3, r3, #32
 8005dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a1e      	ldr	r2, [pc, #120]	@ (8005e5c <TIM_OC2_SetConfig+0xd4>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d10d      	bne.n	8005e04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a15      	ldr	r2, [pc, #84]	@ (8005e5c <TIM_OC2_SetConfig+0xd4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d113      	bne.n	8005e34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40010000 	.word	0x40010000

08005e60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	021b      	lsls	r3, r3, #8
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f30 <TIM_OC3_SetConfig+0xd0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d10d      	bne.n	8005eda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a14      	ldr	r2, [pc, #80]	@ (8005f30 <TIM_OC3_SetConfig+0xd0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d113      	bne.n	8005f0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	011b      	lsls	r3, r3, #4
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	621a      	str	r2, [r3, #32]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	40010000 	.word	0x40010000

08005f34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	031b      	lsls	r3, r3, #12
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a10      	ldr	r2, [pc, #64]	@ (8005fd0 <TIM_OC4_SetConfig+0x9c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d109      	bne.n	8005fa8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	019b      	lsls	r3, r3, #6
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	621a      	str	r2, [r3, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40010000 	.word	0x40010000

08005fd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f003 031f 	and.w	r3, r3, #31
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1a      	ldr	r2, [r3, #32]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	401a      	ands	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a1a      	ldr	r2, [r3, #32]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 031f 	and.w	r3, r3, #31
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	fa01 f303 	lsl.w	r3, r1, r3
 800600c:	431a      	orrs	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	621a      	str	r2, [r3, #32]
}
 8006012:	bf00      	nop
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006034:	2302      	movs	r3, #2
 8006036:	e050      	b.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800605e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a1c      	ldr	r2, [pc, #112]	@ (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d018      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006084:	d013      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a18      	ldr	r2, [pc, #96]	@ (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00e      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a16      	ldr	r2, [pc, #88]	@ (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d009      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a15      	ldr	r2, [pc, #84]	@ (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d004      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a13      	ldr	r2, [pc, #76]	@ (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d10c      	bne.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40000400 	.word	0x40000400
 80060f0:	40000800 	.word	0x40000800
 80060f4:	40000c00 	.word	0x40000c00
 80060f8:	40014000 	.word	0x40014000

080060fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006114:	2302      	movs	r3, #2
 8006116:	e03d      	b.n	8006194 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <__cvt>:
 80061c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061cc:	ec57 6b10 	vmov	r6, r7, d0
 80061d0:	2f00      	cmp	r7, #0
 80061d2:	460c      	mov	r4, r1
 80061d4:	4619      	mov	r1, r3
 80061d6:	463b      	mov	r3, r7
 80061d8:	bfbb      	ittet	lt
 80061da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80061de:	461f      	movlt	r7, r3
 80061e0:	2300      	movge	r3, #0
 80061e2:	232d      	movlt	r3, #45	@ 0x2d
 80061e4:	700b      	strb	r3, [r1, #0]
 80061e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80061ec:	4691      	mov	r9, r2
 80061ee:	f023 0820 	bic.w	r8, r3, #32
 80061f2:	bfbc      	itt	lt
 80061f4:	4632      	movlt	r2, r6
 80061f6:	4616      	movlt	r6, r2
 80061f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061fc:	d005      	beq.n	800620a <__cvt+0x42>
 80061fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006202:	d100      	bne.n	8006206 <__cvt+0x3e>
 8006204:	3401      	adds	r4, #1
 8006206:	2102      	movs	r1, #2
 8006208:	e000      	b.n	800620c <__cvt+0x44>
 800620a:	2103      	movs	r1, #3
 800620c:	ab03      	add	r3, sp, #12
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	ab02      	add	r3, sp, #8
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	ec47 6b10 	vmov	d0, r6, r7
 8006218:	4653      	mov	r3, sl
 800621a:	4622      	mov	r2, r4
 800621c:	f000 fe38 	bl	8006e90 <_dtoa_r>
 8006220:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006224:	4605      	mov	r5, r0
 8006226:	d119      	bne.n	800625c <__cvt+0x94>
 8006228:	f019 0f01 	tst.w	r9, #1
 800622c:	d00e      	beq.n	800624c <__cvt+0x84>
 800622e:	eb00 0904 	add.w	r9, r0, r4
 8006232:	2200      	movs	r2, #0
 8006234:	2300      	movs	r3, #0
 8006236:	4630      	mov	r0, r6
 8006238:	4639      	mov	r1, r7
 800623a:	f7fa fc4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800623e:	b108      	cbz	r0, 8006244 <__cvt+0x7c>
 8006240:	f8cd 900c 	str.w	r9, [sp, #12]
 8006244:	2230      	movs	r2, #48	@ 0x30
 8006246:	9b03      	ldr	r3, [sp, #12]
 8006248:	454b      	cmp	r3, r9
 800624a:	d31e      	bcc.n	800628a <__cvt+0xc2>
 800624c:	9b03      	ldr	r3, [sp, #12]
 800624e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006250:	1b5b      	subs	r3, r3, r5
 8006252:	4628      	mov	r0, r5
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	b004      	add	sp, #16
 8006258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006260:	eb00 0904 	add.w	r9, r0, r4
 8006264:	d1e5      	bne.n	8006232 <__cvt+0x6a>
 8006266:	7803      	ldrb	r3, [r0, #0]
 8006268:	2b30      	cmp	r3, #48	@ 0x30
 800626a:	d10a      	bne.n	8006282 <__cvt+0xba>
 800626c:	2200      	movs	r2, #0
 800626e:	2300      	movs	r3, #0
 8006270:	4630      	mov	r0, r6
 8006272:	4639      	mov	r1, r7
 8006274:	f7fa fc30 	bl	8000ad8 <__aeabi_dcmpeq>
 8006278:	b918      	cbnz	r0, 8006282 <__cvt+0xba>
 800627a:	f1c4 0401 	rsb	r4, r4, #1
 800627e:	f8ca 4000 	str.w	r4, [sl]
 8006282:	f8da 3000 	ldr.w	r3, [sl]
 8006286:	4499      	add	r9, r3
 8006288:	e7d3      	b.n	8006232 <__cvt+0x6a>
 800628a:	1c59      	adds	r1, r3, #1
 800628c:	9103      	str	r1, [sp, #12]
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	e7d9      	b.n	8006246 <__cvt+0x7e>

08006292 <__exponent>:
 8006292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006294:	2900      	cmp	r1, #0
 8006296:	bfba      	itte	lt
 8006298:	4249      	neglt	r1, r1
 800629a:	232d      	movlt	r3, #45	@ 0x2d
 800629c:	232b      	movge	r3, #43	@ 0x2b
 800629e:	2909      	cmp	r1, #9
 80062a0:	7002      	strb	r2, [r0, #0]
 80062a2:	7043      	strb	r3, [r0, #1]
 80062a4:	dd29      	ble.n	80062fa <__exponent+0x68>
 80062a6:	f10d 0307 	add.w	r3, sp, #7
 80062aa:	461d      	mov	r5, r3
 80062ac:	270a      	movs	r7, #10
 80062ae:	461a      	mov	r2, r3
 80062b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80062b4:	fb07 1416 	mls	r4, r7, r6, r1
 80062b8:	3430      	adds	r4, #48	@ 0x30
 80062ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80062be:	460c      	mov	r4, r1
 80062c0:	2c63      	cmp	r4, #99	@ 0x63
 80062c2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80062c6:	4631      	mov	r1, r6
 80062c8:	dcf1      	bgt.n	80062ae <__exponent+0x1c>
 80062ca:	3130      	adds	r1, #48	@ 0x30
 80062cc:	1e94      	subs	r4, r2, #2
 80062ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062d2:	1c41      	adds	r1, r0, #1
 80062d4:	4623      	mov	r3, r4
 80062d6:	42ab      	cmp	r3, r5
 80062d8:	d30a      	bcc.n	80062f0 <__exponent+0x5e>
 80062da:	f10d 0309 	add.w	r3, sp, #9
 80062de:	1a9b      	subs	r3, r3, r2
 80062e0:	42ac      	cmp	r4, r5
 80062e2:	bf88      	it	hi
 80062e4:	2300      	movhi	r3, #0
 80062e6:	3302      	adds	r3, #2
 80062e8:	4403      	add	r3, r0
 80062ea:	1a18      	subs	r0, r3, r0
 80062ec:	b003      	add	sp, #12
 80062ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062f8:	e7ed      	b.n	80062d6 <__exponent+0x44>
 80062fa:	2330      	movs	r3, #48	@ 0x30
 80062fc:	3130      	adds	r1, #48	@ 0x30
 80062fe:	7083      	strb	r3, [r0, #2]
 8006300:	70c1      	strb	r1, [r0, #3]
 8006302:	1d03      	adds	r3, r0, #4
 8006304:	e7f1      	b.n	80062ea <__exponent+0x58>
	...

08006308 <_printf_float>:
 8006308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	b08d      	sub	sp, #52	@ 0x34
 800630e:	460c      	mov	r4, r1
 8006310:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006314:	4616      	mov	r6, r2
 8006316:	461f      	mov	r7, r3
 8006318:	4605      	mov	r5, r0
 800631a:	f000 fcb9 	bl	8006c90 <_localeconv_r>
 800631e:	6803      	ldr	r3, [r0, #0]
 8006320:	9304      	str	r3, [sp, #16]
 8006322:	4618      	mov	r0, r3
 8006324:	f7f9 ffac 	bl	8000280 <strlen>
 8006328:	2300      	movs	r3, #0
 800632a:	930a      	str	r3, [sp, #40]	@ 0x28
 800632c:	f8d8 3000 	ldr.w	r3, [r8]
 8006330:	9005      	str	r0, [sp, #20]
 8006332:	3307      	adds	r3, #7
 8006334:	f023 0307 	bic.w	r3, r3, #7
 8006338:	f103 0208 	add.w	r2, r3, #8
 800633c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006340:	f8d4 b000 	ldr.w	fp, [r4]
 8006344:	f8c8 2000 	str.w	r2, [r8]
 8006348:	e9d3 8900 	ldrd	r8, r9, [r3]
 800634c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006350:	9307      	str	r3, [sp, #28]
 8006352:	f8cd 8018 	str.w	r8, [sp, #24]
 8006356:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800635a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800635e:	4b9c      	ldr	r3, [pc, #624]	@ (80065d0 <_printf_float+0x2c8>)
 8006360:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006364:	f7fa fbea 	bl	8000b3c <__aeabi_dcmpun>
 8006368:	bb70      	cbnz	r0, 80063c8 <_printf_float+0xc0>
 800636a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800636e:	4b98      	ldr	r3, [pc, #608]	@ (80065d0 <_printf_float+0x2c8>)
 8006370:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006374:	f7fa fbc4 	bl	8000b00 <__aeabi_dcmple>
 8006378:	bb30      	cbnz	r0, 80063c8 <_printf_float+0xc0>
 800637a:	2200      	movs	r2, #0
 800637c:	2300      	movs	r3, #0
 800637e:	4640      	mov	r0, r8
 8006380:	4649      	mov	r1, r9
 8006382:	f7fa fbb3 	bl	8000aec <__aeabi_dcmplt>
 8006386:	b110      	cbz	r0, 800638e <_printf_float+0x86>
 8006388:	232d      	movs	r3, #45	@ 0x2d
 800638a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800638e:	4a91      	ldr	r2, [pc, #580]	@ (80065d4 <_printf_float+0x2cc>)
 8006390:	4b91      	ldr	r3, [pc, #580]	@ (80065d8 <_printf_float+0x2d0>)
 8006392:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006396:	bf8c      	ite	hi
 8006398:	4690      	movhi	r8, r2
 800639a:	4698      	movls	r8, r3
 800639c:	2303      	movs	r3, #3
 800639e:	6123      	str	r3, [r4, #16]
 80063a0:	f02b 0304 	bic.w	r3, fp, #4
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	f04f 0900 	mov.w	r9, #0
 80063aa:	9700      	str	r7, [sp, #0]
 80063ac:	4633      	mov	r3, r6
 80063ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80063b0:	4621      	mov	r1, r4
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 f9d2 	bl	800675c <_printf_common>
 80063b8:	3001      	adds	r0, #1
 80063ba:	f040 808d 	bne.w	80064d8 <_printf_float+0x1d0>
 80063be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063c2:	b00d      	add	sp, #52	@ 0x34
 80063c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c8:	4642      	mov	r2, r8
 80063ca:	464b      	mov	r3, r9
 80063cc:	4640      	mov	r0, r8
 80063ce:	4649      	mov	r1, r9
 80063d0:	f7fa fbb4 	bl	8000b3c <__aeabi_dcmpun>
 80063d4:	b140      	cbz	r0, 80063e8 <_printf_float+0xe0>
 80063d6:	464b      	mov	r3, r9
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bfbc      	itt	lt
 80063dc:	232d      	movlt	r3, #45	@ 0x2d
 80063de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80063e2:	4a7e      	ldr	r2, [pc, #504]	@ (80065dc <_printf_float+0x2d4>)
 80063e4:	4b7e      	ldr	r3, [pc, #504]	@ (80065e0 <_printf_float+0x2d8>)
 80063e6:	e7d4      	b.n	8006392 <_printf_float+0x8a>
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80063ee:	9206      	str	r2, [sp, #24]
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	d13b      	bne.n	800646c <_printf_float+0x164>
 80063f4:	2306      	movs	r3, #6
 80063f6:	6063      	str	r3, [r4, #4]
 80063f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80063fc:	2300      	movs	r3, #0
 80063fe:	6022      	str	r2, [r4, #0]
 8006400:	9303      	str	r3, [sp, #12]
 8006402:	ab0a      	add	r3, sp, #40	@ 0x28
 8006404:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006408:	ab09      	add	r3, sp, #36	@ 0x24
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	6861      	ldr	r1, [r4, #4]
 800640e:	ec49 8b10 	vmov	d0, r8, r9
 8006412:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006416:	4628      	mov	r0, r5
 8006418:	f7ff fed6 	bl	80061c8 <__cvt>
 800641c:	9b06      	ldr	r3, [sp, #24]
 800641e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006420:	2b47      	cmp	r3, #71	@ 0x47
 8006422:	4680      	mov	r8, r0
 8006424:	d129      	bne.n	800647a <_printf_float+0x172>
 8006426:	1cc8      	adds	r0, r1, #3
 8006428:	db02      	blt.n	8006430 <_printf_float+0x128>
 800642a:	6863      	ldr	r3, [r4, #4]
 800642c:	4299      	cmp	r1, r3
 800642e:	dd41      	ble.n	80064b4 <_printf_float+0x1ac>
 8006430:	f1aa 0a02 	sub.w	sl, sl, #2
 8006434:	fa5f fa8a 	uxtb.w	sl, sl
 8006438:	3901      	subs	r1, #1
 800643a:	4652      	mov	r2, sl
 800643c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006440:	9109      	str	r1, [sp, #36]	@ 0x24
 8006442:	f7ff ff26 	bl	8006292 <__exponent>
 8006446:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006448:	1813      	adds	r3, r2, r0
 800644a:	2a01      	cmp	r2, #1
 800644c:	4681      	mov	r9, r0
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	dc02      	bgt.n	8006458 <_printf_float+0x150>
 8006452:	6822      	ldr	r2, [r4, #0]
 8006454:	07d2      	lsls	r2, r2, #31
 8006456:	d501      	bpl.n	800645c <_printf_float+0x154>
 8006458:	3301      	adds	r3, #1
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0a2      	beq.n	80063aa <_printf_float+0xa2>
 8006464:	232d      	movs	r3, #45	@ 0x2d
 8006466:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800646a:	e79e      	b.n	80063aa <_printf_float+0xa2>
 800646c:	9a06      	ldr	r2, [sp, #24]
 800646e:	2a47      	cmp	r2, #71	@ 0x47
 8006470:	d1c2      	bne.n	80063f8 <_printf_float+0xf0>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1c0      	bne.n	80063f8 <_printf_float+0xf0>
 8006476:	2301      	movs	r3, #1
 8006478:	e7bd      	b.n	80063f6 <_printf_float+0xee>
 800647a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800647e:	d9db      	bls.n	8006438 <_printf_float+0x130>
 8006480:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006484:	d118      	bne.n	80064b8 <_printf_float+0x1b0>
 8006486:	2900      	cmp	r1, #0
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	dd0b      	ble.n	80064a4 <_printf_float+0x19c>
 800648c:	6121      	str	r1, [r4, #16]
 800648e:	b913      	cbnz	r3, 8006496 <_printf_float+0x18e>
 8006490:	6822      	ldr	r2, [r4, #0]
 8006492:	07d0      	lsls	r0, r2, #31
 8006494:	d502      	bpl.n	800649c <_printf_float+0x194>
 8006496:	3301      	adds	r3, #1
 8006498:	440b      	add	r3, r1
 800649a:	6123      	str	r3, [r4, #16]
 800649c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800649e:	f04f 0900 	mov.w	r9, #0
 80064a2:	e7db      	b.n	800645c <_printf_float+0x154>
 80064a4:	b913      	cbnz	r3, 80064ac <_printf_float+0x1a4>
 80064a6:	6822      	ldr	r2, [r4, #0]
 80064a8:	07d2      	lsls	r2, r2, #31
 80064aa:	d501      	bpl.n	80064b0 <_printf_float+0x1a8>
 80064ac:	3302      	adds	r3, #2
 80064ae:	e7f4      	b.n	800649a <_printf_float+0x192>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e7f2      	b.n	800649a <_printf_float+0x192>
 80064b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80064b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064ba:	4299      	cmp	r1, r3
 80064bc:	db05      	blt.n	80064ca <_printf_float+0x1c2>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	6121      	str	r1, [r4, #16]
 80064c2:	07d8      	lsls	r0, r3, #31
 80064c4:	d5ea      	bpl.n	800649c <_printf_float+0x194>
 80064c6:	1c4b      	adds	r3, r1, #1
 80064c8:	e7e7      	b.n	800649a <_printf_float+0x192>
 80064ca:	2900      	cmp	r1, #0
 80064cc:	bfd4      	ite	le
 80064ce:	f1c1 0202 	rsble	r2, r1, #2
 80064d2:	2201      	movgt	r2, #1
 80064d4:	4413      	add	r3, r2
 80064d6:	e7e0      	b.n	800649a <_printf_float+0x192>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	055a      	lsls	r2, r3, #21
 80064dc:	d407      	bmi.n	80064ee <_printf_float+0x1e6>
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	4642      	mov	r2, r8
 80064e2:	4631      	mov	r1, r6
 80064e4:	4628      	mov	r0, r5
 80064e6:	47b8      	blx	r7
 80064e8:	3001      	adds	r0, #1
 80064ea:	d12b      	bne.n	8006544 <_printf_float+0x23c>
 80064ec:	e767      	b.n	80063be <_printf_float+0xb6>
 80064ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064f2:	f240 80dd 	bls.w	80066b0 <_printf_float+0x3a8>
 80064f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064fa:	2200      	movs	r2, #0
 80064fc:	2300      	movs	r3, #0
 80064fe:	f7fa faeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006502:	2800      	cmp	r0, #0
 8006504:	d033      	beq.n	800656e <_printf_float+0x266>
 8006506:	4a37      	ldr	r2, [pc, #220]	@ (80065e4 <_printf_float+0x2dc>)
 8006508:	2301      	movs	r3, #1
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	f43f af54 	beq.w	80063be <_printf_float+0xb6>
 8006516:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800651a:	4543      	cmp	r3, r8
 800651c:	db02      	blt.n	8006524 <_printf_float+0x21c>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	07d8      	lsls	r0, r3, #31
 8006522:	d50f      	bpl.n	8006544 <_printf_float+0x23c>
 8006524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006528:	4631      	mov	r1, r6
 800652a:	4628      	mov	r0, r5
 800652c:	47b8      	blx	r7
 800652e:	3001      	adds	r0, #1
 8006530:	f43f af45 	beq.w	80063be <_printf_float+0xb6>
 8006534:	f04f 0900 	mov.w	r9, #0
 8006538:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800653c:	f104 0a1a 	add.w	sl, r4, #26
 8006540:	45c8      	cmp	r8, r9
 8006542:	dc09      	bgt.n	8006558 <_printf_float+0x250>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	079b      	lsls	r3, r3, #30
 8006548:	f100 8103 	bmi.w	8006752 <_printf_float+0x44a>
 800654c:	68e0      	ldr	r0, [r4, #12]
 800654e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006550:	4298      	cmp	r0, r3
 8006552:	bfb8      	it	lt
 8006554:	4618      	movlt	r0, r3
 8006556:	e734      	b.n	80063c2 <_printf_float+0xba>
 8006558:	2301      	movs	r3, #1
 800655a:	4652      	mov	r2, sl
 800655c:	4631      	mov	r1, r6
 800655e:	4628      	mov	r0, r5
 8006560:	47b8      	blx	r7
 8006562:	3001      	adds	r0, #1
 8006564:	f43f af2b 	beq.w	80063be <_printf_float+0xb6>
 8006568:	f109 0901 	add.w	r9, r9, #1
 800656c:	e7e8      	b.n	8006540 <_printf_float+0x238>
 800656e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	dc39      	bgt.n	80065e8 <_printf_float+0x2e0>
 8006574:	4a1b      	ldr	r2, [pc, #108]	@ (80065e4 <_printf_float+0x2dc>)
 8006576:	2301      	movs	r3, #1
 8006578:	4631      	mov	r1, r6
 800657a:	4628      	mov	r0, r5
 800657c:	47b8      	blx	r7
 800657e:	3001      	adds	r0, #1
 8006580:	f43f af1d 	beq.w	80063be <_printf_float+0xb6>
 8006584:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006588:	ea59 0303 	orrs.w	r3, r9, r3
 800658c:	d102      	bne.n	8006594 <_printf_float+0x28c>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	07d9      	lsls	r1, r3, #31
 8006592:	d5d7      	bpl.n	8006544 <_printf_float+0x23c>
 8006594:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006598:	4631      	mov	r1, r6
 800659a:	4628      	mov	r0, r5
 800659c:	47b8      	blx	r7
 800659e:	3001      	adds	r0, #1
 80065a0:	f43f af0d 	beq.w	80063be <_printf_float+0xb6>
 80065a4:	f04f 0a00 	mov.w	sl, #0
 80065a8:	f104 0b1a 	add.w	fp, r4, #26
 80065ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ae:	425b      	negs	r3, r3
 80065b0:	4553      	cmp	r3, sl
 80065b2:	dc01      	bgt.n	80065b8 <_printf_float+0x2b0>
 80065b4:	464b      	mov	r3, r9
 80065b6:	e793      	b.n	80064e0 <_printf_float+0x1d8>
 80065b8:	2301      	movs	r3, #1
 80065ba:	465a      	mov	r2, fp
 80065bc:	4631      	mov	r1, r6
 80065be:	4628      	mov	r0, r5
 80065c0:	47b8      	blx	r7
 80065c2:	3001      	adds	r0, #1
 80065c4:	f43f aefb 	beq.w	80063be <_printf_float+0xb6>
 80065c8:	f10a 0a01 	add.w	sl, sl, #1
 80065cc:	e7ee      	b.n	80065ac <_printf_float+0x2a4>
 80065ce:	bf00      	nop
 80065d0:	7fefffff 	.word	0x7fefffff
 80065d4:	08009bec 	.word	0x08009bec
 80065d8:	08009be8 	.word	0x08009be8
 80065dc:	08009bf4 	.word	0x08009bf4
 80065e0:	08009bf0 	.word	0x08009bf0
 80065e4:	08009bf8 	.word	0x08009bf8
 80065e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065ee:	4553      	cmp	r3, sl
 80065f0:	bfa8      	it	ge
 80065f2:	4653      	movge	r3, sl
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	4699      	mov	r9, r3
 80065f8:	dc36      	bgt.n	8006668 <_printf_float+0x360>
 80065fa:	f04f 0b00 	mov.w	fp, #0
 80065fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006602:	f104 021a 	add.w	r2, r4, #26
 8006606:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006608:	9306      	str	r3, [sp, #24]
 800660a:	eba3 0309 	sub.w	r3, r3, r9
 800660e:	455b      	cmp	r3, fp
 8006610:	dc31      	bgt.n	8006676 <_printf_float+0x36e>
 8006612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006614:	459a      	cmp	sl, r3
 8006616:	dc3a      	bgt.n	800668e <_printf_float+0x386>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	07da      	lsls	r2, r3, #31
 800661c:	d437      	bmi.n	800668e <_printf_float+0x386>
 800661e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006620:	ebaa 0903 	sub.w	r9, sl, r3
 8006624:	9b06      	ldr	r3, [sp, #24]
 8006626:	ebaa 0303 	sub.w	r3, sl, r3
 800662a:	4599      	cmp	r9, r3
 800662c:	bfa8      	it	ge
 800662e:	4699      	movge	r9, r3
 8006630:	f1b9 0f00 	cmp.w	r9, #0
 8006634:	dc33      	bgt.n	800669e <_printf_float+0x396>
 8006636:	f04f 0800 	mov.w	r8, #0
 800663a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800663e:	f104 0b1a 	add.w	fp, r4, #26
 8006642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006644:	ebaa 0303 	sub.w	r3, sl, r3
 8006648:	eba3 0309 	sub.w	r3, r3, r9
 800664c:	4543      	cmp	r3, r8
 800664e:	f77f af79 	ble.w	8006544 <_printf_float+0x23c>
 8006652:	2301      	movs	r3, #1
 8006654:	465a      	mov	r2, fp
 8006656:	4631      	mov	r1, r6
 8006658:	4628      	mov	r0, r5
 800665a:	47b8      	blx	r7
 800665c:	3001      	adds	r0, #1
 800665e:	f43f aeae 	beq.w	80063be <_printf_float+0xb6>
 8006662:	f108 0801 	add.w	r8, r8, #1
 8006666:	e7ec      	b.n	8006642 <_printf_float+0x33a>
 8006668:	4642      	mov	r2, r8
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	d1c2      	bne.n	80065fa <_printf_float+0x2f2>
 8006674:	e6a3      	b.n	80063be <_printf_float+0xb6>
 8006676:	2301      	movs	r3, #1
 8006678:	4631      	mov	r1, r6
 800667a:	4628      	mov	r0, r5
 800667c:	9206      	str	r2, [sp, #24]
 800667e:	47b8      	blx	r7
 8006680:	3001      	adds	r0, #1
 8006682:	f43f ae9c 	beq.w	80063be <_printf_float+0xb6>
 8006686:	9a06      	ldr	r2, [sp, #24]
 8006688:	f10b 0b01 	add.w	fp, fp, #1
 800668c:	e7bb      	b.n	8006606 <_printf_float+0x2fe>
 800668e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	d1c0      	bne.n	800661e <_printf_float+0x316>
 800669c:	e68f      	b.n	80063be <_printf_float+0xb6>
 800669e:	9a06      	ldr	r2, [sp, #24]
 80066a0:	464b      	mov	r3, r9
 80066a2:	4442      	add	r2, r8
 80066a4:	4631      	mov	r1, r6
 80066a6:	4628      	mov	r0, r5
 80066a8:	47b8      	blx	r7
 80066aa:	3001      	adds	r0, #1
 80066ac:	d1c3      	bne.n	8006636 <_printf_float+0x32e>
 80066ae:	e686      	b.n	80063be <_printf_float+0xb6>
 80066b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80066b4:	f1ba 0f01 	cmp.w	sl, #1
 80066b8:	dc01      	bgt.n	80066be <_printf_float+0x3b6>
 80066ba:	07db      	lsls	r3, r3, #31
 80066bc:	d536      	bpl.n	800672c <_printf_float+0x424>
 80066be:	2301      	movs	r3, #1
 80066c0:	4642      	mov	r2, r8
 80066c2:	4631      	mov	r1, r6
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b8      	blx	r7
 80066c8:	3001      	adds	r0, #1
 80066ca:	f43f ae78 	beq.w	80063be <_printf_float+0xb6>
 80066ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	f43f ae70 	beq.w	80063be <_printf_float+0xb6>
 80066de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066e2:	2200      	movs	r2, #0
 80066e4:	2300      	movs	r3, #0
 80066e6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80066ea:	f7fa f9f5 	bl	8000ad8 <__aeabi_dcmpeq>
 80066ee:	b9c0      	cbnz	r0, 8006722 <_printf_float+0x41a>
 80066f0:	4653      	mov	r3, sl
 80066f2:	f108 0201 	add.w	r2, r8, #1
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	d10c      	bne.n	800671a <_printf_float+0x412>
 8006700:	e65d      	b.n	80063be <_printf_float+0xb6>
 8006702:	2301      	movs	r3, #1
 8006704:	465a      	mov	r2, fp
 8006706:	4631      	mov	r1, r6
 8006708:	4628      	mov	r0, r5
 800670a:	47b8      	blx	r7
 800670c:	3001      	adds	r0, #1
 800670e:	f43f ae56 	beq.w	80063be <_printf_float+0xb6>
 8006712:	f108 0801 	add.w	r8, r8, #1
 8006716:	45d0      	cmp	r8, sl
 8006718:	dbf3      	blt.n	8006702 <_printf_float+0x3fa>
 800671a:	464b      	mov	r3, r9
 800671c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006720:	e6df      	b.n	80064e2 <_printf_float+0x1da>
 8006722:	f04f 0800 	mov.w	r8, #0
 8006726:	f104 0b1a 	add.w	fp, r4, #26
 800672a:	e7f4      	b.n	8006716 <_printf_float+0x40e>
 800672c:	2301      	movs	r3, #1
 800672e:	4642      	mov	r2, r8
 8006730:	e7e1      	b.n	80066f6 <_printf_float+0x3ee>
 8006732:	2301      	movs	r3, #1
 8006734:	464a      	mov	r2, r9
 8006736:	4631      	mov	r1, r6
 8006738:	4628      	mov	r0, r5
 800673a:	47b8      	blx	r7
 800673c:	3001      	adds	r0, #1
 800673e:	f43f ae3e 	beq.w	80063be <_printf_float+0xb6>
 8006742:	f108 0801 	add.w	r8, r8, #1
 8006746:	68e3      	ldr	r3, [r4, #12]
 8006748:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800674a:	1a5b      	subs	r3, r3, r1
 800674c:	4543      	cmp	r3, r8
 800674e:	dcf0      	bgt.n	8006732 <_printf_float+0x42a>
 8006750:	e6fc      	b.n	800654c <_printf_float+0x244>
 8006752:	f04f 0800 	mov.w	r8, #0
 8006756:	f104 0919 	add.w	r9, r4, #25
 800675a:	e7f4      	b.n	8006746 <_printf_float+0x43e>

0800675c <_printf_common>:
 800675c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	4616      	mov	r6, r2
 8006762:	4698      	mov	r8, r3
 8006764:	688a      	ldr	r2, [r1, #8]
 8006766:	690b      	ldr	r3, [r1, #16]
 8006768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800676c:	4293      	cmp	r3, r2
 800676e:	bfb8      	it	lt
 8006770:	4613      	movlt	r3, r2
 8006772:	6033      	str	r3, [r6, #0]
 8006774:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006778:	4607      	mov	r7, r0
 800677a:	460c      	mov	r4, r1
 800677c:	b10a      	cbz	r2, 8006782 <_printf_common+0x26>
 800677e:	3301      	adds	r3, #1
 8006780:	6033      	str	r3, [r6, #0]
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	0699      	lsls	r1, r3, #26
 8006786:	bf42      	ittt	mi
 8006788:	6833      	ldrmi	r3, [r6, #0]
 800678a:	3302      	addmi	r3, #2
 800678c:	6033      	strmi	r3, [r6, #0]
 800678e:	6825      	ldr	r5, [r4, #0]
 8006790:	f015 0506 	ands.w	r5, r5, #6
 8006794:	d106      	bne.n	80067a4 <_printf_common+0x48>
 8006796:	f104 0a19 	add.w	sl, r4, #25
 800679a:	68e3      	ldr	r3, [r4, #12]
 800679c:	6832      	ldr	r2, [r6, #0]
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	42ab      	cmp	r3, r5
 80067a2:	dc26      	bgt.n	80067f2 <_printf_common+0x96>
 80067a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067a8:	6822      	ldr	r2, [r4, #0]
 80067aa:	3b00      	subs	r3, #0
 80067ac:	bf18      	it	ne
 80067ae:	2301      	movne	r3, #1
 80067b0:	0692      	lsls	r2, r2, #26
 80067b2:	d42b      	bmi.n	800680c <_printf_common+0xb0>
 80067b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067b8:	4641      	mov	r1, r8
 80067ba:	4638      	mov	r0, r7
 80067bc:	47c8      	blx	r9
 80067be:	3001      	adds	r0, #1
 80067c0:	d01e      	beq.n	8006800 <_printf_common+0xa4>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	6922      	ldr	r2, [r4, #16]
 80067c6:	f003 0306 	and.w	r3, r3, #6
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	bf02      	ittt	eq
 80067ce:	68e5      	ldreq	r5, [r4, #12]
 80067d0:	6833      	ldreq	r3, [r6, #0]
 80067d2:	1aed      	subeq	r5, r5, r3
 80067d4:	68a3      	ldr	r3, [r4, #8]
 80067d6:	bf0c      	ite	eq
 80067d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067dc:	2500      	movne	r5, #0
 80067de:	4293      	cmp	r3, r2
 80067e0:	bfc4      	itt	gt
 80067e2:	1a9b      	subgt	r3, r3, r2
 80067e4:	18ed      	addgt	r5, r5, r3
 80067e6:	2600      	movs	r6, #0
 80067e8:	341a      	adds	r4, #26
 80067ea:	42b5      	cmp	r5, r6
 80067ec:	d11a      	bne.n	8006824 <_printf_common+0xc8>
 80067ee:	2000      	movs	r0, #0
 80067f0:	e008      	b.n	8006804 <_printf_common+0xa8>
 80067f2:	2301      	movs	r3, #1
 80067f4:	4652      	mov	r2, sl
 80067f6:	4641      	mov	r1, r8
 80067f8:	4638      	mov	r0, r7
 80067fa:	47c8      	blx	r9
 80067fc:	3001      	adds	r0, #1
 80067fe:	d103      	bne.n	8006808 <_printf_common+0xac>
 8006800:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006808:	3501      	adds	r5, #1
 800680a:	e7c6      	b.n	800679a <_printf_common+0x3e>
 800680c:	18e1      	adds	r1, r4, r3
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	2030      	movs	r0, #48	@ 0x30
 8006812:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006816:	4422      	add	r2, r4
 8006818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800681c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006820:	3302      	adds	r3, #2
 8006822:	e7c7      	b.n	80067b4 <_printf_common+0x58>
 8006824:	2301      	movs	r3, #1
 8006826:	4622      	mov	r2, r4
 8006828:	4641      	mov	r1, r8
 800682a:	4638      	mov	r0, r7
 800682c:	47c8      	blx	r9
 800682e:	3001      	adds	r0, #1
 8006830:	d0e6      	beq.n	8006800 <_printf_common+0xa4>
 8006832:	3601      	adds	r6, #1
 8006834:	e7d9      	b.n	80067ea <_printf_common+0x8e>
	...

08006838 <_printf_i>:
 8006838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800683c:	7e0f      	ldrb	r7, [r1, #24]
 800683e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006840:	2f78      	cmp	r7, #120	@ 0x78
 8006842:	4691      	mov	r9, r2
 8006844:	4680      	mov	r8, r0
 8006846:	460c      	mov	r4, r1
 8006848:	469a      	mov	sl, r3
 800684a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800684e:	d807      	bhi.n	8006860 <_printf_i+0x28>
 8006850:	2f62      	cmp	r7, #98	@ 0x62
 8006852:	d80a      	bhi.n	800686a <_printf_i+0x32>
 8006854:	2f00      	cmp	r7, #0
 8006856:	f000 80d1 	beq.w	80069fc <_printf_i+0x1c4>
 800685a:	2f58      	cmp	r7, #88	@ 0x58
 800685c:	f000 80b8 	beq.w	80069d0 <_printf_i+0x198>
 8006860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006864:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006868:	e03a      	b.n	80068e0 <_printf_i+0xa8>
 800686a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800686e:	2b15      	cmp	r3, #21
 8006870:	d8f6      	bhi.n	8006860 <_printf_i+0x28>
 8006872:	a101      	add	r1, pc, #4	@ (adr r1, 8006878 <_printf_i+0x40>)
 8006874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006878:	080068d1 	.word	0x080068d1
 800687c:	080068e5 	.word	0x080068e5
 8006880:	08006861 	.word	0x08006861
 8006884:	08006861 	.word	0x08006861
 8006888:	08006861 	.word	0x08006861
 800688c:	08006861 	.word	0x08006861
 8006890:	080068e5 	.word	0x080068e5
 8006894:	08006861 	.word	0x08006861
 8006898:	08006861 	.word	0x08006861
 800689c:	08006861 	.word	0x08006861
 80068a0:	08006861 	.word	0x08006861
 80068a4:	080069e3 	.word	0x080069e3
 80068a8:	0800690f 	.word	0x0800690f
 80068ac:	0800699d 	.word	0x0800699d
 80068b0:	08006861 	.word	0x08006861
 80068b4:	08006861 	.word	0x08006861
 80068b8:	08006a05 	.word	0x08006a05
 80068bc:	08006861 	.word	0x08006861
 80068c0:	0800690f 	.word	0x0800690f
 80068c4:	08006861 	.word	0x08006861
 80068c8:	08006861 	.word	0x08006861
 80068cc:	080069a5 	.word	0x080069a5
 80068d0:	6833      	ldr	r3, [r6, #0]
 80068d2:	1d1a      	adds	r2, r3, #4
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6032      	str	r2, [r6, #0]
 80068d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068e0:	2301      	movs	r3, #1
 80068e2:	e09c      	b.n	8006a1e <_printf_i+0x1e6>
 80068e4:	6833      	ldr	r3, [r6, #0]
 80068e6:	6820      	ldr	r0, [r4, #0]
 80068e8:	1d19      	adds	r1, r3, #4
 80068ea:	6031      	str	r1, [r6, #0]
 80068ec:	0606      	lsls	r6, r0, #24
 80068ee:	d501      	bpl.n	80068f4 <_printf_i+0xbc>
 80068f0:	681d      	ldr	r5, [r3, #0]
 80068f2:	e003      	b.n	80068fc <_printf_i+0xc4>
 80068f4:	0645      	lsls	r5, r0, #25
 80068f6:	d5fb      	bpl.n	80068f0 <_printf_i+0xb8>
 80068f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068fc:	2d00      	cmp	r5, #0
 80068fe:	da03      	bge.n	8006908 <_printf_i+0xd0>
 8006900:	232d      	movs	r3, #45	@ 0x2d
 8006902:	426d      	negs	r5, r5
 8006904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006908:	4858      	ldr	r0, [pc, #352]	@ (8006a6c <_printf_i+0x234>)
 800690a:	230a      	movs	r3, #10
 800690c:	e011      	b.n	8006932 <_printf_i+0xfa>
 800690e:	6821      	ldr	r1, [r4, #0]
 8006910:	6833      	ldr	r3, [r6, #0]
 8006912:	0608      	lsls	r0, r1, #24
 8006914:	f853 5b04 	ldr.w	r5, [r3], #4
 8006918:	d402      	bmi.n	8006920 <_printf_i+0xe8>
 800691a:	0649      	lsls	r1, r1, #25
 800691c:	bf48      	it	mi
 800691e:	b2ad      	uxthmi	r5, r5
 8006920:	2f6f      	cmp	r7, #111	@ 0x6f
 8006922:	4852      	ldr	r0, [pc, #328]	@ (8006a6c <_printf_i+0x234>)
 8006924:	6033      	str	r3, [r6, #0]
 8006926:	bf14      	ite	ne
 8006928:	230a      	movne	r3, #10
 800692a:	2308      	moveq	r3, #8
 800692c:	2100      	movs	r1, #0
 800692e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006932:	6866      	ldr	r6, [r4, #4]
 8006934:	60a6      	str	r6, [r4, #8]
 8006936:	2e00      	cmp	r6, #0
 8006938:	db05      	blt.n	8006946 <_printf_i+0x10e>
 800693a:	6821      	ldr	r1, [r4, #0]
 800693c:	432e      	orrs	r6, r5
 800693e:	f021 0104 	bic.w	r1, r1, #4
 8006942:	6021      	str	r1, [r4, #0]
 8006944:	d04b      	beq.n	80069de <_printf_i+0x1a6>
 8006946:	4616      	mov	r6, r2
 8006948:	fbb5 f1f3 	udiv	r1, r5, r3
 800694c:	fb03 5711 	mls	r7, r3, r1, r5
 8006950:	5dc7      	ldrb	r7, [r0, r7]
 8006952:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006956:	462f      	mov	r7, r5
 8006958:	42bb      	cmp	r3, r7
 800695a:	460d      	mov	r5, r1
 800695c:	d9f4      	bls.n	8006948 <_printf_i+0x110>
 800695e:	2b08      	cmp	r3, #8
 8006960:	d10b      	bne.n	800697a <_printf_i+0x142>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	07df      	lsls	r7, r3, #31
 8006966:	d508      	bpl.n	800697a <_printf_i+0x142>
 8006968:	6923      	ldr	r3, [r4, #16]
 800696a:	6861      	ldr	r1, [r4, #4]
 800696c:	4299      	cmp	r1, r3
 800696e:	bfde      	ittt	le
 8006970:	2330      	movle	r3, #48	@ 0x30
 8006972:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006976:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800697a:	1b92      	subs	r2, r2, r6
 800697c:	6122      	str	r2, [r4, #16]
 800697e:	f8cd a000 	str.w	sl, [sp]
 8006982:	464b      	mov	r3, r9
 8006984:	aa03      	add	r2, sp, #12
 8006986:	4621      	mov	r1, r4
 8006988:	4640      	mov	r0, r8
 800698a:	f7ff fee7 	bl	800675c <_printf_common>
 800698e:	3001      	adds	r0, #1
 8006990:	d14a      	bne.n	8006a28 <_printf_i+0x1f0>
 8006992:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006996:	b004      	add	sp, #16
 8006998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	f043 0320 	orr.w	r3, r3, #32
 80069a2:	6023      	str	r3, [r4, #0]
 80069a4:	4832      	ldr	r0, [pc, #200]	@ (8006a70 <_printf_i+0x238>)
 80069a6:	2778      	movs	r7, #120	@ 0x78
 80069a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	6831      	ldr	r1, [r6, #0]
 80069b0:	061f      	lsls	r7, r3, #24
 80069b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80069b6:	d402      	bmi.n	80069be <_printf_i+0x186>
 80069b8:	065f      	lsls	r7, r3, #25
 80069ba:	bf48      	it	mi
 80069bc:	b2ad      	uxthmi	r5, r5
 80069be:	6031      	str	r1, [r6, #0]
 80069c0:	07d9      	lsls	r1, r3, #31
 80069c2:	bf44      	itt	mi
 80069c4:	f043 0320 	orrmi.w	r3, r3, #32
 80069c8:	6023      	strmi	r3, [r4, #0]
 80069ca:	b11d      	cbz	r5, 80069d4 <_printf_i+0x19c>
 80069cc:	2310      	movs	r3, #16
 80069ce:	e7ad      	b.n	800692c <_printf_i+0xf4>
 80069d0:	4826      	ldr	r0, [pc, #152]	@ (8006a6c <_printf_i+0x234>)
 80069d2:	e7e9      	b.n	80069a8 <_printf_i+0x170>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	f023 0320 	bic.w	r3, r3, #32
 80069da:	6023      	str	r3, [r4, #0]
 80069dc:	e7f6      	b.n	80069cc <_printf_i+0x194>
 80069de:	4616      	mov	r6, r2
 80069e0:	e7bd      	b.n	800695e <_printf_i+0x126>
 80069e2:	6833      	ldr	r3, [r6, #0]
 80069e4:	6825      	ldr	r5, [r4, #0]
 80069e6:	6961      	ldr	r1, [r4, #20]
 80069e8:	1d18      	adds	r0, r3, #4
 80069ea:	6030      	str	r0, [r6, #0]
 80069ec:	062e      	lsls	r6, r5, #24
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	d501      	bpl.n	80069f6 <_printf_i+0x1be>
 80069f2:	6019      	str	r1, [r3, #0]
 80069f4:	e002      	b.n	80069fc <_printf_i+0x1c4>
 80069f6:	0668      	lsls	r0, r5, #25
 80069f8:	d5fb      	bpl.n	80069f2 <_printf_i+0x1ba>
 80069fa:	8019      	strh	r1, [r3, #0]
 80069fc:	2300      	movs	r3, #0
 80069fe:	6123      	str	r3, [r4, #16]
 8006a00:	4616      	mov	r6, r2
 8006a02:	e7bc      	b.n	800697e <_printf_i+0x146>
 8006a04:	6833      	ldr	r3, [r6, #0]
 8006a06:	1d1a      	adds	r2, r3, #4
 8006a08:	6032      	str	r2, [r6, #0]
 8006a0a:	681e      	ldr	r6, [r3, #0]
 8006a0c:	6862      	ldr	r2, [r4, #4]
 8006a0e:	2100      	movs	r1, #0
 8006a10:	4630      	mov	r0, r6
 8006a12:	f7f9 fbe5 	bl	80001e0 <memchr>
 8006a16:	b108      	cbz	r0, 8006a1c <_printf_i+0x1e4>
 8006a18:	1b80      	subs	r0, r0, r6
 8006a1a:	6060      	str	r0, [r4, #4]
 8006a1c:	6863      	ldr	r3, [r4, #4]
 8006a1e:	6123      	str	r3, [r4, #16]
 8006a20:	2300      	movs	r3, #0
 8006a22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a26:	e7aa      	b.n	800697e <_printf_i+0x146>
 8006a28:	6923      	ldr	r3, [r4, #16]
 8006a2a:	4632      	mov	r2, r6
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4640      	mov	r0, r8
 8006a30:	47d0      	blx	sl
 8006a32:	3001      	adds	r0, #1
 8006a34:	d0ad      	beq.n	8006992 <_printf_i+0x15a>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	079b      	lsls	r3, r3, #30
 8006a3a:	d413      	bmi.n	8006a64 <_printf_i+0x22c>
 8006a3c:	68e0      	ldr	r0, [r4, #12]
 8006a3e:	9b03      	ldr	r3, [sp, #12]
 8006a40:	4298      	cmp	r0, r3
 8006a42:	bfb8      	it	lt
 8006a44:	4618      	movlt	r0, r3
 8006a46:	e7a6      	b.n	8006996 <_printf_i+0x15e>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	4632      	mov	r2, r6
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	4640      	mov	r0, r8
 8006a50:	47d0      	blx	sl
 8006a52:	3001      	adds	r0, #1
 8006a54:	d09d      	beq.n	8006992 <_printf_i+0x15a>
 8006a56:	3501      	adds	r5, #1
 8006a58:	68e3      	ldr	r3, [r4, #12]
 8006a5a:	9903      	ldr	r1, [sp, #12]
 8006a5c:	1a5b      	subs	r3, r3, r1
 8006a5e:	42ab      	cmp	r3, r5
 8006a60:	dcf2      	bgt.n	8006a48 <_printf_i+0x210>
 8006a62:	e7eb      	b.n	8006a3c <_printf_i+0x204>
 8006a64:	2500      	movs	r5, #0
 8006a66:	f104 0619 	add.w	r6, r4, #25
 8006a6a:	e7f5      	b.n	8006a58 <_printf_i+0x220>
 8006a6c:	08009bfa 	.word	0x08009bfa
 8006a70:	08009c0b 	.word	0x08009c0b

08006a74 <std>:
 8006a74:	2300      	movs	r3, #0
 8006a76:	b510      	push	{r4, lr}
 8006a78:	4604      	mov	r4, r0
 8006a7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a82:	6083      	str	r3, [r0, #8]
 8006a84:	8181      	strh	r1, [r0, #12]
 8006a86:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a88:	81c2      	strh	r2, [r0, #14]
 8006a8a:	6183      	str	r3, [r0, #24]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	2208      	movs	r2, #8
 8006a90:	305c      	adds	r0, #92	@ 0x5c
 8006a92:	f000 f8f4 	bl	8006c7e <memset>
 8006a96:	4b0d      	ldr	r3, [pc, #52]	@ (8006acc <std+0x58>)
 8006a98:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad0 <std+0x5c>)
 8006a9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <std+0x60>)
 8006aa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad8 <std+0x64>)
 8006aa4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8006adc <std+0x68>)
 8006aa8:	6224      	str	r4, [r4, #32]
 8006aaa:	429c      	cmp	r4, r3
 8006aac:	d006      	beq.n	8006abc <std+0x48>
 8006aae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ab2:	4294      	cmp	r4, r2
 8006ab4:	d002      	beq.n	8006abc <std+0x48>
 8006ab6:	33d0      	adds	r3, #208	@ 0xd0
 8006ab8:	429c      	cmp	r4, r3
 8006aba:	d105      	bne.n	8006ac8 <std+0x54>
 8006abc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac4:	f000 b958 	b.w	8006d78 <__retarget_lock_init_recursive>
 8006ac8:	bd10      	pop	{r4, pc}
 8006aca:	bf00      	nop
 8006acc:	08006bf9 	.word	0x08006bf9
 8006ad0:	08006c1b 	.word	0x08006c1b
 8006ad4:	08006c53 	.word	0x08006c53
 8006ad8:	08006c77 	.word	0x08006c77
 8006adc:	20000404 	.word	0x20000404

08006ae0 <stdio_exit_handler>:
 8006ae0:	4a02      	ldr	r2, [pc, #8]	@ (8006aec <stdio_exit_handler+0xc>)
 8006ae2:	4903      	ldr	r1, [pc, #12]	@ (8006af0 <stdio_exit_handler+0x10>)
 8006ae4:	4803      	ldr	r0, [pc, #12]	@ (8006af4 <stdio_exit_handler+0x14>)
 8006ae6:	f000 b869 	b.w	8006bbc <_fwalk_sglue>
 8006aea:	bf00      	nop
 8006aec:	20000038 	.word	0x20000038
 8006af0:	0800842d 	.word	0x0800842d
 8006af4:	20000048 	.word	0x20000048

08006af8 <cleanup_stdio>:
 8006af8:	6841      	ldr	r1, [r0, #4]
 8006afa:	4b0c      	ldr	r3, [pc, #48]	@ (8006b2c <cleanup_stdio+0x34>)
 8006afc:	4299      	cmp	r1, r3
 8006afe:	b510      	push	{r4, lr}
 8006b00:	4604      	mov	r4, r0
 8006b02:	d001      	beq.n	8006b08 <cleanup_stdio+0x10>
 8006b04:	f001 fc92 	bl	800842c <_fflush_r>
 8006b08:	68a1      	ldr	r1, [r4, #8]
 8006b0a:	4b09      	ldr	r3, [pc, #36]	@ (8006b30 <cleanup_stdio+0x38>)
 8006b0c:	4299      	cmp	r1, r3
 8006b0e:	d002      	beq.n	8006b16 <cleanup_stdio+0x1e>
 8006b10:	4620      	mov	r0, r4
 8006b12:	f001 fc8b 	bl	800842c <_fflush_r>
 8006b16:	68e1      	ldr	r1, [r4, #12]
 8006b18:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <cleanup_stdio+0x3c>)
 8006b1a:	4299      	cmp	r1, r3
 8006b1c:	d004      	beq.n	8006b28 <cleanup_stdio+0x30>
 8006b1e:	4620      	mov	r0, r4
 8006b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b24:	f001 bc82 	b.w	800842c <_fflush_r>
 8006b28:	bd10      	pop	{r4, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000404 	.word	0x20000404
 8006b30:	2000046c 	.word	0x2000046c
 8006b34:	200004d4 	.word	0x200004d4

08006b38 <global_stdio_init.part.0>:
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b68 <global_stdio_init.part.0+0x30>)
 8006b3c:	4c0b      	ldr	r4, [pc, #44]	@ (8006b6c <global_stdio_init.part.0+0x34>)
 8006b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8006b70 <global_stdio_init.part.0+0x38>)
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	4620      	mov	r0, r4
 8006b44:	2200      	movs	r2, #0
 8006b46:	2104      	movs	r1, #4
 8006b48:	f7ff ff94 	bl	8006a74 <std>
 8006b4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b50:	2201      	movs	r2, #1
 8006b52:	2109      	movs	r1, #9
 8006b54:	f7ff ff8e 	bl	8006a74 <std>
 8006b58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b62:	2112      	movs	r1, #18
 8006b64:	f7ff bf86 	b.w	8006a74 <std>
 8006b68:	2000053c 	.word	0x2000053c
 8006b6c:	20000404 	.word	0x20000404
 8006b70:	08006ae1 	.word	0x08006ae1

08006b74 <__sfp_lock_acquire>:
 8006b74:	4801      	ldr	r0, [pc, #4]	@ (8006b7c <__sfp_lock_acquire+0x8>)
 8006b76:	f000 b900 	b.w	8006d7a <__retarget_lock_acquire_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	20000545 	.word	0x20000545

08006b80 <__sfp_lock_release>:
 8006b80:	4801      	ldr	r0, [pc, #4]	@ (8006b88 <__sfp_lock_release+0x8>)
 8006b82:	f000 b8fb 	b.w	8006d7c <__retarget_lock_release_recursive>
 8006b86:	bf00      	nop
 8006b88:	20000545 	.word	0x20000545

08006b8c <__sinit>:
 8006b8c:	b510      	push	{r4, lr}
 8006b8e:	4604      	mov	r4, r0
 8006b90:	f7ff fff0 	bl	8006b74 <__sfp_lock_acquire>
 8006b94:	6a23      	ldr	r3, [r4, #32]
 8006b96:	b11b      	cbz	r3, 8006ba0 <__sinit+0x14>
 8006b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b9c:	f7ff bff0 	b.w	8006b80 <__sfp_lock_release>
 8006ba0:	4b04      	ldr	r3, [pc, #16]	@ (8006bb4 <__sinit+0x28>)
 8006ba2:	6223      	str	r3, [r4, #32]
 8006ba4:	4b04      	ldr	r3, [pc, #16]	@ (8006bb8 <__sinit+0x2c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1f5      	bne.n	8006b98 <__sinit+0xc>
 8006bac:	f7ff ffc4 	bl	8006b38 <global_stdio_init.part.0>
 8006bb0:	e7f2      	b.n	8006b98 <__sinit+0xc>
 8006bb2:	bf00      	nop
 8006bb4:	08006af9 	.word	0x08006af9
 8006bb8:	2000053c 	.word	0x2000053c

08006bbc <_fwalk_sglue>:
 8006bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	4688      	mov	r8, r1
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	2600      	movs	r6, #0
 8006bc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bcc:	f1b9 0901 	subs.w	r9, r9, #1
 8006bd0:	d505      	bpl.n	8006bde <_fwalk_sglue+0x22>
 8006bd2:	6824      	ldr	r4, [r4, #0]
 8006bd4:	2c00      	cmp	r4, #0
 8006bd6:	d1f7      	bne.n	8006bc8 <_fwalk_sglue+0xc>
 8006bd8:	4630      	mov	r0, r6
 8006bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d907      	bls.n	8006bf4 <_fwalk_sglue+0x38>
 8006be4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006be8:	3301      	adds	r3, #1
 8006bea:	d003      	beq.n	8006bf4 <_fwalk_sglue+0x38>
 8006bec:	4629      	mov	r1, r5
 8006bee:	4638      	mov	r0, r7
 8006bf0:	47c0      	blx	r8
 8006bf2:	4306      	orrs	r6, r0
 8006bf4:	3568      	adds	r5, #104	@ 0x68
 8006bf6:	e7e9      	b.n	8006bcc <_fwalk_sglue+0x10>

08006bf8 <__sread>:
 8006bf8:	b510      	push	{r4, lr}
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c00:	f000 f86c 	bl	8006cdc <_read_r>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	bfab      	itete	ge
 8006c08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8006c0c:	181b      	addge	r3, r3, r0
 8006c0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c12:	bfac      	ite	ge
 8006c14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c16:	81a3      	strhlt	r3, [r4, #12]
 8006c18:	bd10      	pop	{r4, pc}

08006c1a <__swrite>:
 8006c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1e:	461f      	mov	r7, r3
 8006c20:	898b      	ldrh	r3, [r1, #12]
 8006c22:	05db      	lsls	r3, r3, #23
 8006c24:	4605      	mov	r5, r0
 8006c26:	460c      	mov	r4, r1
 8006c28:	4616      	mov	r6, r2
 8006c2a:	d505      	bpl.n	8006c38 <__swrite+0x1e>
 8006c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c30:	2302      	movs	r3, #2
 8006c32:	2200      	movs	r2, #0
 8006c34:	f000 f840 	bl	8006cb8 <_lseek_r>
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	4632      	mov	r2, r6
 8006c46:	463b      	mov	r3, r7
 8006c48:	4628      	mov	r0, r5
 8006c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c4e:	f000 b857 	b.w	8006d00 <_write_r>

08006c52 <__sseek>:
 8006c52:	b510      	push	{r4, lr}
 8006c54:	460c      	mov	r4, r1
 8006c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c5a:	f000 f82d 	bl	8006cb8 <_lseek_r>
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	bf15      	itete	ne
 8006c64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c6e:	81a3      	strheq	r3, [r4, #12]
 8006c70:	bf18      	it	ne
 8006c72:	81a3      	strhne	r3, [r4, #12]
 8006c74:	bd10      	pop	{r4, pc}

08006c76 <__sclose>:
 8006c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c7a:	f000 b80d 	b.w	8006c98 <_close_r>

08006c7e <memset>:
 8006c7e:	4402      	add	r2, r0
 8006c80:	4603      	mov	r3, r0
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d100      	bne.n	8006c88 <memset+0xa>
 8006c86:	4770      	bx	lr
 8006c88:	f803 1b01 	strb.w	r1, [r3], #1
 8006c8c:	e7f9      	b.n	8006c82 <memset+0x4>
	...

08006c90 <_localeconv_r>:
 8006c90:	4800      	ldr	r0, [pc, #0]	@ (8006c94 <_localeconv_r+0x4>)
 8006c92:	4770      	bx	lr
 8006c94:	20000184 	.word	0x20000184

08006c98 <_close_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4d06      	ldr	r5, [pc, #24]	@ (8006cb4 <_close_r+0x1c>)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	f7fc f9b6 	bl	8003014 <_close>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_close_r+0x1a>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_close_r+0x1a>
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	20000540 	.word	0x20000540

08006cb8 <_lseek_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d07      	ldr	r5, [pc, #28]	@ (8006cd8 <_lseek_r+0x20>)
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	4608      	mov	r0, r1
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	602a      	str	r2, [r5, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f7fc f9cb 	bl	8003062 <_lseek>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_lseek_r+0x1e>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_lseek_r+0x1e>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	20000540 	.word	0x20000540

08006cdc <_read_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4d07      	ldr	r5, [pc, #28]	@ (8006cfc <_read_r+0x20>)
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	4608      	mov	r0, r1
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	602a      	str	r2, [r5, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	f7fc f959 	bl	8002fa2 <_read>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d102      	bne.n	8006cfa <_read_r+0x1e>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	b103      	cbz	r3, 8006cfa <_read_r+0x1e>
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	bd38      	pop	{r3, r4, r5, pc}
 8006cfc:	20000540 	.word	0x20000540

08006d00 <_write_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	4d07      	ldr	r5, [pc, #28]	@ (8006d20 <_write_r+0x20>)
 8006d04:	4604      	mov	r4, r0
 8006d06:	4608      	mov	r0, r1
 8006d08:	4611      	mov	r1, r2
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	602a      	str	r2, [r5, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f7fc f964 	bl	8002fdc <_write>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d102      	bne.n	8006d1e <_write_r+0x1e>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b103      	cbz	r3, 8006d1e <_write_r+0x1e>
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	bd38      	pop	{r3, r4, r5, pc}
 8006d20:	20000540 	.word	0x20000540

08006d24 <__errno>:
 8006d24:	4b01      	ldr	r3, [pc, #4]	@ (8006d2c <__errno+0x8>)
 8006d26:	6818      	ldr	r0, [r3, #0]
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20000044 	.word	0x20000044

08006d30 <__libc_init_array>:
 8006d30:	b570      	push	{r4, r5, r6, lr}
 8006d32:	4d0d      	ldr	r5, [pc, #52]	@ (8006d68 <__libc_init_array+0x38>)
 8006d34:	4c0d      	ldr	r4, [pc, #52]	@ (8006d6c <__libc_init_array+0x3c>)
 8006d36:	1b64      	subs	r4, r4, r5
 8006d38:	10a4      	asrs	r4, r4, #2
 8006d3a:	2600      	movs	r6, #0
 8006d3c:	42a6      	cmp	r6, r4
 8006d3e:	d109      	bne.n	8006d54 <__libc_init_array+0x24>
 8006d40:	4d0b      	ldr	r5, [pc, #44]	@ (8006d70 <__libc_init_array+0x40>)
 8006d42:	4c0c      	ldr	r4, [pc, #48]	@ (8006d74 <__libc_init_array+0x44>)
 8006d44:	f002 ff38 	bl	8009bb8 <_init>
 8006d48:	1b64      	subs	r4, r4, r5
 8006d4a:	10a4      	asrs	r4, r4, #2
 8006d4c:	2600      	movs	r6, #0
 8006d4e:	42a6      	cmp	r6, r4
 8006d50:	d105      	bne.n	8006d5e <__libc_init_array+0x2e>
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d58:	4798      	blx	r3
 8006d5a:	3601      	adds	r6, #1
 8006d5c:	e7ee      	b.n	8006d3c <__libc_init_array+0xc>
 8006d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d62:	4798      	blx	r3
 8006d64:	3601      	adds	r6, #1
 8006d66:	e7f2      	b.n	8006d4e <__libc_init_array+0x1e>
 8006d68:	0800a140 	.word	0x0800a140
 8006d6c:	0800a140 	.word	0x0800a140
 8006d70:	0800a140 	.word	0x0800a140
 8006d74:	0800a144 	.word	0x0800a144

08006d78 <__retarget_lock_init_recursive>:
 8006d78:	4770      	bx	lr

08006d7a <__retarget_lock_acquire_recursive>:
 8006d7a:	4770      	bx	lr

08006d7c <__retarget_lock_release_recursive>:
 8006d7c:	4770      	bx	lr

08006d7e <quorem>:
 8006d7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d82:	6903      	ldr	r3, [r0, #16]
 8006d84:	690c      	ldr	r4, [r1, #16]
 8006d86:	42a3      	cmp	r3, r4
 8006d88:	4607      	mov	r7, r0
 8006d8a:	db7e      	blt.n	8006e8a <quorem+0x10c>
 8006d8c:	3c01      	subs	r4, #1
 8006d8e:	f101 0814 	add.w	r8, r1, #20
 8006d92:	00a3      	lsls	r3, r4, #2
 8006d94:	f100 0514 	add.w	r5, r0, #20
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d9e:	9301      	str	r3, [sp, #4]
 8006da0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006da4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006da8:	3301      	adds	r3, #1
 8006daa:	429a      	cmp	r2, r3
 8006dac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006db0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006db4:	d32e      	bcc.n	8006e14 <quorem+0x96>
 8006db6:	f04f 0a00 	mov.w	sl, #0
 8006dba:	46c4      	mov	ip, r8
 8006dbc:	46ae      	mov	lr, r5
 8006dbe:	46d3      	mov	fp, sl
 8006dc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006dc4:	b298      	uxth	r0, r3
 8006dc6:	fb06 a000 	mla	r0, r6, r0, sl
 8006dca:	0c02      	lsrs	r2, r0, #16
 8006dcc:	0c1b      	lsrs	r3, r3, #16
 8006dce:	fb06 2303 	mla	r3, r6, r3, r2
 8006dd2:	f8de 2000 	ldr.w	r2, [lr]
 8006dd6:	b280      	uxth	r0, r0
 8006dd8:	b292      	uxth	r2, r2
 8006dda:	1a12      	subs	r2, r2, r0
 8006ddc:	445a      	add	r2, fp
 8006dde:	f8de 0000 	ldr.w	r0, [lr]
 8006de2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006dec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006df0:	b292      	uxth	r2, r2
 8006df2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006df6:	45e1      	cmp	r9, ip
 8006df8:	f84e 2b04 	str.w	r2, [lr], #4
 8006dfc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e00:	d2de      	bcs.n	8006dc0 <quorem+0x42>
 8006e02:	9b00      	ldr	r3, [sp, #0]
 8006e04:	58eb      	ldr	r3, [r5, r3]
 8006e06:	b92b      	cbnz	r3, 8006e14 <quorem+0x96>
 8006e08:	9b01      	ldr	r3, [sp, #4]
 8006e0a:	3b04      	subs	r3, #4
 8006e0c:	429d      	cmp	r5, r3
 8006e0e:	461a      	mov	r2, r3
 8006e10:	d32f      	bcc.n	8006e72 <quorem+0xf4>
 8006e12:	613c      	str	r4, [r7, #16]
 8006e14:	4638      	mov	r0, r7
 8006e16:	f001 f97d 	bl	8008114 <__mcmp>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	db25      	blt.n	8006e6a <quorem+0xec>
 8006e1e:	4629      	mov	r1, r5
 8006e20:	2000      	movs	r0, #0
 8006e22:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e26:	f8d1 c000 	ldr.w	ip, [r1]
 8006e2a:	fa1f fe82 	uxth.w	lr, r2
 8006e2e:	fa1f f38c 	uxth.w	r3, ip
 8006e32:	eba3 030e 	sub.w	r3, r3, lr
 8006e36:	4403      	add	r3, r0
 8006e38:	0c12      	lsrs	r2, r2, #16
 8006e3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e48:	45c1      	cmp	r9, r8
 8006e4a:	f841 3b04 	str.w	r3, [r1], #4
 8006e4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e52:	d2e6      	bcs.n	8006e22 <quorem+0xa4>
 8006e54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e5c:	b922      	cbnz	r2, 8006e68 <quorem+0xea>
 8006e5e:	3b04      	subs	r3, #4
 8006e60:	429d      	cmp	r5, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	d30b      	bcc.n	8006e7e <quorem+0x100>
 8006e66:	613c      	str	r4, [r7, #16]
 8006e68:	3601      	adds	r6, #1
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	b003      	add	sp, #12
 8006e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	3b04      	subs	r3, #4
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	d1cb      	bne.n	8006e12 <quorem+0x94>
 8006e7a:	3c01      	subs	r4, #1
 8006e7c:	e7c6      	b.n	8006e0c <quorem+0x8e>
 8006e7e:	6812      	ldr	r2, [r2, #0]
 8006e80:	3b04      	subs	r3, #4
 8006e82:	2a00      	cmp	r2, #0
 8006e84:	d1ef      	bne.n	8006e66 <quorem+0xe8>
 8006e86:	3c01      	subs	r4, #1
 8006e88:	e7ea      	b.n	8006e60 <quorem+0xe2>
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	e7ee      	b.n	8006e6c <quorem+0xee>
	...

08006e90 <_dtoa_r>:
 8006e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e94:	69c7      	ldr	r7, [r0, #28]
 8006e96:	b097      	sub	sp, #92	@ 0x5c
 8006e98:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006e9c:	ec55 4b10 	vmov	r4, r5, d0
 8006ea0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006ea2:	9107      	str	r1, [sp, #28]
 8006ea4:	4681      	mov	r9, r0
 8006ea6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ea8:	9311      	str	r3, [sp, #68]	@ 0x44
 8006eaa:	b97f      	cbnz	r7, 8006ecc <_dtoa_r+0x3c>
 8006eac:	2010      	movs	r0, #16
 8006eae:	f000 fe09 	bl	8007ac4 <malloc>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	f8c9 001c 	str.w	r0, [r9, #28]
 8006eb8:	b920      	cbnz	r0, 8006ec4 <_dtoa_r+0x34>
 8006eba:	4ba9      	ldr	r3, [pc, #676]	@ (8007160 <_dtoa_r+0x2d0>)
 8006ebc:	21ef      	movs	r1, #239	@ 0xef
 8006ebe:	48a9      	ldr	r0, [pc, #676]	@ (8007164 <_dtoa_r+0x2d4>)
 8006ec0:	f001 fafa 	bl	80084b8 <__assert_func>
 8006ec4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ec8:	6007      	str	r7, [r0, #0]
 8006eca:	60c7      	str	r7, [r0, #12]
 8006ecc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ed0:	6819      	ldr	r1, [r3, #0]
 8006ed2:	b159      	cbz	r1, 8006eec <_dtoa_r+0x5c>
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	604a      	str	r2, [r1, #4]
 8006ed8:	2301      	movs	r3, #1
 8006eda:	4093      	lsls	r3, r2
 8006edc:	608b      	str	r3, [r1, #8]
 8006ede:	4648      	mov	r0, r9
 8006ee0:	f000 fee6 	bl	8007cb0 <_Bfree>
 8006ee4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	1e2b      	subs	r3, r5, #0
 8006eee:	bfb9      	ittee	lt
 8006ef0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ef4:	9305      	strlt	r3, [sp, #20]
 8006ef6:	2300      	movge	r3, #0
 8006ef8:	6033      	strge	r3, [r6, #0]
 8006efa:	9f05      	ldr	r7, [sp, #20]
 8006efc:	4b9a      	ldr	r3, [pc, #616]	@ (8007168 <_dtoa_r+0x2d8>)
 8006efe:	bfbc      	itt	lt
 8006f00:	2201      	movlt	r2, #1
 8006f02:	6032      	strlt	r2, [r6, #0]
 8006f04:	43bb      	bics	r3, r7
 8006f06:	d112      	bne.n	8006f2e <_dtoa_r+0x9e>
 8006f08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f14:	4323      	orrs	r3, r4
 8006f16:	f000 855a 	beq.w	80079ce <_dtoa_r+0xb3e>
 8006f1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f1c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800717c <_dtoa_r+0x2ec>
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 855c 	beq.w	80079de <_dtoa_r+0xb4e>
 8006f26:	f10a 0303 	add.w	r3, sl, #3
 8006f2a:	f000 bd56 	b.w	80079da <_dtoa_r+0xb4a>
 8006f2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006f32:	2200      	movs	r2, #0
 8006f34:	ec51 0b17 	vmov	r0, r1, d7
 8006f38:	2300      	movs	r3, #0
 8006f3a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006f3e:	f7f9 fdcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f42:	4680      	mov	r8, r0
 8006f44:	b158      	cbz	r0, 8006f5e <_dtoa_r+0xce>
 8006f46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f48:	2301      	movs	r3, #1
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f4e:	b113      	cbz	r3, 8006f56 <_dtoa_r+0xc6>
 8006f50:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006f52:	4b86      	ldr	r3, [pc, #536]	@ (800716c <_dtoa_r+0x2dc>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007180 <_dtoa_r+0x2f0>
 8006f5a:	f000 bd40 	b.w	80079de <_dtoa_r+0xb4e>
 8006f5e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006f62:	aa14      	add	r2, sp, #80	@ 0x50
 8006f64:	a915      	add	r1, sp, #84	@ 0x54
 8006f66:	4648      	mov	r0, r9
 8006f68:	f001 f984 	bl	8008274 <__d2b>
 8006f6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f70:	9002      	str	r0, [sp, #8]
 8006f72:	2e00      	cmp	r6, #0
 8006f74:	d078      	beq.n	8007068 <_dtoa_r+0x1d8>
 8006f76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f78:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f90:	4619      	mov	r1, r3
 8006f92:	2200      	movs	r2, #0
 8006f94:	4b76      	ldr	r3, [pc, #472]	@ (8007170 <_dtoa_r+0x2e0>)
 8006f96:	f7f9 f97f 	bl	8000298 <__aeabi_dsub>
 8006f9a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007148 <_dtoa_r+0x2b8>)
 8006f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa0:	f7f9 fb32 	bl	8000608 <__aeabi_dmul>
 8006fa4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007150 <_dtoa_r+0x2c0>)
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	f7f9 f977 	bl	800029c <__adddf3>
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	460d      	mov	r5, r1
 8006fb4:	f7f9 fabe 	bl	8000534 <__aeabi_i2d>
 8006fb8:	a367      	add	r3, pc, #412	@ (adr r3, 8007158 <_dtoa_r+0x2c8>)
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	f7f9 fb23 	bl	8000608 <__aeabi_dmul>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	4629      	mov	r1, r5
 8006fca:	f7f9 f967 	bl	800029c <__adddf3>
 8006fce:	4604      	mov	r4, r0
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	f7f9 fdc9 	bl	8000b68 <__aeabi_d2iz>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	4607      	mov	r7, r0
 8006fda:	2300      	movs	r3, #0
 8006fdc:	4620      	mov	r0, r4
 8006fde:	4629      	mov	r1, r5
 8006fe0:	f7f9 fd84 	bl	8000aec <__aeabi_dcmplt>
 8006fe4:	b140      	cbz	r0, 8006ff8 <_dtoa_r+0x168>
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	f7f9 faa4 	bl	8000534 <__aeabi_i2d>
 8006fec:	4622      	mov	r2, r4
 8006fee:	462b      	mov	r3, r5
 8006ff0:	f7f9 fd72 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ff4:	b900      	cbnz	r0, 8006ff8 <_dtoa_r+0x168>
 8006ff6:	3f01      	subs	r7, #1
 8006ff8:	2f16      	cmp	r7, #22
 8006ffa:	d852      	bhi.n	80070a2 <_dtoa_r+0x212>
 8006ffc:	4b5d      	ldr	r3, [pc, #372]	@ (8007174 <_dtoa_r+0x2e4>)
 8006ffe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007006:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800700a:	f7f9 fd6f 	bl	8000aec <__aeabi_dcmplt>
 800700e:	2800      	cmp	r0, #0
 8007010:	d049      	beq.n	80070a6 <_dtoa_r+0x216>
 8007012:	3f01      	subs	r7, #1
 8007014:	2300      	movs	r3, #0
 8007016:	9310      	str	r3, [sp, #64]	@ 0x40
 8007018:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800701a:	1b9b      	subs	r3, r3, r6
 800701c:	1e5a      	subs	r2, r3, #1
 800701e:	bf45      	ittet	mi
 8007020:	f1c3 0301 	rsbmi	r3, r3, #1
 8007024:	9300      	strmi	r3, [sp, #0]
 8007026:	2300      	movpl	r3, #0
 8007028:	2300      	movmi	r3, #0
 800702a:	9206      	str	r2, [sp, #24]
 800702c:	bf54      	ite	pl
 800702e:	9300      	strpl	r3, [sp, #0]
 8007030:	9306      	strmi	r3, [sp, #24]
 8007032:	2f00      	cmp	r7, #0
 8007034:	db39      	blt.n	80070aa <_dtoa_r+0x21a>
 8007036:	9b06      	ldr	r3, [sp, #24]
 8007038:	970d      	str	r7, [sp, #52]	@ 0x34
 800703a:	443b      	add	r3, r7
 800703c:	9306      	str	r3, [sp, #24]
 800703e:	2300      	movs	r3, #0
 8007040:	9308      	str	r3, [sp, #32]
 8007042:	9b07      	ldr	r3, [sp, #28]
 8007044:	2b09      	cmp	r3, #9
 8007046:	d863      	bhi.n	8007110 <_dtoa_r+0x280>
 8007048:	2b05      	cmp	r3, #5
 800704a:	bfc4      	itt	gt
 800704c:	3b04      	subgt	r3, #4
 800704e:	9307      	strgt	r3, [sp, #28]
 8007050:	9b07      	ldr	r3, [sp, #28]
 8007052:	f1a3 0302 	sub.w	r3, r3, #2
 8007056:	bfcc      	ite	gt
 8007058:	2400      	movgt	r4, #0
 800705a:	2401      	movle	r4, #1
 800705c:	2b03      	cmp	r3, #3
 800705e:	d863      	bhi.n	8007128 <_dtoa_r+0x298>
 8007060:	e8df f003 	tbb	[pc, r3]
 8007064:	2b375452 	.word	0x2b375452
 8007068:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800706c:	441e      	add	r6, r3
 800706e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007072:	2b20      	cmp	r3, #32
 8007074:	bfc1      	itttt	gt
 8007076:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800707a:	409f      	lslgt	r7, r3
 800707c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007080:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007084:	bfd6      	itet	le
 8007086:	f1c3 0320 	rsble	r3, r3, #32
 800708a:	ea47 0003 	orrgt.w	r0, r7, r3
 800708e:	fa04 f003 	lslle.w	r0, r4, r3
 8007092:	f7f9 fa3f 	bl	8000514 <__aeabi_ui2d>
 8007096:	2201      	movs	r2, #1
 8007098:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800709c:	3e01      	subs	r6, #1
 800709e:	9212      	str	r2, [sp, #72]	@ 0x48
 80070a0:	e776      	b.n	8006f90 <_dtoa_r+0x100>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e7b7      	b.n	8007016 <_dtoa_r+0x186>
 80070a6:	9010      	str	r0, [sp, #64]	@ 0x40
 80070a8:	e7b6      	b.n	8007018 <_dtoa_r+0x188>
 80070aa:	9b00      	ldr	r3, [sp, #0]
 80070ac:	1bdb      	subs	r3, r3, r7
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	427b      	negs	r3, r7
 80070b2:	9308      	str	r3, [sp, #32]
 80070b4:	2300      	movs	r3, #0
 80070b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80070b8:	e7c3      	b.n	8007042 <_dtoa_r+0x1b2>
 80070ba:	2301      	movs	r3, #1
 80070bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80070be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070c0:	eb07 0b03 	add.w	fp, r7, r3
 80070c4:	f10b 0301 	add.w	r3, fp, #1
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	9303      	str	r3, [sp, #12]
 80070cc:	bfb8      	it	lt
 80070ce:	2301      	movlt	r3, #1
 80070d0:	e006      	b.n	80070e0 <_dtoa_r+0x250>
 80070d2:	2301      	movs	r3, #1
 80070d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070d8:	2b00      	cmp	r3, #0
 80070da:	dd28      	ble.n	800712e <_dtoa_r+0x29e>
 80070dc:	469b      	mov	fp, r3
 80070de:	9303      	str	r3, [sp, #12]
 80070e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80070e4:	2100      	movs	r1, #0
 80070e6:	2204      	movs	r2, #4
 80070e8:	f102 0514 	add.w	r5, r2, #20
 80070ec:	429d      	cmp	r5, r3
 80070ee:	d926      	bls.n	800713e <_dtoa_r+0x2ae>
 80070f0:	6041      	str	r1, [r0, #4]
 80070f2:	4648      	mov	r0, r9
 80070f4:	f000 fd9c 	bl	8007c30 <_Balloc>
 80070f8:	4682      	mov	sl, r0
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d142      	bne.n	8007184 <_dtoa_r+0x2f4>
 80070fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007178 <_dtoa_r+0x2e8>)
 8007100:	4602      	mov	r2, r0
 8007102:	f240 11af 	movw	r1, #431	@ 0x1af
 8007106:	e6da      	b.n	8006ebe <_dtoa_r+0x2e>
 8007108:	2300      	movs	r3, #0
 800710a:	e7e3      	b.n	80070d4 <_dtoa_r+0x244>
 800710c:	2300      	movs	r3, #0
 800710e:	e7d5      	b.n	80070bc <_dtoa_r+0x22c>
 8007110:	2401      	movs	r4, #1
 8007112:	2300      	movs	r3, #0
 8007114:	9307      	str	r3, [sp, #28]
 8007116:	9409      	str	r4, [sp, #36]	@ 0x24
 8007118:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800711c:	2200      	movs	r2, #0
 800711e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007122:	2312      	movs	r3, #18
 8007124:	920c      	str	r2, [sp, #48]	@ 0x30
 8007126:	e7db      	b.n	80070e0 <_dtoa_r+0x250>
 8007128:	2301      	movs	r3, #1
 800712a:	9309      	str	r3, [sp, #36]	@ 0x24
 800712c:	e7f4      	b.n	8007118 <_dtoa_r+0x288>
 800712e:	f04f 0b01 	mov.w	fp, #1
 8007132:	f8cd b00c 	str.w	fp, [sp, #12]
 8007136:	465b      	mov	r3, fp
 8007138:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800713c:	e7d0      	b.n	80070e0 <_dtoa_r+0x250>
 800713e:	3101      	adds	r1, #1
 8007140:	0052      	lsls	r2, r2, #1
 8007142:	e7d1      	b.n	80070e8 <_dtoa_r+0x258>
 8007144:	f3af 8000 	nop.w
 8007148:	636f4361 	.word	0x636f4361
 800714c:	3fd287a7 	.word	0x3fd287a7
 8007150:	8b60c8b3 	.word	0x8b60c8b3
 8007154:	3fc68a28 	.word	0x3fc68a28
 8007158:	509f79fb 	.word	0x509f79fb
 800715c:	3fd34413 	.word	0x3fd34413
 8007160:	08009c29 	.word	0x08009c29
 8007164:	08009c40 	.word	0x08009c40
 8007168:	7ff00000 	.word	0x7ff00000
 800716c:	08009bf9 	.word	0x08009bf9
 8007170:	3ff80000 	.word	0x3ff80000
 8007174:	08009d90 	.word	0x08009d90
 8007178:	08009c98 	.word	0x08009c98
 800717c:	08009c25 	.word	0x08009c25
 8007180:	08009bf8 	.word	0x08009bf8
 8007184:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007188:	6018      	str	r0, [r3, #0]
 800718a:	9b03      	ldr	r3, [sp, #12]
 800718c:	2b0e      	cmp	r3, #14
 800718e:	f200 80a1 	bhi.w	80072d4 <_dtoa_r+0x444>
 8007192:	2c00      	cmp	r4, #0
 8007194:	f000 809e 	beq.w	80072d4 <_dtoa_r+0x444>
 8007198:	2f00      	cmp	r7, #0
 800719a:	dd33      	ble.n	8007204 <_dtoa_r+0x374>
 800719c:	4b9c      	ldr	r3, [pc, #624]	@ (8007410 <_dtoa_r+0x580>)
 800719e:	f007 020f 	and.w	r2, r7, #15
 80071a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071a6:	ed93 7b00 	vldr	d7, [r3]
 80071aa:	05f8      	lsls	r0, r7, #23
 80071ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80071b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80071b4:	d516      	bpl.n	80071e4 <_dtoa_r+0x354>
 80071b6:	4b97      	ldr	r3, [pc, #604]	@ (8007414 <_dtoa_r+0x584>)
 80071b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071c0:	f7f9 fb4c 	bl	800085c <__aeabi_ddiv>
 80071c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071c8:	f004 040f 	and.w	r4, r4, #15
 80071cc:	2603      	movs	r6, #3
 80071ce:	4d91      	ldr	r5, [pc, #580]	@ (8007414 <_dtoa_r+0x584>)
 80071d0:	b954      	cbnz	r4, 80071e8 <_dtoa_r+0x358>
 80071d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071da:	f7f9 fb3f 	bl	800085c <__aeabi_ddiv>
 80071de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071e2:	e028      	b.n	8007236 <_dtoa_r+0x3a6>
 80071e4:	2602      	movs	r6, #2
 80071e6:	e7f2      	b.n	80071ce <_dtoa_r+0x33e>
 80071e8:	07e1      	lsls	r1, r4, #31
 80071ea:	d508      	bpl.n	80071fe <_dtoa_r+0x36e>
 80071ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80071f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071f4:	f7f9 fa08 	bl	8000608 <__aeabi_dmul>
 80071f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80071fc:	3601      	adds	r6, #1
 80071fe:	1064      	asrs	r4, r4, #1
 8007200:	3508      	adds	r5, #8
 8007202:	e7e5      	b.n	80071d0 <_dtoa_r+0x340>
 8007204:	f000 80af 	beq.w	8007366 <_dtoa_r+0x4d6>
 8007208:	427c      	negs	r4, r7
 800720a:	4b81      	ldr	r3, [pc, #516]	@ (8007410 <_dtoa_r+0x580>)
 800720c:	4d81      	ldr	r5, [pc, #516]	@ (8007414 <_dtoa_r+0x584>)
 800720e:	f004 020f 	and.w	r2, r4, #15
 8007212:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800721e:	f7f9 f9f3 	bl	8000608 <__aeabi_dmul>
 8007222:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007226:	1124      	asrs	r4, r4, #4
 8007228:	2300      	movs	r3, #0
 800722a:	2602      	movs	r6, #2
 800722c:	2c00      	cmp	r4, #0
 800722e:	f040 808f 	bne.w	8007350 <_dtoa_r+0x4c0>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1d3      	bne.n	80071de <_dtoa_r+0x34e>
 8007236:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007238:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 8094 	beq.w	800736a <_dtoa_r+0x4da>
 8007242:	4b75      	ldr	r3, [pc, #468]	@ (8007418 <_dtoa_r+0x588>)
 8007244:	2200      	movs	r2, #0
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f9 fc4f 	bl	8000aec <__aeabi_dcmplt>
 800724e:	2800      	cmp	r0, #0
 8007250:	f000 808b 	beq.w	800736a <_dtoa_r+0x4da>
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 8087 	beq.w	800736a <_dtoa_r+0x4da>
 800725c:	f1bb 0f00 	cmp.w	fp, #0
 8007260:	dd34      	ble.n	80072cc <_dtoa_r+0x43c>
 8007262:	4620      	mov	r0, r4
 8007264:	4b6d      	ldr	r3, [pc, #436]	@ (800741c <_dtoa_r+0x58c>)
 8007266:	2200      	movs	r2, #0
 8007268:	4629      	mov	r1, r5
 800726a:	f7f9 f9cd 	bl	8000608 <__aeabi_dmul>
 800726e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007272:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007276:	3601      	adds	r6, #1
 8007278:	465c      	mov	r4, fp
 800727a:	4630      	mov	r0, r6
 800727c:	f7f9 f95a 	bl	8000534 <__aeabi_i2d>
 8007280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007284:	f7f9 f9c0 	bl	8000608 <__aeabi_dmul>
 8007288:	4b65      	ldr	r3, [pc, #404]	@ (8007420 <_dtoa_r+0x590>)
 800728a:	2200      	movs	r2, #0
 800728c:	f7f9 f806 	bl	800029c <__adddf3>
 8007290:	4605      	mov	r5, r0
 8007292:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007296:	2c00      	cmp	r4, #0
 8007298:	d16a      	bne.n	8007370 <_dtoa_r+0x4e0>
 800729a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800729e:	4b61      	ldr	r3, [pc, #388]	@ (8007424 <_dtoa_r+0x594>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	f7f8 fff9 	bl	8000298 <__aeabi_dsub>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072ae:	462a      	mov	r2, r5
 80072b0:	4633      	mov	r3, r6
 80072b2:	f7f9 fc39 	bl	8000b28 <__aeabi_dcmpgt>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	f040 8298 	bne.w	80077ec <_dtoa_r+0x95c>
 80072bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072c0:	462a      	mov	r2, r5
 80072c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80072c6:	f7f9 fc11 	bl	8000aec <__aeabi_dcmplt>
 80072ca:	bb38      	cbnz	r0, 800731c <_dtoa_r+0x48c>
 80072cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80072d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f2c0 8157 	blt.w	800758a <_dtoa_r+0x6fa>
 80072dc:	2f0e      	cmp	r7, #14
 80072de:	f300 8154 	bgt.w	800758a <_dtoa_r+0x6fa>
 80072e2:	4b4b      	ldr	r3, [pc, #300]	@ (8007410 <_dtoa_r+0x580>)
 80072e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072e8:	ed93 7b00 	vldr	d7, [r3]
 80072ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	ed8d 7b00 	vstr	d7, [sp]
 80072f4:	f280 80e5 	bge.w	80074c2 <_dtoa_r+0x632>
 80072f8:	9b03      	ldr	r3, [sp, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f300 80e1 	bgt.w	80074c2 <_dtoa_r+0x632>
 8007300:	d10c      	bne.n	800731c <_dtoa_r+0x48c>
 8007302:	4b48      	ldr	r3, [pc, #288]	@ (8007424 <_dtoa_r+0x594>)
 8007304:	2200      	movs	r2, #0
 8007306:	ec51 0b17 	vmov	r0, r1, d7
 800730a:	f7f9 f97d 	bl	8000608 <__aeabi_dmul>
 800730e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007312:	f7f9 fbff 	bl	8000b14 <__aeabi_dcmpge>
 8007316:	2800      	cmp	r0, #0
 8007318:	f000 8266 	beq.w	80077e8 <_dtoa_r+0x958>
 800731c:	2400      	movs	r4, #0
 800731e:	4625      	mov	r5, r4
 8007320:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007322:	4656      	mov	r6, sl
 8007324:	ea6f 0803 	mvn.w	r8, r3
 8007328:	2700      	movs	r7, #0
 800732a:	4621      	mov	r1, r4
 800732c:	4648      	mov	r0, r9
 800732e:	f000 fcbf 	bl	8007cb0 <_Bfree>
 8007332:	2d00      	cmp	r5, #0
 8007334:	f000 80bd 	beq.w	80074b2 <_dtoa_r+0x622>
 8007338:	b12f      	cbz	r7, 8007346 <_dtoa_r+0x4b6>
 800733a:	42af      	cmp	r7, r5
 800733c:	d003      	beq.n	8007346 <_dtoa_r+0x4b6>
 800733e:	4639      	mov	r1, r7
 8007340:	4648      	mov	r0, r9
 8007342:	f000 fcb5 	bl	8007cb0 <_Bfree>
 8007346:	4629      	mov	r1, r5
 8007348:	4648      	mov	r0, r9
 800734a:	f000 fcb1 	bl	8007cb0 <_Bfree>
 800734e:	e0b0      	b.n	80074b2 <_dtoa_r+0x622>
 8007350:	07e2      	lsls	r2, r4, #31
 8007352:	d505      	bpl.n	8007360 <_dtoa_r+0x4d0>
 8007354:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007358:	f7f9 f956 	bl	8000608 <__aeabi_dmul>
 800735c:	3601      	adds	r6, #1
 800735e:	2301      	movs	r3, #1
 8007360:	1064      	asrs	r4, r4, #1
 8007362:	3508      	adds	r5, #8
 8007364:	e762      	b.n	800722c <_dtoa_r+0x39c>
 8007366:	2602      	movs	r6, #2
 8007368:	e765      	b.n	8007236 <_dtoa_r+0x3a6>
 800736a:	9c03      	ldr	r4, [sp, #12]
 800736c:	46b8      	mov	r8, r7
 800736e:	e784      	b.n	800727a <_dtoa_r+0x3ea>
 8007370:	4b27      	ldr	r3, [pc, #156]	@ (8007410 <_dtoa_r+0x580>)
 8007372:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007374:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007378:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800737c:	4454      	add	r4, sl
 800737e:	2900      	cmp	r1, #0
 8007380:	d054      	beq.n	800742c <_dtoa_r+0x59c>
 8007382:	4929      	ldr	r1, [pc, #164]	@ (8007428 <_dtoa_r+0x598>)
 8007384:	2000      	movs	r0, #0
 8007386:	f7f9 fa69 	bl	800085c <__aeabi_ddiv>
 800738a:	4633      	mov	r3, r6
 800738c:	462a      	mov	r2, r5
 800738e:	f7f8 ff83 	bl	8000298 <__aeabi_dsub>
 8007392:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007396:	4656      	mov	r6, sl
 8007398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800739c:	f7f9 fbe4 	bl	8000b68 <__aeabi_d2iz>
 80073a0:	4605      	mov	r5, r0
 80073a2:	f7f9 f8c7 	bl	8000534 <__aeabi_i2d>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073ae:	f7f8 ff73 	bl	8000298 <__aeabi_dsub>
 80073b2:	3530      	adds	r5, #48	@ 0x30
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073bc:	f806 5b01 	strb.w	r5, [r6], #1
 80073c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80073c4:	f7f9 fb92 	bl	8000aec <__aeabi_dcmplt>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d172      	bne.n	80074b2 <_dtoa_r+0x622>
 80073cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073d0:	4911      	ldr	r1, [pc, #68]	@ (8007418 <_dtoa_r+0x588>)
 80073d2:	2000      	movs	r0, #0
 80073d4:	f7f8 ff60 	bl	8000298 <__aeabi_dsub>
 80073d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80073dc:	f7f9 fb86 	bl	8000aec <__aeabi_dcmplt>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	f040 80b4 	bne.w	800754e <_dtoa_r+0x6be>
 80073e6:	42a6      	cmp	r6, r4
 80073e8:	f43f af70 	beq.w	80072cc <_dtoa_r+0x43c>
 80073ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80073f0:	4b0a      	ldr	r3, [pc, #40]	@ (800741c <_dtoa_r+0x58c>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	f7f9 f908 	bl	8000608 <__aeabi_dmul>
 80073f8:	4b08      	ldr	r3, [pc, #32]	@ (800741c <_dtoa_r+0x58c>)
 80073fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80073fe:	2200      	movs	r2, #0
 8007400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007404:	f7f9 f900 	bl	8000608 <__aeabi_dmul>
 8007408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800740c:	e7c4      	b.n	8007398 <_dtoa_r+0x508>
 800740e:	bf00      	nop
 8007410:	08009d90 	.word	0x08009d90
 8007414:	08009d68 	.word	0x08009d68
 8007418:	3ff00000 	.word	0x3ff00000
 800741c:	40240000 	.word	0x40240000
 8007420:	401c0000 	.word	0x401c0000
 8007424:	40140000 	.word	0x40140000
 8007428:	3fe00000 	.word	0x3fe00000
 800742c:	4631      	mov	r1, r6
 800742e:	4628      	mov	r0, r5
 8007430:	f7f9 f8ea 	bl	8000608 <__aeabi_dmul>
 8007434:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007438:	9413      	str	r4, [sp, #76]	@ 0x4c
 800743a:	4656      	mov	r6, sl
 800743c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007440:	f7f9 fb92 	bl	8000b68 <__aeabi_d2iz>
 8007444:	4605      	mov	r5, r0
 8007446:	f7f9 f875 	bl	8000534 <__aeabi_i2d>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007452:	f7f8 ff21 	bl	8000298 <__aeabi_dsub>
 8007456:	3530      	adds	r5, #48	@ 0x30
 8007458:	f806 5b01 	strb.w	r5, [r6], #1
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	42a6      	cmp	r6, r4
 8007462:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007466:	f04f 0200 	mov.w	r2, #0
 800746a:	d124      	bne.n	80074b6 <_dtoa_r+0x626>
 800746c:	4baf      	ldr	r3, [pc, #700]	@ (800772c <_dtoa_r+0x89c>)
 800746e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007472:	f7f8 ff13 	bl	800029c <__adddf3>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800747e:	f7f9 fb53 	bl	8000b28 <__aeabi_dcmpgt>
 8007482:	2800      	cmp	r0, #0
 8007484:	d163      	bne.n	800754e <_dtoa_r+0x6be>
 8007486:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800748a:	49a8      	ldr	r1, [pc, #672]	@ (800772c <_dtoa_r+0x89c>)
 800748c:	2000      	movs	r0, #0
 800748e:	f7f8 ff03 	bl	8000298 <__aeabi_dsub>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800749a:	f7f9 fb27 	bl	8000aec <__aeabi_dcmplt>
 800749e:	2800      	cmp	r0, #0
 80074a0:	f43f af14 	beq.w	80072cc <_dtoa_r+0x43c>
 80074a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80074a6:	1e73      	subs	r3, r6, #1
 80074a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80074aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074ae:	2b30      	cmp	r3, #48	@ 0x30
 80074b0:	d0f8      	beq.n	80074a4 <_dtoa_r+0x614>
 80074b2:	4647      	mov	r7, r8
 80074b4:	e03b      	b.n	800752e <_dtoa_r+0x69e>
 80074b6:	4b9e      	ldr	r3, [pc, #632]	@ (8007730 <_dtoa_r+0x8a0>)
 80074b8:	f7f9 f8a6 	bl	8000608 <__aeabi_dmul>
 80074bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074c0:	e7bc      	b.n	800743c <_dtoa_r+0x5ac>
 80074c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80074c6:	4656      	mov	r6, sl
 80074c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074cc:	4620      	mov	r0, r4
 80074ce:	4629      	mov	r1, r5
 80074d0:	f7f9 f9c4 	bl	800085c <__aeabi_ddiv>
 80074d4:	f7f9 fb48 	bl	8000b68 <__aeabi_d2iz>
 80074d8:	4680      	mov	r8, r0
 80074da:	f7f9 f82b 	bl	8000534 <__aeabi_i2d>
 80074de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074e2:	f7f9 f891 	bl	8000608 <__aeabi_dmul>
 80074e6:	4602      	mov	r2, r0
 80074e8:	460b      	mov	r3, r1
 80074ea:	4620      	mov	r0, r4
 80074ec:	4629      	mov	r1, r5
 80074ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80074f2:	f7f8 fed1 	bl	8000298 <__aeabi_dsub>
 80074f6:	f806 4b01 	strb.w	r4, [r6], #1
 80074fa:	9d03      	ldr	r5, [sp, #12]
 80074fc:	eba6 040a 	sub.w	r4, r6, sl
 8007500:	42a5      	cmp	r5, r4
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	d133      	bne.n	8007570 <_dtoa_r+0x6e0>
 8007508:	f7f8 fec8 	bl	800029c <__adddf3>
 800750c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007510:	4604      	mov	r4, r0
 8007512:	460d      	mov	r5, r1
 8007514:	f7f9 fb08 	bl	8000b28 <__aeabi_dcmpgt>
 8007518:	b9c0      	cbnz	r0, 800754c <_dtoa_r+0x6bc>
 800751a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800751e:	4620      	mov	r0, r4
 8007520:	4629      	mov	r1, r5
 8007522:	f7f9 fad9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007526:	b110      	cbz	r0, 800752e <_dtoa_r+0x69e>
 8007528:	f018 0f01 	tst.w	r8, #1
 800752c:	d10e      	bne.n	800754c <_dtoa_r+0x6bc>
 800752e:	9902      	ldr	r1, [sp, #8]
 8007530:	4648      	mov	r0, r9
 8007532:	f000 fbbd 	bl	8007cb0 <_Bfree>
 8007536:	2300      	movs	r3, #0
 8007538:	7033      	strb	r3, [r6, #0]
 800753a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800753c:	3701      	adds	r7, #1
 800753e:	601f      	str	r7, [r3, #0]
 8007540:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 824b 	beq.w	80079de <_dtoa_r+0xb4e>
 8007548:	601e      	str	r6, [r3, #0]
 800754a:	e248      	b.n	80079de <_dtoa_r+0xb4e>
 800754c:	46b8      	mov	r8, r7
 800754e:	4633      	mov	r3, r6
 8007550:	461e      	mov	r6, r3
 8007552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007556:	2a39      	cmp	r2, #57	@ 0x39
 8007558:	d106      	bne.n	8007568 <_dtoa_r+0x6d8>
 800755a:	459a      	cmp	sl, r3
 800755c:	d1f8      	bne.n	8007550 <_dtoa_r+0x6c0>
 800755e:	2230      	movs	r2, #48	@ 0x30
 8007560:	f108 0801 	add.w	r8, r8, #1
 8007564:	f88a 2000 	strb.w	r2, [sl]
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	3201      	adds	r2, #1
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e7a0      	b.n	80074b2 <_dtoa_r+0x622>
 8007570:	4b6f      	ldr	r3, [pc, #444]	@ (8007730 <_dtoa_r+0x8a0>)
 8007572:	2200      	movs	r2, #0
 8007574:	f7f9 f848 	bl	8000608 <__aeabi_dmul>
 8007578:	2200      	movs	r2, #0
 800757a:	2300      	movs	r3, #0
 800757c:	4604      	mov	r4, r0
 800757e:	460d      	mov	r5, r1
 8007580:	f7f9 faaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8007584:	2800      	cmp	r0, #0
 8007586:	d09f      	beq.n	80074c8 <_dtoa_r+0x638>
 8007588:	e7d1      	b.n	800752e <_dtoa_r+0x69e>
 800758a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800758c:	2a00      	cmp	r2, #0
 800758e:	f000 80ea 	beq.w	8007766 <_dtoa_r+0x8d6>
 8007592:	9a07      	ldr	r2, [sp, #28]
 8007594:	2a01      	cmp	r2, #1
 8007596:	f300 80cd 	bgt.w	8007734 <_dtoa_r+0x8a4>
 800759a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800759c:	2a00      	cmp	r2, #0
 800759e:	f000 80c1 	beq.w	8007724 <_dtoa_r+0x894>
 80075a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80075a6:	9c08      	ldr	r4, [sp, #32]
 80075a8:	9e00      	ldr	r6, [sp, #0]
 80075aa:	9a00      	ldr	r2, [sp, #0]
 80075ac:	441a      	add	r2, r3
 80075ae:	9200      	str	r2, [sp, #0]
 80075b0:	9a06      	ldr	r2, [sp, #24]
 80075b2:	2101      	movs	r1, #1
 80075b4:	441a      	add	r2, r3
 80075b6:	4648      	mov	r0, r9
 80075b8:	9206      	str	r2, [sp, #24]
 80075ba:	f000 fc2d 	bl	8007e18 <__i2b>
 80075be:	4605      	mov	r5, r0
 80075c0:	b166      	cbz	r6, 80075dc <_dtoa_r+0x74c>
 80075c2:	9b06      	ldr	r3, [sp, #24]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	dd09      	ble.n	80075dc <_dtoa_r+0x74c>
 80075c8:	42b3      	cmp	r3, r6
 80075ca:	9a00      	ldr	r2, [sp, #0]
 80075cc:	bfa8      	it	ge
 80075ce:	4633      	movge	r3, r6
 80075d0:	1ad2      	subs	r2, r2, r3
 80075d2:	9200      	str	r2, [sp, #0]
 80075d4:	9a06      	ldr	r2, [sp, #24]
 80075d6:	1af6      	subs	r6, r6, r3
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	9306      	str	r3, [sp, #24]
 80075dc:	9b08      	ldr	r3, [sp, #32]
 80075de:	b30b      	cbz	r3, 8007624 <_dtoa_r+0x794>
 80075e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 80c6 	beq.w	8007774 <_dtoa_r+0x8e4>
 80075e8:	2c00      	cmp	r4, #0
 80075ea:	f000 80c0 	beq.w	800776e <_dtoa_r+0x8de>
 80075ee:	4629      	mov	r1, r5
 80075f0:	4622      	mov	r2, r4
 80075f2:	4648      	mov	r0, r9
 80075f4:	f000 fcc8 	bl	8007f88 <__pow5mult>
 80075f8:	9a02      	ldr	r2, [sp, #8]
 80075fa:	4601      	mov	r1, r0
 80075fc:	4605      	mov	r5, r0
 80075fe:	4648      	mov	r0, r9
 8007600:	f000 fc20 	bl	8007e44 <__multiply>
 8007604:	9902      	ldr	r1, [sp, #8]
 8007606:	4680      	mov	r8, r0
 8007608:	4648      	mov	r0, r9
 800760a:	f000 fb51 	bl	8007cb0 <_Bfree>
 800760e:	9b08      	ldr	r3, [sp, #32]
 8007610:	1b1b      	subs	r3, r3, r4
 8007612:	9308      	str	r3, [sp, #32]
 8007614:	f000 80b1 	beq.w	800777a <_dtoa_r+0x8ea>
 8007618:	9a08      	ldr	r2, [sp, #32]
 800761a:	4641      	mov	r1, r8
 800761c:	4648      	mov	r0, r9
 800761e:	f000 fcb3 	bl	8007f88 <__pow5mult>
 8007622:	9002      	str	r0, [sp, #8]
 8007624:	2101      	movs	r1, #1
 8007626:	4648      	mov	r0, r9
 8007628:	f000 fbf6 	bl	8007e18 <__i2b>
 800762c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800762e:	4604      	mov	r4, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 81d8 	beq.w	80079e6 <_dtoa_r+0xb56>
 8007636:	461a      	mov	r2, r3
 8007638:	4601      	mov	r1, r0
 800763a:	4648      	mov	r0, r9
 800763c:	f000 fca4 	bl	8007f88 <__pow5mult>
 8007640:	9b07      	ldr	r3, [sp, #28]
 8007642:	2b01      	cmp	r3, #1
 8007644:	4604      	mov	r4, r0
 8007646:	f300 809f 	bgt.w	8007788 <_dtoa_r+0x8f8>
 800764a:	9b04      	ldr	r3, [sp, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f040 8097 	bne.w	8007780 <_dtoa_r+0x8f0>
 8007652:	9b05      	ldr	r3, [sp, #20]
 8007654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007658:	2b00      	cmp	r3, #0
 800765a:	f040 8093 	bne.w	8007784 <_dtoa_r+0x8f4>
 800765e:	9b05      	ldr	r3, [sp, #20]
 8007660:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007664:	0d1b      	lsrs	r3, r3, #20
 8007666:	051b      	lsls	r3, r3, #20
 8007668:	b133      	cbz	r3, 8007678 <_dtoa_r+0x7e8>
 800766a:	9b00      	ldr	r3, [sp, #0]
 800766c:	3301      	adds	r3, #1
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	9b06      	ldr	r3, [sp, #24]
 8007672:	3301      	adds	r3, #1
 8007674:	9306      	str	r3, [sp, #24]
 8007676:	2301      	movs	r3, #1
 8007678:	9308      	str	r3, [sp, #32]
 800767a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 81b8 	beq.w	80079f2 <_dtoa_r+0xb62>
 8007682:	6923      	ldr	r3, [r4, #16]
 8007684:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007688:	6918      	ldr	r0, [r3, #16]
 800768a:	f000 fb79 	bl	8007d80 <__hi0bits>
 800768e:	f1c0 0020 	rsb	r0, r0, #32
 8007692:	9b06      	ldr	r3, [sp, #24]
 8007694:	4418      	add	r0, r3
 8007696:	f010 001f 	ands.w	r0, r0, #31
 800769a:	f000 8082 	beq.w	80077a2 <_dtoa_r+0x912>
 800769e:	f1c0 0320 	rsb	r3, r0, #32
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	dd73      	ble.n	800778e <_dtoa_r+0x8fe>
 80076a6:	9b00      	ldr	r3, [sp, #0]
 80076a8:	f1c0 001c 	rsb	r0, r0, #28
 80076ac:	4403      	add	r3, r0
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	9b06      	ldr	r3, [sp, #24]
 80076b2:	4403      	add	r3, r0
 80076b4:	4406      	add	r6, r0
 80076b6:	9306      	str	r3, [sp, #24]
 80076b8:	9b00      	ldr	r3, [sp, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	dd05      	ble.n	80076ca <_dtoa_r+0x83a>
 80076be:	9902      	ldr	r1, [sp, #8]
 80076c0:	461a      	mov	r2, r3
 80076c2:	4648      	mov	r0, r9
 80076c4:	f000 fcba 	bl	800803c <__lshift>
 80076c8:	9002      	str	r0, [sp, #8]
 80076ca:	9b06      	ldr	r3, [sp, #24]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dd05      	ble.n	80076dc <_dtoa_r+0x84c>
 80076d0:	4621      	mov	r1, r4
 80076d2:	461a      	mov	r2, r3
 80076d4:	4648      	mov	r0, r9
 80076d6:	f000 fcb1 	bl	800803c <__lshift>
 80076da:	4604      	mov	r4, r0
 80076dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d061      	beq.n	80077a6 <_dtoa_r+0x916>
 80076e2:	9802      	ldr	r0, [sp, #8]
 80076e4:	4621      	mov	r1, r4
 80076e6:	f000 fd15 	bl	8008114 <__mcmp>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	da5b      	bge.n	80077a6 <_dtoa_r+0x916>
 80076ee:	2300      	movs	r3, #0
 80076f0:	9902      	ldr	r1, [sp, #8]
 80076f2:	220a      	movs	r2, #10
 80076f4:	4648      	mov	r0, r9
 80076f6:	f000 fafd 	bl	8007cf4 <__multadd>
 80076fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076fc:	9002      	str	r0, [sp, #8]
 80076fe:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 8177 	beq.w	80079f6 <_dtoa_r+0xb66>
 8007708:	4629      	mov	r1, r5
 800770a:	2300      	movs	r3, #0
 800770c:	220a      	movs	r2, #10
 800770e:	4648      	mov	r0, r9
 8007710:	f000 faf0 	bl	8007cf4 <__multadd>
 8007714:	f1bb 0f00 	cmp.w	fp, #0
 8007718:	4605      	mov	r5, r0
 800771a:	dc6f      	bgt.n	80077fc <_dtoa_r+0x96c>
 800771c:	9b07      	ldr	r3, [sp, #28]
 800771e:	2b02      	cmp	r3, #2
 8007720:	dc49      	bgt.n	80077b6 <_dtoa_r+0x926>
 8007722:	e06b      	b.n	80077fc <_dtoa_r+0x96c>
 8007724:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007726:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800772a:	e73c      	b.n	80075a6 <_dtoa_r+0x716>
 800772c:	3fe00000 	.word	0x3fe00000
 8007730:	40240000 	.word	0x40240000
 8007734:	9b03      	ldr	r3, [sp, #12]
 8007736:	1e5c      	subs	r4, r3, #1
 8007738:	9b08      	ldr	r3, [sp, #32]
 800773a:	42a3      	cmp	r3, r4
 800773c:	db09      	blt.n	8007752 <_dtoa_r+0x8c2>
 800773e:	1b1c      	subs	r4, r3, r4
 8007740:	9b03      	ldr	r3, [sp, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	f6bf af30 	bge.w	80075a8 <_dtoa_r+0x718>
 8007748:	9b00      	ldr	r3, [sp, #0]
 800774a:	9a03      	ldr	r2, [sp, #12]
 800774c:	1a9e      	subs	r6, r3, r2
 800774e:	2300      	movs	r3, #0
 8007750:	e72b      	b.n	80075aa <_dtoa_r+0x71a>
 8007752:	9b08      	ldr	r3, [sp, #32]
 8007754:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007756:	9408      	str	r4, [sp, #32]
 8007758:	1ae3      	subs	r3, r4, r3
 800775a:	441a      	add	r2, r3
 800775c:	9e00      	ldr	r6, [sp, #0]
 800775e:	9b03      	ldr	r3, [sp, #12]
 8007760:	920d      	str	r2, [sp, #52]	@ 0x34
 8007762:	2400      	movs	r4, #0
 8007764:	e721      	b.n	80075aa <_dtoa_r+0x71a>
 8007766:	9c08      	ldr	r4, [sp, #32]
 8007768:	9e00      	ldr	r6, [sp, #0]
 800776a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800776c:	e728      	b.n	80075c0 <_dtoa_r+0x730>
 800776e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007772:	e751      	b.n	8007618 <_dtoa_r+0x788>
 8007774:	9a08      	ldr	r2, [sp, #32]
 8007776:	9902      	ldr	r1, [sp, #8]
 8007778:	e750      	b.n	800761c <_dtoa_r+0x78c>
 800777a:	f8cd 8008 	str.w	r8, [sp, #8]
 800777e:	e751      	b.n	8007624 <_dtoa_r+0x794>
 8007780:	2300      	movs	r3, #0
 8007782:	e779      	b.n	8007678 <_dtoa_r+0x7e8>
 8007784:	9b04      	ldr	r3, [sp, #16]
 8007786:	e777      	b.n	8007678 <_dtoa_r+0x7e8>
 8007788:	2300      	movs	r3, #0
 800778a:	9308      	str	r3, [sp, #32]
 800778c:	e779      	b.n	8007682 <_dtoa_r+0x7f2>
 800778e:	d093      	beq.n	80076b8 <_dtoa_r+0x828>
 8007790:	9a00      	ldr	r2, [sp, #0]
 8007792:	331c      	adds	r3, #28
 8007794:	441a      	add	r2, r3
 8007796:	9200      	str	r2, [sp, #0]
 8007798:	9a06      	ldr	r2, [sp, #24]
 800779a:	441a      	add	r2, r3
 800779c:	441e      	add	r6, r3
 800779e:	9206      	str	r2, [sp, #24]
 80077a0:	e78a      	b.n	80076b8 <_dtoa_r+0x828>
 80077a2:	4603      	mov	r3, r0
 80077a4:	e7f4      	b.n	8007790 <_dtoa_r+0x900>
 80077a6:	9b03      	ldr	r3, [sp, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	46b8      	mov	r8, r7
 80077ac:	dc20      	bgt.n	80077f0 <_dtoa_r+0x960>
 80077ae:	469b      	mov	fp, r3
 80077b0:	9b07      	ldr	r3, [sp, #28]
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	dd1e      	ble.n	80077f4 <_dtoa_r+0x964>
 80077b6:	f1bb 0f00 	cmp.w	fp, #0
 80077ba:	f47f adb1 	bne.w	8007320 <_dtoa_r+0x490>
 80077be:	4621      	mov	r1, r4
 80077c0:	465b      	mov	r3, fp
 80077c2:	2205      	movs	r2, #5
 80077c4:	4648      	mov	r0, r9
 80077c6:	f000 fa95 	bl	8007cf4 <__multadd>
 80077ca:	4601      	mov	r1, r0
 80077cc:	4604      	mov	r4, r0
 80077ce:	9802      	ldr	r0, [sp, #8]
 80077d0:	f000 fca0 	bl	8008114 <__mcmp>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	f77f ada3 	ble.w	8007320 <_dtoa_r+0x490>
 80077da:	4656      	mov	r6, sl
 80077dc:	2331      	movs	r3, #49	@ 0x31
 80077de:	f806 3b01 	strb.w	r3, [r6], #1
 80077e2:	f108 0801 	add.w	r8, r8, #1
 80077e6:	e59f      	b.n	8007328 <_dtoa_r+0x498>
 80077e8:	9c03      	ldr	r4, [sp, #12]
 80077ea:	46b8      	mov	r8, r7
 80077ec:	4625      	mov	r5, r4
 80077ee:	e7f4      	b.n	80077da <_dtoa_r+0x94a>
 80077f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80077f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 8101 	beq.w	80079fe <_dtoa_r+0xb6e>
 80077fc:	2e00      	cmp	r6, #0
 80077fe:	dd05      	ble.n	800780c <_dtoa_r+0x97c>
 8007800:	4629      	mov	r1, r5
 8007802:	4632      	mov	r2, r6
 8007804:	4648      	mov	r0, r9
 8007806:	f000 fc19 	bl	800803c <__lshift>
 800780a:	4605      	mov	r5, r0
 800780c:	9b08      	ldr	r3, [sp, #32]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d05c      	beq.n	80078cc <_dtoa_r+0xa3c>
 8007812:	6869      	ldr	r1, [r5, #4]
 8007814:	4648      	mov	r0, r9
 8007816:	f000 fa0b 	bl	8007c30 <_Balloc>
 800781a:	4606      	mov	r6, r0
 800781c:	b928      	cbnz	r0, 800782a <_dtoa_r+0x99a>
 800781e:	4b82      	ldr	r3, [pc, #520]	@ (8007a28 <_dtoa_r+0xb98>)
 8007820:	4602      	mov	r2, r0
 8007822:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007826:	f7ff bb4a 	b.w	8006ebe <_dtoa_r+0x2e>
 800782a:	692a      	ldr	r2, [r5, #16]
 800782c:	3202      	adds	r2, #2
 800782e:	0092      	lsls	r2, r2, #2
 8007830:	f105 010c 	add.w	r1, r5, #12
 8007834:	300c      	adds	r0, #12
 8007836:	f000 fe31 	bl	800849c <memcpy>
 800783a:	2201      	movs	r2, #1
 800783c:	4631      	mov	r1, r6
 800783e:	4648      	mov	r0, r9
 8007840:	f000 fbfc 	bl	800803c <__lshift>
 8007844:	f10a 0301 	add.w	r3, sl, #1
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	eb0a 030b 	add.w	r3, sl, fp
 800784e:	9308      	str	r3, [sp, #32]
 8007850:	9b04      	ldr	r3, [sp, #16]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	462f      	mov	r7, r5
 8007858:	9306      	str	r3, [sp, #24]
 800785a:	4605      	mov	r5, r0
 800785c:	9b00      	ldr	r3, [sp, #0]
 800785e:	9802      	ldr	r0, [sp, #8]
 8007860:	4621      	mov	r1, r4
 8007862:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8007866:	f7ff fa8a 	bl	8006d7e <quorem>
 800786a:	4603      	mov	r3, r0
 800786c:	3330      	adds	r3, #48	@ 0x30
 800786e:	9003      	str	r0, [sp, #12]
 8007870:	4639      	mov	r1, r7
 8007872:	9802      	ldr	r0, [sp, #8]
 8007874:	9309      	str	r3, [sp, #36]	@ 0x24
 8007876:	f000 fc4d 	bl	8008114 <__mcmp>
 800787a:	462a      	mov	r2, r5
 800787c:	9004      	str	r0, [sp, #16]
 800787e:	4621      	mov	r1, r4
 8007880:	4648      	mov	r0, r9
 8007882:	f000 fc63 	bl	800814c <__mdiff>
 8007886:	68c2      	ldr	r2, [r0, #12]
 8007888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800788a:	4606      	mov	r6, r0
 800788c:	bb02      	cbnz	r2, 80078d0 <_dtoa_r+0xa40>
 800788e:	4601      	mov	r1, r0
 8007890:	9802      	ldr	r0, [sp, #8]
 8007892:	f000 fc3f 	bl	8008114 <__mcmp>
 8007896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007898:	4602      	mov	r2, r0
 800789a:	4631      	mov	r1, r6
 800789c:	4648      	mov	r0, r9
 800789e:	920c      	str	r2, [sp, #48]	@ 0x30
 80078a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80078a2:	f000 fa05 	bl	8007cb0 <_Bfree>
 80078a6:	9b07      	ldr	r3, [sp, #28]
 80078a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80078aa:	9e00      	ldr	r6, [sp, #0]
 80078ac:	ea42 0103 	orr.w	r1, r2, r3
 80078b0:	9b06      	ldr	r3, [sp, #24]
 80078b2:	4319      	orrs	r1, r3
 80078b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b6:	d10d      	bne.n	80078d4 <_dtoa_r+0xa44>
 80078b8:	2b39      	cmp	r3, #57	@ 0x39
 80078ba:	d027      	beq.n	800790c <_dtoa_r+0xa7c>
 80078bc:	9a04      	ldr	r2, [sp, #16]
 80078be:	2a00      	cmp	r2, #0
 80078c0:	dd01      	ble.n	80078c6 <_dtoa_r+0xa36>
 80078c2:	9b03      	ldr	r3, [sp, #12]
 80078c4:	3331      	adds	r3, #49	@ 0x31
 80078c6:	f88b 3000 	strb.w	r3, [fp]
 80078ca:	e52e      	b.n	800732a <_dtoa_r+0x49a>
 80078cc:	4628      	mov	r0, r5
 80078ce:	e7b9      	b.n	8007844 <_dtoa_r+0x9b4>
 80078d0:	2201      	movs	r2, #1
 80078d2:	e7e2      	b.n	800789a <_dtoa_r+0xa0a>
 80078d4:	9904      	ldr	r1, [sp, #16]
 80078d6:	2900      	cmp	r1, #0
 80078d8:	db04      	blt.n	80078e4 <_dtoa_r+0xa54>
 80078da:	9807      	ldr	r0, [sp, #28]
 80078dc:	4301      	orrs	r1, r0
 80078de:	9806      	ldr	r0, [sp, #24]
 80078e0:	4301      	orrs	r1, r0
 80078e2:	d120      	bne.n	8007926 <_dtoa_r+0xa96>
 80078e4:	2a00      	cmp	r2, #0
 80078e6:	ddee      	ble.n	80078c6 <_dtoa_r+0xa36>
 80078e8:	9902      	ldr	r1, [sp, #8]
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	2201      	movs	r2, #1
 80078ee:	4648      	mov	r0, r9
 80078f0:	f000 fba4 	bl	800803c <__lshift>
 80078f4:	4621      	mov	r1, r4
 80078f6:	9002      	str	r0, [sp, #8]
 80078f8:	f000 fc0c 	bl	8008114 <__mcmp>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	9b00      	ldr	r3, [sp, #0]
 8007900:	dc02      	bgt.n	8007908 <_dtoa_r+0xa78>
 8007902:	d1e0      	bne.n	80078c6 <_dtoa_r+0xa36>
 8007904:	07da      	lsls	r2, r3, #31
 8007906:	d5de      	bpl.n	80078c6 <_dtoa_r+0xa36>
 8007908:	2b39      	cmp	r3, #57	@ 0x39
 800790a:	d1da      	bne.n	80078c2 <_dtoa_r+0xa32>
 800790c:	2339      	movs	r3, #57	@ 0x39
 800790e:	f88b 3000 	strb.w	r3, [fp]
 8007912:	4633      	mov	r3, r6
 8007914:	461e      	mov	r6, r3
 8007916:	3b01      	subs	r3, #1
 8007918:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800791c:	2a39      	cmp	r2, #57	@ 0x39
 800791e:	d04e      	beq.n	80079be <_dtoa_r+0xb2e>
 8007920:	3201      	adds	r2, #1
 8007922:	701a      	strb	r2, [r3, #0]
 8007924:	e501      	b.n	800732a <_dtoa_r+0x49a>
 8007926:	2a00      	cmp	r2, #0
 8007928:	dd03      	ble.n	8007932 <_dtoa_r+0xaa2>
 800792a:	2b39      	cmp	r3, #57	@ 0x39
 800792c:	d0ee      	beq.n	800790c <_dtoa_r+0xa7c>
 800792e:	3301      	adds	r3, #1
 8007930:	e7c9      	b.n	80078c6 <_dtoa_r+0xa36>
 8007932:	9a00      	ldr	r2, [sp, #0]
 8007934:	9908      	ldr	r1, [sp, #32]
 8007936:	f802 3c01 	strb.w	r3, [r2, #-1]
 800793a:	428a      	cmp	r2, r1
 800793c:	d028      	beq.n	8007990 <_dtoa_r+0xb00>
 800793e:	9902      	ldr	r1, [sp, #8]
 8007940:	2300      	movs	r3, #0
 8007942:	220a      	movs	r2, #10
 8007944:	4648      	mov	r0, r9
 8007946:	f000 f9d5 	bl	8007cf4 <__multadd>
 800794a:	42af      	cmp	r7, r5
 800794c:	9002      	str	r0, [sp, #8]
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	f04f 020a 	mov.w	r2, #10
 8007956:	4639      	mov	r1, r7
 8007958:	4648      	mov	r0, r9
 800795a:	d107      	bne.n	800796c <_dtoa_r+0xadc>
 800795c:	f000 f9ca 	bl	8007cf4 <__multadd>
 8007960:	4607      	mov	r7, r0
 8007962:	4605      	mov	r5, r0
 8007964:	9b00      	ldr	r3, [sp, #0]
 8007966:	3301      	adds	r3, #1
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	e777      	b.n	800785c <_dtoa_r+0x9cc>
 800796c:	f000 f9c2 	bl	8007cf4 <__multadd>
 8007970:	4629      	mov	r1, r5
 8007972:	4607      	mov	r7, r0
 8007974:	2300      	movs	r3, #0
 8007976:	220a      	movs	r2, #10
 8007978:	4648      	mov	r0, r9
 800797a:	f000 f9bb 	bl	8007cf4 <__multadd>
 800797e:	4605      	mov	r5, r0
 8007980:	e7f0      	b.n	8007964 <_dtoa_r+0xad4>
 8007982:	f1bb 0f00 	cmp.w	fp, #0
 8007986:	bfcc      	ite	gt
 8007988:	465e      	movgt	r6, fp
 800798a:	2601      	movle	r6, #1
 800798c:	4456      	add	r6, sl
 800798e:	2700      	movs	r7, #0
 8007990:	9902      	ldr	r1, [sp, #8]
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	2201      	movs	r2, #1
 8007996:	4648      	mov	r0, r9
 8007998:	f000 fb50 	bl	800803c <__lshift>
 800799c:	4621      	mov	r1, r4
 800799e:	9002      	str	r0, [sp, #8]
 80079a0:	f000 fbb8 	bl	8008114 <__mcmp>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	dcb4      	bgt.n	8007912 <_dtoa_r+0xa82>
 80079a8:	d102      	bne.n	80079b0 <_dtoa_r+0xb20>
 80079aa:	9b00      	ldr	r3, [sp, #0]
 80079ac:	07db      	lsls	r3, r3, #31
 80079ae:	d4b0      	bmi.n	8007912 <_dtoa_r+0xa82>
 80079b0:	4633      	mov	r3, r6
 80079b2:	461e      	mov	r6, r3
 80079b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079b8:	2a30      	cmp	r2, #48	@ 0x30
 80079ba:	d0fa      	beq.n	80079b2 <_dtoa_r+0xb22>
 80079bc:	e4b5      	b.n	800732a <_dtoa_r+0x49a>
 80079be:	459a      	cmp	sl, r3
 80079c0:	d1a8      	bne.n	8007914 <_dtoa_r+0xa84>
 80079c2:	2331      	movs	r3, #49	@ 0x31
 80079c4:	f108 0801 	add.w	r8, r8, #1
 80079c8:	f88a 3000 	strb.w	r3, [sl]
 80079cc:	e4ad      	b.n	800732a <_dtoa_r+0x49a>
 80079ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007a2c <_dtoa_r+0xb9c>
 80079d4:	b11b      	cbz	r3, 80079de <_dtoa_r+0xb4e>
 80079d6:	f10a 0308 	add.w	r3, sl, #8
 80079da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	4650      	mov	r0, sl
 80079e0:	b017      	add	sp, #92	@ 0x5c
 80079e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e6:	9b07      	ldr	r3, [sp, #28]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	f77f ae2e 	ble.w	800764a <_dtoa_r+0x7ba>
 80079ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079f0:	9308      	str	r3, [sp, #32]
 80079f2:	2001      	movs	r0, #1
 80079f4:	e64d      	b.n	8007692 <_dtoa_r+0x802>
 80079f6:	f1bb 0f00 	cmp.w	fp, #0
 80079fa:	f77f aed9 	ble.w	80077b0 <_dtoa_r+0x920>
 80079fe:	4656      	mov	r6, sl
 8007a00:	9802      	ldr	r0, [sp, #8]
 8007a02:	4621      	mov	r1, r4
 8007a04:	f7ff f9bb 	bl	8006d7e <quorem>
 8007a08:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007a0c:	f806 3b01 	strb.w	r3, [r6], #1
 8007a10:	eba6 020a 	sub.w	r2, r6, sl
 8007a14:	4593      	cmp	fp, r2
 8007a16:	ddb4      	ble.n	8007982 <_dtoa_r+0xaf2>
 8007a18:	9902      	ldr	r1, [sp, #8]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	220a      	movs	r2, #10
 8007a1e:	4648      	mov	r0, r9
 8007a20:	f000 f968 	bl	8007cf4 <__multadd>
 8007a24:	9002      	str	r0, [sp, #8]
 8007a26:	e7eb      	b.n	8007a00 <_dtoa_r+0xb70>
 8007a28:	08009c98 	.word	0x08009c98
 8007a2c:	08009c1c 	.word	0x08009c1c

08007a30 <_free_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4605      	mov	r5, r0
 8007a34:	2900      	cmp	r1, #0
 8007a36:	d041      	beq.n	8007abc <_free_r+0x8c>
 8007a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a3c:	1f0c      	subs	r4, r1, #4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	bfb8      	it	lt
 8007a42:	18e4      	addlt	r4, r4, r3
 8007a44:	f000 f8e8 	bl	8007c18 <__malloc_lock>
 8007a48:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac0 <_free_r+0x90>)
 8007a4a:	6813      	ldr	r3, [r2, #0]
 8007a4c:	b933      	cbnz	r3, 8007a5c <_free_r+0x2c>
 8007a4e:	6063      	str	r3, [r4, #4]
 8007a50:	6014      	str	r4, [r2, #0]
 8007a52:	4628      	mov	r0, r5
 8007a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a58:	f000 b8e4 	b.w	8007c24 <__malloc_unlock>
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	d908      	bls.n	8007a72 <_free_r+0x42>
 8007a60:	6820      	ldr	r0, [r4, #0]
 8007a62:	1821      	adds	r1, r4, r0
 8007a64:	428b      	cmp	r3, r1
 8007a66:	bf01      	itttt	eq
 8007a68:	6819      	ldreq	r1, [r3, #0]
 8007a6a:	685b      	ldreq	r3, [r3, #4]
 8007a6c:	1809      	addeq	r1, r1, r0
 8007a6e:	6021      	streq	r1, [r4, #0]
 8007a70:	e7ed      	b.n	8007a4e <_free_r+0x1e>
 8007a72:	461a      	mov	r2, r3
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	b10b      	cbz	r3, 8007a7c <_free_r+0x4c>
 8007a78:	42a3      	cmp	r3, r4
 8007a7a:	d9fa      	bls.n	8007a72 <_free_r+0x42>
 8007a7c:	6811      	ldr	r1, [r2, #0]
 8007a7e:	1850      	adds	r0, r2, r1
 8007a80:	42a0      	cmp	r0, r4
 8007a82:	d10b      	bne.n	8007a9c <_free_r+0x6c>
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	4401      	add	r1, r0
 8007a88:	1850      	adds	r0, r2, r1
 8007a8a:	4283      	cmp	r3, r0
 8007a8c:	6011      	str	r1, [r2, #0]
 8007a8e:	d1e0      	bne.n	8007a52 <_free_r+0x22>
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	6053      	str	r3, [r2, #4]
 8007a96:	4408      	add	r0, r1
 8007a98:	6010      	str	r0, [r2, #0]
 8007a9a:	e7da      	b.n	8007a52 <_free_r+0x22>
 8007a9c:	d902      	bls.n	8007aa4 <_free_r+0x74>
 8007a9e:	230c      	movs	r3, #12
 8007aa0:	602b      	str	r3, [r5, #0]
 8007aa2:	e7d6      	b.n	8007a52 <_free_r+0x22>
 8007aa4:	6820      	ldr	r0, [r4, #0]
 8007aa6:	1821      	adds	r1, r4, r0
 8007aa8:	428b      	cmp	r3, r1
 8007aaa:	bf04      	itt	eq
 8007aac:	6819      	ldreq	r1, [r3, #0]
 8007aae:	685b      	ldreq	r3, [r3, #4]
 8007ab0:	6063      	str	r3, [r4, #4]
 8007ab2:	bf04      	itt	eq
 8007ab4:	1809      	addeq	r1, r1, r0
 8007ab6:	6021      	streq	r1, [r4, #0]
 8007ab8:	6054      	str	r4, [r2, #4]
 8007aba:	e7ca      	b.n	8007a52 <_free_r+0x22>
 8007abc:	bd38      	pop	{r3, r4, r5, pc}
 8007abe:	bf00      	nop
 8007ac0:	2000054c 	.word	0x2000054c

08007ac4 <malloc>:
 8007ac4:	4b02      	ldr	r3, [pc, #8]	@ (8007ad0 <malloc+0xc>)
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	f000 b825 	b.w	8007b18 <_malloc_r>
 8007ace:	bf00      	nop
 8007ad0:	20000044 	.word	0x20000044

08007ad4 <sbrk_aligned>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	4e0f      	ldr	r6, [pc, #60]	@ (8007b14 <sbrk_aligned+0x40>)
 8007ad8:	460c      	mov	r4, r1
 8007ada:	6831      	ldr	r1, [r6, #0]
 8007adc:	4605      	mov	r5, r0
 8007ade:	b911      	cbnz	r1, 8007ae6 <sbrk_aligned+0x12>
 8007ae0:	f000 fccc 	bl	800847c <_sbrk_r>
 8007ae4:	6030      	str	r0, [r6, #0]
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f000 fcc7 	bl	800847c <_sbrk_r>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	d103      	bne.n	8007afa <sbrk_aligned+0x26>
 8007af2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007af6:	4620      	mov	r0, r4
 8007af8:	bd70      	pop	{r4, r5, r6, pc}
 8007afa:	1cc4      	adds	r4, r0, #3
 8007afc:	f024 0403 	bic.w	r4, r4, #3
 8007b00:	42a0      	cmp	r0, r4
 8007b02:	d0f8      	beq.n	8007af6 <sbrk_aligned+0x22>
 8007b04:	1a21      	subs	r1, r4, r0
 8007b06:	4628      	mov	r0, r5
 8007b08:	f000 fcb8 	bl	800847c <_sbrk_r>
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d1f2      	bne.n	8007af6 <sbrk_aligned+0x22>
 8007b10:	e7ef      	b.n	8007af2 <sbrk_aligned+0x1e>
 8007b12:	bf00      	nop
 8007b14:	20000548 	.word	0x20000548

08007b18 <_malloc_r>:
 8007b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b1c:	1ccd      	adds	r5, r1, #3
 8007b1e:	f025 0503 	bic.w	r5, r5, #3
 8007b22:	3508      	adds	r5, #8
 8007b24:	2d0c      	cmp	r5, #12
 8007b26:	bf38      	it	cc
 8007b28:	250c      	movcc	r5, #12
 8007b2a:	2d00      	cmp	r5, #0
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	db01      	blt.n	8007b34 <_malloc_r+0x1c>
 8007b30:	42a9      	cmp	r1, r5
 8007b32:	d904      	bls.n	8007b3e <_malloc_r+0x26>
 8007b34:	230c      	movs	r3, #12
 8007b36:	6033      	str	r3, [r6, #0]
 8007b38:	2000      	movs	r0, #0
 8007b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c14 <_malloc_r+0xfc>
 8007b42:	f000 f869 	bl	8007c18 <__malloc_lock>
 8007b46:	f8d8 3000 	ldr.w	r3, [r8]
 8007b4a:	461c      	mov	r4, r3
 8007b4c:	bb44      	cbnz	r4, 8007ba0 <_malloc_r+0x88>
 8007b4e:	4629      	mov	r1, r5
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff ffbf 	bl	8007ad4 <sbrk_aligned>
 8007b56:	1c43      	adds	r3, r0, #1
 8007b58:	4604      	mov	r4, r0
 8007b5a:	d158      	bne.n	8007c0e <_malloc_r+0xf6>
 8007b5c:	f8d8 4000 	ldr.w	r4, [r8]
 8007b60:	4627      	mov	r7, r4
 8007b62:	2f00      	cmp	r7, #0
 8007b64:	d143      	bne.n	8007bee <_malloc_r+0xd6>
 8007b66:	2c00      	cmp	r4, #0
 8007b68:	d04b      	beq.n	8007c02 <_malloc_r+0xea>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	4639      	mov	r1, r7
 8007b6e:	4630      	mov	r0, r6
 8007b70:	eb04 0903 	add.w	r9, r4, r3
 8007b74:	f000 fc82 	bl	800847c <_sbrk_r>
 8007b78:	4581      	cmp	r9, r0
 8007b7a:	d142      	bne.n	8007c02 <_malloc_r+0xea>
 8007b7c:	6821      	ldr	r1, [r4, #0]
 8007b7e:	1a6d      	subs	r5, r5, r1
 8007b80:	4629      	mov	r1, r5
 8007b82:	4630      	mov	r0, r6
 8007b84:	f7ff ffa6 	bl	8007ad4 <sbrk_aligned>
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d03a      	beq.n	8007c02 <_malloc_r+0xea>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	442b      	add	r3, r5
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	f8d8 3000 	ldr.w	r3, [r8]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	bb62      	cbnz	r2, 8007bf4 <_malloc_r+0xdc>
 8007b9a:	f8c8 7000 	str.w	r7, [r8]
 8007b9e:	e00f      	b.n	8007bc0 <_malloc_r+0xa8>
 8007ba0:	6822      	ldr	r2, [r4, #0]
 8007ba2:	1b52      	subs	r2, r2, r5
 8007ba4:	d420      	bmi.n	8007be8 <_malloc_r+0xd0>
 8007ba6:	2a0b      	cmp	r2, #11
 8007ba8:	d917      	bls.n	8007bda <_malloc_r+0xc2>
 8007baa:	1961      	adds	r1, r4, r5
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	6025      	str	r5, [r4, #0]
 8007bb0:	bf18      	it	ne
 8007bb2:	6059      	strne	r1, [r3, #4]
 8007bb4:	6863      	ldr	r3, [r4, #4]
 8007bb6:	bf08      	it	eq
 8007bb8:	f8c8 1000 	streq.w	r1, [r8]
 8007bbc:	5162      	str	r2, [r4, r5]
 8007bbe:	604b      	str	r3, [r1, #4]
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f000 f82f 	bl	8007c24 <__malloc_unlock>
 8007bc6:	f104 000b 	add.w	r0, r4, #11
 8007bca:	1d23      	adds	r3, r4, #4
 8007bcc:	f020 0007 	bic.w	r0, r0, #7
 8007bd0:	1ac2      	subs	r2, r0, r3
 8007bd2:	bf1c      	itt	ne
 8007bd4:	1a1b      	subne	r3, r3, r0
 8007bd6:	50a3      	strne	r3, [r4, r2]
 8007bd8:	e7af      	b.n	8007b3a <_malloc_r+0x22>
 8007bda:	6862      	ldr	r2, [r4, #4]
 8007bdc:	42a3      	cmp	r3, r4
 8007bde:	bf0c      	ite	eq
 8007be0:	f8c8 2000 	streq.w	r2, [r8]
 8007be4:	605a      	strne	r2, [r3, #4]
 8007be6:	e7eb      	b.n	8007bc0 <_malloc_r+0xa8>
 8007be8:	4623      	mov	r3, r4
 8007bea:	6864      	ldr	r4, [r4, #4]
 8007bec:	e7ae      	b.n	8007b4c <_malloc_r+0x34>
 8007bee:	463c      	mov	r4, r7
 8007bf0:	687f      	ldr	r7, [r7, #4]
 8007bf2:	e7b6      	b.n	8007b62 <_malloc_r+0x4a>
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	d1fb      	bne.n	8007bf4 <_malloc_r+0xdc>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	6053      	str	r3, [r2, #4]
 8007c00:	e7de      	b.n	8007bc0 <_malloc_r+0xa8>
 8007c02:	230c      	movs	r3, #12
 8007c04:	6033      	str	r3, [r6, #0]
 8007c06:	4630      	mov	r0, r6
 8007c08:	f000 f80c 	bl	8007c24 <__malloc_unlock>
 8007c0c:	e794      	b.n	8007b38 <_malloc_r+0x20>
 8007c0e:	6005      	str	r5, [r0, #0]
 8007c10:	e7d6      	b.n	8007bc0 <_malloc_r+0xa8>
 8007c12:	bf00      	nop
 8007c14:	2000054c 	.word	0x2000054c

08007c18 <__malloc_lock>:
 8007c18:	4801      	ldr	r0, [pc, #4]	@ (8007c20 <__malloc_lock+0x8>)
 8007c1a:	f7ff b8ae 	b.w	8006d7a <__retarget_lock_acquire_recursive>
 8007c1e:	bf00      	nop
 8007c20:	20000544 	.word	0x20000544

08007c24 <__malloc_unlock>:
 8007c24:	4801      	ldr	r0, [pc, #4]	@ (8007c2c <__malloc_unlock+0x8>)
 8007c26:	f7ff b8a9 	b.w	8006d7c <__retarget_lock_release_recursive>
 8007c2a:	bf00      	nop
 8007c2c:	20000544 	.word	0x20000544

08007c30 <_Balloc>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	69c6      	ldr	r6, [r0, #28]
 8007c34:	4604      	mov	r4, r0
 8007c36:	460d      	mov	r5, r1
 8007c38:	b976      	cbnz	r6, 8007c58 <_Balloc+0x28>
 8007c3a:	2010      	movs	r0, #16
 8007c3c:	f7ff ff42 	bl	8007ac4 <malloc>
 8007c40:	4602      	mov	r2, r0
 8007c42:	61e0      	str	r0, [r4, #28]
 8007c44:	b920      	cbnz	r0, 8007c50 <_Balloc+0x20>
 8007c46:	4b18      	ldr	r3, [pc, #96]	@ (8007ca8 <_Balloc+0x78>)
 8007c48:	4818      	ldr	r0, [pc, #96]	@ (8007cac <_Balloc+0x7c>)
 8007c4a:	216b      	movs	r1, #107	@ 0x6b
 8007c4c:	f000 fc34 	bl	80084b8 <__assert_func>
 8007c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c54:	6006      	str	r6, [r0, #0]
 8007c56:	60c6      	str	r6, [r0, #12]
 8007c58:	69e6      	ldr	r6, [r4, #28]
 8007c5a:	68f3      	ldr	r3, [r6, #12]
 8007c5c:	b183      	cbz	r3, 8007c80 <_Balloc+0x50>
 8007c5e:	69e3      	ldr	r3, [r4, #28]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c66:	b9b8      	cbnz	r0, 8007c98 <_Balloc+0x68>
 8007c68:	2101      	movs	r1, #1
 8007c6a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c6e:	1d72      	adds	r2, r6, #5
 8007c70:	0092      	lsls	r2, r2, #2
 8007c72:	4620      	mov	r0, r4
 8007c74:	f000 fc3e 	bl	80084f4 <_calloc_r>
 8007c78:	b160      	cbz	r0, 8007c94 <_Balloc+0x64>
 8007c7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c7e:	e00e      	b.n	8007c9e <_Balloc+0x6e>
 8007c80:	2221      	movs	r2, #33	@ 0x21
 8007c82:	2104      	movs	r1, #4
 8007c84:	4620      	mov	r0, r4
 8007c86:	f000 fc35 	bl	80084f4 <_calloc_r>
 8007c8a:	69e3      	ldr	r3, [r4, #28]
 8007c8c:	60f0      	str	r0, [r6, #12]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e4      	bne.n	8007c5e <_Balloc+0x2e>
 8007c94:	2000      	movs	r0, #0
 8007c96:	bd70      	pop	{r4, r5, r6, pc}
 8007c98:	6802      	ldr	r2, [r0, #0]
 8007c9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ca4:	e7f7      	b.n	8007c96 <_Balloc+0x66>
 8007ca6:	bf00      	nop
 8007ca8:	08009c29 	.word	0x08009c29
 8007cac:	08009ca9 	.word	0x08009ca9

08007cb0 <_Bfree>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	69c6      	ldr	r6, [r0, #28]
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	b976      	cbnz	r6, 8007cd8 <_Bfree+0x28>
 8007cba:	2010      	movs	r0, #16
 8007cbc:	f7ff ff02 	bl	8007ac4 <malloc>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	61e8      	str	r0, [r5, #28]
 8007cc4:	b920      	cbnz	r0, 8007cd0 <_Bfree+0x20>
 8007cc6:	4b09      	ldr	r3, [pc, #36]	@ (8007cec <_Bfree+0x3c>)
 8007cc8:	4809      	ldr	r0, [pc, #36]	@ (8007cf0 <_Bfree+0x40>)
 8007cca:	218f      	movs	r1, #143	@ 0x8f
 8007ccc:	f000 fbf4 	bl	80084b8 <__assert_func>
 8007cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cd4:	6006      	str	r6, [r0, #0]
 8007cd6:	60c6      	str	r6, [r0, #12]
 8007cd8:	b13c      	cbz	r4, 8007cea <_Bfree+0x3a>
 8007cda:	69eb      	ldr	r3, [r5, #28]
 8007cdc:	6862      	ldr	r2, [r4, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ce4:	6021      	str	r1, [r4, #0]
 8007ce6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	08009c29 	.word	0x08009c29
 8007cf0:	08009ca9 	.word	0x08009ca9

08007cf4 <__multadd>:
 8007cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf8:	690d      	ldr	r5, [r1, #16]
 8007cfa:	4607      	mov	r7, r0
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	461e      	mov	r6, r3
 8007d00:	f101 0c14 	add.w	ip, r1, #20
 8007d04:	2000      	movs	r0, #0
 8007d06:	f8dc 3000 	ldr.w	r3, [ip]
 8007d0a:	b299      	uxth	r1, r3
 8007d0c:	fb02 6101 	mla	r1, r2, r1, r6
 8007d10:	0c1e      	lsrs	r6, r3, #16
 8007d12:	0c0b      	lsrs	r3, r1, #16
 8007d14:	fb02 3306 	mla	r3, r2, r6, r3
 8007d18:	b289      	uxth	r1, r1
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d20:	4285      	cmp	r5, r0
 8007d22:	f84c 1b04 	str.w	r1, [ip], #4
 8007d26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d2a:	dcec      	bgt.n	8007d06 <__multadd+0x12>
 8007d2c:	b30e      	cbz	r6, 8007d72 <__multadd+0x7e>
 8007d2e:	68a3      	ldr	r3, [r4, #8]
 8007d30:	42ab      	cmp	r3, r5
 8007d32:	dc19      	bgt.n	8007d68 <__multadd+0x74>
 8007d34:	6861      	ldr	r1, [r4, #4]
 8007d36:	4638      	mov	r0, r7
 8007d38:	3101      	adds	r1, #1
 8007d3a:	f7ff ff79 	bl	8007c30 <_Balloc>
 8007d3e:	4680      	mov	r8, r0
 8007d40:	b928      	cbnz	r0, 8007d4e <__multadd+0x5a>
 8007d42:	4602      	mov	r2, r0
 8007d44:	4b0c      	ldr	r3, [pc, #48]	@ (8007d78 <__multadd+0x84>)
 8007d46:	480d      	ldr	r0, [pc, #52]	@ (8007d7c <__multadd+0x88>)
 8007d48:	21ba      	movs	r1, #186	@ 0xba
 8007d4a:	f000 fbb5 	bl	80084b8 <__assert_func>
 8007d4e:	6922      	ldr	r2, [r4, #16]
 8007d50:	3202      	adds	r2, #2
 8007d52:	f104 010c 	add.w	r1, r4, #12
 8007d56:	0092      	lsls	r2, r2, #2
 8007d58:	300c      	adds	r0, #12
 8007d5a:	f000 fb9f 	bl	800849c <memcpy>
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4638      	mov	r0, r7
 8007d62:	f7ff ffa5 	bl	8007cb0 <_Bfree>
 8007d66:	4644      	mov	r4, r8
 8007d68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d6c:	3501      	adds	r5, #1
 8007d6e:	615e      	str	r6, [r3, #20]
 8007d70:	6125      	str	r5, [r4, #16]
 8007d72:	4620      	mov	r0, r4
 8007d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d78:	08009c98 	.word	0x08009c98
 8007d7c:	08009ca9 	.word	0x08009ca9

08007d80 <__hi0bits>:
 8007d80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d84:	4603      	mov	r3, r0
 8007d86:	bf36      	itet	cc
 8007d88:	0403      	lslcc	r3, r0, #16
 8007d8a:	2000      	movcs	r0, #0
 8007d8c:	2010      	movcc	r0, #16
 8007d8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d92:	bf3c      	itt	cc
 8007d94:	021b      	lslcc	r3, r3, #8
 8007d96:	3008      	addcc	r0, #8
 8007d98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d9c:	bf3c      	itt	cc
 8007d9e:	011b      	lslcc	r3, r3, #4
 8007da0:	3004      	addcc	r0, #4
 8007da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007da6:	bf3c      	itt	cc
 8007da8:	009b      	lslcc	r3, r3, #2
 8007daa:	3002      	addcc	r0, #2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	db05      	blt.n	8007dbc <__hi0bits+0x3c>
 8007db0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007db4:	f100 0001 	add.w	r0, r0, #1
 8007db8:	bf08      	it	eq
 8007dba:	2020      	moveq	r0, #32
 8007dbc:	4770      	bx	lr

08007dbe <__lo0bits>:
 8007dbe:	6803      	ldr	r3, [r0, #0]
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	f013 0007 	ands.w	r0, r3, #7
 8007dc6:	d00b      	beq.n	8007de0 <__lo0bits+0x22>
 8007dc8:	07d9      	lsls	r1, r3, #31
 8007dca:	d421      	bmi.n	8007e10 <__lo0bits+0x52>
 8007dcc:	0798      	lsls	r0, r3, #30
 8007dce:	bf49      	itett	mi
 8007dd0:	085b      	lsrmi	r3, r3, #1
 8007dd2:	089b      	lsrpl	r3, r3, #2
 8007dd4:	2001      	movmi	r0, #1
 8007dd6:	6013      	strmi	r3, [r2, #0]
 8007dd8:	bf5c      	itt	pl
 8007dda:	6013      	strpl	r3, [r2, #0]
 8007ddc:	2002      	movpl	r0, #2
 8007dde:	4770      	bx	lr
 8007de0:	b299      	uxth	r1, r3
 8007de2:	b909      	cbnz	r1, 8007de8 <__lo0bits+0x2a>
 8007de4:	0c1b      	lsrs	r3, r3, #16
 8007de6:	2010      	movs	r0, #16
 8007de8:	b2d9      	uxtb	r1, r3
 8007dea:	b909      	cbnz	r1, 8007df0 <__lo0bits+0x32>
 8007dec:	3008      	adds	r0, #8
 8007dee:	0a1b      	lsrs	r3, r3, #8
 8007df0:	0719      	lsls	r1, r3, #28
 8007df2:	bf04      	itt	eq
 8007df4:	091b      	lsreq	r3, r3, #4
 8007df6:	3004      	addeq	r0, #4
 8007df8:	0799      	lsls	r1, r3, #30
 8007dfa:	bf04      	itt	eq
 8007dfc:	089b      	lsreq	r3, r3, #2
 8007dfe:	3002      	addeq	r0, #2
 8007e00:	07d9      	lsls	r1, r3, #31
 8007e02:	d403      	bmi.n	8007e0c <__lo0bits+0x4e>
 8007e04:	085b      	lsrs	r3, r3, #1
 8007e06:	f100 0001 	add.w	r0, r0, #1
 8007e0a:	d003      	beq.n	8007e14 <__lo0bits+0x56>
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	4770      	bx	lr
 8007e10:	2000      	movs	r0, #0
 8007e12:	4770      	bx	lr
 8007e14:	2020      	movs	r0, #32
 8007e16:	4770      	bx	lr

08007e18 <__i2b>:
 8007e18:	b510      	push	{r4, lr}
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	f7ff ff07 	bl	8007c30 <_Balloc>
 8007e22:	4602      	mov	r2, r0
 8007e24:	b928      	cbnz	r0, 8007e32 <__i2b+0x1a>
 8007e26:	4b05      	ldr	r3, [pc, #20]	@ (8007e3c <__i2b+0x24>)
 8007e28:	4805      	ldr	r0, [pc, #20]	@ (8007e40 <__i2b+0x28>)
 8007e2a:	f240 1145 	movw	r1, #325	@ 0x145
 8007e2e:	f000 fb43 	bl	80084b8 <__assert_func>
 8007e32:	2301      	movs	r3, #1
 8007e34:	6144      	str	r4, [r0, #20]
 8007e36:	6103      	str	r3, [r0, #16]
 8007e38:	bd10      	pop	{r4, pc}
 8007e3a:	bf00      	nop
 8007e3c:	08009c98 	.word	0x08009c98
 8007e40:	08009ca9 	.word	0x08009ca9

08007e44 <__multiply>:
 8007e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e48:	4617      	mov	r7, r2
 8007e4a:	690a      	ldr	r2, [r1, #16]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	bfa8      	it	ge
 8007e52:	463b      	movge	r3, r7
 8007e54:	4689      	mov	r9, r1
 8007e56:	bfa4      	itt	ge
 8007e58:	460f      	movge	r7, r1
 8007e5a:	4699      	movge	r9, r3
 8007e5c:	693d      	ldr	r5, [r7, #16]
 8007e5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	6879      	ldr	r1, [r7, #4]
 8007e66:	eb05 060a 	add.w	r6, r5, sl
 8007e6a:	42b3      	cmp	r3, r6
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	bfb8      	it	lt
 8007e70:	3101      	addlt	r1, #1
 8007e72:	f7ff fedd 	bl	8007c30 <_Balloc>
 8007e76:	b930      	cbnz	r0, 8007e86 <__multiply+0x42>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	4b41      	ldr	r3, [pc, #260]	@ (8007f80 <__multiply+0x13c>)
 8007e7c:	4841      	ldr	r0, [pc, #260]	@ (8007f84 <__multiply+0x140>)
 8007e7e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e82:	f000 fb19 	bl	80084b8 <__assert_func>
 8007e86:	f100 0414 	add.w	r4, r0, #20
 8007e8a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007e8e:	4623      	mov	r3, r4
 8007e90:	2200      	movs	r2, #0
 8007e92:	4573      	cmp	r3, lr
 8007e94:	d320      	bcc.n	8007ed8 <__multiply+0x94>
 8007e96:	f107 0814 	add.w	r8, r7, #20
 8007e9a:	f109 0114 	add.w	r1, r9, #20
 8007e9e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007ea2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007ea6:	9302      	str	r3, [sp, #8]
 8007ea8:	1beb      	subs	r3, r5, r7
 8007eaa:	3b15      	subs	r3, #21
 8007eac:	f023 0303 	bic.w	r3, r3, #3
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	3715      	adds	r7, #21
 8007eb4:	42bd      	cmp	r5, r7
 8007eb6:	bf38      	it	cc
 8007eb8:	2304      	movcc	r3, #4
 8007eba:	9301      	str	r3, [sp, #4]
 8007ebc:	9b02      	ldr	r3, [sp, #8]
 8007ebe:	9103      	str	r1, [sp, #12]
 8007ec0:	428b      	cmp	r3, r1
 8007ec2:	d80c      	bhi.n	8007ede <__multiply+0x9a>
 8007ec4:	2e00      	cmp	r6, #0
 8007ec6:	dd03      	ble.n	8007ed0 <__multiply+0x8c>
 8007ec8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d055      	beq.n	8007f7c <__multiply+0x138>
 8007ed0:	6106      	str	r6, [r0, #16]
 8007ed2:	b005      	add	sp, #20
 8007ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed8:	f843 2b04 	str.w	r2, [r3], #4
 8007edc:	e7d9      	b.n	8007e92 <__multiply+0x4e>
 8007ede:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ee2:	f1ba 0f00 	cmp.w	sl, #0
 8007ee6:	d01f      	beq.n	8007f28 <__multiply+0xe4>
 8007ee8:	46c4      	mov	ip, r8
 8007eea:	46a1      	mov	r9, r4
 8007eec:	2700      	movs	r7, #0
 8007eee:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ef2:	f8d9 3000 	ldr.w	r3, [r9]
 8007ef6:	fa1f fb82 	uxth.w	fp, r2
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f00:	443b      	add	r3, r7
 8007f02:	f8d9 7000 	ldr.w	r7, [r9]
 8007f06:	0c12      	lsrs	r2, r2, #16
 8007f08:	0c3f      	lsrs	r7, r7, #16
 8007f0a:	fb0a 7202 	mla	r2, sl, r2, r7
 8007f0e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f18:	4565      	cmp	r5, ip
 8007f1a:	f849 3b04 	str.w	r3, [r9], #4
 8007f1e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007f22:	d8e4      	bhi.n	8007eee <__multiply+0xaa>
 8007f24:	9b01      	ldr	r3, [sp, #4]
 8007f26:	50e7      	str	r7, [r4, r3]
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f2e:	3104      	adds	r1, #4
 8007f30:	f1b9 0f00 	cmp.w	r9, #0
 8007f34:	d020      	beq.n	8007f78 <__multiply+0x134>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	4647      	mov	r7, r8
 8007f3a:	46a4      	mov	ip, r4
 8007f3c:	f04f 0a00 	mov.w	sl, #0
 8007f40:	f8b7 b000 	ldrh.w	fp, [r7]
 8007f44:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007f48:	fb09 220b 	mla	r2, r9, fp, r2
 8007f4c:	4452      	add	r2, sl
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f54:	f84c 3b04 	str.w	r3, [ip], #4
 8007f58:	f857 3b04 	ldr.w	r3, [r7], #4
 8007f5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f60:	f8bc 3000 	ldrh.w	r3, [ip]
 8007f64:	fb09 330a 	mla	r3, r9, sl, r3
 8007f68:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007f6c:	42bd      	cmp	r5, r7
 8007f6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f72:	d8e5      	bhi.n	8007f40 <__multiply+0xfc>
 8007f74:	9a01      	ldr	r2, [sp, #4]
 8007f76:	50a3      	str	r3, [r4, r2]
 8007f78:	3404      	adds	r4, #4
 8007f7a:	e79f      	b.n	8007ebc <__multiply+0x78>
 8007f7c:	3e01      	subs	r6, #1
 8007f7e:	e7a1      	b.n	8007ec4 <__multiply+0x80>
 8007f80:	08009c98 	.word	0x08009c98
 8007f84:	08009ca9 	.word	0x08009ca9

08007f88 <__pow5mult>:
 8007f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f8c:	4615      	mov	r5, r2
 8007f8e:	f012 0203 	ands.w	r2, r2, #3
 8007f92:	4607      	mov	r7, r0
 8007f94:	460e      	mov	r6, r1
 8007f96:	d007      	beq.n	8007fa8 <__pow5mult+0x20>
 8007f98:	4c25      	ldr	r4, [pc, #148]	@ (8008030 <__pow5mult+0xa8>)
 8007f9a:	3a01      	subs	r2, #1
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fa2:	f7ff fea7 	bl	8007cf4 <__multadd>
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	10ad      	asrs	r5, r5, #2
 8007faa:	d03d      	beq.n	8008028 <__pow5mult+0xa0>
 8007fac:	69fc      	ldr	r4, [r7, #28]
 8007fae:	b97c      	cbnz	r4, 8007fd0 <__pow5mult+0x48>
 8007fb0:	2010      	movs	r0, #16
 8007fb2:	f7ff fd87 	bl	8007ac4 <malloc>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	61f8      	str	r0, [r7, #28]
 8007fba:	b928      	cbnz	r0, 8007fc8 <__pow5mult+0x40>
 8007fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8008034 <__pow5mult+0xac>)
 8007fbe:	481e      	ldr	r0, [pc, #120]	@ (8008038 <__pow5mult+0xb0>)
 8007fc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007fc4:	f000 fa78 	bl	80084b8 <__assert_func>
 8007fc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fcc:	6004      	str	r4, [r0, #0]
 8007fce:	60c4      	str	r4, [r0, #12]
 8007fd0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007fd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fd8:	b94c      	cbnz	r4, 8007fee <__pow5mult+0x66>
 8007fda:	f240 2171 	movw	r1, #625	@ 0x271
 8007fde:	4638      	mov	r0, r7
 8007fe0:	f7ff ff1a 	bl	8007e18 <__i2b>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fea:	4604      	mov	r4, r0
 8007fec:	6003      	str	r3, [r0, #0]
 8007fee:	f04f 0900 	mov.w	r9, #0
 8007ff2:	07eb      	lsls	r3, r5, #31
 8007ff4:	d50a      	bpl.n	800800c <__pow5mult+0x84>
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	4622      	mov	r2, r4
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	f7ff ff22 	bl	8007e44 <__multiply>
 8008000:	4631      	mov	r1, r6
 8008002:	4680      	mov	r8, r0
 8008004:	4638      	mov	r0, r7
 8008006:	f7ff fe53 	bl	8007cb0 <_Bfree>
 800800a:	4646      	mov	r6, r8
 800800c:	106d      	asrs	r5, r5, #1
 800800e:	d00b      	beq.n	8008028 <__pow5mult+0xa0>
 8008010:	6820      	ldr	r0, [r4, #0]
 8008012:	b938      	cbnz	r0, 8008024 <__pow5mult+0x9c>
 8008014:	4622      	mov	r2, r4
 8008016:	4621      	mov	r1, r4
 8008018:	4638      	mov	r0, r7
 800801a:	f7ff ff13 	bl	8007e44 <__multiply>
 800801e:	6020      	str	r0, [r4, #0]
 8008020:	f8c0 9000 	str.w	r9, [r0]
 8008024:	4604      	mov	r4, r0
 8008026:	e7e4      	b.n	8007ff2 <__pow5mult+0x6a>
 8008028:	4630      	mov	r0, r6
 800802a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802e:	bf00      	nop
 8008030:	08009d5c 	.word	0x08009d5c
 8008034:	08009c29 	.word	0x08009c29
 8008038:	08009ca9 	.word	0x08009ca9

0800803c <__lshift>:
 800803c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008040:	460c      	mov	r4, r1
 8008042:	6849      	ldr	r1, [r1, #4]
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800804a:	68a3      	ldr	r3, [r4, #8]
 800804c:	4607      	mov	r7, r0
 800804e:	4691      	mov	r9, r2
 8008050:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008054:	f108 0601 	add.w	r6, r8, #1
 8008058:	42b3      	cmp	r3, r6
 800805a:	db0b      	blt.n	8008074 <__lshift+0x38>
 800805c:	4638      	mov	r0, r7
 800805e:	f7ff fde7 	bl	8007c30 <_Balloc>
 8008062:	4605      	mov	r5, r0
 8008064:	b948      	cbnz	r0, 800807a <__lshift+0x3e>
 8008066:	4602      	mov	r2, r0
 8008068:	4b28      	ldr	r3, [pc, #160]	@ (800810c <__lshift+0xd0>)
 800806a:	4829      	ldr	r0, [pc, #164]	@ (8008110 <__lshift+0xd4>)
 800806c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008070:	f000 fa22 	bl	80084b8 <__assert_func>
 8008074:	3101      	adds	r1, #1
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	e7ee      	b.n	8008058 <__lshift+0x1c>
 800807a:	2300      	movs	r3, #0
 800807c:	f100 0114 	add.w	r1, r0, #20
 8008080:	f100 0210 	add.w	r2, r0, #16
 8008084:	4618      	mov	r0, r3
 8008086:	4553      	cmp	r3, sl
 8008088:	db33      	blt.n	80080f2 <__lshift+0xb6>
 800808a:	6920      	ldr	r0, [r4, #16]
 800808c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008090:	f104 0314 	add.w	r3, r4, #20
 8008094:	f019 091f 	ands.w	r9, r9, #31
 8008098:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800809c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080a0:	d02b      	beq.n	80080fa <__lshift+0xbe>
 80080a2:	f1c9 0e20 	rsb	lr, r9, #32
 80080a6:	468a      	mov	sl, r1
 80080a8:	2200      	movs	r2, #0
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	fa00 f009 	lsl.w	r0, r0, r9
 80080b0:	4310      	orrs	r0, r2
 80080b2:	f84a 0b04 	str.w	r0, [sl], #4
 80080b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ba:	459c      	cmp	ip, r3
 80080bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80080c0:	d8f3      	bhi.n	80080aa <__lshift+0x6e>
 80080c2:	ebac 0304 	sub.w	r3, ip, r4
 80080c6:	3b15      	subs	r3, #21
 80080c8:	f023 0303 	bic.w	r3, r3, #3
 80080cc:	3304      	adds	r3, #4
 80080ce:	f104 0015 	add.w	r0, r4, #21
 80080d2:	4560      	cmp	r0, ip
 80080d4:	bf88      	it	hi
 80080d6:	2304      	movhi	r3, #4
 80080d8:	50ca      	str	r2, [r1, r3]
 80080da:	b10a      	cbz	r2, 80080e0 <__lshift+0xa4>
 80080dc:	f108 0602 	add.w	r6, r8, #2
 80080e0:	3e01      	subs	r6, #1
 80080e2:	4638      	mov	r0, r7
 80080e4:	612e      	str	r6, [r5, #16]
 80080e6:	4621      	mov	r1, r4
 80080e8:	f7ff fde2 	bl	8007cb0 <_Bfree>
 80080ec:	4628      	mov	r0, r5
 80080ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80080f6:	3301      	adds	r3, #1
 80080f8:	e7c5      	b.n	8008086 <__lshift+0x4a>
 80080fa:	3904      	subs	r1, #4
 80080fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008100:	f841 2f04 	str.w	r2, [r1, #4]!
 8008104:	459c      	cmp	ip, r3
 8008106:	d8f9      	bhi.n	80080fc <__lshift+0xc0>
 8008108:	e7ea      	b.n	80080e0 <__lshift+0xa4>
 800810a:	bf00      	nop
 800810c:	08009c98 	.word	0x08009c98
 8008110:	08009ca9 	.word	0x08009ca9

08008114 <__mcmp>:
 8008114:	690a      	ldr	r2, [r1, #16]
 8008116:	4603      	mov	r3, r0
 8008118:	6900      	ldr	r0, [r0, #16]
 800811a:	1a80      	subs	r0, r0, r2
 800811c:	b530      	push	{r4, r5, lr}
 800811e:	d10e      	bne.n	800813e <__mcmp+0x2a>
 8008120:	3314      	adds	r3, #20
 8008122:	3114      	adds	r1, #20
 8008124:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008128:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800812c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008130:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008134:	4295      	cmp	r5, r2
 8008136:	d003      	beq.n	8008140 <__mcmp+0x2c>
 8008138:	d205      	bcs.n	8008146 <__mcmp+0x32>
 800813a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800813e:	bd30      	pop	{r4, r5, pc}
 8008140:	42a3      	cmp	r3, r4
 8008142:	d3f3      	bcc.n	800812c <__mcmp+0x18>
 8008144:	e7fb      	b.n	800813e <__mcmp+0x2a>
 8008146:	2001      	movs	r0, #1
 8008148:	e7f9      	b.n	800813e <__mcmp+0x2a>
	...

0800814c <__mdiff>:
 800814c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	4689      	mov	r9, r1
 8008152:	4606      	mov	r6, r0
 8008154:	4611      	mov	r1, r2
 8008156:	4648      	mov	r0, r9
 8008158:	4614      	mov	r4, r2
 800815a:	f7ff ffdb 	bl	8008114 <__mcmp>
 800815e:	1e05      	subs	r5, r0, #0
 8008160:	d112      	bne.n	8008188 <__mdiff+0x3c>
 8008162:	4629      	mov	r1, r5
 8008164:	4630      	mov	r0, r6
 8008166:	f7ff fd63 	bl	8007c30 <_Balloc>
 800816a:	4602      	mov	r2, r0
 800816c:	b928      	cbnz	r0, 800817a <__mdiff+0x2e>
 800816e:	4b3f      	ldr	r3, [pc, #252]	@ (800826c <__mdiff+0x120>)
 8008170:	f240 2137 	movw	r1, #567	@ 0x237
 8008174:	483e      	ldr	r0, [pc, #248]	@ (8008270 <__mdiff+0x124>)
 8008176:	f000 f99f 	bl	80084b8 <__assert_func>
 800817a:	2301      	movs	r3, #1
 800817c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008180:	4610      	mov	r0, r2
 8008182:	b003      	add	sp, #12
 8008184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008188:	bfbc      	itt	lt
 800818a:	464b      	movlt	r3, r9
 800818c:	46a1      	movlt	r9, r4
 800818e:	4630      	mov	r0, r6
 8008190:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008194:	bfba      	itte	lt
 8008196:	461c      	movlt	r4, r3
 8008198:	2501      	movlt	r5, #1
 800819a:	2500      	movge	r5, #0
 800819c:	f7ff fd48 	bl	8007c30 <_Balloc>
 80081a0:	4602      	mov	r2, r0
 80081a2:	b918      	cbnz	r0, 80081ac <__mdiff+0x60>
 80081a4:	4b31      	ldr	r3, [pc, #196]	@ (800826c <__mdiff+0x120>)
 80081a6:	f240 2145 	movw	r1, #581	@ 0x245
 80081aa:	e7e3      	b.n	8008174 <__mdiff+0x28>
 80081ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081b0:	6926      	ldr	r6, [r4, #16]
 80081b2:	60c5      	str	r5, [r0, #12]
 80081b4:	f109 0310 	add.w	r3, r9, #16
 80081b8:	f109 0514 	add.w	r5, r9, #20
 80081bc:	f104 0e14 	add.w	lr, r4, #20
 80081c0:	f100 0b14 	add.w	fp, r0, #20
 80081c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80081c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	46d9      	mov	r9, fp
 80081d0:	f04f 0c00 	mov.w	ip, #0
 80081d4:	9b01      	ldr	r3, [sp, #4]
 80081d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80081da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	fa1f f38a 	uxth.w	r3, sl
 80081e4:	4619      	mov	r1, r3
 80081e6:	b283      	uxth	r3, r0
 80081e8:	1acb      	subs	r3, r1, r3
 80081ea:	0c00      	lsrs	r0, r0, #16
 80081ec:	4463      	add	r3, ip
 80081ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80081f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80081fc:	4576      	cmp	r6, lr
 80081fe:	f849 3b04 	str.w	r3, [r9], #4
 8008202:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008206:	d8e5      	bhi.n	80081d4 <__mdiff+0x88>
 8008208:	1b33      	subs	r3, r6, r4
 800820a:	3b15      	subs	r3, #21
 800820c:	f023 0303 	bic.w	r3, r3, #3
 8008210:	3415      	adds	r4, #21
 8008212:	3304      	adds	r3, #4
 8008214:	42a6      	cmp	r6, r4
 8008216:	bf38      	it	cc
 8008218:	2304      	movcc	r3, #4
 800821a:	441d      	add	r5, r3
 800821c:	445b      	add	r3, fp
 800821e:	461e      	mov	r6, r3
 8008220:	462c      	mov	r4, r5
 8008222:	4544      	cmp	r4, r8
 8008224:	d30e      	bcc.n	8008244 <__mdiff+0xf8>
 8008226:	f108 0103 	add.w	r1, r8, #3
 800822a:	1b49      	subs	r1, r1, r5
 800822c:	f021 0103 	bic.w	r1, r1, #3
 8008230:	3d03      	subs	r5, #3
 8008232:	45a8      	cmp	r8, r5
 8008234:	bf38      	it	cc
 8008236:	2100      	movcc	r1, #0
 8008238:	440b      	add	r3, r1
 800823a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800823e:	b191      	cbz	r1, 8008266 <__mdiff+0x11a>
 8008240:	6117      	str	r7, [r2, #16]
 8008242:	e79d      	b.n	8008180 <__mdiff+0x34>
 8008244:	f854 1b04 	ldr.w	r1, [r4], #4
 8008248:	46e6      	mov	lr, ip
 800824a:	0c08      	lsrs	r0, r1, #16
 800824c:	fa1c fc81 	uxtah	ip, ip, r1
 8008250:	4471      	add	r1, lr
 8008252:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008256:	b289      	uxth	r1, r1
 8008258:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800825c:	f846 1b04 	str.w	r1, [r6], #4
 8008260:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008264:	e7dd      	b.n	8008222 <__mdiff+0xd6>
 8008266:	3f01      	subs	r7, #1
 8008268:	e7e7      	b.n	800823a <__mdiff+0xee>
 800826a:	bf00      	nop
 800826c:	08009c98 	.word	0x08009c98
 8008270:	08009ca9 	.word	0x08009ca9

08008274 <__d2b>:
 8008274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008278:	460f      	mov	r7, r1
 800827a:	2101      	movs	r1, #1
 800827c:	ec59 8b10 	vmov	r8, r9, d0
 8008280:	4616      	mov	r6, r2
 8008282:	f7ff fcd5 	bl	8007c30 <_Balloc>
 8008286:	4604      	mov	r4, r0
 8008288:	b930      	cbnz	r0, 8008298 <__d2b+0x24>
 800828a:	4602      	mov	r2, r0
 800828c:	4b23      	ldr	r3, [pc, #140]	@ (800831c <__d2b+0xa8>)
 800828e:	4824      	ldr	r0, [pc, #144]	@ (8008320 <__d2b+0xac>)
 8008290:	f240 310f 	movw	r1, #783	@ 0x30f
 8008294:	f000 f910 	bl	80084b8 <__assert_func>
 8008298:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800829c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082a0:	b10d      	cbz	r5, 80082a6 <__d2b+0x32>
 80082a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	f1b8 0300 	subs.w	r3, r8, #0
 80082ac:	d023      	beq.n	80082f6 <__d2b+0x82>
 80082ae:	4668      	mov	r0, sp
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	f7ff fd84 	bl	8007dbe <__lo0bits>
 80082b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80082ba:	b1d0      	cbz	r0, 80082f2 <__d2b+0x7e>
 80082bc:	f1c0 0320 	rsb	r3, r0, #32
 80082c0:	fa02 f303 	lsl.w	r3, r2, r3
 80082c4:	430b      	orrs	r3, r1
 80082c6:	40c2      	lsrs	r2, r0
 80082c8:	6163      	str	r3, [r4, #20]
 80082ca:	9201      	str	r2, [sp, #4]
 80082cc:	9b01      	ldr	r3, [sp, #4]
 80082ce:	61a3      	str	r3, [r4, #24]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	bf0c      	ite	eq
 80082d4:	2201      	moveq	r2, #1
 80082d6:	2202      	movne	r2, #2
 80082d8:	6122      	str	r2, [r4, #16]
 80082da:	b1a5      	cbz	r5, 8008306 <__d2b+0x92>
 80082dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80082e0:	4405      	add	r5, r0
 80082e2:	603d      	str	r5, [r7, #0]
 80082e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80082e8:	6030      	str	r0, [r6, #0]
 80082ea:	4620      	mov	r0, r4
 80082ec:	b003      	add	sp, #12
 80082ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082f2:	6161      	str	r1, [r4, #20]
 80082f4:	e7ea      	b.n	80082cc <__d2b+0x58>
 80082f6:	a801      	add	r0, sp, #4
 80082f8:	f7ff fd61 	bl	8007dbe <__lo0bits>
 80082fc:	9b01      	ldr	r3, [sp, #4]
 80082fe:	6163      	str	r3, [r4, #20]
 8008300:	3020      	adds	r0, #32
 8008302:	2201      	movs	r2, #1
 8008304:	e7e8      	b.n	80082d8 <__d2b+0x64>
 8008306:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800830a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800830e:	6038      	str	r0, [r7, #0]
 8008310:	6918      	ldr	r0, [r3, #16]
 8008312:	f7ff fd35 	bl	8007d80 <__hi0bits>
 8008316:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800831a:	e7e5      	b.n	80082e8 <__d2b+0x74>
 800831c:	08009c98 	.word	0x08009c98
 8008320:	08009ca9 	.word	0x08009ca9

08008324 <__sflush_r>:
 8008324:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800832c:	0716      	lsls	r6, r2, #28
 800832e:	4605      	mov	r5, r0
 8008330:	460c      	mov	r4, r1
 8008332:	d454      	bmi.n	80083de <__sflush_r+0xba>
 8008334:	684b      	ldr	r3, [r1, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	dc02      	bgt.n	8008340 <__sflush_r+0x1c>
 800833a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800833c:	2b00      	cmp	r3, #0
 800833e:	dd48      	ble.n	80083d2 <__sflush_r+0xae>
 8008340:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008342:	2e00      	cmp	r6, #0
 8008344:	d045      	beq.n	80083d2 <__sflush_r+0xae>
 8008346:	2300      	movs	r3, #0
 8008348:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800834c:	682f      	ldr	r7, [r5, #0]
 800834e:	6a21      	ldr	r1, [r4, #32]
 8008350:	602b      	str	r3, [r5, #0]
 8008352:	d030      	beq.n	80083b6 <__sflush_r+0x92>
 8008354:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	0759      	lsls	r1, r3, #29
 800835a:	d505      	bpl.n	8008368 <__sflush_r+0x44>
 800835c:	6863      	ldr	r3, [r4, #4]
 800835e:	1ad2      	subs	r2, r2, r3
 8008360:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008362:	b10b      	cbz	r3, 8008368 <__sflush_r+0x44>
 8008364:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008366:	1ad2      	subs	r2, r2, r3
 8008368:	2300      	movs	r3, #0
 800836a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800836c:	6a21      	ldr	r1, [r4, #32]
 800836e:	4628      	mov	r0, r5
 8008370:	47b0      	blx	r6
 8008372:	1c43      	adds	r3, r0, #1
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	d106      	bne.n	8008386 <__sflush_r+0x62>
 8008378:	6829      	ldr	r1, [r5, #0]
 800837a:	291d      	cmp	r1, #29
 800837c:	d82b      	bhi.n	80083d6 <__sflush_r+0xb2>
 800837e:	4a2a      	ldr	r2, [pc, #168]	@ (8008428 <__sflush_r+0x104>)
 8008380:	40ca      	lsrs	r2, r1
 8008382:	07d6      	lsls	r6, r2, #31
 8008384:	d527      	bpl.n	80083d6 <__sflush_r+0xb2>
 8008386:	2200      	movs	r2, #0
 8008388:	6062      	str	r2, [r4, #4]
 800838a:	04d9      	lsls	r1, r3, #19
 800838c:	6922      	ldr	r2, [r4, #16]
 800838e:	6022      	str	r2, [r4, #0]
 8008390:	d504      	bpl.n	800839c <__sflush_r+0x78>
 8008392:	1c42      	adds	r2, r0, #1
 8008394:	d101      	bne.n	800839a <__sflush_r+0x76>
 8008396:	682b      	ldr	r3, [r5, #0]
 8008398:	b903      	cbnz	r3, 800839c <__sflush_r+0x78>
 800839a:	6560      	str	r0, [r4, #84]	@ 0x54
 800839c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800839e:	602f      	str	r7, [r5, #0]
 80083a0:	b1b9      	cbz	r1, 80083d2 <__sflush_r+0xae>
 80083a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083a6:	4299      	cmp	r1, r3
 80083a8:	d002      	beq.n	80083b0 <__sflush_r+0x8c>
 80083aa:	4628      	mov	r0, r5
 80083ac:	f7ff fb40 	bl	8007a30 <_free_r>
 80083b0:	2300      	movs	r3, #0
 80083b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80083b4:	e00d      	b.n	80083d2 <__sflush_r+0xae>
 80083b6:	2301      	movs	r3, #1
 80083b8:	4628      	mov	r0, r5
 80083ba:	47b0      	blx	r6
 80083bc:	4602      	mov	r2, r0
 80083be:	1c50      	adds	r0, r2, #1
 80083c0:	d1c9      	bne.n	8008356 <__sflush_r+0x32>
 80083c2:	682b      	ldr	r3, [r5, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0c6      	beq.n	8008356 <__sflush_r+0x32>
 80083c8:	2b1d      	cmp	r3, #29
 80083ca:	d001      	beq.n	80083d0 <__sflush_r+0xac>
 80083cc:	2b16      	cmp	r3, #22
 80083ce:	d11e      	bne.n	800840e <__sflush_r+0xea>
 80083d0:	602f      	str	r7, [r5, #0]
 80083d2:	2000      	movs	r0, #0
 80083d4:	e022      	b.n	800841c <__sflush_r+0xf8>
 80083d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083da:	b21b      	sxth	r3, r3
 80083dc:	e01b      	b.n	8008416 <__sflush_r+0xf2>
 80083de:	690f      	ldr	r7, [r1, #16]
 80083e0:	2f00      	cmp	r7, #0
 80083e2:	d0f6      	beq.n	80083d2 <__sflush_r+0xae>
 80083e4:	0793      	lsls	r3, r2, #30
 80083e6:	680e      	ldr	r6, [r1, #0]
 80083e8:	bf08      	it	eq
 80083ea:	694b      	ldreq	r3, [r1, #20]
 80083ec:	600f      	str	r7, [r1, #0]
 80083ee:	bf18      	it	ne
 80083f0:	2300      	movne	r3, #0
 80083f2:	eba6 0807 	sub.w	r8, r6, r7
 80083f6:	608b      	str	r3, [r1, #8]
 80083f8:	f1b8 0f00 	cmp.w	r8, #0
 80083fc:	dde9      	ble.n	80083d2 <__sflush_r+0xae>
 80083fe:	6a21      	ldr	r1, [r4, #32]
 8008400:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008402:	4643      	mov	r3, r8
 8008404:	463a      	mov	r2, r7
 8008406:	4628      	mov	r0, r5
 8008408:	47b0      	blx	r6
 800840a:	2800      	cmp	r0, #0
 800840c:	dc08      	bgt.n	8008420 <__sflush_r+0xfc>
 800840e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008416:	81a3      	strh	r3, [r4, #12]
 8008418:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008420:	4407      	add	r7, r0
 8008422:	eba8 0800 	sub.w	r8, r8, r0
 8008426:	e7e7      	b.n	80083f8 <__sflush_r+0xd4>
 8008428:	20400001 	.word	0x20400001

0800842c <_fflush_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	690b      	ldr	r3, [r1, #16]
 8008430:	4605      	mov	r5, r0
 8008432:	460c      	mov	r4, r1
 8008434:	b913      	cbnz	r3, 800843c <_fflush_r+0x10>
 8008436:	2500      	movs	r5, #0
 8008438:	4628      	mov	r0, r5
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	b118      	cbz	r0, 8008446 <_fflush_r+0x1a>
 800843e:	6a03      	ldr	r3, [r0, #32]
 8008440:	b90b      	cbnz	r3, 8008446 <_fflush_r+0x1a>
 8008442:	f7fe fba3 	bl	8006b8c <__sinit>
 8008446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0f3      	beq.n	8008436 <_fflush_r+0xa>
 800844e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008450:	07d0      	lsls	r0, r2, #31
 8008452:	d404      	bmi.n	800845e <_fflush_r+0x32>
 8008454:	0599      	lsls	r1, r3, #22
 8008456:	d402      	bmi.n	800845e <_fflush_r+0x32>
 8008458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800845a:	f7fe fc8e 	bl	8006d7a <__retarget_lock_acquire_recursive>
 800845e:	4628      	mov	r0, r5
 8008460:	4621      	mov	r1, r4
 8008462:	f7ff ff5f 	bl	8008324 <__sflush_r>
 8008466:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008468:	07da      	lsls	r2, r3, #31
 800846a:	4605      	mov	r5, r0
 800846c:	d4e4      	bmi.n	8008438 <_fflush_r+0xc>
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	059b      	lsls	r3, r3, #22
 8008472:	d4e1      	bmi.n	8008438 <_fflush_r+0xc>
 8008474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008476:	f7fe fc81 	bl	8006d7c <__retarget_lock_release_recursive>
 800847a:	e7dd      	b.n	8008438 <_fflush_r+0xc>

0800847c <_sbrk_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4d06      	ldr	r5, [pc, #24]	@ (8008498 <_sbrk_r+0x1c>)
 8008480:	2300      	movs	r3, #0
 8008482:	4604      	mov	r4, r0
 8008484:	4608      	mov	r0, r1
 8008486:	602b      	str	r3, [r5, #0]
 8008488:	f7fa fdf8 	bl	800307c <_sbrk>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	d102      	bne.n	8008496 <_sbrk_r+0x1a>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	b103      	cbz	r3, 8008496 <_sbrk_r+0x1a>
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	20000540 	.word	0x20000540

0800849c <memcpy>:
 800849c:	440a      	add	r2, r1
 800849e:	4291      	cmp	r1, r2
 80084a0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80084a4:	d100      	bne.n	80084a8 <memcpy+0xc>
 80084a6:	4770      	bx	lr
 80084a8:	b510      	push	{r4, lr}
 80084aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084b2:	4291      	cmp	r1, r2
 80084b4:	d1f9      	bne.n	80084aa <memcpy+0xe>
 80084b6:	bd10      	pop	{r4, pc}

080084b8 <__assert_func>:
 80084b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ba:	4614      	mov	r4, r2
 80084bc:	461a      	mov	r2, r3
 80084be:	4b09      	ldr	r3, [pc, #36]	@ (80084e4 <__assert_func+0x2c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4605      	mov	r5, r0
 80084c4:	68d8      	ldr	r0, [r3, #12]
 80084c6:	b14c      	cbz	r4, 80084dc <__assert_func+0x24>
 80084c8:	4b07      	ldr	r3, [pc, #28]	@ (80084e8 <__assert_func+0x30>)
 80084ca:	9100      	str	r1, [sp, #0]
 80084cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084d0:	4906      	ldr	r1, [pc, #24]	@ (80084ec <__assert_func+0x34>)
 80084d2:	462b      	mov	r3, r5
 80084d4:	f000 f842 	bl	800855c <fiprintf>
 80084d8:	f000 f852 	bl	8008580 <abort>
 80084dc:	4b04      	ldr	r3, [pc, #16]	@ (80084f0 <__assert_func+0x38>)
 80084de:	461c      	mov	r4, r3
 80084e0:	e7f3      	b.n	80084ca <__assert_func+0x12>
 80084e2:	bf00      	nop
 80084e4:	20000044 	.word	0x20000044
 80084e8:	08009d0c 	.word	0x08009d0c
 80084ec:	08009d19 	.word	0x08009d19
 80084f0:	08009d47 	.word	0x08009d47

080084f4 <_calloc_r>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	fba1 5402 	umull	r5, r4, r1, r2
 80084fa:	b934      	cbnz	r4, 800850a <_calloc_r+0x16>
 80084fc:	4629      	mov	r1, r5
 80084fe:	f7ff fb0b 	bl	8007b18 <_malloc_r>
 8008502:	4606      	mov	r6, r0
 8008504:	b928      	cbnz	r0, 8008512 <_calloc_r+0x1e>
 8008506:	4630      	mov	r0, r6
 8008508:	bd70      	pop	{r4, r5, r6, pc}
 800850a:	220c      	movs	r2, #12
 800850c:	6002      	str	r2, [r0, #0]
 800850e:	2600      	movs	r6, #0
 8008510:	e7f9      	b.n	8008506 <_calloc_r+0x12>
 8008512:	462a      	mov	r2, r5
 8008514:	4621      	mov	r1, r4
 8008516:	f7fe fbb2 	bl	8006c7e <memset>
 800851a:	e7f4      	b.n	8008506 <_calloc_r+0x12>

0800851c <__ascii_mbtowc>:
 800851c:	b082      	sub	sp, #8
 800851e:	b901      	cbnz	r1, 8008522 <__ascii_mbtowc+0x6>
 8008520:	a901      	add	r1, sp, #4
 8008522:	b142      	cbz	r2, 8008536 <__ascii_mbtowc+0x1a>
 8008524:	b14b      	cbz	r3, 800853a <__ascii_mbtowc+0x1e>
 8008526:	7813      	ldrb	r3, [r2, #0]
 8008528:	600b      	str	r3, [r1, #0]
 800852a:	7812      	ldrb	r2, [r2, #0]
 800852c:	1e10      	subs	r0, r2, #0
 800852e:	bf18      	it	ne
 8008530:	2001      	movne	r0, #1
 8008532:	b002      	add	sp, #8
 8008534:	4770      	bx	lr
 8008536:	4610      	mov	r0, r2
 8008538:	e7fb      	b.n	8008532 <__ascii_mbtowc+0x16>
 800853a:	f06f 0001 	mvn.w	r0, #1
 800853e:	e7f8      	b.n	8008532 <__ascii_mbtowc+0x16>

08008540 <__ascii_wctomb>:
 8008540:	4603      	mov	r3, r0
 8008542:	4608      	mov	r0, r1
 8008544:	b141      	cbz	r1, 8008558 <__ascii_wctomb+0x18>
 8008546:	2aff      	cmp	r2, #255	@ 0xff
 8008548:	d904      	bls.n	8008554 <__ascii_wctomb+0x14>
 800854a:	228a      	movs	r2, #138	@ 0x8a
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008552:	4770      	bx	lr
 8008554:	700a      	strb	r2, [r1, #0]
 8008556:	2001      	movs	r0, #1
 8008558:	4770      	bx	lr
	...

0800855c <fiprintf>:
 800855c:	b40e      	push	{r1, r2, r3}
 800855e:	b503      	push	{r0, r1, lr}
 8008560:	4601      	mov	r1, r0
 8008562:	ab03      	add	r3, sp, #12
 8008564:	4805      	ldr	r0, [pc, #20]	@ (800857c <fiprintf+0x20>)
 8008566:	f853 2b04 	ldr.w	r2, [r3], #4
 800856a:	6800      	ldr	r0, [r0, #0]
 800856c:	9301      	str	r3, [sp, #4]
 800856e:	f000 f837 	bl	80085e0 <_vfiprintf_r>
 8008572:	b002      	add	sp, #8
 8008574:	f85d eb04 	ldr.w	lr, [sp], #4
 8008578:	b003      	add	sp, #12
 800857a:	4770      	bx	lr
 800857c:	20000044 	.word	0x20000044

08008580 <abort>:
 8008580:	b508      	push	{r3, lr}
 8008582:	2006      	movs	r0, #6
 8008584:	f000 fa00 	bl	8008988 <raise>
 8008588:	2001      	movs	r0, #1
 800858a:	f7fa fcff 	bl	8002f8c <_exit>

0800858e <__sfputc_r>:
 800858e:	6893      	ldr	r3, [r2, #8]
 8008590:	3b01      	subs	r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	b410      	push	{r4}
 8008596:	6093      	str	r3, [r2, #8]
 8008598:	da08      	bge.n	80085ac <__sfputc_r+0x1e>
 800859a:	6994      	ldr	r4, [r2, #24]
 800859c:	42a3      	cmp	r3, r4
 800859e:	db01      	blt.n	80085a4 <__sfputc_r+0x16>
 80085a0:	290a      	cmp	r1, #10
 80085a2:	d103      	bne.n	80085ac <__sfputc_r+0x1e>
 80085a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085a8:	f000 b932 	b.w	8008810 <__swbuf_r>
 80085ac:	6813      	ldr	r3, [r2, #0]
 80085ae:	1c58      	adds	r0, r3, #1
 80085b0:	6010      	str	r0, [r2, #0]
 80085b2:	7019      	strb	r1, [r3, #0]
 80085b4:	4608      	mov	r0, r1
 80085b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <__sfputs_r>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	4606      	mov	r6, r0
 80085c0:	460f      	mov	r7, r1
 80085c2:	4614      	mov	r4, r2
 80085c4:	18d5      	adds	r5, r2, r3
 80085c6:	42ac      	cmp	r4, r5
 80085c8:	d101      	bne.n	80085ce <__sfputs_r+0x12>
 80085ca:	2000      	movs	r0, #0
 80085cc:	e007      	b.n	80085de <__sfputs_r+0x22>
 80085ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d2:	463a      	mov	r2, r7
 80085d4:	4630      	mov	r0, r6
 80085d6:	f7ff ffda 	bl	800858e <__sfputc_r>
 80085da:	1c43      	adds	r3, r0, #1
 80085dc:	d1f3      	bne.n	80085c6 <__sfputs_r+0xa>
 80085de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085e0 <_vfiprintf_r>:
 80085e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	460d      	mov	r5, r1
 80085e6:	b09d      	sub	sp, #116	@ 0x74
 80085e8:	4614      	mov	r4, r2
 80085ea:	4698      	mov	r8, r3
 80085ec:	4606      	mov	r6, r0
 80085ee:	b118      	cbz	r0, 80085f8 <_vfiprintf_r+0x18>
 80085f0:	6a03      	ldr	r3, [r0, #32]
 80085f2:	b90b      	cbnz	r3, 80085f8 <_vfiprintf_r+0x18>
 80085f4:	f7fe faca 	bl	8006b8c <__sinit>
 80085f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085fa:	07d9      	lsls	r1, r3, #31
 80085fc:	d405      	bmi.n	800860a <_vfiprintf_r+0x2a>
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	059a      	lsls	r2, r3, #22
 8008602:	d402      	bmi.n	800860a <_vfiprintf_r+0x2a>
 8008604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008606:	f7fe fbb8 	bl	8006d7a <__retarget_lock_acquire_recursive>
 800860a:	89ab      	ldrh	r3, [r5, #12]
 800860c:	071b      	lsls	r3, r3, #28
 800860e:	d501      	bpl.n	8008614 <_vfiprintf_r+0x34>
 8008610:	692b      	ldr	r3, [r5, #16]
 8008612:	b99b      	cbnz	r3, 800863c <_vfiprintf_r+0x5c>
 8008614:	4629      	mov	r1, r5
 8008616:	4630      	mov	r0, r6
 8008618:	f000 f938 	bl	800888c <__swsetup_r>
 800861c:	b170      	cbz	r0, 800863c <_vfiprintf_r+0x5c>
 800861e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008620:	07dc      	lsls	r4, r3, #31
 8008622:	d504      	bpl.n	800862e <_vfiprintf_r+0x4e>
 8008624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008628:	b01d      	add	sp, #116	@ 0x74
 800862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862e:	89ab      	ldrh	r3, [r5, #12]
 8008630:	0598      	lsls	r0, r3, #22
 8008632:	d4f7      	bmi.n	8008624 <_vfiprintf_r+0x44>
 8008634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008636:	f7fe fba1 	bl	8006d7c <__retarget_lock_release_recursive>
 800863a:	e7f3      	b.n	8008624 <_vfiprintf_r+0x44>
 800863c:	2300      	movs	r3, #0
 800863e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008640:	2320      	movs	r3, #32
 8008642:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008646:	f8cd 800c 	str.w	r8, [sp, #12]
 800864a:	2330      	movs	r3, #48	@ 0x30
 800864c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087fc <_vfiprintf_r+0x21c>
 8008650:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008654:	f04f 0901 	mov.w	r9, #1
 8008658:	4623      	mov	r3, r4
 800865a:	469a      	mov	sl, r3
 800865c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008660:	b10a      	cbz	r2, 8008666 <_vfiprintf_r+0x86>
 8008662:	2a25      	cmp	r2, #37	@ 0x25
 8008664:	d1f9      	bne.n	800865a <_vfiprintf_r+0x7a>
 8008666:	ebba 0b04 	subs.w	fp, sl, r4
 800866a:	d00b      	beq.n	8008684 <_vfiprintf_r+0xa4>
 800866c:	465b      	mov	r3, fp
 800866e:	4622      	mov	r2, r4
 8008670:	4629      	mov	r1, r5
 8008672:	4630      	mov	r0, r6
 8008674:	f7ff ffa2 	bl	80085bc <__sfputs_r>
 8008678:	3001      	adds	r0, #1
 800867a:	f000 80a7 	beq.w	80087cc <_vfiprintf_r+0x1ec>
 800867e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008680:	445a      	add	r2, fp
 8008682:	9209      	str	r2, [sp, #36]	@ 0x24
 8008684:	f89a 3000 	ldrb.w	r3, [sl]
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 809f 	beq.w	80087cc <_vfiprintf_r+0x1ec>
 800868e:	2300      	movs	r3, #0
 8008690:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008698:	f10a 0a01 	add.w	sl, sl, #1
 800869c:	9304      	str	r3, [sp, #16]
 800869e:	9307      	str	r3, [sp, #28]
 80086a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80086a6:	4654      	mov	r4, sl
 80086a8:	2205      	movs	r2, #5
 80086aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ae:	4853      	ldr	r0, [pc, #332]	@ (80087fc <_vfiprintf_r+0x21c>)
 80086b0:	f7f7 fd96 	bl	80001e0 <memchr>
 80086b4:	9a04      	ldr	r2, [sp, #16]
 80086b6:	b9d8      	cbnz	r0, 80086f0 <_vfiprintf_r+0x110>
 80086b8:	06d1      	lsls	r1, r2, #27
 80086ba:	bf44      	itt	mi
 80086bc:	2320      	movmi	r3, #32
 80086be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086c2:	0713      	lsls	r3, r2, #28
 80086c4:	bf44      	itt	mi
 80086c6:	232b      	movmi	r3, #43	@ 0x2b
 80086c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086cc:	f89a 3000 	ldrb.w	r3, [sl]
 80086d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086d2:	d015      	beq.n	8008700 <_vfiprintf_r+0x120>
 80086d4:	9a07      	ldr	r2, [sp, #28]
 80086d6:	4654      	mov	r4, sl
 80086d8:	2000      	movs	r0, #0
 80086da:	f04f 0c0a 	mov.w	ip, #10
 80086de:	4621      	mov	r1, r4
 80086e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086e4:	3b30      	subs	r3, #48	@ 0x30
 80086e6:	2b09      	cmp	r3, #9
 80086e8:	d94b      	bls.n	8008782 <_vfiprintf_r+0x1a2>
 80086ea:	b1b0      	cbz	r0, 800871a <_vfiprintf_r+0x13a>
 80086ec:	9207      	str	r2, [sp, #28]
 80086ee:	e014      	b.n	800871a <_vfiprintf_r+0x13a>
 80086f0:	eba0 0308 	sub.w	r3, r0, r8
 80086f4:	fa09 f303 	lsl.w	r3, r9, r3
 80086f8:	4313      	orrs	r3, r2
 80086fa:	9304      	str	r3, [sp, #16]
 80086fc:	46a2      	mov	sl, r4
 80086fe:	e7d2      	b.n	80086a6 <_vfiprintf_r+0xc6>
 8008700:	9b03      	ldr	r3, [sp, #12]
 8008702:	1d19      	adds	r1, r3, #4
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	9103      	str	r1, [sp, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	bfbb      	ittet	lt
 800870c:	425b      	neglt	r3, r3
 800870e:	f042 0202 	orrlt.w	r2, r2, #2
 8008712:	9307      	strge	r3, [sp, #28]
 8008714:	9307      	strlt	r3, [sp, #28]
 8008716:	bfb8      	it	lt
 8008718:	9204      	strlt	r2, [sp, #16]
 800871a:	7823      	ldrb	r3, [r4, #0]
 800871c:	2b2e      	cmp	r3, #46	@ 0x2e
 800871e:	d10a      	bne.n	8008736 <_vfiprintf_r+0x156>
 8008720:	7863      	ldrb	r3, [r4, #1]
 8008722:	2b2a      	cmp	r3, #42	@ 0x2a
 8008724:	d132      	bne.n	800878c <_vfiprintf_r+0x1ac>
 8008726:	9b03      	ldr	r3, [sp, #12]
 8008728:	1d1a      	adds	r2, r3, #4
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	9203      	str	r2, [sp, #12]
 800872e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008732:	3402      	adds	r4, #2
 8008734:	9305      	str	r3, [sp, #20]
 8008736:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800880c <_vfiprintf_r+0x22c>
 800873a:	7821      	ldrb	r1, [r4, #0]
 800873c:	2203      	movs	r2, #3
 800873e:	4650      	mov	r0, sl
 8008740:	f7f7 fd4e 	bl	80001e0 <memchr>
 8008744:	b138      	cbz	r0, 8008756 <_vfiprintf_r+0x176>
 8008746:	9b04      	ldr	r3, [sp, #16]
 8008748:	eba0 000a 	sub.w	r0, r0, sl
 800874c:	2240      	movs	r2, #64	@ 0x40
 800874e:	4082      	lsls	r2, r0
 8008750:	4313      	orrs	r3, r2
 8008752:	3401      	adds	r4, #1
 8008754:	9304      	str	r3, [sp, #16]
 8008756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800875a:	4829      	ldr	r0, [pc, #164]	@ (8008800 <_vfiprintf_r+0x220>)
 800875c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008760:	2206      	movs	r2, #6
 8008762:	f7f7 fd3d 	bl	80001e0 <memchr>
 8008766:	2800      	cmp	r0, #0
 8008768:	d03f      	beq.n	80087ea <_vfiprintf_r+0x20a>
 800876a:	4b26      	ldr	r3, [pc, #152]	@ (8008804 <_vfiprintf_r+0x224>)
 800876c:	bb1b      	cbnz	r3, 80087b6 <_vfiprintf_r+0x1d6>
 800876e:	9b03      	ldr	r3, [sp, #12]
 8008770:	3307      	adds	r3, #7
 8008772:	f023 0307 	bic.w	r3, r3, #7
 8008776:	3308      	adds	r3, #8
 8008778:	9303      	str	r3, [sp, #12]
 800877a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800877c:	443b      	add	r3, r7
 800877e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008780:	e76a      	b.n	8008658 <_vfiprintf_r+0x78>
 8008782:	fb0c 3202 	mla	r2, ip, r2, r3
 8008786:	460c      	mov	r4, r1
 8008788:	2001      	movs	r0, #1
 800878a:	e7a8      	b.n	80086de <_vfiprintf_r+0xfe>
 800878c:	2300      	movs	r3, #0
 800878e:	3401      	adds	r4, #1
 8008790:	9305      	str	r3, [sp, #20]
 8008792:	4619      	mov	r1, r3
 8008794:	f04f 0c0a 	mov.w	ip, #10
 8008798:	4620      	mov	r0, r4
 800879a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800879e:	3a30      	subs	r2, #48	@ 0x30
 80087a0:	2a09      	cmp	r2, #9
 80087a2:	d903      	bls.n	80087ac <_vfiprintf_r+0x1cc>
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d0c6      	beq.n	8008736 <_vfiprintf_r+0x156>
 80087a8:	9105      	str	r1, [sp, #20]
 80087aa:	e7c4      	b.n	8008736 <_vfiprintf_r+0x156>
 80087ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80087b0:	4604      	mov	r4, r0
 80087b2:	2301      	movs	r3, #1
 80087b4:	e7f0      	b.n	8008798 <_vfiprintf_r+0x1b8>
 80087b6:	ab03      	add	r3, sp, #12
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	462a      	mov	r2, r5
 80087bc:	4b12      	ldr	r3, [pc, #72]	@ (8008808 <_vfiprintf_r+0x228>)
 80087be:	a904      	add	r1, sp, #16
 80087c0:	4630      	mov	r0, r6
 80087c2:	f7fd fda1 	bl	8006308 <_printf_float>
 80087c6:	4607      	mov	r7, r0
 80087c8:	1c78      	adds	r0, r7, #1
 80087ca:	d1d6      	bne.n	800877a <_vfiprintf_r+0x19a>
 80087cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087ce:	07d9      	lsls	r1, r3, #31
 80087d0:	d405      	bmi.n	80087de <_vfiprintf_r+0x1fe>
 80087d2:	89ab      	ldrh	r3, [r5, #12]
 80087d4:	059a      	lsls	r2, r3, #22
 80087d6:	d402      	bmi.n	80087de <_vfiprintf_r+0x1fe>
 80087d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087da:	f7fe facf 	bl	8006d7c <__retarget_lock_release_recursive>
 80087de:	89ab      	ldrh	r3, [r5, #12]
 80087e0:	065b      	lsls	r3, r3, #25
 80087e2:	f53f af1f 	bmi.w	8008624 <_vfiprintf_r+0x44>
 80087e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087e8:	e71e      	b.n	8008628 <_vfiprintf_r+0x48>
 80087ea:	ab03      	add	r3, sp, #12
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	462a      	mov	r2, r5
 80087f0:	4b05      	ldr	r3, [pc, #20]	@ (8008808 <_vfiprintf_r+0x228>)
 80087f2:	a904      	add	r1, sp, #16
 80087f4:	4630      	mov	r0, r6
 80087f6:	f7fe f81f 	bl	8006838 <_printf_i>
 80087fa:	e7e4      	b.n	80087c6 <_vfiprintf_r+0x1e6>
 80087fc:	08009d48 	.word	0x08009d48
 8008800:	08009d52 	.word	0x08009d52
 8008804:	08006309 	.word	0x08006309
 8008808:	080085bd 	.word	0x080085bd
 800880c:	08009d4e 	.word	0x08009d4e

08008810 <__swbuf_r>:
 8008810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008812:	460e      	mov	r6, r1
 8008814:	4614      	mov	r4, r2
 8008816:	4605      	mov	r5, r0
 8008818:	b118      	cbz	r0, 8008822 <__swbuf_r+0x12>
 800881a:	6a03      	ldr	r3, [r0, #32]
 800881c:	b90b      	cbnz	r3, 8008822 <__swbuf_r+0x12>
 800881e:	f7fe f9b5 	bl	8006b8c <__sinit>
 8008822:	69a3      	ldr	r3, [r4, #24]
 8008824:	60a3      	str	r3, [r4, #8]
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	071a      	lsls	r2, r3, #28
 800882a:	d501      	bpl.n	8008830 <__swbuf_r+0x20>
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	b943      	cbnz	r3, 8008842 <__swbuf_r+0x32>
 8008830:	4621      	mov	r1, r4
 8008832:	4628      	mov	r0, r5
 8008834:	f000 f82a 	bl	800888c <__swsetup_r>
 8008838:	b118      	cbz	r0, 8008842 <__swbuf_r+0x32>
 800883a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800883e:	4638      	mov	r0, r7
 8008840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	6922      	ldr	r2, [r4, #16]
 8008846:	1a98      	subs	r0, r3, r2
 8008848:	6963      	ldr	r3, [r4, #20]
 800884a:	b2f6      	uxtb	r6, r6
 800884c:	4283      	cmp	r3, r0
 800884e:	4637      	mov	r7, r6
 8008850:	dc05      	bgt.n	800885e <__swbuf_r+0x4e>
 8008852:	4621      	mov	r1, r4
 8008854:	4628      	mov	r0, r5
 8008856:	f7ff fde9 	bl	800842c <_fflush_r>
 800885a:	2800      	cmp	r0, #0
 800885c:	d1ed      	bne.n	800883a <__swbuf_r+0x2a>
 800885e:	68a3      	ldr	r3, [r4, #8]
 8008860:	3b01      	subs	r3, #1
 8008862:	60a3      	str	r3, [r4, #8]
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	6022      	str	r2, [r4, #0]
 800886a:	701e      	strb	r6, [r3, #0]
 800886c:	6962      	ldr	r2, [r4, #20]
 800886e:	1c43      	adds	r3, r0, #1
 8008870:	429a      	cmp	r2, r3
 8008872:	d004      	beq.n	800887e <__swbuf_r+0x6e>
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	07db      	lsls	r3, r3, #31
 8008878:	d5e1      	bpl.n	800883e <__swbuf_r+0x2e>
 800887a:	2e0a      	cmp	r6, #10
 800887c:	d1df      	bne.n	800883e <__swbuf_r+0x2e>
 800887e:	4621      	mov	r1, r4
 8008880:	4628      	mov	r0, r5
 8008882:	f7ff fdd3 	bl	800842c <_fflush_r>
 8008886:	2800      	cmp	r0, #0
 8008888:	d0d9      	beq.n	800883e <__swbuf_r+0x2e>
 800888a:	e7d6      	b.n	800883a <__swbuf_r+0x2a>

0800888c <__swsetup_r>:
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	4b29      	ldr	r3, [pc, #164]	@ (8008934 <__swsetup_r+0xa8>)
 8008890:	4605      	mov	r5, r0
 8008892:	6818      	ldr	r0, [r3, #0]
 8008894:	460c      	mov	r4, r1
 8008896:	b118      	cbz	r0, 80088a0 <__swsetup_r+0x14>
 8008898:	6a03      	ldr	r3, [r0, #32]
 800889a:	b90b      	cbnz	r3, 80088a0 <__swsetup_r+0x14>
 800889c:	f7fe f976 	bl	8006b8c <__sinit>
 80088a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a4:	0719      	lsls	r1, r3, #28
 80088a6:	d422      	bmi.n	80088ee <__swsetup_r+0x62>
 80088a8:	06da      	lsls	r2, r3, #27
 80088aa:	d407      	bmi.n	80088bc <__swsetup_r+0x30>
 80088ac:	2209      	movs	r2, #9
 80088ae:	602a      	str	r2, [r5, #0]
 80088b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088ba:	e033      	b.n	8008924 <__swsetup_r+0x98>
 80088bc:	0758      	lsls	r0, r3, #29
 80088be:	d512      	bpl.n	80088e6 <__swsetup_r+0x5a>
 80088c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088c2:	b141      	cbz	r1, 80088d6 <__swsetup_r+0x4a>
 80088c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088c8:	4299      	cmp	r1, r3
 80088ca:	d002      	beq.n	80088d2 <__swsetup_r+0x46>
 80088cc:	4628      	mov	r0, r5
 80088ce:	f7ff f8af 	bl	8007a30 <_free_r>
 80088d2:	2300      	movs	r3, #0
 80088d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088dc:	81a3      	strh	r3, [r4, #12]
 80088de:	2300      	movs	r3, #0
 80088e0:	6063      	str	r3, [r4, #4]
 80088e2:	6923      	ldr	r3, [r4, #16]
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	f043 0308 	orr.w	r3, r3, #8
 80088ec:	81a3      	strh	r3, [r4, #12]
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	b94b      	cbnz	r3, 8008906 <__swsetup_r+0x7a>
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088fc:	d003      	beq.n	8008906 <__swsetup_r+0x7a>
 80088fe:	4621      	mov	r1, r4
 8008900:	4628      	mov	r0, r5
 8008902:	f000 f883 	bl	8008a0c <__smakebuf_r>
 8008906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800890a:	f013 0201 	ands.w	r2, r3, #1
 800890e:	d00a      	beq.n	8008926 <__swsetup_r+0x9a>
 8008910:	2200      	movs	r2, #0
 8008912:	60a2      	str	r2, [r4, #8]
 8008914:	6962      	ldr	r2, [r4, #20]
 8008916:	4252      	negs	r2, r2
 8008918:	61a2      	str	r2, [r4, #24]
 800891a:	6922      	ldr	r2, [r4, #16]
 800891c:	b942      	cbnz	r2, 8008930 <__swsetup_r+0xa4>
 800891e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008922:	d1c5      	bne.n	80088b0 <__swsetup_r+0x24>
 8008924:	bd38      	pop	{r3, r4, r5, pc}
 8008926:	0799      	lsls	r1, r3, #30
 8008928:	bf58      	it	pl
 800892a:	6962      	ldrpl	r2, [r4, #20]
 800892c:	60a2      	str	r2, [r4, #8]
 800892e:	e7f4      	b.n	800891a <__swsetup_r+0x8e>
 8008930:	2000      	movs	r0, #0
 8008932:	e7f7      	b.n	8008924 <__swsetup_r+0x98>
 8008934:	20000044 	.word	0x20000044

08008938 <_raise_r>:
 8008938:	291f      	cmp	r1, #31
 800893a:	b538      	push	{r3, r4, r5, lr}
 800893c:	4605      	mov	r5, r0
 800893e:	460c      	mov	r4, r1
 8008940:	d904      	bls.n	800894c <_raise_r+0x14>
 8008942:	2316      	movs	r3, #22
 8008944:	6003      	str	r3, [r0, #0]
 8008946:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800894e:	b112      	cbz	r2, 8008956 <_raise_r+0x1e>
 8008950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008954:	b94b      	cbnz	r3, 800896a <_raise_r+0x32>
 8008956:	4628      	mov	r0, r5
 8008958:	f000 f830 	bl	80089bc <_getpid_r>
 800895c:	4622      	mov	r2, r4
 800895e:	4601      	mov	r1, r0
 8008960:	4628      	mov	r0, r5
 8008962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008966:	f000 b817 	b.w	8008998 <_kill_r>
 800896a:	2b01      	cmp	r3, #1
 800896c:	d00a      	beq.n	8008984 <_raise_r+0x4c>
 800896e:	1c59      	adds	r1, r3, #1
 8008970:	d103      	bne.n	800897a <_raise_r+0x42>
 8008972:	2316      	movs	r3, #22
 8008974:	6003      	str	r3, [r0, #0]
 8008976:	2001      	movs	r0, #1
 8008978:	e7e7      	b.n	800894a <_raise_r+0x12>
 800897a:	2100      	movs	r1, #0
 800897c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008980:	4620      	mov	r0, r4
 8008982:	4798      	blx	r3
 8008984:	2000      	movs	r0, #0
 8008986:	e7e0      	b.n	800894a <_raise_r+0x12>

08008988 <raise>:
 8008988:	4b02      	ldr	r3, [pc, #8]	@ (8008994 <raise+0xc>)
 800898a:	4601      	mov	r1, r0
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	f7ff bfd3 	b.w	8008938 <_raise_r>
 8008992:	bf00      	nop
 8008994:	20000044 	.word	0x20000044

08008998 <_kill_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d07      	ldr	r5, [pc, #28]	@ (80089b8 <_kill_r+0x20>)
 800899c:	2300      	movs	r3, #0
 800899e:	4604      	mov	r4, r0
 80089a0:	4608      	mov	r0, r1
 80089a2:	4611      	mov	r1, r2
 80089a4:	602b      	str	r3, [r5, #0]
 80089a6:	f7fa fae1 	bl	8002f6c <_kill>
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	d102      	bne.n	80089b4 <_kill_r+0x1c>
 80089ae:	682b      	ldr	r3, [r5, #0]
 80089b0:	b103      	cbz	r3, 80089b4 <_kill_r+0x1c>
 80089b2:	6023      	str	r3, [r4, #0]
 80089b4:	bd38      	pop	{r3, r4, r5, pc}
 80089b6:	bf00      	nop
 80089b8:	20000540 	.word	0x20000540

080089bc <_getpid_r>:
 80089bc:	f7fa bace 	b.w	8002f5c <_getpid>

080089c0 <__swhatbuf_r>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	460c      	mov	r4, r1
 80089c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c8:	2900      	cmp	r1, #0
 80089ca:	b096      	sub	sp, #88	@ 0x58
 80089cc:	4615      	mov	r5, r2
 80089ce:	461e      	mov	r6, r3
 80089d0:	da0d      	bge.n	80089ee <__swhatbuf_r+0x2e>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089d8:	f04f 0100 	mov.w	r1, #0
 80089dc:	bf14      	ite	ne
 80089de:	2340      	movne	r3, #64	@ 0x40
 80089e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089e4:	2000      	movs	r0, #0
 80089e6:	6031      	str	r1, [r6, #0]
 80089e8:	602b      	str	r3, [r5, #0]
 80089ea:	b016      	add	sp, #88	@ 0x58
 80089ec:	bd70      	pop	{r4, r5, r6, pc}
 80089ee:	466a      	mov	r2, sp
 80089f0:	f000 f848 	bl	8008a84 <_fstat_r>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	dbec      	blt.n	80089d2 <__swhatbuf_r+0x12>
 80089f8:	9901      	ldr	r1, [sp, #4]
 80089fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a02:	4259      	negs	r1, r3
 8008a04:	4159      	adcs	r1, r3
 8008a06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a0a:	e7eb      	b.n	80089e4 <__swhatbuf_r+0x24>

08008a0c <__smakebuf_r>:
 8008a0c:	898b      	ldrh	r3, [r1, #12]
 8008a0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a10:	079d      	lsls	r5, r3, #30
 8008a12:	4606      	mov	r6, r0
 8008a14:	460c      	mov	r4, r1
 8008a16:	d507      	bpl.n	8008a28 <__smakebuf_r+0x1c>
 8008a18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	6123      	str	r3, [r4, #16]
 8008a20:	2301      	movs	r3, #1
 8008a22:	6163      	str	r3, [r4, #20]
 8008a24:	b003      	add	sp, #12
 8008a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a28:	ab01      	add	r3, sp, #4
 8008a2a:	466a      	mov	r2, sp
 8008a2c:	f7ff ffc8 	bl	80089c0 <__swhatbuf_r>
 8008a30:	9f00      	ldr	r7, [sp, #0]
 8008a32:	4605      	mov	r5, r0
 8008a34:	4639      	mov	r1, r7
 8008a36:	4630      	mov	r0, r6
 8008a38:	f7ff f86e 	bl	8007b18 <_malloc_r>
 8008a3c:	b948      	cbnz	r0, 8008a52 <__smakebuf_r+0x46>
 8008a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a42:	059a      	lsls	r2, r3, #22
 8008a44:	d4ee      	bmi.n	8008a24 <__smakebuf_r+0x18>
 8008a46:	f023 0303 	bic.w	r3, r3, #3
 8008a4a:	f043 0302 	orr.w	r3, r3, #2
 8008a4e:	81a3      	strh	r3, [r4, #12]
 8008a50:	e7e2      	b.n	8008a18 <__smakebuf_r+0xc>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	6020      	str	r0, [r4, #0]
 8008a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	9b01      	ldr	r3, [sp, #4]
 8008a5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a62:	b15b      	cbz	r3, 8008a7c <__smakebuf_r+0x70>
 8008a64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f000 f81d 	bl	8008aa8 <_isatty_r>
 8008a6e:	b128      	cbz	r0, 8008a7c <__smakebuf_r+0x70>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	f023 0303 	bic.w	r3, r3, #3
 8008a76:	f043 0301 	orr.w	r3, r3, #1
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	431d      	orrs	r5, r3
 8008a80:	81a5      	strh	r5, [r4, #12]
 8008a82:	e7cf      	b.n	8008a24 <__smakebuf_r+0x18>

08008a84 <_fstat_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4d07      	ldr	r5, [pc, #28]	@ (8008aa4 <_fstat_r+0x20>)
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	4611      	mov	r1, r2
 8008a90:	602b      	str	r3, [r5, #0]
 8008a92:	f7fa facb 	bl	800302c <_fstat>
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d102      	bne.n	8008aa0 <_fstat_r+0x1c>
 8008a9a:	682b      	ldr	r3, [r5, #0]
 8008a9c:	b103      	cbz	r3, 8008aa0 <_fstat_r+0x1c>
 8008a9e:	6023      	str	r3, [r4, #0]
 8008aa0:	bd38      	pop	{r3, r4, r5, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000540 	.word	0x20000540

08008aa8 <_isatty_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d06      	ldr	r5, [pc, #24]	@ (8008ac4 <_isatty_r+0x1c>)
 8008aac:	2300      	movs	r3, #0
 8008aae:	4604      	mov	r4, r0
 8008ab0:	4608      	mov	r0, r1
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	f7fa faca 	bl	800304c <_isatty>
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	d102      	bne.n	8008ac2 <_isatty_r+0x1a>
 8008abc:	682b      	ldr	r3, [r5, #0]
 8008abe:	b103      	cbz	r3, 8008ac2 <_isatty_r+0x1a>
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	bd38      	pop	{r3, r4, r5, pc}
 8008ac4:	20000540 	.word	0x20000540

08008ac8 <cos>:
 8008ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008aca:	ec53 2b10 	vmov	r2, r3, d0
 8008ace:	4826      	ldr	r0, [pc, #152]	@ (8008b68 <cos+0xa0>)
 8008ad0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008ad4:	4281      	cmp	r1, r0
 8008ad6:	d806      	bhi.n	8008ae6 <cos+0x1e>
 8008ad8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008b60 <cos+0x98>
 8008adc:	b005      	add	sp, #20
 8008ade:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ae2:	f000 b899 	b.w	8008c18 <__kernel_cos>
 8008ae6:	4821      	ldr	r0, [pc, #132]	@ (8008b6c <cos+0xa4>)
 8008ae8:	4281      	cmp	r1, r0
 8008aea:	d908      	bls.n	8008afe <cos+0x36>
 8008aec:	4610      	mov	r0, r2
 8008aee:	4619      	mov	r1, r3
 8008af0:	f7f7 fbd2 	bl	8000298 <__aeabi_dsub>
 8008af4:	ec41 0b10 	vmov	d0, r0, r1
 8008af8:	b005      	add	sp, #20
 8008afa:	f85d fb04 	ldr.w	pc, [sp], #4
 8008afe:	4668      	mov	r0, sp
 8008b00:	f000 fa0e 	bl	8008f20 <__ieee754_rem_pio2>
 8008b04:	f000 0003 	and.w	r0, r0, #3
 8008b08:	2801      	cmp	r0, #1
 8008b0a:	d00b      	beq.n	8008b24 <cos+0x5c>
 8008b0c:	2802      	cmp	r0, #2
 8008b0e:	d015      	beq.n	8008b3c <cos+0x74>
 8008b10:	b9d8      	cbnz	r0, 8008b4a <cos+0x82>
 8008b12:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b16:	ed9d 0b00 	vldr	d0, [sp]
 8008b1a:	f000 f87d 	bl	8008c18 <__kernel_cos>
 8008b1e:	ec51 0b10 	vmov	r0, r1, d0
 8008b22:	e7e7      	b.n	8008af4 <cos+0x2c>
 8008b24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b28:	ed9d 0b00 	vldr	d0, [sp]
 8008b2c:	f000 f93c 	bl	8008da8 <__kernel_sin>
 8008b30:	ec53 2b10 	vmov	r2, r3, d0
 8008b34:	4610      	mov	r0, r2
 8008b36:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008b3a:	e7db      	b.n	8008af4 <cos+0x2c>
 8008b3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b40:	ed9d 0b00 	vldr	d0, [sp]
 8008b44:	f000 f868 	bl	8008c18 <__kernel_cos>
 8008b48:	e7f2      	b.n	8008b30 <cos+0x68>
 8008b4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b4e:	ed9d 0b00 	vldr	d0, [sp]
 8008b52:	2001      	movs	r0, #1
 8008b54:	f000 f928 	bl	8008da8 <__kernel_sin>
 8008b58:	e7e1      	b.n	8008b1e <cos+0x56>
 8008b5a:	bf00      	nop
 8008b5c:	f3af 8000 	nop.w
	...
 8008b68:	3fe921fb 	.word	0x3fe921fb
 8008b6c:	7fefffff 	.word	0x7fefffff

08008b70 <sin>:
 8008b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b72:	ec53 2b10 	vmov	r2, r3, d0
 8008b76:	4826      	ldr	r0, [pc, #152]	@ (8008c10 <sin+0xa0>)
 8008b78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b7c:	4281      	cmp	r1, r0
 8008b7e:	d807      	bhi.n	8008b90 <sin+0x20>
 8008b80:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008c08 <sin+0x98>
 8008b84:	2000      	movs	r0, #0
 8008b86:	b005      	add	sp, #20
 8008b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b8c:	f000 b90c 	b.w	8008da8 <__kernel_sin>
 8008b90:	4820      	ldr	r0, [pc, #128]	@ (8008c14 <sin+0xa4>)
 8008b92:	4281      	cmp	r1, r0
 8008b94:	d908      	bls.n	8008ba8 <sin+0x38>
 8008b96:	4610      	mov	r0, r2
 8008b98:	4619      	mov	r1, r3
 8008b9a:	f7f7 fb7d 	bl	8000298 <__aeabi_dsub>
 8008b9e:	ec41 0b10 	vmov	d0, r0, r1
 8008ba2:	b005      	add	sp, #20
 8008ba4:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ba8:	4668      	mov	r0, sp
 8008baa:	f000 f9b9 	bl	8008f20 <__ieee754_rem_pio2>
 8008bae:	f000 0003 	and.w	r0, r0, #3
 8008bb2:	2801      	cmp	r0, #1
 8008bb4:	d00c      	beq.n	8008bd0 <sin+0x60>
 8008bb6:	2802      	cmp	r0, #2
 8008bb8:	d011      	beq.n	8008bde <sin+0x6e>
 8008bba:	b9e8      	cbnz	r0, 8008bf8 <sin+0x88>
 8008bbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008bc0:	ed9d 0b00 	vldr	d0, [sp]
 8008bc4:	2001      	movs	r0, #1
 8008bc6:	f000 f8ef 	bl	8008da8 <__kernel_sin>
 8008bca:	ec51 0b10 	vmov	r0, r1, d0
 8008bce:	e7e6      	b.n	8008b9e <sin+0x2e>
 8008bd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008bd4:	ed9d 0b00 	vldr	d0, [sp]
 8008bd8:	f000 f81e 	bl	8008c18 <__kernel_cos>
 8008bdc:	e7f5      	b.n	8008bca <sin+0x5a>
 8008bde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008be2:	ed9d 0b00 	vldr	d0, [sp]
 8008be6:	2001      	movs	r0, #1
 8008be8:	f000 f8de 	bl	8008da8 <__kernel_sin>
 8008bec:	ec53 2b10 	vmov	r2, r3, d0
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008bf6:	e7d2      	b.n	8008b9e <sin+0x2e>
 8008bf8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008bfc:	ed9d 0b00 	vldr	d0, [sp]
 8008c00:	f000 f80a 	bl	8008c18 <__kernel_cos>
 8008c04:	e7f2      	b.n	8008bec <sin+0x7c>
 8008c06:	bf00      	nop
	...
 8008c10:	3fe921fb 	.word	0x3fe921fb
 8008c14:	7fefffff 	.word	0x7fefffff

08008c18 <__kernel_cos>:
 8008c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	ec57 6b10 	vmov	r6, r7, d0
 8008c20:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008c24:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008c28:	ed8d 1b00 	vstr	d1, [sp]
 8008c2c:	d206      	bcs.n	8008c3c <__kernel_cos+0x24>
 8008c2e:	4630      	mov	r0, r6
 8008c30:	4639      	mov	r1, r7
 8008c32:	f7f7 ff99 	bl	8000b68 <__aeabi_d2iz>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	f000 8088 	beq.w	8008d4c <__kernel_cos+0x134>
 8008c3c:	4632      	mov	r2, r6
 8008c3e:	463b      	mov	r3, r7
 8008c40:	4630      	mov	r0, r6
 8008c42:	4639      	mov	r1, r7
 8008c44:	f7f7 fce0 	bl	8000608 <__aeabi_dmul>
 8008c48:	4b51      	ldr	r3, [pc, #324]	@ (8008d90 <__kernel_cos+0x178>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	460d      	mov	r5, r1
 8008c50:	f7f7 fcda 	bl	8000608 <__aeabi_dmul>
 8008c54:	a340      	add	r3, pc, #256	@ (adr r3, 8008d58 <__kernel_cos+0x140>)
 8008c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5a:	4682      	mov	sl, r0
 8008c5c:	468b      	mov	fp, r1
 8008c5e:	4620      	mov	r0, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7f7 fcd1 	bl	8000608 <__aeabi_dmul>
 8008c66:	a33e      	add	r3, pc, #248	@ (adr r3, 8008d60 <__kernel_cos+0x148>)
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	f7f7 fb16 	bl	800029c <__adddf3>
 8008c70:	4622      	mov	r2, r4
 8008c72:	462b      	mov	r3, r5
 8008c74:	f7f7 fcc8 	bl	8000608 <__aeabi_dmul>
 8008c78:	a33b      	add	r3, pc, #236	@ (adr r3, 8008d68 <__kernel_cos+0x150>)
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f7f7 fb0b 	bl	8000298 <__aeabi_dsub>
 8008c82:	4622      	mov	r2, r4
 8008c84:	462b      	mov	r3, r5
 8008c86:	f7f7 fcbf 	bl	8000608 <__aeabi_dmul>
 8008c8a:	a339      	add	r3, pc, #228	@ (adr r3, 8008d70 <__kernel_cos+0x158>)
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	f7f7 fb04 	bl	800029c <__adddf3>
 8008c94:	4622      	mov	r2, r4
 8008c96:	462b      	mov	r3, r5
 8008c98:	f7f7 fcb6 	bl	8000608 <__aeabi_dmul>
 8008c9c:	a336      	add	r3, pc, #216	@ (adr r3, 8008d78 <__kernel_cos+0x160>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 faf9 	bl	8000298 <__aeabi_dsub>
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	462b      	mov	r3, r5
 8008caa:	f7f7 fcad 	bl	8000608 <__aeabi_dmul>
 8008cae:	a334      	add	r3, pc, #208	@ (adr r3, 8008d80 <__kernel_cos+0x168>)
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f7f7 faf2 	bl	800029c <__adddf3>
 8008cb8:	4622      	mov	r2, r4
 8008cba:	462b      	mov	r3, r5
 8008cbc:	f7f7 fca4 	bl	8000608 <__aeabi_dmul>
 8008cc0:	4622      	mov	r2, r4
 8008cc2:	462b      	mov	r3, r5
 8008cc4:	f7f7 fca0 	bl	8000608 <__aeabi_dmul>
 8008cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ccc:	4604      	mov	r4, r0
 8008cce:	460d      	mov	r5, r1
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	f7f7 fc98 	bl	8000608 <__aeabi_dmul>
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4602      	mov	r2, r0
 8008cdc:	4629      	mov	r1, r5
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f7f7 fada 	bl	8000298 <__aeabi_dsub>
 8008ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8008d94 <__kernel_cos+0x17c>)
 8008ce6:	4598      	cmp	r8, r3
 8008ce8:	4606      	mov	r6, r0
 8008cea:	460f      	mov	r7, r1
 8008cec:	d810      	bhi.n	8008d10 <__kernel_cos+0xf8>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4650      	mov	r0, sl
 8008cf4:	4659      	mov	r1, fp
 8008cf6:	f7f7 facf 	bl	8000298 <__aeabi_dsub>
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4926      	ldr	r1, [pc, #152]	@ (8008d98 <__kernel_cos+0x180>)
 8008cfe:	4602      	mov	r2, r0
 8008d00:	2000      	movs	r0, #0
 8008d02:	f7f7 fac9 	bl	8000298 <__aeabi_dsub>
 8008d06:	ec41 0b10 	vmov	d0, r0, r1
 8008d0a:	b003      	add	sp, #12
 8008d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d10:	4b22      	ldr	r3, [pc, #136]	@ (8008d9c <__kernel_cos+0x184>)
 8008d12:	4921      	ldr	r1, [pc, #132]	@ (8008d98 <__kernel_cos+0x180>)
 8008d14:	4598      	cmp	r8, r3
 8008d16:	bf8c      	ite	hi
 8008d18:	4d21      	ldrhi	r5, [pc, #132]	@ (8008da0 <__kernel_cos+0x188>)
 8008d1a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8008d1e:	2400      	movs	r4, #0
 8008d20:	4622      	mov	r2, r4
 8008d22:	462b      	mov	r3, r5
 8008d24:	2000      	movs	r0, #0
 8008d26:	f7f7 fab7 	bl	8000298 <__aeabi_dsub>
 8008d2a:	4622      	mov	r2, r4
 8008d2c:	4680      	mov	r8, r0
 8008d2e:	4689      	mov	r9, r1
 8008d30:	462b      	mov	r3, r5
 8008d32:	4650      	mov	r0, sl
 8008d34:	4659      	mov	r1, fp
 8008d36:	f7f7 faaf 	bl	8000298 <__aeabi_dsub>
 8008d3a:	4632      	mov	r2, r6
 8008d3c:	463b      	mov	r3, r7
 8008d3e:	f7f7 faab 	bl	8000298 <__aeabi_dsub>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4640      	mov	r0, r8
 8008d48:	4649      	mov	r1, r9
 8008d4a:	e7da      	b.n	8008d02 <__kernel_cos+0xea>
 8008d4c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8008d88 <__kernel_cos+0x170>
 8008d50:	e7db      	b.n	8008d0a <__kernel_cos+0xf2>
 8008d52:	bf00      	nop
 8008d54:	f3af 8000 	nop.w
 8008d58:	be8838d4 	.word	0xbe8838d4
 8008d5c:	bda8fae9 	.word	0xbda8fae9
 8008d60:	bdb4b1c4 	.word	0xbdb4b1c4
 8008d64:	3e21ee9e 	.word	0x3e21ee9e
 8008d68:	809c52ad 	.word	0x809c52ad
 8008d6c:	3e927e4f 	.word	0x3e927e4f
 8008d70:	19cb1590 	.word	0x19cb1590
 8008d74:	3efa01a0 	.word	0x3efa01a0
 8008d78:	16c15177 	.word	0x16c15177
 8008d7c:	3f56c16c 	.word	0x3f56c16c
 8008d80:	5555554c 	.word	0x5555554c
 8008d84:	3fa55555 	.word	0x3fa55555
 8008d88:	00000000 	.word	0x00000000
 8008d8c:	3ff00000 	.word	0x3ff00000
 8008d90:	3fe00000 	.word	0x3fe00000
 8008d94:	3fd33332 	.word	0x3fd33332
 8008d98:	3ff00000 	.word	0x3ff00000
 8008d9c:	3fe90000 	.word	0x3fe90000
 8008da0:	3fd20000 	.word	0x3fd20000
 8008da4:	00000000 	.word	0x00000000

08008da8 <__kernel_sin>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	ec55 4b10 	vmov	r4, r5, d0
 8008db0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008db4:	b085      	sub	sp, #20
 8008db6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8008dba:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008dbe:	4680      	mov	r8, r0
 8008dc0:	d205      	bcs.n	8008dce <__kernel_sin+0x26>
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	f7f7 fecf 	bl	8000b68 <__aeabi_d2iz>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d052      	beq.n	8008e74 <__kernel_sin+0xcc>
 8008dce:	4622      	mov	r2, r4
 8008dd0:	462b      	mov	r3, r5
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	f7f7 fc17 	bl	8000608 <__aeabi_dmul>
 8008dda:	4682      	mov	sl, r0
 8008ddc:	468b      	mov	fp, r1
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	4620      	mov	r0, r4
 8008de4:	4629      	mov	r1, r5
 8008de6:	f7f7 fc0f 	bl	8000608 <__aeabi_dmul>
 8008dea:	a342      	add	r3, pc, #264	@ (adr r3, 8008ef4 <__kernel_sin+0x14c>)
 8008dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df0:	e9cd 0100 	strd	r0, r1, [sp]
 8008df4:	4650      	mov	r0, sl
 8008df6:	4659      	mov	r1, fp
 8008df8:	f7f7 fc06 	bl	8000608 <__aeabi_dmul>
 8008dfc:	a33f      	add	r3, pc, #252	@ (adr r3, 8008efc <__kernel_sin+0x154>)
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	f7f7 fa49 	bl	8000298 <__aeabi_dsub>
 8008e06:	4652      	mov	r2, sl
 8008e08:	465b      	mov	r3, fp
 8008e0a:	f7f7 fbfd 	bl	8000608 <__aeabi_dmul>
 8008e0e:	a33d      	add	r3, pc, #244	@ (adr r3, 8008f04 <__kernel_sin+0x15c>)
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f7f7 fa42 	bl	800029c <__adddf3>
 8008e18:	4652      	mov	r2, sl
 8008e1a:	465b      	mov	r3, fp
 8008e1c:	f7f7 fbf4 	bl	8000608 <__aeabi_dmul>
 8008e20:	a33a      	add	r3, pc, #232	@ (adr r3, 8008f0c <__kernel_sin+0x164>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f7f7 fa37 	bl	8000298 <__aeabi_dsub>
 8008e2a:	4652      	mov	r2, sl
 8008e2c:	465b      	mov	r3, fp
 8008e2e:	f7f7 fbeb 	bl	8000608 <__aeabi_dmul>
 8008e32:	a338      	add	r3, pc, #224	@ (adr r3, 8008f14 <__kernel_sin+0x16c>)
 8008e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e38:	f7f7 fa30 	bl	800029c <__adddf3>
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	460f      	mov	r7, r1
 8008e40:	f1b8 0f00 	cmp.w	r8, #0
 8008e44:	d11b      	bne.n	8008e7e <__kernel_sin+0xd6>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4650      	mov	r0, sl
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	f7f7 fbdb 	bl	8000608 <__aeabi_dmul>
 8008e52:	a325      	add	r3, pc, #148	@ (adr r3, 8008ee8 <__kernel_sin+0x140>)
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f7f7 fa1e 	bl	8000298 <__aeabi_dsub>
 8008e5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e60:	f7f7 fbd2 	bl	8000608 <__aeabi_dmul>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4620      	mov	r0, r4
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	f7f7 fa16 	bl	800029c <__adddf3>
 8008e70:	4604      	mov	r4, r0
 8008e72:	460d      	mov	r5, r1
 8008e74:	ec45 4b10 	vmov	d0, r4, r5
 8008e78:	b005      	add	sp, #20
 8008e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e82:	4b1b      	ldr	r3, [pc, #108]	@ (8008ef0 <__kernel_sin+0x148>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	f7f7 fbbf 	bl	8000608 <__aeabi_dmul>
 8008e8a:	4632      	mov	r2, r6
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	4689      	mov	r9, r1
 8008e90:	463b      	mov	r3, r7
 8008e92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e96:	f7f7 fbb7 	bl	8000608 <__aeabi_dmul>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4640      	mov	r0, r8
 8008ea0:	4649      	mov	r1, r9
 8008ea2:	f7f7 f9f9 	bl	8000298 <__aeabi_dsub>
 8008ea6:	4652      	mov	r2, sl
 8008ea8:	465b      	mov	r3, fp
 8008eaa:	f7f7 fbad 	bl	8000608 <__aeabi_dmul>
 8008eae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eb2:	f7f7 f9f1 	bl	8000298 <__aeabi_dsub>
 8008eb6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008ee8 <__kernel_sin+0x140>)
 8008eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	460f      	mov	r7, r1
 8008ec0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ec4:	f7f7 fba0 	bl	8000608 <__aeabi_dmul>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4630      	mov	r0, r6
 8008ece:	4639      	mov	r1, r7
 8008ed0:	f7f7 f9e4 	bl	800029c <__adddf3>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4620      	mov	r0, r4
 8008eda:	4629      	mov	r1, r5
 8008edc:	f7f7 f9dc 	bl	8000298 <__aeabi_dsub>
 8008ee0:	e7c6      	b.n	8008e70 <__kernel_sin+0xc8>
 8008ee2:	bf00      	nop
 8008ee4:	f3af 8000 	nop.w
 8008ee8:	55555549 	.word	0x55555549
 8008eec:	3fc55555 	.word	0x3fc55555
 8008ef0:	3fe00000 	.word	0x3fe00000
 8008ef4:	5acfd57c 	.word	0x5acfd57c
 8008ef8:	3de5d93a 	.word	0x3de5d93a
 8008efc:	8a2b9ceb 	.word	0x8a2b9ceb
 8008f00:	3e5ae5e6 	.word	0x3e5ae5e6
 8008f04:	57b1fe7d 	.word	0x57b1fe7d
 8008f08:	3ec71de3 	.word	0x3ec71de3
 8008f0c:	19c161d5 	.word	0x19c161d5
 8008f10:	3f2a01a0 	.word	0x3f2a01a0
 8008f14:	1110f8a6 	.word	0x1110f8a6
 8008f18:	3f811111 	.word	0x3f811111
 8008f1c:	00000000 	.word	0x00000000

08008f20 <__ieee754_rem_pio2>:
 8008f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f24:	ec57 6b10 	vmov	r6, r7, d0
 8008f28:	4bc5      	ldr	r3, [pc, #788]	@ (8009240 <__ieee754_rem_pio2+0x320>)
 8008f2a:	b08d      	sub	sp, #52	@ 0x34
 8008f2c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008f30:	4598      	cmp	r8, r3
 8008f32:	4604      	mov	r4, r0
 8008f34:	9704      	str	r7, [sp, #16]
 8008f36:	d807      	bhi.n	8008f48 <__ieee754_rem_pio2+0x28>
 8008f38:	2200      	movs	r2, #0
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	ed80 0b00 	vstr	d0, [r0]
 8008f40:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008f44:	2500      	movs	r5, #0
 8008f46:	e028      	b.n	8008f9a <__ieee754_rem_pio2+0x7a>
 8008f48:	4bbe      	ldr	r3, [pc, #760]	@ (8009244 <__ieee754_rem_pio2+0x324>)
 8008f4a:	4598      	cmp	r8, r3
 8008f4c:	d878      	bhi.n	8009040 <__ieee754_rem_pio2+0x120>
 8008f4e:	9b04      	ldr	r3, [sp, #16]
 8008f50:	4dbd      	ldr	r5, [pc, #756]	@ (8009248 <__ieee754_rem_pio2+0x328>)
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	4630      	mov	r0, r6
 8008f56:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009208 <__ieee754_rem_pio2+0x2e8>)
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	dd38      	ble.n	8008fd2 <__ieee754_rem_pio2+0xb2>
 8008f60:	f7f7 f99a 	bl	8000298 <__aeabi_dsub>
 8008f64:	45a8      	cmp	r8, r5
 8008f66:	4606      	mov	r6, r0
 8008f68:	460f      	mov	r7, r1
 8008f6a:	d01a      	beq.n	8008fa2 <__ieee754_rem_pio2+0x82>
 8008f6c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009210 <__ieee754_rem_pio2+0x2f0>)
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	f7f7 f991 	bl	8000298 <__aeabi_dsub>
 8008f76:	4602      	mov	r2, r0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	4680      	mov	r8, r0
 8008f7c:	4689      	mov	r9, r1
 8008f7e:	4630      	mov	r0, r6
 8008f80:	4639      	mov	r1, r7
 8008f82:	f7f7 f989 	bl	8000298 <__aeabi_dsub>
 8008f86:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009210 <__ieee754_rem_pio2+0x2f0>)
 8008f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8c:	f7f7 f984 	bl	8000298 <__aeabi_dsub>
 8008f90:	e9c4 8900 	strd	r8, r9, [r4]
 8008f94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f98:	2501      	movs	r5, #1
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	b00d      	add	sp, #52	@ 0x34
 8008f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa2:	a39d      	add	r3, pc, #628	@ (adr r3, 8009218 <__ieee754_rem_pio2+0x2f8>)
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	f7f7 f976 	bl	8000298 <__aeabi_dsub>
 8008fac:	a39c      	add	r3, pc, #624	@ (adr r3, 8009220 <__ieee754_rem_pio2+0x300>)
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	460f      	mov	r7, r1
 8008fb6:	f7f7 f96f 	bl	8000298 <__aeabi_dsub>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4680      	mov	r8, r0
 8008fc0:	4689      	mov	r9, r1
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	f7f7 f967 	bl	8000298 <__aeabi_dsub>
 8008fca:	a395      	add	r3, pc, #596	@ (adr r3, 8009220 <__ieee754_rem_pio2+0x300>)
 8008fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd0:	e7dc      	b.n	8008f8c <__ieee754_rem_pio2+0x6c>
 8008fd2:	f7f7 f963 	bl	800029c <__adddf3>
 8008fd6:	45a8      	cmp	r8, r5
 8008fd8:	4606      	mov	r6, r0
 8008fda:	460f      	mov	r7, r1
 8008fdc:	d018      	beq.n	8009010 <__ieee754_rem_pio2+0xf0>
 8008fde:	a38c      	add	r3, pc, #560	@ (adr r3, 8009210 <__ieee754_rem_pio2+0x2f0>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f7f7 f95a 	bl	800029c <__adddf3>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4680      	mov	r8, r0
 8008fee:	4689      	mov	r9, r1
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	4639      	mov	r1, r7
 8008ff4:	f7f7 f950 	bl	8000298 <__aeabi_dsub>
 8008ff8:	a385      	add	r3, pc, #532	@ (adr r3, 8009210 <__ieee754_rem_pio2+0x2f0>)
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	f7f7 f94d 	bl	800029c <__adddf3>
 8009002:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009006:	e9c4 8900 	strd	r8, r9, [r4]
 800900a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800900e:	e7c4      	b.n	8008f9a <__ieee754_rem_pio2+0x7a>
 8009010:	a381      	add	r3, pc, #516	@ (adr r3, 8009218 <__ieee754_rem_pio2+0x2f8>)
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f7f7 f941 	bl	800029c <__adddf3>
 800901a:	a381      	add	r3, pc, #516	@ (adr r3, 8009220 <__ieee754_rem_pio2+0x300>)
 800901c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009020:	4606      	mov	r6, r0
 8009022:	460f      	mov	r7, r1
 8009024:	f7f7 f93a 	bl	800029c <__adddf3>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4680      	mov	r8, r0
 800902e:	4689      	mov	r9, r1
 8009030:	4630      	mov	r0, r6
 8009032:	4639      	mov	r1, r7
 8009034:	f7f7 f930 	bl	8000298 <__aeabi_dsub>
 8009038:	a379      	add	r3, pc, #484	@ (adr r3, 8009220 <__ieee754_rem_pio2+0x300>)
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	e7de      	b.n	8008ffe <__ieee754_rem_pio2+0xde>
 8009040:	4b82      	ldr	r3, [pc, #520]	@ (800924c <__ieee754_rem_pio2+0x32c>)
 8009042:	4598      	cmp	r8, r3
 8009044:	f200 80d1 	bhi.w	80091ea <__ieee754_rem_pio2+0x2ca>
 8009048:	f000 f966 	bl	8009318 <fabs>
 800904c:	ec57 6b10 	vmov	r6, r7, d0
 8009050:	a375      	add	r3, pc, #468	@ (adr r3, 8009228 <__ieee754_rem_pio2+0x308>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	4630      	mov	r0, r6
 8009058:	4639      	mov	r1, r7
 800905a:	f7f7 fad5 	bl	8000608 <__aeabi_dmul>
 800905e:	4b7c      	ldr	r3, [pc, #496]	@ (8009250 <__ieee754_rem_pio2+0x330>)
 8009060:	2200      	movs	r2, #0
 8009062:	f7f7 f91b 	bl	800029c <__adddf3>
 8009066:	f7f7 fd7f 	bl	8000b68 <__aeabi_d2iz>
 800906a:	4605      	mov	r5, r0
 800906c:	f7f7 fa62 	bl	8000534 <__aeabi_i2d>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009078:	a363      	add	r3, pc, #396	@ (adr r3, 8009208 <__ieee754_rem_pio2+0x2e8>)
 800907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907e:	f7f7 fac3 	bl	8000608 <__aeabi_dmul>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	4630      	mov	r0, r6
 8009088:	4639      	mov	r1, r7
 800908a:	f7f7 f905 	bl	8000298 <__aeabi_dsub>
 800908e:	a360      	add	r3, pc, #384	@ (adr r3, 8009210 <__ieee754_rem_pio2+0x2f0>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	4682      	mov	sl, r0
 8009096:	468b      	mov	fp, r1
 8009098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800909c:	f7f7 fab4 	bl	8000608 <__aeabi_dmul>
 80090a0:	2d1f      	cmp	r5, #31
 80090a2:	4606      	mov	r6, r0
 80090a4:	460f      	mov	r7, r1
 80090a6:	dc0c      	bgt.n	80090c2 <__ieee754_rem_pio2+0x1a2>
 80090a8:	4b6a      	ldr	r3, [pc, #424]	@ (8009254 <__ieee754_rem_pio2+0x334>)
 80090aa:	1e6a      	subs	r2, r5, #1
 80090ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b0:	4543      	cmp	r3, r8
 80090b2:	d006      	beq.n	80090c2 <__ieee754_rem_pio2+0x1a2>
 80090b4:	4632      	mov	r2, r6
 80090b6:	463b      	mov	r3, r7
 80090b8:	4650      	mov	r0, sl
 80090ba:	4659      	mov	r1, fp
 80090bc:	f7f7 f8ec 	bl	8000298 <__aeabi_dsub>
 80090c0:	e00e      	b.n	80090e0 <__ieee754_rem_pio2+0x1c0>
 80090c2:	463b      	mov	r3, r7
 80090c4:	4632      	mov	r2, r6
 80090c6:	4650      	mov	r0, sl
 80090c8:	4659      	mov	r1, fp
 80090ca:	f7f7 f8e5 	bl	8000298 <__aeabi_dsub>
 80090ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 80090d2:	9305      	str	r3, [sp, #20]
 80090d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80090d8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80090dc:	2b10      	cmp	r3, #16
 80090de:	dc02      	bgt.n	80090e6 <__ieee754_rem_pio2+0x1c6>
 80090e0:	e9c4 0100 	strd	r0, r1, [r4]
 80090e4:	e039      	b.n	800915a <__ieee754_rem_pio2+0x23a>
 80090e6:	a34c      	add	r3, pc, #304	@ (adr r3, 8009218 <__ieee754_rem_pio2+0x2f8>)
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090f0:	f7f7 fa8a 	bl	8000608 <__aeabi_dmul>
 80090f4:	4606      	mov	r6, r0
 80090f6:	460f      	mov	r7, r1
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4650      	mov	r0, sl
 80090fe:	4659      	mov	r1, fp
 8009100:	f7f7 f8ca 	bl	8000298 <__aeabi_dsub>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4680      	mov	r8, r0
 800910a:	4689      	mov	r9, r1
 800910c:	4650      	mov	r0, sl
 800910e:	4659      	mov	r1, fp
 8009110:	f7f7 f8c2 	bl	8000298 <__aeabi_dsub>
 8009114:	4632      	mov	r2, r6
 8009116:	463b      	mov	r3, r7
 8009118:	f7f7 f8be 	bl	8000298 <__aeabi_dsub>
 800911c:	a340      	add	r3, pc, #256	@ (adr r3, 8009220 <__ieee754_rem_pio2+0x300>)
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	4606      	mov	r6, r0
 8009124:	460f      	mov	r7, r1
 8009126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800912a:	f7f7 fa6d 	bl	8000608 <__aeabi_dmul>
 800912e:	4632      	mov	r2, r6
 8009130:	463b      	mov	r3, r7
 8009132:	f7f7 f8b1 	bl	8000298 <__aeabi_dsub>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4606      	mov	r6, r0
 800913c:	460f      	mov	r7, r1
 800913e:	4640      	mov	r0, r8
 8009140:	4649      	mov	r1, r9
 8009142:	f7f7 f8a9 	bl	8000298 <__aeabi_dsub>
 8009146:	9a05      	ldr	r2, [sp, #20]
 8009148:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	2b31      	cmp	r3, #49	@ 0x31
 8009150:	dc20      	bgt.n	8009194 <__ieee754_rem_pio2+0x274>
 8009152:	e9c4 0100 	strd	r0, r1, [r4]
 8009156:	46c2      	mov	sl, r8
 8009158:	46cb      	mov	fp, r9
 800915a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800915e:	4650      	mov	r0, sl
 8009160:	4642      	mov	r2, r8
 8009162:	464b      	mov	r3, r9
 8009164:	4659      	mov	r1, fp
 8009166:	f7f7 f897 	bl	8000298 <__aeabi_dsub>
 800916a:	463b      	mov	r3, r7
 800916c:	4632      	mov	r2, r6
 800916e:	f7f7 f893 	bl	8000298 <__aeabi_dsub>
 8009172:	9b04      	ldr	r3, [sp, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800917a:	f6bf af0e 	bge.w	8008f9a <__ieee754_rem_pio2+0x7a>
 800917e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009182:	6063      	str	r3, [r4, #4]
 8009184:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009188:	f8c4 8000 	str.w	r8, [r4]
 800918c:	60a0      	str	r0, [r4, #8]
 800918e:	60e3      	str	r3, [r4, #12]
 8009190:	426d      	negs	r5, r5
 8009192:	e702      	b.n	8008f9a <__ieee754_rem_pio2+0x7a>
 8009194:	a326      	add	r3, pc, #152	@ (adr r3, 8009230 <__ieee754_rem_pio2+0x310>)
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800919e:	f7f7 fa33 	bl	8000608 <__aeabi_dmul>
 80091a2:	4606      	mov	r6, r0
 80091a4:	460f      	mov	r7, r1
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	4640      	mov	r0, r8
 80091ac:	4649      	mov	r1, r9
 80091ae:	f7f7 f873 	bl	8000298 <__aeabi_dsub>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4682      	mov	sl, r0
 80091b8:	468b      	mov	fp, r1
 80091ba:	4640      	mov	r0, r8
 80091bc:	4649      	mov	r1, r9
 80091be:	f7f7 f86b 	bl	8000298 <__aeabi_dsub>
 80091c2:	4632      	mov	r2, r6
 80091c4:	463b      	mov	r3, r7
 80091c6:	f7f7 f867 	bl	8000298 <__aeabi_dsub>
 80091ca:	a31b      	add	r3, pc, #108	@ (adr r3, 8009238 <__ieee754_rem_pio2+0x318>)
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	4606      	mov	r6, r0
 80091d2:	460f      	mov	r7, r1
 80091d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091d8:	f7f7 fa16 	bl	8000608 <__aeabi_dmul>
 80091dc:	4632      	mov	r2, r6
 80091de:	463b      	mov	r3, r7
 80091e0:	f7f7 f85a 	bl	8000298 <__aeabi_dsub>
 80091e4:	4606      	mov	r6, r0
 80091e6:	460f      	mov	r7, r1
 80091e8:	e764      	b.n	80090b4 <__ieee754_rem_pio2+0x194>
 80091ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009258 <__ieee754_rem_pio2+0x338>)
 80091ec:	4598      	cmp	r8, r3
 80091ee:	d935      	bls.n	800925c <__ieee754_rem_pio2+0x33c>
 80091f0:	4632      	mov	r2, r6
 80091f2:	463b      	mov	r3, r7
 80091f4:	4630      	mov	r0, r6
 80091f6:	4639      	mov	r1, r7
 80091f8:	f7f7 f84e 	bl	8000298 <__aeabi_dsub>
 80091fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009200:	e9c4 0100 	strd	r0, r1, [r4]
 8009204:	e69e      	b.n	8008f44 <__ieee754_rem_pio2+0x24>
 8009206:	bf00      	nop
 8009208:	54400000 	.word	0x54400000
 800920c:	3ff921fb 	.word	0x3ff921fb
 8009210:	1a626331 	.word	0x1a626331
 8009214:	3dd0b461 	.word	0x3dd0b461
 8009218:	1a600000 	.word	0x1a600000
 800921c:	3dd0b461 	.word	0x3dd0b461
 8009220:	2e037073 	.word	0x2e037073
 8009224:	3ba3198a 	.word	0x3ba3198a
 8009228:	6dc9c883 	.word	0x6dc9c883
 800922c:	3fe45f30 	.word	0x3fe45f30
 8009230:	2e000000 	.word	0x2e000000
 8009234:	3ba3198a 	.word	0x3ba3198a
 8009238:	252049c1 	.word	0x252049c1
 800923c:	397b839a 	.word	0x397b839a
 8009240:	3fe921fb 	.word	0x3fe921fb
 8009244:	4002d97b 	.word	0x4002d97b
 8009248:	3ff921fb 	.word	0x3ff921fb
 800924c:	413921fb 	.word	0x413921fb
 8009250:	3fe00000 	.word	0x3fe00000
 8009254:	08009f5c 	.word	0x08009f5c
 8009258:	7fefffff 	.word	0x7fefffff
 800925c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009260:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009264:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009268:	4630      	mov	r0, r6
 800926a:	460f      	mov	r7, r1
 800926c:	f7f7 fc7c 	bl	8000b68 <__aeabi_d2iz>
 8009270:	f7f7 f960 	bl	8000534 <__aeabi_i2d>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4630      	mov	r0, r6
 800927a:	4639      	mov	r1, r7
 800927c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009280:	f7f7 f80a 	bl	8000298 <__aeabi_dsub>
 8009284:	4b22      	ldr	r3, [pc, #136]	@ (8009310 <__ieee754_rem_pio2+0x3f0>)
 8009286:	2200      	movs	r2, #0
 8009288:	f7f7 f9be 	bl	8000608 <__aeabi_dmul>
 800928c:	460f      	mov	r7, r1
 800928e:	4606      	mov	r6, r0
 8009290:	f7f7 fc6a 	bl	8000b68 <__aeabi_d2iz>
 8009294:	f7f7 f94e 	bl	8000534 <__aeabi_i2d>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4630      	mov	r0, r6
 800929e:	4639      	mov	r1, r7
 80092a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80092a4:	f7f6 fff8 	bl	8000298 <__aeabi_dsub>
 80092a8:	4b19      	ldr	r3, [pc, #100]	@ (8009310 <__ieee754_rem_pio2+0x3f0>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	f7f7 f9ac 	bl	8000608 <__aeabi_dmul>
 80092b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80092b4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80092b8:	f04f 0803 	mov.w	r8, #3
 80092bc:	2600      	movs	r6, #0
 80092be:	2700      	movs	r7, #0
 80092c0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80092c4:	4632      	mov	r2, r6
 80092c6:	463b      	mov	r3, r7
 80092c8:	46c2      	mov	sl, r8
 80092ca:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80092ce:	f7f7 fc03 	bl	8000ad8 <__aeabi_dcmpeq>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	d1f4      	bne.n	80092c0 <__ieee754_rem_pio2+0x3a0>
 80092d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009314 <__ieee754_rem_pio2+0x3f4>)
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	2302      	movs	r3, #2
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	462a      	mov	r2, r5
 80092e0:	4653      	mov	r3, sl
 80092e2:	4621      	mov	r1, r4
 80092e4:	a806      	add	r0, sp, #24
 80092e6:	f000 f81f 	bl	8009328 <__kernel_rem_pio2>
 80092ea:	9b04      	ldr	r3, [sp, #16]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	4605      	mov	r5, r0
 80092f0:	f6bf ae53 	bge.w	8008f9a <__ieee754_rem_pio2+0x7a>
 80092f4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80092f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80092fc:	e9c4 2300 	strd	r2, r3, [r4]
 8009300:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009304:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009308:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800930c:	e740      	b.n	8009190 <__ieee754_rem_pio2+0x270>
 800930e:	bf00      	nop
 8009310:	41700000 	.word	0x41700000
 8009314:	08009fdc 	.word	0x08009fdc

08009318 <fabs>:
 8009318:	ec51 0b10 	vmov	r0, r1, d0
 800931c:	4602      	mov	r2, r0
 800931e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009322:	ec43 2b10 	vmov	d0, r2, r3
 8009326:	4770      	bx	lr

08009328 <__kernel_rem_pio2>:
 8009328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932c:	ed2d 8b02 	vpush	{d8}
 8009330:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009334:	f112 0f14 	cmn.w	r2, #20
 8009338:	9306      	str	r3, [sp, #24]
 800933a:	9104      	str	r1, [sp, #16]
 800933c:	4bc2      	ldr	r3, [pc, #776]	@ (8009648 <__kernel_rem_pio2+0x320>)
 800933e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009340:	9008      	str	r0, [sp, #32]
 8009342:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	9b06      	ldr	r3, [sp, #24]
 800934a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800934e:	bfa8      	it	ge
 8009350:	1ed4      	subge	r4, r2, #3
 8009352:	9305      	str	r3, [sp, #20]
 8009354:	bfb2      	itee	lt
 8009356:	2400      	movlt	r4, #0
 8009358:	2318      	movge	r3, #24
 800935a:	fb94 f4f3 	sdivge	r4, r4, r3
 800935e:	f06f 0317 	mvn.w	r3, #23
 8009362:	fb04 3303 	mla	r3, r4, r3, r3
 8009366:	eb03 0b02 	add.w	fp, r3, r2
 800936a:	9b00      	ldr	r3, [sp, #0]
 800936c:	9a05      	ldr	r2, [sp, #20]
 800936e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8009638 <__kernel_rem_pio2+0x310>
 8009372:	eb03 0802 	add.w	r8, r3, r2
 8009376:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009378:	1aa7      	subs	r7, r4, r2
 800937a:	ae20      	add	r6, sp, #128	@ 0x80
 800937c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009380:	2500      	movs	r5, #0
 8009382:	4545      	cmp	r5, r8
 8009384:	dd12      	ble.n	80093ac <__kernel_rem_pio2+0x84>
 8009386:	9b06      	ldr	r3, [sp, #24]
 8009388:	aa20      	add	r2, sp, #128	@ 0x80
 800938a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800938e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009392:	2700      	movs	r7, #0
 8009394:	9b00      	ldr	r3, [sp, #0]
 8009396:	429f      	cmp	r7, r3
 8009398:	dc2e      	bgt.n	80093f8 <__kernel_rem_pio2+0xd0>
 800939a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8009638 <__kernel_rem_pio2+0x310>
 800939e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80093a6:	46a8      	mov	r8, r5
 80093a8:	2600      	movs	r6, #0
 80093aa:	e01b      	b.n	80093e4 <__kernel_rem_pio2+0xbc>
 80093ac:	42ef      	cmn	r7, r5
 80093ae:	d407      	bmi.n	80093c0 <__kernel_rem_pio2+0x98>
 80093b0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80093b4:	f7f7 f8be 	bl	8000534 <__aeabi_i2d>
 80093b8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80093bc:	3501      	adds	r5, #1
 80093be:	e7e0      	b.n	8009382 <__kernel_rem_pio2+0x5a>
 80093c0:	ec51 0b18 	vmov	r0, r1, d8
 80093c4:	e7f8      	b.n	80093b8 <__kernel_rem_pio2+0x90>
 80093c6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80093ca:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80093ce:	f7f7 f91b 	bl	8000608 <__aeabi_dmul>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093da:	f7f6 ff5f 	bl	800029c <__adddf3>
 80093de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093e2:	3601      	adds	r6, #1
 80093e4:	9b05      	ldr	r3, [sp, #20]
 80093e6:	429e      	cmp	r6, r3
 80093e8:	dded      	ble.n	80093c6 <__kernel_rem_pio2+0x9e>
 80093ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093ee:	3701      	adds	r7, #1
 80093f0:	ecaa 7b02 	vstmia	sl!, {d7}
 80093f4:	3508      	adds	r5, #8
 80093f6:	e7cd      	b.n	8009394 <__kernel_rem_pio2+0x6c>
 80093f8:	9b00      	ldr	r3, [sp, #0]
 80093fa:	f8dd 8000 	ldr.w	r8, [sp]
 80093fe:	aa0c      	add	r2, sp, #48	@ 0x30
 8009400:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009404:	930a      	str	r3, [sp, #40]	@ 0x28
 8009406:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009408:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800940c:	9309      	str	r3, [sp, #36]	@ 0x24
 800940e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009412:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009414:	ab98      	add	r3, sp, #608	@ 0x260
 8009416:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800941a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800941e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009422:	ac0c      	add	r4, sp, #48	@ 0x30
 8009424:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009426:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800942a:	46a1      	mov	r9, r4
 800942c:	46c2      	mov	sl, r8
 800942e:	f1ba 0f00 	cmp.w	sl, #0
 8009432:	dc77      	bgt.n	8009524 <__kernel_rem_pio2+0x1fc>
 8009434:	4658      	mov	r0, fp
 8009436:	ed9d 0b02 	vldr	d0, [sp, #8]
 800943a:	f000 fac5 	bl	80099c8 <scalbn>
 800943e:	ec57 6b10 	vmov	r6, r7, d0
 8009442:	2200      	movs	r2, #0
 8009444:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009448:	4630      	mov	r0, r6
 800944a:	4639      	mov	r1, r7
 800944c:	f7f7 f8dc 	bl	8000608 <__aeabi_dmul>
 8009450:	ec41 0b10 	vmov	d0, r0, r1
 8009454:	f000 fb34 	bl	8009ac0 <floor>
 8009458:	4b7c      	ldr	r3, [pc, #496]	@ (800964c <__kernel_rem_pio2+0x324>)
 800945a:	ec51 0b10 	vmov	r0, r1, d0
 800945e:	2200      	movs	r2, #0
 8009460:	f7f7 f8d2 	bl	8000608 <__aeabi_dmul>
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	4630      	mov	r0, r6
 800946a:	4639      	mov	r1, r7
 800946c:	f7f6 ff14 	bl	8000298 <__aeabi_dsub>
 8009470:	460f      	mov	r7, r1
 8009472:	4606      	mov	r6, r0
 8009474:	f7f7 fb78 	bl	8000b68 <__aeabi_d2iz>
 8009478:	9002      	str	r0, [sp, #8]
 800947a:	f7f7 f85b 	bl	8000534 <__aeabi_i2d>
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	4630      	mov	r0, r6
 8009484:	4639      	mov	r1, r7
 8009486:	f7f6 ff07 	bl	8000298 <__aeabi_dsub>
 800948a:	f1bb 0f00 	cmp.w	fp, #0
 800948e:	4606      	mov	r6, r0
 8009490:	460f      	mov	r7, r1
 8009492:	dd6c      	ble.n	800956e <__kernel_rem_pio2+0x246>
 8009494:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8009498:	ab0c      	add	r3, sp, #48	@ 0x30
 800949a:	9d02      	ldr	r5, [sp, #8]
 800949c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094a0:	f1cb 0018 	rsb	r0, fp, #24
 80094a4:	fa43 f200 	asr.w	r2, r3, r0
 80094a8:	4415      	add	r5, r2
 80094aa:	4082      	lsls	r2, r0
 80094ac:	1a9b      	subs	r3, r3, r2
 80094ae:	aa0c      	add	r2, sp, #48	@ 0x30
 80094b0:	9502      	str	r5, [sp, #8]
 80094b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80094b6:	f1cb 0217 	rsb	r2, fp, #23
 80094ba:	fa43 f902 	asr.w	r9, r3, r2
 80094be:	f1b9 0f00 	cmp.w	r9, #0
 80094c2:	dd64      	ble.n	800958e <__kernel_rem_pio2+0x266>
 80094c4:	9b02      	ldr	r3, [sp, #8]
 80094c6:	2200      	movs	r2, #0
 80094c8:	3301      	adds	r3, #1
 80094ca:	9302      	str	r3, [sp, #8]
 80094cc:	4615      	mov	r5, r2
 80094ce:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80094d2:	4590      	cmp	r8, r2
 80094d4:	f300 80a1 	bgt.w	800961a <__kernel_rem_pio2+0x2f2>
 80094d8:	f1bb 0f00 	cmp.w	fp, #0
 80094dc:	dd07      	ble.n	80094ee <__kernel_rem_pio2+0x1c6>
 80094de:	f1bb 0f01 	cmp.w	fp, #1
 80094e2:	f000 80c1 	beq.w	8009668 <__kernel_rem_pio2+0x340>
 80094e6:	f1bb 0f02 	cmp.w	fp, #2
 80094ea:	f000 80c8 	beq.w	800967e <__kernel_rem_pio2+0x356>
 80094ee:	f1b9 0f02 	cmp.w	r9, #2
 80094f2:	d14c      	bne.n	800958e <__kernel_rem_pio2+0x266>
 80094f4:	4632      	mov	r2, r6
 80094f6:	463b      	mov	r3, r7
 80094f8:	4955      	ldr	r1, [pc, #340]	@ (8009650 <__kernel_rem_pio2+0x328>)
 80094fa:	2000      	movs	r0, #0
 80094fc:	f7f6 fecc 	bl	8000298 <__aeabi_dsub>
 8009500:	4606      	mov	r6, r0
 8009502:	460f      	mov	r7, r1
 8009504:	2d00      	cmp	r5, #0
 8009506:	d042      	beq.n	800958e <__kernel_rem_pio2+0x266>
 8009508:	4658      	mov	r0, fp
 800950a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8009640 <__kernel_rem_pio2+0x318>
 800950e:	f000 fa5b 	bl	80099c8 <scalbn>
 8009512:	4630      	mov	r0, r6
 8009514:	4639      	mov	r1, r7
 8009516:	ec53 2b10 	vmov	r2, r3, d0
 800951a:	f7f6 febd 	bl	8000298 <__aeabi_dsub>
 800951e:	4606      	mov	r6, r0
 8009520:	460f      	mov	r7, r1
 8009522:	e034      	b.n	800958e <__kernel_rem_pio2+0x266>
 8009524:	4b4b      	ldr	r3, [pc, #300]	@ (8009654 <__kernel_rem_pio2+0x32c>)
 8009526:	2200      	movs	r2, #0
 8009528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800952c:	f7f7 f86c 	bl	8000608 <__aeabi_dmul>
 8009530:	f7f7 fb1a 	bl	8000b68 <__aeabi_d2iz>
 8009534:	f7f6 fffe 	bl	8000534 <__aeabi_i2d>
 8009538:	4b47      	ldr	r3, [pc, #284]	@ (8009658 <__kernel_rem_pio2+0x330>)
 800953a:	2200      	movs	r2, #0
 800953c:	4606      	mov	r6, r0
 800953e:	460f      	mov	r7, r1
 8009540:	f7f7 f862 	bl	8000608 <__aeabi_dmul>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800954c:	f7f6 fea4 	bl	8000298 <__aeabi_dsub>
 8009550:	f7f7 fb0a 	bl	8000b68 <__aeabi_d2iz>
 8009554:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009558:	f849 0b04 	str.w	r0, [r9], #4
 800955c:	4639      	mov	r1, r7
 800955e:	4630      	mov	r0, r6
 8009560:	f7f6 fe9c 	bl	800029c <__adddf3>
 8009564:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009568:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800956c:	e75f      	b.n	800942e <__kernel_rem_pio2+0x106>
 800956e:	d107      	bne.n	8009580 <__kernel_rem_pio2+0x258>
 8009570:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8009574:	aa0c      	add	r2, sp, #48	@ 0x30
 8009576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800957a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800957e:	e79e      	b.n	80094be <__kernel_rem_pio2+0x196>
 8009580:	4b36      	ldr	r3, [pc, #216]	@ (800965c <__kernel_rem_pio2+0x334>)
 8009582:	2200      	movs	r2, #0
 8009584:	f7f7 fac6 	bl	8000b14 <__aeabi_dcmpge>
 8009588:	2800      	cmp	r0, #0
 800958a:	d143      	bne.n	8009614 <__kernel_rem_pio2+0x2ec>
 800958c:	4681      	mov	r9, r0
 800958e:	2200      	movs	r2, #0
 8009590:	2300      	movs	r3, #0
 8009592:	4630      	mov	r0, r6
 8009594:	4639      	mov	r1, r7
 8009596:	f7f7 fa9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800959a:	2800      	cmp	r0, #0
 800959c:	f000 80c1 	beq.w	8009722 <__kernel_rem_pio2+0x3fa>
 80095a0:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80095a4:	2200      	movs	r2, #0
 80095a6:	9900      	ldr	r1, [sp, #0]
 80095a8:	428b      	cmp	r3, r1
 80095aa:	da70      	bge.n	800968e <__kernel_rem_pio2+0x366>
 80095ac:	2a00      	cmp	r2, #0
 80095ae:	f000 808b 	beq.w	80096c8 <__kernel_rem_pio2+0x3a0>
 80095b2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80095b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80095b8:	f1ab 0b18 	sub.w	fp, fp, #24
 80095bc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d0f6      	beq.n	80095b2 <__kernel_rem_pio2+0x28a>
 80095c4:	4658      	mov	r0, fp
 80095c6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8009640 <__kernel_rem_pio2+0x318>
 80095ca:	f000 f9fd 	bl	80099c8 <scalbn>
 80095ce:	f108 0301 	add.w	r3, r8, #1
 80095d2:	00da      	lsls	r2, r3, #3
 80095d4:	9205      	str	r2, [sp, #20]
 80095d6:	ec55 4b10 	vmov	r4, r5, d0
 80095da:	aa70      	add	r2, sp, #448	@ 0x1c0
 80095dc:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8009654 <__kernel_rem_pio2+0x32c>
 80095e0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80095e4:	4646      	mov	r6, r8
 80095e6:	f04f 0a00 	mov.w	sl, #0
 80095ea:	2e00      	cmp	r6, #0
 80095ec:	f280 80d1 	bge.w	8009792 <__kernel_rem_pio2+0x46a>
 80095f0:	4644      	mov	r4, r8
 80095f2:	2c00      	cmp	r4, #0
 80095f4:	f2c0 80ff 	blt.w	80097f6 <__kernel_rem_pio2+0x4ce>
 80095f8:	4b19      	ldr	r3, [pc, #100]	@ (8009660 <__kernel_rem_pio2+0x338>)
 80095fa:	461f      	mov	r7, r3
 80095fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80095fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009602:	9306      	str	r3, [sp, #24]
 8009604:	f04f 0a00 	mov.w	sl, #0
 8009608:	f04f 0b00 	mov.w	fp, #0
 800960c:	2600      	movs	r6, #0
 800960e:	eba8 0504 	sub.w	r5, r8, r4
 8009612:	e0e4      	b.n	80097de <__kernel_rem_pio2+0x4b6>
 8009614:	f04f 0902 	mov.w	r9, #2
 8009618:	e754      	b.n	80094c4 <__kernel_rem_pio2+0x19c>
 800961a:	f854 3b04 	ldr.w	r3, [r4], #4
 800961e:	bb0d      	cbnz	r5, 8009664 <__kernel_rem_pio2+0x33c>
 8009620:	b123      	cbz	r3, 800962c <__kernel_rem_pio2+0x304>
 8009622:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009626:	f844 3c04 	str.w	r3, [r4, #-4]
 800962a:	2301      	movs	r3, #1
 800962c:	3201      	adds	r2, #1
 800962e:	461d      	mov	r5, r3
 8009630:	e74f      	b.n	80094d2 <__kernel_rem_pio2+0x1aa>
 8009632:	bf00      	nop
 8009634:	f3af 8000 	nop.w
	...
 8009644:	3ff00000 	.word	0x3ff00000
 8009648:	0800a128 	.word	0x0800a128
 800964c:	40200000 	.word	0x40200000
 8009650:	3ff00000 	.word	0x3ff00000
 8009654:	3e700000 	.word	0x3e700000
 8009658:	41700000 	.word	0x41700000
 800965c:	3fe00000 	.word	0x3fe00000
 8009660:	0800a0e8 	.word	0x0800a0e8
 8009664:	1acb      	subs	r3, r1, r3
 8009666:	e7de      	b.n	8009626 <__kernel_rem_pio2+0x2fe>
 8009668:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800966c:	ab0c      	add	r3, sp, #48	@ 0x30
 800966e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009672:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009676:	a90c      	add	r1, sp, #48	@ 0x30
 8009678:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800967c:	e737      	b.n	80094ee <__kernel_rem_pio2+0x1c6>
 800967e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8009682:	ab0c      	add	r3, sp, #48	@ 0x30
 8009684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009688:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800968c:	e7f3      	b.n	8009676 <__kernel_rem_pio2+0x34e>
 800968e:	a90c      	add	r1, sp, #48	@ 0x30
 8009690:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009694:	3b01      	subs	r3, #1
 8009696:	430a      	orrs	r2, r1
 8009698:	e785      	b.n	80095a6 <__kernel_rem_pio2+0x27e>
 800969a:	3401      	adds	r4, #1
 800969c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80096a0:	2a00      	cmp	r2, #0
 80096a2:	d0fa      	beq.n	800969a <__kernel_rem_pio2+0x372>
 80096a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096a6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80096aa:	eb0d 0503 	add.w	r5, sp, r3
 80096ae:	9b06      	ldr	r3, [sp, #24]
 80096b0:	aa20      	add	r2, sp, #128	@ 0x80
 80096b2:	4443      	add	r3, r8
 80096b4:	f108 0701 	add.w	r7, r8, #1
 80096b8:	3d98      	subs	r5, #152	@ 0x98
 80096ba:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80096be:	4444      	add	r4, r8
 80096c0:	42bc      	cmp	r4, r7
 80096c2:	da04      	bge.n	80096ce <__kernel_rem_pio2+0x3a6>
 80096c4:	46a0      	mov	r8, r4
 80096c6:	e6a2      	b.n	800940e <__kernel_rem_pio2+0xe6>
 80096c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096ca:	2401      	movs	r4, #1
 80096cc:	e7e6      	b.n	800969c <__kernel_rem_pio2+0x374>
 80096ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80096d4:	f7f6 ff2e 	bl	8000534 <__aeabi_i2d>
 80096d8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8009998 <__kernel_rem_pio2+0x670>
 80096dc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80096e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80096e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096e8:	46b2      	mov	sl, r6
 80096ea:	f04f 0800 	mov.w	r8, #0
 80096ee:	9b05      	ldr	r3, [sp, #20]
 80096f0:	4598      	cmp	r8, r3
 80096f2:	dd05      	ble.n	8009700 <__kernel_rem_pio2+0x3d8>
 80096f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096f8:	3701      	adds	r7, #1
 80096fa:	eca5 7b02 	vstmia	r5!, {d7}
 80096fe:	e7df      	b.n	80096c0 <__kernel_rem_pio2+0x398>
 8009700:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009704:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009708:	f7f6 ff7e 	bl	8000608 <__aeabi_dmul>
 800970c:	4602      	mov	r2, r0
 800970e:	460b      	mov	r3, r1
 8009710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009714:	f7f6 fdc2 	bl	800029c <__adddf3>
 8009718:	f108 0801 	add.w	r8, r8, #1
 800971c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009720:	e7e5      	b.n	80096ee <__kernel_rem_pio2+0x3c6>
 8009722:	f1cb 0000 	rsb	r0, fp, #0
 8009726:	ec47 6b10 	vmov	d0, r6, r7
 800972a:	f000 f94d 	bl	80099c8 <scalbn>
 800972e:	ec55 4b10 	vmov	r4, r5, d0
 8009732:	4b9b      	ldr	r3, [pc, #620]	@ (80099a0 <__kernel_rem_pio2+0x678>)
 8009734:	2200      	movs	r2, #0
 8009736:	4620      	mov	r0, r4
 8009738:	4629      	mov	r1, r5
 800973a:	f7f7 f9eb 	bl	8000b14 <__aeabi_dcmpge>
 800973e:	b300      	cbz	r0, 8009782 <__kernel_rem_pio2+0x45a>
 8009740:	4b98      	ldr	r3, [pc, #608]	@ (80099a4 <__kernel_rem_pio2+0x67c>)
 8009742:	2200      	movs	r2, #0
 8009744:	4620      	mov	r0, r4
 8009746:	4629      	mov	r1, r5
 8009748:	f7f6 ff5e 	bl	8000608 <__aeabi_dmul>
 800974c:	f7f7 fa0c 	bl	8000b68 <__aeabi_d2iz>
 8009750:	4606      	mov	r6, r0
 8009752:	f7f6 feef 	bl	8000534 <__aeabi_i2d>
 8009756:	4b92      	ldr	r3, [pc, #584]	@ (80099a0 <__kernel_rem_pio2+0x678>)
 8009758:	2200      	movs	r2, #0
 800975a:	f7f6 ff55 	bl	8000608 <__aeabi_dmul>
 800975e:	460b      	mov	r3, r1
 8009760:	4602      	mov	r2, r0
 8009762:	4629      	mov	r1, r5
 8009764:	4620      	mov	r0, r4
 8009766:	f7f6 fd97 	bl	8000298 <__aeabi_dsub>
 800976a:	f7f7 f9fd 	bl	8000b68 <__aeabi_d2iz>
 800976e:	ab0c      	add	r3, sp, #48	@ 0x30
 8009770:	f10b 0b18 	add.w	fp, fp, #24
 8009774:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009778:	f108 0801 	add.w	r8, r8, #1
 800977c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009780:	e720      	b.n	80095c4 <__kernel_rem_pio2+0x29c>
 8009782:	4620      	mov	r0, r4
 8009784:	4629      	mov	r1, r5
 8009786:	f7f7 f9ef 	bl	8000b68 <__aeabi_d2iz>
 800978a:	ab0c      	add	r3, sp, #48	@ 0x30
 800978c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009790:	e718      	b.n	80095c4 <__kernel_rem_pio2+0x29c>
 8009792:	ab0c      	add	r3, sp, #48	@ 0x30
 8009794:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009798:	f7f6 fecc 	bl	8000534 <__aeabi_i2d>
 800979c:	4622      	mov	r2, r4
 800979e:	462b      	mov	r3, r5
 80097a0:	f7f6 ff32 	bl	8000608 <__aeabi_dmul>
 80097a4:	4652      	mov	r2, sl
 80097a6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80097aa:	465b      	mov	r3, fp
 80097ac:	4620      	mov	r0, r4
 80097ae:	4629      	mov	r1, r5
 80097b0:	f7f6 ff2a 	bl	8000608 <__aeabi_dmul>
 80097b4:	3e01      	subs	r6, #1
 80097b6:	4604      	mov	r4, r0
 80097b8:	460d      	mov	r5, r1
 80097ba:	e716      	b.n	80095ea <__kernel_rem_pio2+0x2c2>
 80097bc:	9906      	ldr	r1, [sp, #24]
 80097be:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80097c2:	9106      	str	r1, [sp, #24]
 80097c4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80097c8:	f7f6 ff1e 	bl	8000608 <__aeabi_dmul>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4650      	mov	r0, sl
 80097d2:	4659      	mov	r1, fp
 80097d4:	f7f6 fd62 	bl	800029c <__adddf3>
 80097d8:	3601      	adds	r6, #1
 80097da:	4682      	mov	sl, r0
 80097dc:	468b      	mov	fp, r1
 80097de:	9b00      	ldr	r3, [sp, #0]
 80097e0:	429e      	cmp	r6, r3
 80097e2:	dc01      	bgt.n	80097e8 <__kernel_rem_pio2+0x4c0>
 80097e4:	42ae      	cmp	r6, r5
 80097e6:	dde9      	ble.n	80097bc <__kernel_rem_pio2+0x494>
 80097e8:	ab48      	add	r3, sp, #288	@ 0x120
 80097ea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80097ee:	e9c5 ab00 	strd	sl, fp, [r5]
 80097f2:	3c01      	subs	r4, #1
 80097f4:	e6fd      	b.n	80095f2 <__kernel_rem_pio2+0x2ca>
 80097f6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	dc0b      	bgt.n	8009814 <__kernel_rem_pio2+0x4ec>
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dc35      	bgt.n	800986c <__kernel_rem_pio2+0x544>
 8009800:	d059      	beq.n	80098b6 <__kernel_rem_pio2+0x58e>
 8009802:	9b02      	ldr	r3, [sp, #8]
 8009804:	f003 0007 	and.w	r0, r3, #7
 8009808:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800980c:	ecbd 8b02 	vpop	{d8}
 8009810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009814:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009816:	2b03      	cmp	r3, #3
 8009818:	d1f3      	bne.n	8009802 <__kernel_rem_pio2+0x4da>
 800981a:	9b05      	ldr	r3, [sp, #20]
 800981c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009820:	eb0d 0403 	add.w	r4, sp, r3
 8009824:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009828:	4625      	mov	r5, r4
 800982a:	46c2      	mov	sl, r8
 800982c:	f1ba 0f00 	cmp.w	sl, #0
 8009830:	dc69      	bgt.n	8009906 <__kernel_rem_pio2+0x5de>
 8009832:	4645      	mov	r5, r8
 8009834:	2d01      	cmp	r5, #1
 8009836:	f300 8087 	bgt.w	8009948 <__kernel_rem_pio2+0x620>
 800983a:	9c05      	ldr	r4, [sp, #20]
 800983c:	ab48      	add	r3, sp, #288	@ 0x120
 800983e:	441c      	add	r4, r3
 8009840:	2000      	movs	r0, #0
 8009842:	2100      	movs	r1, #0
 8009844:	f1b8 0f01 	cmp.w	r8, #1
 8009848:	f300 809c 	bgt.w	8009984 <__kernel_rem_pio2+0x65c>
 800984c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8009850:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8009854:	f1b9 0f00 	cmp.w	r9, #0
 8009858:	f040 80a6 	bne.w	80099a8 <__kernel_rem_pio2+0x680>
 800985c:	9b04      	ldr	r3, [sp, #16]
 800985e:	e9c3 5600 	strd	r5, r6, [r3]
 8009862:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009866:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800986a:	e7ca      	b.n	8009802 <__kernel_rem_pio2+0x4da>
 800986c:	9d05      	ldr	r5, [sp, #20]
 800986e:	ab48      	add	r3, sp, #288	@ 0x120
 8009870:	441d      	add	r5, r3
 8009872:	4644      	mov	r4, r8
 8009874:	2000      	movs	r0, #0
 8009876:	2100      	movs	r1, #0
 8009878:	2c00      	cmp	r4, #0
 800987a:	da35      	bge.n	80098e8 <__kernel_rem_pio2+0x5c0>
 800987c:	f1b9 0f00 	cmp.w	r9, #0
 8009880:	d038      	beq.n	80098f4 <__kernel_rem_pio2+0x5cc>
 8009882:	4602      	mov	r2, r0
 8009884:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009888:	9c04      	ldr	r4, [sp, #16]
 800988a:	e9c4 2300 	strd	r2, r3, [r4]
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009896:	f7f6 fcff 	bl	8000298 <__aeabi_dsub>
 800989a:	ad4a      	add	r5, sp, #296	@ 0x128
 800989c:	2401      	movs	r4, #1
 800989e:	45a0      	cmp	r8, r4
 80098a0:	da2b      	bge.n	80098fa <__kernel_rem_pio2+0x5d2>
 80098a2:	f1b9 0f00 	cmp.w	r9, #0
 80098a6:	d002      	beq.n	80098ae <__kernel_rem_pio2+0x586>
 80098a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80098ac:	4619      	mov	r1, r3
 80098ae:	9b04      	ldr	r3, [sp, #16]
 80098b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80098b4:	e7a5      	b.n	8009802 <__kernel_rem_pio2+0x4da>
 80098b6:	9c05      	ldr	r4, [sp, #20]
 80098b8:	ab48      	add	r3, sp, #288	@ 0x120
 80098ba:	441c      	add	r4, r3
 80098bc:	2000      	movs	r0, #0
 80098be:	2100      	movs	r1, #0
 80098c0:	f1b8 0f00 	cmp.w	r8, #0
 80098c4:	da09      	bge.n	80098da <__kernel_rem_pio2+0x5b2>
 80098c6:	f1b9 0f00 	cmp.w	r9, #0
 80098ca:	d002      	beq.n	80098d2 <__kernel_rem_pio2+0x5aa>
 80098cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80098d0:	4619      	mov	r1, r3
 80098d2:	9b04      	ldr	r3, [sp, #16]
 80098d4:	e9c3 0100 	strd	r0, r1, [r3]
 80098d8:	e793      	b.n	8009802 <__kernel_rem_pio2+0x4da>
 80098da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80098de:	f7f6 fcdd 	bl	800029c <__adddf3>
 80098e2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80098e6:	e7eb      	b.n	80098c0 <__kernel_rem_pio2+0x598>
 80098e8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80098ec:	f7f6 fcd6 	bl	800029c <__adddf3>
 80098f0:	3c01      	subs	r4, #1
 80098f2:	e7c1      	b.n	8009878 <__kernel_rem_pio2+0x550>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	e7c6      	b.n	8009888 <__kernel_rem_pio2+0x560>
 80098fa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80098fe:	f7f6 fccd 	bl	800029c <__adddf3>
 8009902:	3401      	adds	r4, #1
 8009904:	e7cb      	b.n	800989e <__kernel_rem_pio2+0x576>
 8009906:	ed35 7b02 	vldmdb	r5!, {d7}
 800990a:	ed8d 7b00 	vstr	d7, [sp]
 800990e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009912:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009916:	ec53 2b17 	vmov	r2, r3, d7
 800991a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800991e:	f7f6 fcbd 	bl	800029c <__adddf3>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800992e:	f7f6 fcb3 	bl	8000298 <__aeabi_dsub>
 8009932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009936:	f7f6 fcb1 	bl	800029c <__adddf3>
 800993a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800993e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009942:	e9c5 6700 	strd	r6, r7, [r5]
 8009946:	e771      	b.n	800982c <__kernel_rem_pio2+0x504>
 8009948:	ed34 7b02 	vldmdb	r4!, {d7}
 800994c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009950:	ec51 0b17 	vmov	r0, r1, d7
 8009954:	4652      	mov	r2, sl
 8009956:	465b      	mov	r3, fp
 8009958:	ed8d 7b00 	vstr	d7, [sp]
 800995c:	f7f6 fc9e 	bl	800029c <__adddf3>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4606      	mov	r6, r0
 8009966:	460f      	mov	r7, r1
 8009968:	e9dd 0100 	ldrd	r0, r1, [sp]
 800996c:	f7f6 fc94 	bl	8000298 <__aeabi_dsub>
 8009970:	4652      	mov	r2, sl
 8009972:	465b      	mov	r3, fp
 8009974:	f7f6 fc92 	bl	800029c <__adddf3>
 8009978:	3d01      	subs	r5, #1
 800997a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800997e:	e9c4 6700 	strd	r6, r7, [r4]
 8009982:	e757      	b.n	8009834 <__kernel_rem_pio2+0x50c>
 8009984:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009988:	f7f6 fc88 	bl	800029c <__adddf3>
 800998c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009990:	e758      	b.n	8009844 <__kernel_rem_pio2+0x51c>
 8009992:	bf00      	nop
 8009994:	f3af 8000 	nop.w
	...
 80099a0:	41700000 	.word	0x41700000
 80099a4:	3e700000 	.word	0x3e700000
 80099a8:	9b04      	ldr	r3, [sp, #16]
 80099aa:	9a04      	ldr	r2, [sp, #16]
 80099ac:	601d      	str	r5, [r3, #0]
 80099ae:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80099b2:	605c      	str	r4, [r3, #4]
 80099b4:	609f      	str	r7, [r3, #8]
 80099b6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80099ba:	60d3      	str	r3, [r2, #12]
 80099bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099c0:	6110      	str	r0, [r2, #16]
 80099c2:	6153      	str	r3, [r2, #20]
 80099c4:	e71d      	b.n	8009802 <__kernel_rem_pio2+0x4da>
 80099c6:	bf00      	nop

080099c8 <scalbn>:
 80099c8:	b570      	push	{r4, r5, r6, lr}
 80099ca:	ec55 4b10 	vmov	r4, r5, d0
 80099ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80099d2:	4606      	mov	r6, r0
 80099d4:	462b      	mov	r3, r5
 80099d6:	b991      	cbnz	r1, 80099fe <scalbn+0x36>
 80099d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80099dc:	4323      	orrs	r3, r4
 80099de:	d03b      	beq.n	8009a58 <scalbn+0x90>
 80099e0:	4b33      	ldr	r3, [pc, #204]	@ (8009ab0 <scalbn+0xe8>)
 80099e2:	4620      	mov	r0, r4
 80099e4:	4629      	mov	r1, r5
 80099e6:	2200      	movs	r2, #0
 80099e8:	f7f6 fe0e 	bl	8000608 <__aeabi_dmul>
 80099ec:	4b31      	ldr	r3, [pc, #196]	@ (8009ab4 <scalbn+0xec>)
 80099ee:	429e      	cmp	r6, r3
 80099f0:	4604      	mov	r4, r0
 80099f2:	460d      	mov	r5, r1
 80099f4:	da0f      	bge.n	8009a16 <scalbn+0x4e>
 80099f6:	a326      	add	r3, pc, #152	@ (adr r3, 8009a90 <scalbn+0xc8>)
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	e01e      	b.n	8009a3c <scalbn+0x74>
 80099fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009a02:	4291      	cmp	r1, r2
 8009a04:	d10b      	bne.n	8009a1e <scalbn+0x56>
 8009a06:	4622      	mov	r2, r4
 8009a08:	4620      	mov	r0, r4
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	f7f6 fc46 	bl	800029c <__adddf3>
 8009a10:	4604      	mov	r4, r0
 8009a12:	460d      	mov	r5, r1
 8009a14:	e020      	b.n	8009a58 <scalbn+0x90>
 8009a16:	460b      	mov	r3, r1
 8009a18:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009a1c:	3936      	subs	r1, #54	@ 0x36
 8009a1e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009a22:	4296      	cmp	r6, r2
 8009a24:	dd0d      	ble.n	8009a42 <scalbn+0x7a>
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	a11b      	add	r1, pc, #108	@ (adr r1, 8009a98 <scalbn+0xd0>)
 8009a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a2e:	da02      	bge.n	8009a36 <scalbn+0x6e>
 8009a30:	a11b      	add	r1, pc, #108	@ (adr r1, 8009aa0 <scalbn+0xd8>)
 8009a32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a36:	a318      	add	r3, pc, #96	@ (adr r3, 8009a98 <scalbn+0xd0>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f7f6 fde4 	bl	8000608 <__aeabi_dmul>
 8009a40:	e7e6      	b.n	8009a10 <scalbn+0x48>
 8009a42:	1872      	adds	r2, r6, r1
 8009a44:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009a48:	428a      	cmp	r2, r1
 8009a4a:	dcec      	bgt.n	8009a26 <scalbn+0x5e>
 8009a4c:	2a00      	cmp	r2, #0
 8009a4e:	dd06      	ble.n	8009a5e <scalbn+0x96>
 8009a50:	f36f 531e 	bfc	r3, #20, #11
 8009a54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a58:	ec45 4b10 	vmov	d0, r4, r5
 8009a5c:	bd70      	pop	{r4, r5, r6, pc}
 8009a5e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009a62:	da08      	bge.n	8009a76 <scalbn+0xae>
 8009a64:	2d00      	cmp	r5, #0
 8009a66:	a10a      	add	r1, pc, #40	@ (adr r1, 8009a90 <scalbn+0xc8>)
 8009a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a6c:	dac3      	bge.n	80099f6 <scalbn+0x2e>
 8009a6e:	a10e      	add	r1, pc, #56	@ (adr r1, 8009aa8 <scalbn+0xe0>)
 8009a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a74:	e7bf      	b.n	80099f6 <scalbn+0x2e>
 8009a76:	3236      	adds	r2, #54	@ 0x36
 8009a78:	f36f 531e 	bfc	r3, #20, #11
 8009a7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a80:	4620      	mov	r0, r4
 8009a82:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab8 <scalbn+0xf0>)
 8009a84:	4629      	mov	r1, r5
 8009a86:	2200      	movs	r2, #0
 8009a88:	e7d8      	b.n	8009a3c <scalbn+0x74>
 8009a8a:	bf00      	nop
 8009a8c:	f3af 8000 	nop.w
 8009a90:	c2f8f359 	.word	0xc2f8f359
 8009a94:	01a56e1f 	.word	0x01a56e1f
 8009a98:	8800759c 	.word	0x8800759c
 8009a9c:	7e37e43c 	.word	0x7e37e43c
 8009aa0:	8800759c 	.word	0x8800759c
 8009aa4:	fe37e43c 	.word	0xfe37e43c
 8009aa8:	c2f8f359 	.word	0xc2f8f359
 8009aac:	81a56e1f 	.word	0x81a56e1f
 8009ab0:	43500000 	.word	0x43500000
 8009ab4:	ffff3cb0 	.word	0xffff3cb0
 8009ab8:	3c900000 	.word	0x3c900000
 8009abc:	00000000 	.word	0x00000000

08009ac0 <floor>:
 8009ac0:	ec51 0b10 	vmov	r0, r1, d0
 8009ac4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009acc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009ad0:	2e13      	cmp	r6, #19
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	4680      	mov	r8, r0
 8009ad8:	dc34      	bgt.n	8009b44 <floor+0x84>
 8009ada:	2e00      	cmp	r6, #0
 8009adc:	da17      	bge.n	8009b0e <floor+0x4e>
 8009ade:	a332      	add	r3, pc, #200	@ (adr r3, 8009ba8 <floor+0xe8>)
 8009ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae4:	f7f6 fbda 	bl	800029c <__adddf3>
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2300      	movs	r3, #0
 8009aec:	f7f7 f81c 	bl	8000b28 <__aeabi_dcmpgt>
 8009af0:	b150      	cbz	r0, 8009b08 <floor+0x48>
 8009af2:	2c00      	cmp	r4, #0
 8009af4:	da55      	bge.n	8009ba2 <floor+0xe2>
 8009af6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009afa:	432c      	orrs	r4, r5
 8009afc:	2500      	movs	r5, #0
 8009afe:	42ac      	cmp	r4, r5
 8009b00:	4c2b      	ldr	r4, [pc, #172]	@ (8009bb0 <floor+0xf0>)
 8009b02:	bf08      	it	eq
 8009b04:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009b08:	4621      	mov	r1, r4
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	e023      	b.n	8009b56 <floor+0x96>
 8009b0e:	4f29      	ldr	r7, [pc, #164]	@ (8009bb4 <floor+0xf4>)
 8009b10:	4137      	asrs	r7, r6
 8009b12:	ea01 0307 	and.w	r3, r1, r7
 8009b16:	4303      	orrs	r3, r0
 8009b18:	d01d      	beq.n	8009b56 <floor+0x96>
 8009b1a:	a323      	add	r3, pc, #140	@ (adr r3, 8009ba8 <floor+0xe8>)
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	f7f6 fbbc 	bl	800029c <__adddf3>
 8009b24:	2200      	movs	r2, #0
 8009b26:	2300      	movs	r3, #0
 8009b28:	f7f6 fffe 	bl	8000b28 <__aeabi_dcmpgt>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d0eb      	beq.n	8009b08 <floor+0x48>
 8009b30:	2c00      	cmp	r4, #0
 8009b32:	bfbe      	ittt	lt
 8009b34:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009b38:	4133      	asrlt	r3, r6
 8009b3a:	18e4      	addlt	r4, r4, r3
 8009b3c:	ea24 0407 	bic.w	r4, r4, r7
 8009b40:	2500      	movs	r5, #0
 8009b42:	e7e1      	b.n	8009b08 <floor+0x48>
 8009b44:	2e33      	cmp	r6, #51	@ 0x33
 8009b46:	dd0a      	ble.n	8009b5e <floor+0x9e>
 8009b48:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009b4c:	d103      	bne.n	8009b56 <floor+0x96>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
 8009b52:	f7f6 fba3 	bl	800029c <__adddf3>
 8009b56:	ec41 0b10 	vmov	d0, r0, r1
 8009b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b5e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8009b62:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009b66:	40df      	lsrs	r7, r3
 8009b68:	4207      	tst	r7, r0
 8009b6a:	d0f4      	beq.n	8009b56 <floor+0x96>
 8009b6c:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ba8 <floor+0xe8>)
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	f7f6 fb93 	bl	800029c <__adddf3>
 8009b76:	2200      	movs	r2, #0
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f7f6 ffd5 	bl	8000b28 <__aeabi_dcmpgt>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d0c2      	beq.n	8009b08 <floor+0x48>
 8009b82:	2c00      	cmp	r4, #0
 8009b84:	da0a      	bge.n	8009b9c <floor+0xdc>
 8009b86:	2e14      	cmp	r6, #20
 8009b88:	d101      	bne.n	8009b8e <floor+0xce>
 8009b8a:	3401      	adds	r4, #1
 8009b8c:	e006      	b.n	8009b9c <floor+0xdc>
 8009b8e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009b92:	2301      	movs	r3, #1
 8009b94:	40b3      	lsls	r3, r6
 8009b96:	441d      	add	r5, r3
 8009b98:	4545      	cmp	r5, r8
 8009b9a:	d3f6      	bcc.n	8009b8a <floor+0xca>
 8009b9c:	ea25 0507 	bic.w	r5, r5, r7
 8009ba0:	e7b2      	b.n	8009b08 <floor+0x48>
 8009ba2:	2500      	movs	r5, #0
 8009ba4:	462c      	mov	r4, r5
 8009ba6:	e7af      	b.n	8009b08 <floor+0x48>
 8009ba8:	8800759c 	.word	0x8800759c
 8009bac:	7e37e43c 	.word	0x7e37e43c
 8009bb0:	bff00000 	.word	0xbff00000
 8009bb4:	000fffff 	.word	0x000fffff

08009bb8 <_init>:
 8009bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bba:	bf00      	nop
 8009bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bbe:	bc08      	pop	{r3}
 8009bc0:	469e      	mov	lr, r3
 8009bc2:	4770      	bx	lr

08009bc4 <_fini>:
 8009bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc6:	bf00      	nop
 8009bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bca:	bc08      	pop	{r3}
 8009bcc:	469e      	mov	lr, r3
 8009bce:	4770      	bx	lr
