
Robot_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a000  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800a1a0  0800a1a0  0000b1a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a740  0800a740  0000c1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a740  0800a740  0000b740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a748  0800a748  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a748  0800a748  0000b748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a74c  0800a74c  0000b74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a750  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  200001dc  0800a92c  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  0800a92c  0000c570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001296e  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a0  00000000  00000000  0001eb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00021120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edb  00000000  00000000  000223f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189e4  00000000  00000000  000232d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d24  00000000  00000000  0003bcb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000968ab  00000000  00000000  0004f9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6286  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064ac  00000000  00000000  000e62cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000ec778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a188 	.word	0x0800a188

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800a188 	.word	0x0800a188

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2180      	movs	r1, #128	@ 0x80
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <csn_high+0x14>)
 8000f8e:	f002 fb61 	bl	8003654 <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020400 	.word	0x40020400

08000f9c <csn_low>:

void csn_low(void){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2180      	movs	r1, #128	@ 0x80
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <csn_low+0x14>)
 8000fa6:	f002 fb55 	bl	8003654 <HAL_GPIO_WritePin>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <ce_high>:

void ce_high(void){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 1);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2140      	movs	r1, #64	@ 0x40
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <ce_high+0x14>)
 8000fbe:	f002 fb49 	bl	8003654 <HAL_GPIO_WritePin>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020400 	.word	0x40020400

08000fcc <ce_low>:

void ce_low(void){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2140      	movs	r1, #64	@ 0x40
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <ce_low+0x14>)
 8000fd6:	f002 fb3d 	bl	8003654 <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f043 0320 	orr.w	r3, r3, #32
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8000ffe:	f7ff ffcd 	bl	8000f9c <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8001002:	f107 010f 	add.w	r1, r7, #15
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	2201      	movs	r2, #1
 800100c:	4808      	ldr	r0, [pc, #32]	@ (8001030 <nrf24_w_reg+0x4c>)
 800100e:	f003 f960 	bl	80042d2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	b29a      	uxth	r2, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101a:	6839      	ldr	r1, [r7, #0]
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <nrf24_w_reg+0x4c>)
 800101e:	f003 f958 	bl	80042d2 <HAL_SPI_Transmit>

	csn_high();
 8001022:	f7ff ffaf 	bl	8000f84 <csn_high>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000025c 	.word	0x2000025c

08001034 <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	73bb      	strb	r3, [r7, #14]

	csn_low();
 800104c:	f7ff ffa6 	bl	8000f9c <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8001050:	f107 010f 	add.w	r1, r7, #15
 8001054:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001058:	2201      	movs	r2, #1
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <nrf24_r_reg+0x4c>)
 800105c:	f003 f939 	bl	80042d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	b29a      	uxth	r2, r3
 8001064:	f107 010e 	add.w	r1, r7, #14
 8001068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <nrf24_r_reg+0x4c>)
 800106e:	f003 fa74 	bl	800455a <HAL_SPI_Receive>

	csn_high();
 8001072:	f7ff ff87 	bl	8000f84 <csn_high>

	return data;
 8001076:	7bbb      	ldrb	r3, [r7, #14]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000025c 	.word	0x2000025c

08001084 <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800108e:	1df9      	adds	r1, r7, #7
 8001090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001094:	2201      	movs	r2, #1
 8001096:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <nrf24_w_spec_cmd+0x20>)
 8001098:	f003 f91b 	bl	80042d2 <HAL_SPI_Transmit>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000025c 	.word	0x2000025c

080010a8 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80010b2:	2101      	movs	r1, #1
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff ffbd 	bl	8001034 <nrf24_r_reg>
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff ff88 	bl	8000fe4 <nrf24_w_reg>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <nrf24_tx_pwr>:
	data &= ~(1 << PWR_UP);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_tx_pwr(uint8_t pwr){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80010ea:	2101      	movs	r1, #1
 80010ec:	2006      	movs	r0, #6
 80010ee:	f7ff ffa1 	bl	8001034 <nrf24_r_reg>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	b25a      	sxtb	r2, r3
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	b25b      	sxtb	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b25b      	sxtb	r3, r3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8001114:	f107 030f 	add.w	r3, r7, #15
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	2006      	movs	r0, #6
 800111e:	f7ff ff61 	bl	8000fe4 <nrf24_w_reg>
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8001138:	2101      	movs	r1, #1
 800113a:	2006      	movs	r0, #6
 800113c:	f7ff ff7a 	bl	8001034 <nrf24_r_reg>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800114a:	b2db      	uxtb	r3, r3
 800114c:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d105      	bne.n	8001160 <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	b2db      	uxtb	r3, r3
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e007      	b.n	8001170 <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d104      	bne.n	8001170 <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	b2db      	uxtb	r3, r3
 800116e:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 8001170:	f107 030f 	add.w	r3, r7, #15
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	2006      	movs	r0, #6
 800117a:	f7ff ff33 	bl	8000fe4 <nrf24_w_reg>
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	2201      	movs	r2, #1
 8001194:	4619      	mov	r1, r3
 8001196:	2005      	movs	r0, #5
 8001198:	f7ff ff24 	bl	8000fe4 <nrf24_w_reg>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 80011ac:	2205      	movs	r2, #5
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	2010      	movs	r0, #16
 80011b2:	f7ff ff17 	bl	8000fe4 <nrf24_w_reg>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	2b20      	cmp	r3, #32
 80011d4:	d901      	bls.n	80011da <nrf24_pipe_pld_size+0x1a>
		size = 32;
 80011d6:	2320      	movs	r3, #32
 80011d8:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b05      	cmp	r3, #5
 80011de:	d839      	bhi.n	8001254 <nrf24_pipe_pld_size+0x94>
 80011e0:	a201      	add	r2, pc, #4	@ (adr r2, 80011e8 <nrf24_pipe_pld_size+0x28>)
 80011e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e6:	bf00      	nop
 80011e8:	08001201 	.word	0x08001201
 80011ec:	0800120f 	.word	0x0800120f
 80011f0:	0800121d 	.word	0x0800121d
 80011f4:	0800122b 	.word	0x0800122b
 80011f8:	08001239 	.word	0x08001239
 80011fc:	08001247 	.word	0x08001247
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 8001200:	1dbb      	adds	r3, r7, #6
 8001202:	2201      	movs	r2, #1
 8001204:	4619      	mov	r1, r3
 8001206:	2011      	movs	r0, #17
 8001208:	f7ff feec 	bl	8000fe4 <nrf24_w_reg>

		break;
 800120c:	e022      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 800120e:	1dbb      	adds	r3, r7, #6
 8001210:	2201      	movs	r2, #1
 8001212:	4619      	mov	r1, r3
 8001214:	2012      	movs	r0, #18
 8001216:	f7ff fee5 	bl	8000fe4 <nrf24_w_reg>

		break;
 800121a:	e01b      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 800121c:	1dbb      	adds	r3, r7, #6
 800121e:	2201      	movs	r2, #1
 8001220:	4619      	mov	r1, r3
 8001222:	2013      	movs	r0, #19
 8001224:	f7ff fede 	bl	8000fe4 <nrf24_w_reg>

		break;
 8001228:	e014      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 800122a:	1dbb      	adds	r3, r7, #6
 800122c:	2201      	movs	r2, #1
 800122e:	4619      	mov	r1, r3
 8001230:	2014      	movs	r0, #20
 8001232:	f7ff fed7 	bl	8000fe4 <nrf24_w_reg>

		break;
 8001236:	e00d      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8001238:	1dbb      	adds	r3, r7, #6
 800123a:	2201      	movs	r2, #1
 800123c:	4619      	mov	r1, r3
 800123e:	2015      	movs	r0, #21
 8001240:	f7ff fed0 	bl	8000fe4 <nrf24_w_reg>

		break;
 8001244:	e006      	b.n	8001254 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8001246:	1dbb      	adds	r3, r7, #6
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	2016      	movs	r0, #22
 800124e:	f7ff fec9 	bl	8000fe4 <nrf24_w_reg>

		break;
 8001252:	bf00      	nop
	}
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 800126c:	2101      	movs	r1, #1
 800126e:	2002      	movs	r0, #2
 8001270:	f7ff fee0 	bl	8001034 <nrf24_r_reg>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b05      	cmp	r3, #5
 800127c:	d850      	bhi.n	8001320 <nrf24_open_rx_pipe+0xc4>
 800127e:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <nrf24_open_rx_pipe+0x28>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	0800129d 	.word	0x0800129d
 8001288:	080012b3 	.word	0x080012b3
 800128c:	080012c9 	.word	0x080012c9
 8001290:	080012df 	.word	0x080012df
 8001294:	080012f5 	.word	0x080012f5
 8001298:	0800130b 	.word	0x0800130b
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 800129c:	2205      	movs	r2, #5
 800129e:	6839      	ldr	r1, [r7, #0]
 80012a0:	200a      	movs	r0, #10
 80012a2:	f7ff fe9f 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P0);
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	73fb      	strb	r3, [r7, #15]
		break;
 80012b0:	e036      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 80012b2:	2205      	movs	r2, #5
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	200b      	movs	r0, #11
 80012b8:	f7ff fe94 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P1);
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	73fb      	strb	r3, [r7, #15]
		break;
 80012c6:	e02b      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 80012c8:	2201      	movs	r2, #1
 80012ca:	6839      	ldr	r1, [r7, #0]
 80012cc:	200c      	movs	r0, #12
 80012ce:	f7ff fe89 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P2);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	73fb      	strb	r3, [r7, #15]
		break;
 80012dc:	e020      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 80012de:	2201      	movs	r2, #1
 80012e0:	6839      	ldr	r1, [r7, #0]
 80012e2:	200d      	movs	r0, #13
 80012e4:	f7ff fe7e 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P3);
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	73fb      	strb	r3, [r7, #15]
		break;
 80012f2:	e015      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	6839      	ldr	r1, [r7, #0]
 80012f8:	200e      	movs	r0, #14
 80012fa:	f7ff fe73 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P4);
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	b2db      	uxtb	r3, r3
 8001306:	73fb      	strb	r3, [r7, #15]
		break;
 8001308:	e00a      	b.n	8001320 <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 800130a:	2201      	movs	r2, #1
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	200f      	movs	r0, #15
 8001310:	f7ff fe68 	bl	8000fe4 <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	f043 0320 	orr.w	r3, r3, #32
 800131a:	b2db      	uxtb	r3, r3
 800131c:	73fb      	strb	r3, [r7, #15]
		break;
 800131e:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8001320:	f107 030f 	add.w	r3, r7, #15
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	2002      	movs	r0, #2
 800132a:	f7ff fe5b 	bl	8000fe4 <nrf24_w_reg>
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop

08001338 <nrf24_set_crc>:
	data &= ~(1 << pipe);

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	460a      	mov	r2, r1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 8001348:	2101      	movs	r1, #1
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff fe72 	bl	8001034 <nrf24_r_reg>
 8001350:	4603      	mov	r3, r0
 8001352:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	f023 030c 	bic.w	r3, r3, #12
 800135a:	b2db      	uxtb	r3, r3
 800135c:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	b25a      	sxtb	r2, r3
 8001366:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	b25b      	sxtb	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b25a      	sxtb	r2, r3
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	b25b      	sxtb	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b25b      	sxtb	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 800137e:	f107 030f 	add.w	r3, r7, #15
 8001382:	2201      	movs	r2, #1
 8001384:	4619      	mov	r1, r3
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff fe2c 	bl	8000fe4 <nrf24_w_reg>
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	3b02      	subs	r3, #2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	2201      	movs	r2, #1
 80013aa:	4619      	mov	r1, r3
 80013ac:	2003      	movs	r0, #3
 80013ae:	f7ff fe19 	bl	8000fe4 <nrf24_w_reg>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
	csn_low();
 80013be:	f7ff fded 	bl	8000f9c <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 80013c2:	20e1      	movs	r0, #225	@ 0xe1
 80013c4:	f7ff fe5e 	bl	8001084 <nrf24_w_spec_cmd>
	csn_high();
 80013c8:	f7ff fddc 	bl	8000f84 <csn_high>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	csn_low();
 80013d4:	f7ff fde2 	bl	8000f9c <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 80013d8:	20e2      	movs	r0, #226	@ 0xe2
 80013da:	f7ff fe53 	bl	8001084 <nrf24_w_spec_cmd>
	csn_high();
 80013de:	f7ff fdd1 	bl	8000f84 <csn_high>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 80013f2:	23ff      	movs	r3, #255	@ 0xff
 80013f4:	71bb      	strb	r3, [r7, #6]

	csn_low();
 80013f6:	f7ff fdd1 	bl	8000f9c <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 80013fa:	1dfa      	adds	r2, r7, #7
 80013fc:	1db9      	adds	r1, r7, #6
 80013fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2301      	movs	r3, #1
 8001406:	4805      	ldr	r0, [pc, #20]	@ (800141c <nrf24_r_status+0x34>)
 8001408:	f003 f9c0 	bl	800478c <HAL_SPI_TransmitReceive>
	csn_high();
 800140c:	f7ff fdba 	bl	8000f84 <csn_high>

	return data;
 8001410:	79fb      	ldrb	r3, [r7, #7]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000025c 	.word	0x2000025c

08001420 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800142a:	f7ff ffdd 	bl	80013e8 <nrf24_r_status>
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001438:	b2db      	uxtb	r3, r3
 800143a:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	2201      	movs	r2, #1
 8001440:	4619      	mov	r1, r3
 8001442:	2007      	movs	r0, #7
 8001444:	f7ff fdce 	bl	8000fe4 <nrf24_w_reg>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800145a:	f7ff ffc5 	bl	80013e8 <nrf24_r_status>
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f043 0320 	orr.w	r3, r3, #32
 8001468:	b2db      	uxtb	r3, r3
 800146a:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	2201      	movs	r2, #1
 8001470:	4619      	mov	r1, r3
 8001472:	2007      	movs	r0, #7
 8001474:	f7ff fdb6 	bl	8000fe4 <nrf24_w_reg>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800148a:	f7ff ffad 	bl	80013e8 <nrf24_r_status>
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	b2db      	uxtb	r3, r3
 800149a:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	2007      	movs	r0, #7
 80014a4:	f7ff fd9e 	bl	8000fe4 <nrf24_w_reg>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <nrf24_listen>:
	csn_high();

	return width;
}

void nrf24_listen(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80014ba:	2101      	movs	r1, #1
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fdb9 	bl	8001034 <nrf24_r_reg>
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PRIM_RX);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80014d0:	1dfb      	adds	r3, r7, #7
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fd84 	bl	8000fe4 <nrf24_w_reg>

	ce_high();
 80014dc:	f7ff fd6a 	bl	8000fb4 <ce_high>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <nrf24_dpl>:
	data &= ~(1 << PRIM_RX);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_dpl(uint8_t en){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80014f2:	2101      	movs	r1, #1
 80014f4:	201d      	movs	r0, #29
 80014f6:	f7ff fd9d 	bl	8001034 <nrf24_r_reg>
 80014fa:	4603      	mov	r3, r0
 80014fc:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	e004      	b.n	800151a <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	f023 0304 	bic.w	r3, r3, #4
 8001516:	b2db      	uxtb	r3, r3
 8001518:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800151a:	f107 030f 	add.w	r3, r7, #15
 800151e:	2201      	movs	r2, #1
 8001520:	4619      	mov	r1, r3
 8001522:	201d      	movs	r0, #29
 8001524:	f7ff fd5e 	bl	8000fe4 <nrf24_w_reg>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <nrf24_auto_ack_all>:
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
}

void nrf24_auto_ack_all(uint8_t ack){
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 800153a:	2101      	movs	r1, #1
 800153c:	2001      	movs	r0, #1
 800153e:	f7ff fd79 	bl	8001034 <nrf24_r_reg>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]

	if(ack){
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <nrf24_auto_ack_all+0x22>
		enaa = 63;
 800154c:	233f      	movs	r3, #63	@ 0x3f
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e001      	b.n	8001556 <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8001556:	f107 030f 	add.w	r3, r7, #15
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	2001      	movs	r0, #1
 8001560:	f7ff fd40 	bl	8000fe4 <nrf24_w_reg>
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8001576:	2101      	movs	r1, #1
 8001578:	201d      	movs	r0, #29
 800157a:	f7ff fd5b 	bl	8001034 <nrf24_r_reg>
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]

	if(en){
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	b2db      	uxtb	r3, r3
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e004      	b.n	800159e <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f023 0302 	bic.w	r3, r3, #2
 800159a:	b2db      	uxtb	r3, r3
 800159c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800159e:	f107 030f 	add.w	r3, r7, #15
 80015a2:	2201      	movs	r2, #1
 80015a4:	4619      	mov	r1, r3
 80015a6:	201d      	movs	r0, #29
 80015a8:	f7ff fd1c 	bl	8000fe4 <nrf24_w_reg>
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <nrf24_auto_retr_delay>:
	}

	nrf24_w_reg(FEATURE, &feature, 1);
}

void nrf24_auto_retr_delay(uint8_t delay){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 80015be:	2101      	movs	r1, #1
 80015c0:	2004      	movs	r0, #4
 80015c2:	f7ff fd37 	bl	8001034 <nrf24_r_reg>
 80015c6:	4603      	mov	r3, r0
 80015c8:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 80015e8:	f107 030f 	add.w	r3, r7, #15
 80015ec:	2201      	movs	r2, #1
 80015ee:	4619      	mov	r1, r3
 80015f0:	2004      	movs	r0, #4
 80015f2:	f7ff fcf7 	bl	8000fe4 <nrf24_w_reg>
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8001608:	2101      	movs	r1, #1
 800160a:	2004      	movs	r0, #4
 800160c:	f7ff fd12 	bl	8001034 <nrf24_r_reg>
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	f023 030f 	bic.w	r3, r3, #15
 800161a:	b2db      	uxtb	r3, r3
 800161c:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	4313      	orrs	r3, r2
 8001624:	b2db      	uxtb	r3, r3
 8001626:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8001628:	f107 030f 	add.w	r3, r7, #15
 800162c:	2201      	movs	r2, #1
 800162e:	4619      	mov	r1, r3
 8001630:	2004      	movs	r0, #4
 8001632:	f7ff fcd7 	bl	8000fe4 <nrf24_w_reg>
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <nrf24_data_available>:

uint8_t nrf24_carrier_detect(void){
	return nrf24_r_reg(RPD, 1);
}

uint8_t nrf24_data_available(void){
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0

 	uint8_t reg_dt = nrf24_r_reg(FIFO_STATUS, 1);
 8001644:	2101      	movs	r1, #1
 8001646:	2017      	movs	r0, #23
 8001648:	f7ff fcf4 	bl	8001034 <nrf24_r_reg>
 800164c:	4603      	mov	r3, r0
 800164e:	71fb      	strb	r3, [r7, #7]

	if(!(reg_dt & (1 << RX_EMPTY))){
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <nrf24_data_available+0x20>
		return 1;
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <nrf24_data_available+0x22>
	}

	return 0;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <nrf24_receive>:

void nrf24_receive(uint8_t *data, uint8_t size){
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_RX_PAYLOAD;
 8001674:	2361      	movs	r3, #97	@ 0x61
 8001676:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8001678:	f7ff fc90 	bl	8000f9c <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800167c:	f107 010f 	add.w	r1, r7, #15
 8001680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001684:	2201      	movs	r2, #1
 8001686:	4809      	ldr	r0, [pc, #36]	@ (80016ac <nrf24_receive+0x44>)
 8001688:	f002 fe23 	bl	80042d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	b29a      	uxth	r2, r3
 8001690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4805      	ldr	r0, [pc, #20]	@ (80016ac <nrf24_receive+0x44>)
 8001698:	f002 ff5f 	bl	800455a <HAL_SPI_Receive>
	csn_high();
 800169c:	f7ff fc72 	bl	8000f84 <csn_high>

	nrf24_clear_rx_dr();
 80016a0:	f7ff febe 	bl	8001420 <nrf24_clear_rx_dr>
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000025c 	.word	0x2000025c

080016b0 <nrf24_init>:
	}

	ce_high();
}

void nrf24_init(void){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 80016b4:	f7ff fcf8 	bl	80010a8 <nrf24_pwr_up>

	nrf24_flush_tx();
 80016b8:	f7ff fe7f 	bl	80013ba <nrf24_flush_tx>
	nrf24_flush_rx();
 80016bc:	f7ff fe88 	bl	80013d0 <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 80016c0:	f7ff feae 	bl	8001420 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 80016c4:	f7ff fec4 	bl	8001450 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 80016c8:	f7ff feda 	bl	8001480 <nrf24_clear_max_rt>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <radio_setup>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void radio_setup() {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	  ce_high();
 80016d4:	f7ff fc6e 	bl	8000fb4 <ce_high>
	  HAL_Delay(5);
 80016d8:	2005      	movs	r0, #5
 80016da:	f001 fd01 	bl	80030e0 <HAL_Delay>
	  ce_low();
 80016de:	f7ff fc75 	bl	8000fcc <ce_low>

	  nrf24_init();
 80016e2:	f7ff ffe5 	bl	80016b0 <nrf24_init>

	  nrf24_auto_ack_all(auto_ack);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7ff ff22 	bl	8001530 <nrf24_auto_ack_all>
	  nrf24_en_ack_pld(disable);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff ff3d 	bl	800156c <nrf24_en_ack_pld>
	  nrf24_dpl(disable);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff fef8 	bl	80014e8 <nrf24_dpl>

	  nrf24_tx_pwr(_0dbm);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f7ff fcef 	bl	80010dc <nrf24_tx_pwr>
	  nrf24_data_rate(_1mbps);
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff fd13 	bl	800112a <nrf24_data_rate>
	  nrf24_set_channel(channel);
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <radio_setup+0x84>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fd3c 	bl	8001186 <nrf24_set_channel>
	  nrf24_set_addr_width(5);
 800170e:	2005      	movs	r0, #5
 8001710:	f7ff fe40 	bl	8001394 <nrf24_set_addr_width>

	  nrf24_pipe_pld_size(0, pld_size);
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <radio_setup+0x88>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fd50 	bl	80011c0 <nrf24_pipe_pld_size>
	  nrf24_set_crc(en_crc, _1byte);
 8001720:	2100      	movs	r1, #0
 8001722:	2001      	movs	r0, #1
 8001724:	f7ff fe08 	bl	8001338 <nrf24_set_crc>

	  nrf24_auto_retr_delay(4);
 8001728:	2004      	movs	r0, #4
 800172a:	f7ff ff43 	bl	80015b4 <nrf24_auto_retr_delay>
	  nrf24_auto_retr_limit(10);
 800172e:	200a      	movs	r0, #10
 8001730:	f7ff ff65 	bl	80015fe <nrf24_auto_retr_limit>

	  nrf24_open_tx_pipe(addr);
 8001734:	4809      	ldr	r0, [pc, #36]	@ (800175c <radio_setup+0x8c>)
 8001736:	f7ff fd35 	bl	80011a4 <nrf24_open_tx_pipe>
	  nrf24_open_rx_pipe(0, addr);
 800173a:	4908      	ldr	r1, [pc, #32]	@ (800175c <radio_setup+0x8c>)
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff fd8d 	bl	800125c <nrf24_open_rx_pipe>

	  nrf24_listen();
 8001742:	f7ff feb5 	bl	80014b0 <nrf24_listen>

	  ce_high();
 8001746:	f7ff fc35 	bl	8000fb4 <ce_high>
	  HAL_Delay(5);
 800174a:	2005      	movs	r0, #5
 800174c:	f001 fcc8 	bl	80030e0 <HAL_Delay>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000005 	.word	0x20000005
 8001758:	20000006 	.word	0x20000006
 800175c:	20000000 	.word	0x20000000

08001760 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM11)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a10      	ldr	r2, [pc, #64]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d117      	bne.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x42>
    {
        if (radio_timeout == 0)
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10f      	bne.n	800179c <HAL_TIM_PeriodElapsedCallback+0x3c>
        {
            vx = 0;
 800177c:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
            vy = 0;
 8001784:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
            vang = 0;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
            kicker = 0;
 8001794:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
        else
        {
            radio_timeout = 0; // Sinal de que rádio está funcionando
        }
    }
}
 800179a:	e002      	b.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x42>
            radio_timeout = 0; // Sinal de que rádio está funcionando
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40014800 	.word	0x40014800
 80017b4:	20000205 	.word	0x20000205
 80017b8:	200001f8 	.word	0x200001f8
 80017bc:	200001fc 	.word	0x200001fc
 80017c0:	20000200 	.word	0x20000200
 80017c4:	20000204 	.word	0x20000204

080017c8 <acionar_motor>:




void acionar_motor(int motor, float dutycycle){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	@ 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	ed87 0a00 	vstr	s0, [r7]
	TIM_HandleTypeDef *htim = NULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t channel = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
	GPIO_TypeDef* GPIOx0 = NULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
	uint16_t GPIO_Pinx0 = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	837b      	strh	r3, [r7, #26]
	GPIO_TypeDef* GPIOx1 = NULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
	uint16_t GPIO_Pinx1 = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	827b      	strh	r3, [r7, #18]


	switch(motor){
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	f200 80bd 	bhi.w	8001970 <acionar_motor+0x1a8>
 80017f6:	a201      	add	r2, pc, #4	@ (adr r2, 80017fc <acionar_motor+0x34>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	0800180d 	.word	0x0800180d
 8001800:	0800182b 	.word	0x0800182b
 8001804:	08001847 	.word	0x08001847
 8001808:	08001861 	.word	0x08001861
	case 1:
		htim = PWM_MOTOR1_TIMER;
 800180c:	4b5a      	ldr	r3, [pc, #360]	@ (8001978 <acionar_motor+0x1b0>)
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
		channel = PWM_MOTOR1_CHANNEL;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
		GPIOx0 = SENTIDO0_MOTOR1_GPIO_Port;
 8001814:	4b59      	ldr	r3, [pc, #356]	@ (800197c <acionar_motor+0x1b4>)
 8001816:	61fb      	str	r3, [r7, #28]
		GPIO_Pinx0 = SENTIDO0_MOTOR1_Pin;
 8001818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800181c:	837b      	strh	r3, [r7, #26]
		GPIOx1 = SENTIDO1_MOTOR1_GPIO_Port;
 800181e:	4b57      	ldr	r3, [pc, #348]	@ (800197c <acionar_motor+0x1b4>)
 8001820:	617b      	str	r3, [r7, #20]
		GPIO_Pinx1 = SENTIDO1_MOTOR1_Pin;
 8001822:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001826:	827b      	strh	r3, [r7, #18]
		break;
 8001828:	e029      	b.n	800187e <acionar_motor+0xb6>
	case 2:
		htim = PWM_MOTOR2_TIMER;
 800182a:	4b55      	ldr	r3, [pc, #340]	@ (8001980 <acionar_motor+0x1b8>)
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
		channel = PWM_MOTOR2_CHANNEL;
 800182e:	2304      	movs	r3, #4
 8001830:	623b      	str	r3, [r7, #32]
		GPIOx0 = SENTIDO0_MOTOR2_GPIO_Port;
 8001832:	4b54      	ldr	r3, [pc, #336]	@ (8001984 <acionar_motor+0x1bc>)
 8001834:	61fb      	str	r3, [r7, #28]
		GPIO_Pinx0 = SENTIDO0_MOTOR2_Pin;
 8001836:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800183a:	837b      	strh	r3, [r7, #26]
		GPIOx1 = SENTIDO1_MOTOR2_GPIO_Port;
 800183c:	4b51      	ldr	r3, [pc, #324]	@ (8001984 <acionar_motor+0x1bc>)
 800183e:	617b      	str	r3, [r7, #20]
		GPIO_Pinx1 = SENTIDO1_MOTOR2_Pin;
 8001840:	2304      	movs	r3, #4
 8001842:	827b      	strh	r3, [r7, #18]
			break;
 8001844:	e01b      	b.n	800187e <acionar_motor+0xb6>
	case 3:
		htim = PWM_MOTOR3_TIMER;
 8001846:	4b4e      	ldr	r3, [pc, #312]	@ (8001980 <acionar_motor+0x1b8>)
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
		channel = PWM_MOTOR3_CHANNEL;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
		GPIOx0 = SENTIDO0_MOTOR3_GPIO_Port;
 800184e:	4b4d      	ldr	r3, [pc, #308]	@ (8001984 <acionar_motor+0x1bc>)
 8001850:	61fb      	str	r3, [r7, #28]
		GPIO_Pinx0 = SENTIDO0_MOTOR3_Pin;
 8001852:	2301      	movs	r3, #1
 8001854:	837b      	strh	r3, [r7, #26]
		GPIOx1 = SENTIDO1_MOTOR3_GPIO_Port;
 8001856:	4b4b      	ldr	r3, [pc, #300]	@ (8001984 <acionar_motor+0x1bc>)
 8001858:	617b      	str	r3, [r7, #20]
		GPIO_Pinx1 = SENTIDO1_MOTOR3_Pin;
 800185a:	2302      	movs	r3, #2
 800185c:	827b      	strh	r3, [r7, #18]
			break;
 800185e:	e00e      	b.n	800187e <acionar_motor+0xb6>
	case 4:
		htim = PWM_MOTOR4_TIMER;
 8001860:	4b49      	ldr	r3, [pc, #292]	@ (8001988 <acionar_motor+0x1c0>)
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
		channel = PWM_MOTOR4_CHANNEL;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
		GPIOx0 = SENTIDO0_MOTOR4_GPIO_Port;
 8001868:	4b44      	ldr	r3, [pc, #272]	@ (800197c <acionar_motor+0x1b4>)
 800186a:	61fb      	str	r3, [r7, #28]
		GPIO_Pinx0 = SENTIDO0_MOTOR4_Pin;
 800186c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001870:	837b      	strh	r3, [r7, #26]
		GPIOx1 = SENTIDO1_MOTOR4_GPIO_Port;
 8001872:	4b42      	ldr	r3, [pc, #264]	@ (800197c <acionar_motor+0x1b4>)
 8001874:	617b      	str	r3, [r7, #20]
		GPIO_Pinx1 = SENTIDO1_MOTOR4_Pin;
 8001876:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800187a:	827b      	strh	r3, [r7, #18]
			break;
 800187c:	bf00      	nop
	default:
		return;
	}
	int sentido = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
	if (dutycycle < 0){
 8001882:	edd7 7a00 	vldr	s15, [r7]
 8001886:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	d515      	bpl.n	80018bc <acionar_motor+0xf4>
		HAL_GPIO_WritePin(GPIOx0, GPIO_Pinx0, GPIO_PIN_SET);
 8001890:	8b7b      	ldrh	r3, [r7, #26]
 8001892:	2201      	movs	r2, #1
 8001894:	4619      	mov	r1, r3
 8001896:	69f8      	ldr	r0, [r7, #28]
 8001898:	f001 fedc 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx1, GPIO_Pinx1, GPIO_PIN_RESET);
 800189c:	8a7b      	ldrh	r3, [r7, #18]
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	6978      	ldr	r0, [r7, #20]
 80018a4:	f001 fed6 	bl	8003654 <HAL_GPIO_WritePin>
		dutycycle = -dutycycle;
 80018a8:	edd7 7a00 	vldr	s15, [r7]
 80018ac:	eef1 7a67 	vneg.f32	s15, s15
 80018b0:	edc7 7a00 	vstr	s15, [r7]
		sentido = -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	e00d      	b.n	80018d8 <acionar_motor+0x110>
	}
	else {
		HAL_GPIO_WritePin(GPIOx0, GPIO_Pinx0, GPIO_PIN_RESET);
 80018bc:	8b7b      	ldrh	r3, [r7, #26]
 80018be:	2200      	movs	r2, #0
 80018c0:	4619      	mov	r1, r3
 80018c2:	69f8      	ldr	r0, [r7, #28]
 80018c4:	f001 fec6 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx1, GPIO_Pinx1, GPIO_PIN_SET);
 80018c8:	8a7b      	ldrh	r3, [r7, #18]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4619      	mov	r1, r3
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f001 fec0 	bl	8003654 <HAL_GPIO_WritePin>
		sentido = 1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
	}
	if (dutycycle == 0){
 80018d8:	edd7 7a00 	vldr	s15, [r7]
 80018dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	d10b      	bne.n	80018fe <acionar_motor+0x136>
		HAL_GPIO_WritePin(GPIOx0, GPIO_Pinx0, GPIO_PIN_RESET);
 80018e6:	8b7b      	ldrh	r3, [r7, #26]
 80018e8:	2200      	movs	r2, #0
 80018ea:	4619      	mov	r1, r3
 80018ec:	69f8      	ldr	r0, [r7, #28]
 80018ee:	f001 feb1 	bl	8003654 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx1, GPIO_Pinx1, GPIO_PIN_RESET);
 80018f2:	8a7b      	ldrh	r3, [r7, #18]
 80018f4:	2200      	movs	r2, #0
 80018f6:	4619      	mov	r1, r3
 80018f8:	6978      	ldr	r0, [r7, #20]
 80018fa:	f001 feab 	bl	8003654 <HAL_GPIO_WritePin>
	}


	if (dutycycle > 100.0f){
 80018fe:	edd7 7a00 	vldr	s15, [r7]
 8001902:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800198c <acionar_motor+0x1c4>
 8001906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190e:	dd01      	ble.n	8001914 <acionar_motor+0x14c>
		dutycycle = 100.0f;
 8001910:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <acionar_motor+0x1c8>)
 8001912:	603b      	str	r3, [r7, #0]
	}

	uint32_t frequencia = (uint32_t)((dutycycle / 100.0f) * (ARR));
 8001914:	edd7 7a00 	vldr	s15, [r7]
 8001918:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800198c <acionar_motor+0x1c4>
 800191c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001920:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8001994 <acionar_motor+0x1cc>
 8001924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001930:	ee17 3a90 	vmov	r3, s15
 8001934:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(htim, channel, frequencia);
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d104      	bne.n	8001946 <acionar_motor+0x17e>
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	635a      	str	r2, [r3, #52]	@ 0x34
 8001944:	e015      	b.n	8001972 <acionar_motor+0x1aa>
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	2b04      	cmp	r3, #4
 800194a:	d104      	bne.n	8001956 <acionar_motor+0x18e>
 800194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	6393      	str	r3, [r2, #56]	@ 0x38
 8001954:	e00d      	b.n	8001972 <acionar_motor+0x1aa>
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	2b08      	cmp	r3, #8
 800195a:	d104      	bne.n	8001966 <acionar_motor+0x19e>
 800195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001964:	e005      	b.n	8001972 <acionar_motor+0x1aa>
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	6413      	str	r3, [r2, #64]	@ 0x40
 800196e:	e000      	b.n	8001972 <acionar_motor+0x1aa>
		return;
 8001970:	bf00      	nop
}
 8001972:	3728      	adds	r7, #40	@ 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200002b4 	.word	0x200002b4
 800197c:	40020000 	.word	0x40020000
 8001980:	20000344 	.word	0x20000344
 8001984:	40020400 	.word	0x40020400
 8001988:	200002fc 	.word	0x200002fc
 800198c:	42c80000 	.word	0x42c80000
 8001990:	42c80000 	.word	0x42c80000
 8001994:	000003e8 	.word	0x000003e8

08001998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800199c:	b0bf      	sub	sp, #252	@ 0xfc
 800199e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019a0:	f001 fb2c 	bl	8002ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a4:	f000 fce4 	bl	8002370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a8:	f000 ff44 	bl	8002834 <MX_GPIO_Init>
  MX_SPI1_Init();
 80019ac:	f000 fd76 	bl	800249c <MX_SPI1_Init>
  MX_TIM1_Init();
 80019b0:	f000 fdaa 	bl	8002508 <MX_TIM1_Init>
  MX_TIM2_Init();
 80019b4:	f000 fe2c 	bl	8002610 <MX_TIM2_Init>
  MX_TIM11_Init();
 80019b8:	f000 fee6 	bl	8002788 <MX_TIM11_Init>
  MX_TIM3_Init();
 80019bc:	f000 fe80 	bl	80026c0 <MX_TIM3_Init>
  MX_I2C1_Init();
 80019c0:	f000 fd3e 	bl	8002440 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80019c4:	f000 ff0c 	bl	80027e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019c8:	2100      	movs	r1, #0
 80019ca:	48cf      	ldr	r0, [pc, #828]	@ (8001d08 <main+0x370>)
 80019cc:	f003 facc 	bl	8004f68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80019d0:	2100      	movs	r1, #0
 80019d2:	48ce      	ldr	r0, [pc, #824]	@ (8001d0c <main+0x374>)
 80019d4:	f003 fac8 	bl	8004f68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80019d8:	2100      	movs	r1, #0
 80019da:	48cd      	ldr	r0, [pc, #820]	@ (8001d10 <main+0x378>)
 80019dc:	f003 fac4 	bl	8004f68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80019e0:	2104      	movs	r1, #4
 80019e2:	48cb      	ldr	r0, [pc, #812]	@ (8001d10 <main+0x378>)
 80019e4:	f003 fac0 	bl	8004f68 <HAL_TIM_PWM_Start>

  //radio configuration
  radio_setup();
 80019e8:	f7ff fe72 	bl	80016d0 <radio_setup>
  HAL_TIM_Base_Start_IT(&htim11);
 80019ec:	48c9      	ldr	r0, [pc, #804]	@ (8001d14 <main+0x37c>)
 80019ee:	f003 fa09 	bl	8004e04 <HAL_TIM_Base_Start_IT>
  //UART variables
  char received_char[1];
  received_char[0] = 'a';
 80019f2:	2361      	movs	r3, #97	@ 0x61
 80019f4:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
  char msg[64];

  //Radio variables
  uint8_t rx_buffer[pld_size];
 80019f8:	4bc7      	ldr	r3, [pc, #796]	@ (8001d18 <main+0x380>)
 80019fa:	7819      	ldrb	r1, [r3, #0]
 80019fc:	460b      	mov	r3, r1
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a04:	b2cb      	uxtb	r3, r1
 8001a06:	2200      	movs	r2, #0
 8001a08:	4698      	mov	r8, r3
 8001a0a:	4691      	mov	r9, r2
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a20:	b2cb      	uxtb	r3, r1
 8001a22:	2200      	movs	r2, #0
 8001a24:	461c      	mov	r4, r3
 8001a26:	4615      	mov	r5, r2
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	00eb      	lsls	r3, r5, #3
 8001a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a36:	00e2      	lsls	r2, r4, #3
 8001a38:	460b      	mov	r3, r1
 8001a3a:	3307      	adds	r3, #7
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	ebad 0d03 	sub.w	sp, sp, r3
 8001a44:	ab08      	add	r3, sp, #32
 8001a46:	3300      	adds	r3, #0
 8001a48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  Pacote pacote_recebido;

  //cinematics variables

  float J[4][3] = {
  	  	    {-sin(a1), cos(a1), R},
 8001a4c:	4bb3      	ldr	r3, [pc, #716]	@ (8001d1c <main+0x384>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd82 	bl	8000558 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	ec43 2b10 	vmov	d0, r2, r3
 8001a5c:	f007 fb70 	bl	8009140 <sin>
 8001a60:	ec53 2b10 	vmov	r2, r3, d0
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f8a6 	bl	8000bb8 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
  float J[4][3] = {
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eef1 7a67 	vneg.f32	s15, s15
 8001a76:	edc7 7a04 	vstr	s15, [r7, #16]
  	  	    {-sin(a1), cos(a1), R},
 8001a7a:	4ba8      	ldr	r3, [pc, #672]	@ (8001d1c <main+0x384>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd6b 	bl	8000558 <__aeabi_f2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	ec43 2b10 	vmov	d0, r2, r3
 8001a8a:	f007 fb05 	bl	8009098 <cos>
 8001a8e:	ec53 2b10 	vmov	r2, r3, d0
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7ff f88f 	bl	8000bb8 <__aeabi_d2f>
 8001a9a:	4603      	mov	r3, r0
  float J[4][3] = {
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	4ba0      	ldr	r3, [pc, #640]	@ (8001d20 <main+0x388>)
 8001aa0:	61bb      	str	r3, [r7, #24]
  	  	    {-sin(a2), cos(a2), R},
 8001aa2:	4ba0      	ldr	r3, [pc, #640]	@ (8001d24 <main+0x38c>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd57 	bl	8000558 <__aeabi_f2d>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	ec43 2b10 	vmov	d0, r2, r3
 8001ab2:	f007 fb45 	bl	8009140 <sin>
 8001ab6:	ec53 2b10 	vmov	r2, r3, d0
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff f87b 	bl	8000bb8 <__aeabi_d2f>
 8001ac2:	4603      	mov	r3, r0
  float J[4][3] = {
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eef1 7a67 	vneg.f32	s15, s15
 8001acc:	edc7 7a07 	vstr	s15, [r7, #28]
  	  	    {-sin(a2), cos(a2), R},
 8001ad0:	4b94      	ldr	r3, [pc, #592]	@ (8001d24 <main+0x38c>)
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fd40 	bl	8000558 <__aeabi_f2d>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	ec43 2b10 	vmov	d0, r2, r3
 8001ae0:	f007 fada 	bl	8009098 <cos>
 8001ae4:	ec53 2b10 	vmov	r2, r3, d0
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f864 	bl	8000bb8 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
  float J[4][3] = {
 8001af2:	623b      	str	r3, [r7, #32]
 8001af4:	4b8a      	ldr	r3, [pc, #552]	@ (8001d20 <main+0x388>)
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
  	  	    {-sin(a3), cos(a3), R},
 8001af8:	4b8b      	ldr	r3, [pc, #556]	@ (8001d28 <main+0x390>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd2c 	bl	8000558 <__aeabi_f2d>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	ec43 2b10 	vmov	d0, r2, r3
 8001b08:	f007 fb1a 	bl	8009140 <sin>
 8001b0c:	ec53 2b10 	vmov	r2, r3, d0
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	f7ff f850 	bl	8000bb8 <__aeabi_d2f>
 8001b18:	4603      	mov	r3, r0
  float J[4][3] = {
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eef1 7a67 	vneg.f32	s15, s15
 8001b22:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  	  	    {-sin(a3), cos(a3), R},
 8001b26:	4b80      	ldr	r3, [pc, #512]	@ (8001d28 <main+0x390>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd15 	bl	8000558 <__aeabi_f2d>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	ec43 2b10 	vmov	d0, r2, r3
 8001b36:	f007 faaf 	bl	8009098 <cos>
 8001b3a:	ec53 2b10 	vmov	r2, r3, d0
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7ff f839 	bl	8000bb8 <__aeabi_d2f>
 8001b46:	4603      	mov	r3, r0
  float J[4][3] = {
 8001b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b4a:	4b75      	ldr	r3, [pc, #468]	@ (8001d20 <main+0x388>)
 8001b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  	  	    {-sin(a4), cos(a4), R}
 8001b4e:	4b77      	ldr	r3, [pc, #476]	@ (8001d2c <main+0x394>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fd01 	bl	8000558 <__aeabi_f2d>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	ec43 2b10 	vmov	d0, r2, r3
 8001b5e:	f007 faef 	bl	8009140 <sin>
 8001b62:	ec53 2b10 	vmov	r2, r3, d0
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7ff f825 	bl	8000bb8 <__aeabi_d2f>
 8001b6e:	4603      	mov	r3, r0
  float J[4][3] = {
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eef1 7a67 	vneg.f32	s15, s15
 8001b78:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  	  	    {-sin(a4), cos(a4), R}
 8001b7c:	4b6b      	ldr	r3, [pc, #428]	@ (8001d2c <main+0x394>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fcea 	bl	8000558 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	ec43 2b10 	vmov	d0, r2, r3
 8001b8c:	f007 fa84 	bl	8009098 <cos>
 8001b90:	ec53 2b10 	vmov	r2, r3, d0
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f80e 	bl	8000bb8 <__aeabi_d2f>
 8001b9c:	4603      	mov	r3, r0
  float J[4][3] = {
 8001b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ba0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d20 <main+0x388>)
 8001ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  	  	  };
  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001baa:	4861      	ldr	r0, [pc, #388]	@ (8001d30 <main+0x398>)
 8001bac:	f001 fd52 	bl	8003654 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart2, (uint8_t*)"Iniciado!", strlen("Iniciado!"), 100);
 8001bb0:	2364      	movs	r3, #100	@ 0x64
 8001bb2:	2209      	movs	r2, #9
 8001bb4:	495f      	ldr	r1, [pc, #380]	@ (8001d34 <main+0x39c>)
 8001bb6:	4860      	ldr	r0, [pc, #384]	@ (8001d38 <main+0x3a0>)
 8001bb8:	f003 ffbc 	bl	8005b34 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pacote_recebido.Vx = 0;
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	f8c7 3041 	str.w	r3, [r7, #65]	@ 0x41
	  pacote_recebido.Vy = 0;
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	f8c7 3045 	str.w	r3, [r7, #69]	@ 0x45
	  pacote_recebido.Vang = 0;
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	f8c7 3049 	str.w	r3, [r7, #73]	@ 0x49
	  pacote_recebido.id = -1;
 8001bd4:	23ff      	movs	r3, #255	@ 0xff
 8001bd6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	  pacote_recebido.kicker = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

	 if (HAL_UART_Receive(&huart2, received_char, 1, 10) == HAL_OK) {
 8001be0:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001be4:	230a      	movs	r3, #10
 8001be6:	2201      	movs	r2, #1
 8001be8:	4853      	ldr	r0, [pc, #332]	@ (8001d38 <main+0x3a0>)
 8001bea:	f004 f82e 	bl	8005c4a <HAL_UART_Receive>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d112      	bne.n	8001c1a <main+0x282>
	  	  	  HAL_UART_Transmit(&huart2, (uint8_t*)"Eco: ", strlen("Eco: "), 100);
 8001bf4:	2364      	movs	r3, #100	@ 0x64
 8001bf6:	2205      	movs	r2, #5
 8001bf8:	4950      	ldr	r1, [pc, #320]	@ (8001d3c <main+0x3a4>)
 8001bfa:	484f      	ldr	r0, [pc, #316]	@ (8001d38 <main+0x3a0>)
 8001bfc:	f003 ff9a 	bl	8005b34 <HAL_UART_Transmit>
	  	  	  HAL_UART_Transmit(&huart2, received_char, 1, 100);
 8001c00:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001c04:	2364      	movs	r3, #100	@ 0x64
 8001c06:	2201      	movs	r2, #1
 8001c08:	484b      	ldr	r0, [pc, #300]	@ (8001d38 <main+0x3a0>)
 8001c0a:	f003 ff93 	bl	8005b34 <HAL_UART_Transmit>
	  	  	  HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 100); // Envia nova linha
 8001c0e:	2364      	movs	r3, #100	@ 0x64
 8001c10:	2202      	movs	r2, #2
 8001c12:	494b      	ldr	r1, [pc, #300]	@ (8001d40 <main+0x3a8>)
 8001c14:	4848      	ldr	r0, [pc, #288]	@ (8001d38 <main+0x3a0>)
 8001c16:	f003 ff8d 	bl	8005b34 <HAL_UART_Transmit>
	  	  }
	  if(nrf24_data_available()) {
 8001c1a:	f7ff fd10 	bl	800163e <nrf24_data_available>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 809b 	beq.w	8001d5c <main+0x3c4>
		  	  nrf24_receive(rx_buffer, pld_size);
 8001c26:	4b3c      	ldr	r3, [pc, #240]	@ (8001d18 <main+0x380>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001c30:	f7ff fd1a 	bl	8001668 <nrf24_receive>
		  	  memcpy(&pacote_recebido, rx_buffer, sizeof(Pacote));
 8001c34:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001c38:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c3c:	4614      	mov	r4, r2
 8001c3e:	6820      	ldr	r0, [r4, #0]
 8001c40:	6861      	ldr	r1, [r4, #4]
 8001c42:	68a2      	ldr	r2, [r4, #8]
 8001c44:	c307      	stmia	r3!, {r0, r1, r2}
 8001c46:	89a2      	ldrh	r2, [r4, #12]
 8001c48:	801a      	strh	r2, [r3, #0]
		  	  if(pacote_recebido.id == id){
 8001c4a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001c4e:	2205      	movs	r2, #5
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d14e      	bne.n	8001cf2 <main+0x35a>
		  		  snprintf(msg, sizeof(msg), "Radio: %d %.2f %.2f %.2f %d\r\n", pacote_recebido.id, pacote_recebido.Vx, pacote_recebido.Vy,pacote_recebido.Vang,pacote_recebido.kicker);
 8001c54:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001c58:	461e      	mov	r6, r3
 8001c5a:	f8d7 3041 	ldr.w	r3, [r7, #65]	@ 0x41
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc7a 	bl	8000558 <__aeabi_f2d>
 8001c64:	4604      	mov	r4, r0
 8001c66:	460d      	mov	r5, r1
 8001c68:	f8d7 3045 	ldr.w	r3, [r7, #69]	@ 0x45
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc73 	bl	8000558 <__aeabi_f2d>
 8001c72:	4680      	mov	r8, r0
 8001c74:	4689      	mov	r9, r1
 8001c76:	f8d7 3049 	ldr.w	r3, [r7, #73]	@ 0x49
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc6c 	bl	8000558 <__aeabi_f2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 8001c88:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001c8c:	9106      	str	r1, [sp, #24]
 8001c8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c92:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c96:	e9cd 4500 	strd	r4, r5, [sp]
 8001c9a:	4633      	mov	r3, r6
 8001c9c:	4a29      	ldr	r2, [pc, #164]	@ (8001d44 <main+0x3ac>)
 8001c9e:	2140      	movs	r1, #64	@ 0x40
 8001ca0:	f005 f8b2 	bl	8006e08 <sniprintf>
		  	  	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8001ca4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fae9 	bl	8000280 <strlen>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001cb6:	2364      	movs	r3, #100	@ 0x64
 8001cb8:	481f      	ldr	r0, [pc, #124]	@ (8001d38 <main+0x3a0>)
 8001cba:	f003 ff3b 	bl	8005b34 <HAL_UART_Transmit>
		  	  	  vx = pacote_recebido.Vx;
 8001cbe:	f8d7 3041 	ldr.w	r3, [r7, #65]	@ 0x41
 8001cc2:	4a21      	ldr	r2, [pc, #132]	@ (8001d48 <main+0x3b0>)
 8001cc4:	6013      	str	r3, [r2, #0]
		  	  	  vy = pacote_recebido.Vy;
 8001cc6:	f8d7 3045 	ldr.w	r3, [r7, #69]	@ 0x45
 8001cca:	4a20      	ldr	r2, [pc, #128]	@ (8001d4c <main+0x3b4>)
 8001ccc:	6013      	str	r3, [r2, #0]
		  	  	  vang = pacote_recebido.Vang;
 8001cce:	f8d7 3049 	ldr.w	r3, [r7, #73]	@ 0x49
 8001cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d50 <main+0x3b8>)
 8001cd4:	6013      	str	r3, [r2, #0]
		  	  	  kicker = pacote_recebido.kicker;
 8001cd6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001cda:	4b1e      	ldr	r3, [pc, #120]	@ (8001d54 <main+0x3bc>)
 8001cdc:	701a      	strb	r2, [r3, #0]
		  	  	  radio_timeout = 1;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <main+0x3c0>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
		  	  	  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cea:	4811      	ldr	r0, [pc, #68]	@ (8001d30 <main+0x398>)
 8001cec:	f001 fcb2 	bl	8003654 <HAL_GPIO_WritePin>
 8001cf0:	e03d      	b.n	8001d6e <main+0x3d6>
		  	  } else {
		  		HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cf8:	480d      	ldr	r0, [pc, #52]	@ (8001d30 <main+0x398>)
 8001cfa:	f001 fcab 	bl	8003654 <HAL_GPIO_WritePin>
		  		radio_timeout = 0;
 8001cfe:	4b16      	ldr	r3, [pc, #88]	@ (8001d58 <main+0x3c0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	e033      	b.n	8001d6e <main+0x3d6>
 8001d06:	bf00      	nop
 8001d08:	200002b4 	.word	0x200002b4
 8001d0c:	200002fc 	.word	0x200002fc
 8001d10:	20000344 	.word	0x20000344
 8001d14:	2000038c 	.word	0x2000038c
 8001d18:	20000006 	.word	0x20000006
 8001d1c:	3f490fd8 	.word	0x3f490fd8
 8001d20:	3dbb645a 	.word	0x3dbb645a
 8001d24:	4016cbd1 	.word	0x4016cbd1
 8001d28:	407b53ce 	.word	0x407b53ce
 8001d2c:	40afede5 	.word	0x40afede5
 8001d30:	40020800 	.word	0x40020800
 8001d34:	0800a1a0 	.word	0x0800a1a0
 8001d38:	200003d4 	.word	0x200003d4
 8001d3c:	0800a1ac 	.word	0x0800a1ac
 8001d40:	0800a1b4 	.word	0x0800a1b4
 8001d44:	0800a1b8 	.word	0x0800a1b8
 8001d48:	200001f8 	.word	0x200001f8
 8001d4c:	200001fc 	.word	0x200001fc
 8001d50:	20000200 	.word	0x20000200
 8001d54:	20000204 	.word	0x20000204
 8001d58:	20000205 	.word	0x20000205
		  	  }
	  } else {
		  radio_timeout = 0;
 8001d5c:	4bd2      	ldr	r3, [pc, #840]	@ (80020a8 <main+0x710>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d68:	48d0      	ldr	r0, [pc, #832]	@ (80020ac <main+0x714>)
 8001d6a:	f001 fc73 	bl	8003654 <HAL_GPIO_WritePin>
	  }
	  if(kicker  > 8 && kicker < 12){
 8001d6e:	4bd0      	ldr	r3, [pc, #832]	@ (80020b0 <main+0x718>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d942      	bls.n	8001dfe <main+0x466>
 8001d78:	4bcd      	ldr	r3, [pc, #820]	@ (80020b0 <main+0x718>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b0b      	cmp	r3, #11
 8001d80:	d83d      	bhi.n	8001dfe <main+0x466>
		  HAL_Delay(4000);
 8001d82:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001d86:	f001 f9ab 	bl	80030e0 <HAL_Delay>
		  for(int i = 0; i<4; i++){
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001d90:	e030      	b.n	8001df4 <main+0x45c>
			  acionar_motor(i+1, 1000);
 8001d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001d96:	3301      	adds	r3, #1
 8001d98:	ed9f 0ac6 	vldr	s0, [pc, #792]	@ 80020b4 <main+0x71c>
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fd13 	bl	80017c8 <acionar_motor>
			  HAL_Delay(1000);
 8001da2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001da6:	f001 f99b 	bl	80030e0 <HAL_Delay>
			  acionar_motor(i+1, 0);
 8001daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001dae:	3301      	adds	r3, #1
 8001db0:	ed9f 0ac1 	vldr	s0, [pc, #772]	@ 80020b8 <main+0x720>
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fd07 	bl	80017c8 <acionar_motor>
			  HAL_Delay(1000);
 8001dba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dbe:	f001 f98f 	bl	80030e0 <HAL_Delay>
			  acionar_motor(i+1, -1000);
 8001dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	ed9f 0abc 	vldr	s0, [pc, #752]	@ 80020bc <main+0x724>
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fcfb 	bl	80017c8 <acionar_motor>
			  HAL_Delay(1000);
 8001dd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dd6:	f001 f983 	bl	80030e0 <HAL_Delay>
			  acionar_motor(i+1, 0);
 8001dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001dde:	3301      	adds	r3, #1
 8001de0:	ed9f 0ab5 	vldr	s0, [pc, #724]	@ 80020b8 <main+0x720>
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fcef 	bl	80017c8 <acionar_motor>
		  for(int i = 0; i<4; i++){
 8001dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001dee:	3301      	adds	r3, #1
 8001df0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001df4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	ddca      	ble.n	8001d92 <main+0x3fa>
		  }
		  continue;
 8001dfc:	e2ac      	b.n	8002358 <main+0x9c0>
	  }
	  if(kicker  > 14 && kicker < 16){
 8001dfe:	4bac      	ldr	r3, [pc, #688]	@ (80020b0 <main+0x718>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b0e      	cmp	r3, #14
 8001e06:	d94e      	bls.n	8001ea6 <main+0x50e>
 8001e08:	4ba9      	ldr	r3, [pc, #676]	@ (80020b0 <main+0x718>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b0f      	cmp	r3, #15
 8001e10:	d849      	bhi.n	8001ea6 <main+0x50e>
	  		  HAL_Delay(4000);
 8001e12:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001e16:	f001 f963 	bl	80030e0 <HAL_Delay>
	  		  for(int i = 0; i<4; i++){
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e20:	e03c      	b.n	8001e9c <main+0x504>
	  			  acionar_motor(1, 1000);
 8001e22:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 80020b4 <main+0x71c>
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff fcce 	bl	80017c8 <acionar_motor>
	  			  HAL_Delay(1000);
 8001e2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e30:	f001 f956 	bl	80030e0 <HAL_Delay>
	  			  acionar_motor(1, 0);
 8001e34:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 80020b8 <main+0x720>
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff fcc5 	bl	80017c8 <acionar_motor>
	  			  acionar_motor(2, 1000);
 8001e3e:	ed9f 0a9d 	vldr	s0, [pc, #628]	@ 80020b4 <main+0x71c>
 8001e42:	2002      	movs	r0, #2
 8001e44:	f7ff fcc0 	bl	80017c8 <acionar_motor>
	  			  HAL_Delay(1000);
 8001e48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e4c:	f001 f948 	bl	80030e0 <HAL_Delay>
	  			  acionar_motor(2, 0);
 8001e50:	ed9f 0a99 	vldr	s0, [pc, #612]	@ 80020b8 <main+0x720>
 8001e54:	2002      	movs	r0, #2
 8001e56:	f7ff fcb7 	bl	80017c8 <acionar_motor>
	  			  acionar_motor(3, 1000);
 8001e5a:	ed9f 0a96 	vldr	s0, [pc, #600]	@ 80020b4 <main+0x71c>
 8001e5e:	2003      	movs	r0, #3
 8001e60:	f7ff fcb2 	bl	80017c8 <acionar_motor>
	  			  HAL_Delay(1000);
 8001e64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e68:	f001 f93a 	bl	80030e0 <HAL_Delay>
	  			  acionar_motor(3, 0);
 8001e6c:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 80020b8 <main+0x720>
 8001e70:	2003      	movs	r0, #3
 8001e72:	f7ff fca9 	bl	80017c8 <acionar_motor>
	  			  acionar_motor(4, 1000);
 8001e76:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 80020b4 <main+0x71c>
 8001e7a:	2004      	movs	r0, #4
 8001e7c:	f7ff fca4 	bl	80017c8 <acionar_motor>
	  			  HAL_Delay(1000);
 8001e80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e84:	f001 f92c 	bl	80030e0 <HAL_Delay>
	  			  acionar_motor(4, 0);
 8001e88:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 80020b8 <main+0x720>
 8001e8c:	2004      	movs	r0, #4
 8001e8e:	f7ff fc9b 	bl	80017c8 <acionar_motor>
	  		  for(int i = 0; i<4; i++){
 8001e92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e96:	3301      	adds	r3, #1
 8001e98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	ddbe      	ble.n	8001e22 <main+0x48a>
	  		  }
	  		  continue;
 8001ea4:	e258      	b.n	8002358 <main+0x9c0>
	  	  }
	  if(kicker > 18 && kicker < 22){
 8001ea6:	4b82      	ldr	r3, [pc, #520]	@ (80020b0 <main+0x718>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b12      	cmp	r3, #18
 8001eae:	f240 80a1 	bls.w	8001ff4 <main+0x65c>
 8001eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80020b0 <main+0x718>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b15      	cmp	r3, #21
 8001eba:	f200 809b 	bhi.w	8001ff4 <main+0x65c>
		  	for(int i = 0; i<11; i++){
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ec4:	e044      	b.n	8001f50 <main+0x5b8>
	  			  acionar_motor(1, i*10);
 8001ec6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eda:	eeb0 0a67 	vmov.f32	s0, s15
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f7ff fc72 	bl	80017c8 <acionar_motor>
	  			  acionar_motor(2, i*10);
 8001ee4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	ee07 3a90 	vmov	s15, r3
 8001ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8001efc:	2002      	movs	r0, #2
 8001efe:	f7ff fc63 	bl	80017c8 <acionar_motor>
	  			  acionar_motor(3, i*10);
 8001f02:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f16:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1a:	2003      	movs	r0, #3
 8001f1c:	f7ff fc54 	bl	80017c8 <acionar_motor>
	  			  acionar_motor(4, i*10);
 8001f20:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f34:	eeb0 0a67 	vmov.f32	s0, s15
 8001f38:	2004      	movs	r0, #4
 8001f3a:	f7ff fc45 	bl	80017c8 <acionar_motor>
	  			  HAL_Delay(2000);
 8001f3e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f42:	f001 f8cd 	bl	80030e0 <HAL_Delay>
		  	for(int i = 0; i<11; i++){
 8001f46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001f50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f54:	2b0a      	cmp	r3, #10
 8001f56:	ddb6      	ble.n	8001ec6 <main+0x52e>
	  		}
	  		for(int i = 0; i<11; i++){
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f5e:	e044      	b.n	8001fea <main+0x652>
	  			  acionar_motor(1, -i*10);
 8001f60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f64:	f06f 0209 	mvn.w	r2, #9
 8001f68:	fb02 f303 	mul.w	r3, r2, r3
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f74:	eeb0 0a67 	vmov.f32	s0, s15
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7ff fc25 	bl	80017c8 <acionar_motor>
	  			  acionar_motor(2, -i*10);
 8001f7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f82:	f06f 0209 	mvn.w	r2, #9
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f92:	eeb0 0a67 	vmov.f32	s0, s15
 8001f96:	2002      	movs	r0, #2
 8001f98:	f7ff fc16 	bl	80017c8 <acionar_motor>
	  			  acionar_motor(3, -i*10);
 8001f9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001fa0:	f06f 0209 	mvn.w	r2, #9
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	f7ff fc07 	bl	80017c8 <acionar_motor>
	  			  acionar_motor(4, -i*10);
 8001fba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001fbe:	f06f 0209 	mvn.w	r2, #9
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fce:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd2:	2004      	movs	r0, #4
 8001fd4:	f7ff fbf8 	bl	80017c8 <acionar_motor>
	  			  HAL_Delay(2000);
 8001fd8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fdc:	f001 f880 	bl	80030e0 <HAL_Delay>
	  		for(int i = 0; i<11; i++){
 8001fe0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001fee:	2b0a      	cmp	r3, #10
 8001ff0:	ddb6      	ble.n	8001f60 <main+0x5c8>
	  		}
	  		continue;
 8001ff2:	e1b1      	b.n	8002358 <main+0x9c0>
	  }

	    float velocidade_angular[4];
	    for (int i = 0; i < 4; i++) {
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001ffa:	e048      	b.n	800208e <main+0x6f6>
	        velocidade_angular[i] = (1.0f / Rr) * (J[i][0] * vx + J[i][1] * vy + J[i][2] * vang);
 8001ffc:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80020c0 <main+0x728>
 8002000:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002008:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	33d8      	adds	r3, #216	@ 0xd8
 8002016:	443b      	add	r3, r7
 8002018:	3bc8      	subs	r3, #200	@ 0xc8
 800201a:	edd3 6a00 	vldr	s13, [r3]
 800201e:	4b29      	ldr	r3, [pc, #164]	@ (80020c4 <main+0x72c>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002028:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	33d8      	adds	r3, #216	@ 0xd8
 8002036:	443b      	add	r3, r7
 8002038:	3bc4      	subs	r3, #196	@ 0xc4
 800203a:	ed93 6a00 	vldr	s12, [r3]
 800203e:	4b22      	ldr	r3, [pc, #136]	@ (80020c8 <main+0x730>)
 8002040:	edd3 7a00 	vldr	s15, [r3]
 8002044:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002048:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800204c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	33d8      	adds	r3, #216	@ 0xd8
 800205a:	443b      	add	r3, r7
 800205c:	3bc0      	subs	r3, #192	@ 0xc0
 800205e:	ed93 6a00 	vldr	s12, [r3]
 8002062:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <main+0x734>)
 8002064:	edd3 7a00 	vldr	s15, [r3]
 8002068:	ee66 7a27 	vmul.f32	s15, s12, s15
 800206c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002074:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	33d8      	adds	r3, #216	@ 0xd8
 800207c:	443b      	add	r3, r7
 800207e:	3bd8      	subs	r3, #216	@ 0xd8
 8002080:	edc3 7a00 	vstr	s15, [r3]
	    for (int i = 0; i < 4; i++) {
 8002084:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002088:	3301      	adds	r3, #1
 800208a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800208e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002092:	2b03      	cmp	r3, #3
 8002094:	ddb2      	ble.n	8001ffc <main+0x664>
	    }

	    // 2. Normalizar pelo máximo permitido
	    float max_val = 0.0f;
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	    for (int i = 0; i < 4; i++) {
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80020a4:	e034      	b.n	8002110 <main+0x778>
 80020a6:	bf00      	nop
 80020a8:	20000205 	.word	0x20000205
 80020ac:	40020800 	.word	0x40020800
 80020b0:	20000204 	.word	0x20000204
 80020b4:	447a0000 	.word	0x447a0000
 80020b8:	00000000 	.word	0x00000000
 80020bc:	c47a0000 	.word	0xc47a0000
 80020c0:	3ca3d70a 	.word	0x3ca3d70a
 80020c4:	200001f8 	.word	0x200001f8
 80020c8:	200001fc 	.word	0x200001fc
 80020cc:	20000200 	.word	0x20000200
 80020d0:	41ea927e 	.word	0x41ea927e
	        float abs_val = fabs(velocidade_angular[i]);
 80020d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	33d8      	adds	r3, #216	@ 0xd8
 80020dc:	443b      	add	r3, r7
 80020de:	3bd8      	subs	r3, #216	@ 0xd8
 80020e0:	edd3 7a00 	vldr	s15, [r3]
 80020e4:	eef0 7ae7 	vabs.f32	s15, s15
 80020e8:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	        if (abs_val > max_val) max_val = abs_val;
 80020ec:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80020f0:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 80020f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	dd03      	ble.n	8002106 <main+0x76e>
 80020fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002102:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	    for (int i = 0; i < 4; i++) {
 8002106:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800210a:	3301      	adds	r3, #1
 800210c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002110:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002114:	2b03      	cmp	r3, #3
 8002116:	dddd      	ble.n	80020d4 <main+0x73c>
	    }
	    if (max_val > velocidade_maxima_motor) {
 8002118:	ed1f 7a13 	vldr	s14, [pc, #-76]	@ 80020d0 <main+0x738>
 800211c:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8002120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002128:	dd28      	ble.n	800217c <main+0x7e4>
	        float escala = velocidade_maxima_motor / max_val;
 800212a:	ed5f 6a17 	vldr	s13, [pc, #-92]	@ 80020d0 <main+0x738>
 800212e:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8002132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002136:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
	        for (int i = 0; i < 4; i++) {
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002140:	e018      	b.n	8002174 <main+0x7dc>
	            velocidade_angular[i] *= escala;
 8002142:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	33d8      	adds	r3, #216	@ 0xd8
 800214a:	443b      	add	r3, r7
 800214c:	3bd8      	subs	r3, #216	@ 0xd8
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	33d8      	adds	r3, #216	@ 0xd8
 8002162:	443b      	add	r3, r7
 8002164:	3bd8      	subs	r3, #216	@ 0xd8
 8002166:	edc3 7a00 	vstr	s15, [r3]
	        for (int i = 0; i < 4; i++) {
 800216a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800216e:	3301      	adds	r3, #1
 8002170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002174:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002178:	2b03      	cmp	r3, #3
 800217a:	dde2      	ble.n	8002142 <main+0x7aa>
	        }
	    }

	    // 3. Garantir mínimo para rodas em movimento
	    float min_val = 1e9f;
 800217c:	4b77      	ldr	r3, [pc, #476]	@ (800235c <main+0x9c4>)
 800217e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	    for (int i = 0; i < 4; i++) {
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002188:	e026      	b.n	80021d8 <main+0x840>
	        float abs_val = fabs(velocidade_angular[i]);
 800218a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	33d8      	adds	r3, #216	@ 0xd8
 8002192:	443b      	add	r3, r7
 8002194:	3bd8      	subs	r3, #216	@ 0xd8
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	eef0 7ae7 	vabs.f32	s15, s15
 800219e:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	        if (abs_val > epsilon && abs_val < min_val) {
 80021a2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80021a6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80021aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b2:	dd0c      	ble.n	80021ce <main+0x836>
 80021b4:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80021b8:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80021bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c4:	d503      	bpl.n	80021ce <main+0x836>
	            min_val = abs_val;
 80021c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	    for (int i = 0; i < 4; i++) {
 80021ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021d2:	3301      	adds	r3, #1
 80021d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021dc:	2b03      	cmp	r3, #3
 80021de:	ddd4      	ble.n	800218a <main+0x7f2>
	        }
	    }
	  if (min_val < velocidade_minima_motor && min_val > epsilon) {
 80021e0:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8002360 <main+0x9c8>
 80021e4:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80021e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f0:	d576      	bpl.n	80022e0 <main+0x948>
 80021f2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80021f6:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80021fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002202:	dd6d      	ble.n	80022e0 <main+0x948>
	        float escala = velocidade_minima_motor / min_val;
 8002204:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8002360 <main+0x9c8>
 8002208:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800220c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002210:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	        for (int i = 0; i < 4; i++) {
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800221a:	e05d      	b.n	80022d8 <main+0x940>
	            if (fabs(velocidade_angular[i]) > epsilon) {
 800221c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	33d8      	adds	r3, #216	@ 0xd8
 8002224:	443b      	add	r3, r7
 8002226:	3bd8      	subs	r3, #216	@ 0xd8
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	eef0 7ae7 	vabs.f32	s15, s15
 8002230:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	dd47      	ble.n	80022ce <main+0x936>
	                velocidade_angular[i] *= escala;
 800223e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	33d8      	adds	r3, #216	@ 0xd8
 8002246:	443b      	add	r3, r7
 8002248:	3bd8      	subs	r3, #216	@ 0xd8
 800224a:	ed93 7a00 	vldr	s14, [r3]
 800224e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	33d8      	adds	r3, #216	@ 0xd8
 800225e:	443b      	add	r3, r7
 8002260:	3bd8      	subs	r3, #216	@ 0xd8
 8002262:	edc3 7a00 	vstr	s15, [r3]
	                if (velocidade_angular[i] > velocidade_maxima_motor) velocidade_angular[i] = velocidade_maxima_motor;
 8002266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	33d8      	adds	r3, #216	@ 0xd8
 800226e:	443b      	add	r3, r7
 8002270:	3bd8      	subs	r3, #216	@ 0xd8
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8002364 <main+0x9cc>
 800227a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002282:	dd07      	ble.n	8002294 <main+0x8fc>
 8002284:	4a38      	ldr	r2, [pc, #224]	@ (8002368 <main+0x9d0>)
 8002286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	33d8      	adds	r3, #216	@ 0xd8
 800228e:	443b      	add	r3, r7
 8002290:	3bd8      	subs	r3, #216	@ 0xd8
 8002292:	601a      	str	r2, [r3, #0]
	                if (velocidade_angular[i] < -velocidade_maxima_motor) velocidade_angular[i] = -velocidade_maxima_motor;
 8002294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	33d8      	adds	r3, #216	@ 0xd8
 800229c:	443b      	add	r3, r7
 800229e:	3bd8      	subs	r3, #216	@ 0xd8
 80022a0:	ed93 7a00 	vldr	s14, [r3]
 80022a4:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8002364 <main+0x9cc>
 80022a8:	eef1 7a67 	vneg.f32	s15, s15
 80022ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d50b      	bpl.n	80022ce <main+0x936>
 80022b6:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8002364 <main+0x9cc>
 80022ba:	eef1 7a67 	vneg.f32	s15, s15
 80022be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	33d8      	adds	r3, #216	@ 0xd8
 80022c6:	443b      	add	r3, r7
 80022c8:	3bd8      	subs	r3, #216	@ 0xd8
 80022ca:	edc3 7a00 	vstr	s15, [r3]
	        for (int i = 0; i < 4; i++) {
 80022ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022d2:	3301      	adds	r3, #1
 80022d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80022d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022dc:	2b03      	cmp	r3, #3
 80022de:	dd9d      	ble.n	800221c <main+0x884>
	            }
	        }
	    }


	  acionar_motor(1, 100.0f*velocidade_angular[0]/velocidade_maxima_motor);
 80022e0:	edd7 7a00 	vldr	s15, [r7]
 80022e4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800236c <main+0x9d4>
 80022e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ec:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002364 <main+0x9cc>
 80022f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022f4:	eeb0 0a47 	vmov.f32	s0, s14
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7ff fa65 	bl	80017c8 <acionar_motor>
	  acionar_motor(2, 100.0f*velocidade_angular[1]/velocidade_maxima_motor);
 80022fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002302:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800236c <main+0x9d4>
 8002306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800230a:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002364 <main+0x9cc>
 800230e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002312:	eeb0 0a47 	vmov.f32	s0, s14
 8002316:	2002      	movs	r0, #2
 8002318:	f7ff fa56 	bl	80017c8 <acionar_motor>
	  acionar_motor(3, 100.0f*velocidade_angular[2]/velocidade_maxima_motor);
 800231c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002320:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800236c <main+0x9d4>
 8002324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002328:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002364 <main+0x9cc>
 800232c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002330:	eeb0 0a47 	vmov.f32	s0, s14
 8002334:	2003      	movs	r0, #3
 8002336:	f7ff fa47 	bl	80017c8 <acionar_motor>
	  acionar_motor(4, 100.0f*velocidade_angular[3]/velocidade_maxima_motor);
 800233a:	edd7 7a03 	vldr	s15, [r7, #12]
 800233e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800236c <main+0x9d4>
 8002342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002346:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8002364 <main+0x9cc>
 800234a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800234e:	eeb0 0a47 	vmov.f32	s0, s14
 8002352:	2004      	movs	r0, #4
 8002354:	f7ff fa38 	bl	80017c8 <acionar_motor>
  {
 8002358:	e430      	b.n	8001bbc <main+0x224>
 800235a:	bf00      	nop
 800235c:	4e6e6b28 	.word	0x4e6e6b28
 8002360:	413ba865 	.word	0x413ba865
 8002364:	41ea927e 	.word	0x41ea927e
 8002368:	41ea927e 	.word	0x41ea927e
 800236c:	42c80000 	.word	0x42c80000

08002370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b094      	sub	sp, #80	@ 0x50
 8002374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002376:	f107 0320 	add.w	r3, r7, #32
 800237a:	2230      	movs	r2, #48	@ 0x30
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f004 fdbb 	bl	8006efa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	4b27      	ldr	r3, [pc, #156]	@ (8002438 <SystemClock_Config+0xc8>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	4a26      	ldr	r2, [pc, #152]	@ (8002438 <SystemClock_Config+0xc8>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a4:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <SystemClock_Config+0xc8>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b0:	2300      	movs	r3, #0
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	4b21      	ldr	r3, [pc, #132]	@ (800243c <SystemClock_Config+0xcc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a20      	ldr	r2, [pc, #128]	@ (800243c <SystemClock_Config+0xcc>)
 80023ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b1e      	ldr	r3, [pc, #120]	@ (800243c <SystemClock_Config+0xcc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023cc:	2302      	movs	r3, #2
 80023ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023d0:	2301      	movs	r3, #1
 80023d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023d4:	2310      	movs	r3, #16
 80023d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d8:	2302      	movs	r3, #2
 80023da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023dc:	2300      	movs	r3, #0
 80023de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023e0:	2308      	movs	r3, #8
 80023e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80023e4:	2350      	movs	r3, #80	@ 0x50
 80023e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023e8:	2302      	movs	r3, #2
 80023ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023ec:	2304      	movs	r3, #4
 80023ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f0:	f107 0320 	add.w	r3, r7, #32
 80023f4:	4618      	mov	r0, r3
 80023f6:	f001 fa8b 	bl	8003910 <HAL_RCC_OscConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002400:	f000 fab4 	bl	800296c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002404:	230f      	movs	r3, #15
 8002406:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002408:	2302      	movs	r3, #2
 800240a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002414:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800241a:	f107 030c 	add.w	r3, r7, #12
 800241e:	2102      	movs	r1, #2
 8002420:	4618      	mov	r0, r3
 8002422:	f001 fced 	bl	8003e00 <HAL_RCC_ClockConfig>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800242c:	f000 fa9e 	bl	800296c <Error_Handler>
  }
}
 8002430:	bf00      	nop
 8002432:	3750      	adds	r7, #80	@ 0x50
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	40007000 	.word	0x40007000

08002440 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002444:	4b12      	ldr	r3, [pc, #72]	@ (8002490 <MX_I2C1_Init+0x50>)
 8002446:	4a13      	ldr	r2, [pc, #76]	@ (8002494 <MX_I2C1_Init+0x54>)
 8002448:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800244a:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <MX_I2C1_Init+0x50>)
 800244c:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <MX_I2C1_Init+0x58>)
 800244e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002450:	4b0f      	ldr	r3, [pc, #60]	@ (8002490 <MX_I2C1_Init+0x50>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002456:	4b0e      	ldr	r3, [pc, #56]	@ (8002490 <MX_I2C1_Init+0x50>)
 8002458:	2200      	movs	r2, #0
 800245a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800245c:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <MX_I2C1_Init+0x50>)
 800245e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002462:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002464:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <MX_I2C1_Init+0x50>)
 8002466:	2200      	movs	r2, #0
 8002468:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800246a:	4b09      	ldr	r3, [pc, #36]	@ (8002490 <MX_I2C1_Init+0x50>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002470:	4b07      	ldr	r3, [pc, #28]	@ (8002490 <MX_I2C1_Init+0x50>)
 8002472:	2200      	movs	r2, #0
 8002474:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002476:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <MX_I2C1_Init+0x50>)
 8002478:	2200      	movs	r2, #0
 800247a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800247c:	4804      	ldr	r0, [pc, #16]	@ (8002490 <MX_I2C1_Init+0x50>)
 800247e:	f001 f903 	bl	8003688 <HAL_I2C_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002488:	f000 fa70 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000208 	.word	0x20000208
 8002494:	40005400 	.word	0x40005400
 8002498:	000186a0 	.word	0x000186a0

0800249c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024a0:	4b17      	ldr	r3, [pc, #92]	@ (8002500 <MX_SPI1_Init+0x64>)
 80024a2:	4a18      	ldr	r2, [pc, #96]	@ (8002504 <MX_SPI1_Init+0x68>)
 80024a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024a6:	4b16      	ldr	r3, [pc, #88]	@ (8002500 <MX_SPI1_Init+0x64>)
 80024a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ae:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <MX_SPI1_Init+0x64>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024b4:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <MX_SPI1_Init+0x64>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ba:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <MX_SPI1_Init+0x64>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <MX_SPI1_Init+0x64>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <MX_SPI1_Init+0x64>)
 80024c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80024ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <MX_SPI1_Init+0x64>)
 80024d0:	2218      	movs	r2, #24
 80024d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <MX_SPI1_Init+0x64>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024da:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <MX_SPI1_Init+0x64>)
 80024dc:	2200      	movs	r2, #0
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024e0:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <MX_SPI1_Init+0x64>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024e6:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <MX_SPI1_Init+0x64>)
 80024e8:	220a      	movs	r2, #10
 80024ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024ec:	4804      	ldr	r0, [pc, #16]	@ (8002500 <MX_SPI1_Init+0x64>)
 80024ee:	f001 fe67 	bl	80041c0 <HAL_SPI_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024f8:	f000 fa38 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	2000025c 	.word	0x2000025c
 8002504:	40013000 	.word	0x40013000

08002508 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b092      	sub	sp, #72	@ 0x48
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800250e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
 8002528:	615a      	str	r2, [r3, #20]
 800252a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2220      	movs	r2, #32
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f004 fce1 	bl	8006efa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002538:	4b33      	ldr	r3, [pc, #204]	@ (8002608 <MX_TIM1_Init+0x100>)
 800253a:	4a34      	ldr	r2, [pc, #208]	@ (800260c <MX_TIM1_Init+0x104>)
 800253c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800253e:	4b32      	ldr	r3, [pc, #200]	@ (8002608 <MX_TIM1_Init+0x100>)
 8002540:	2200      	movs	r2, #0
 8002542:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002544:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <MX_TIM1_Init+0x100>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800254a:	4b2f      	ldr	r3, [pc, #188]	@ (8002608 <MX_TIM1_Init+0x100>)
 800254c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002550:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002552:	4b2d      	ldr	r3, [pc, #180]	@ (8002608 <MX_TIM1_Init+0x100>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002558:	4b2b      	ldr	r3, [pc, #172]	@ (8002608 <MX_TIM1_Init+0x100>)
 800255a:	2200      	movs	r2, #0
 800255c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255e:	4b2a      	ldr	r3, [pc, #168]	@ (8002608 <MX_TIM1_Init+0x100>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002564:	4828      	ldr	r0, [pc, #160]	@ (8002608 <MX_TIM1_Init+0x100>)
 8002566:	f002 fcaf 	bl	8004ec8 <HAL_TIM_PWM_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002570:	f000 f9fc 	bl	800296c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800257c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002580:	4619      	mov	r1, r3
 8002582:	4821      	ldr	r0, [pc, #132]	@ (8002608 <MX_TIM1_Init+0x100>)
 8002584:	f003 f9b2 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800258e:	f000 f9ed 	bl	800296c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002592:	2360      	movs	r3, #96	@ 0x60
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800259a:	2300      	movs	r3, #0
 800259c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800259e:	2300      	movs	r3, #0
 80025a0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b2:	2200      	movs	r2, #0
 80025b4:	4619      	mov	r1, r3
 80025b6:	4814      	ldr	r0, [pc, #80]	@ (8002608 <MX_TIM1_Init+0x100>)
 80025b8:	f002 fe76 	bl	80052a8 <HAL_TIM_PWM_ConfigChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80025c2:	f000 f9d3 	bl	800296c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	4619      	mov	r1, r3
 80025e8:	4807      	ldr	r0, [pc, #28]	@ (8002608 <MX_TIM1_Init+0x100>)
 80025ea:	f003 f9ed 	bl	80059c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80025f4:	f000 f9ba 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025f8:	4803      	ldr	r0, [pc, #12]	@ (8002608 <MX_TIM1_Init+0x100>)
 80025fa:	f000 faef 	bl	8002bdc <HAL_TIM_MspPostInit>

}
 80025fe:	bf00      	nop
 8002600:	3748      	adds	r7, #72	@ 0x48
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	200002b4 	.word	0x200002b4
 800260c:	40010000 	.word	0x40010000

08002610 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	@ 0x28
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002616:	f107 0320 	add.w	r3, r7, #32
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
 800262c:	611a      	str	r2, [r3, #16]
 800262e:	615a      	str	r2, [r3, #20]
 8002630:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002632:	4b22      	ldr	r3, [pc, #136]	@ (80026bc <MX_TIM2_Init+0xac>)
 8002634:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002638:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800263a:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <MX_TIM2_Init+0xac>)
 800263c:	2200      	movs	r2, #0
 800263e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002640:	4b1e      	ldr	r3, [pc, #120]	@ (80026bc <MX_TIM2_Init+0xac>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002646:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <MX_TIM2_Init+0xac>)
 8002648:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800264c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800264e:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <MX_TIM2_Init+0xac>)
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002654:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <MX_TIM2_Init+0xac>)
 8002656:	2200      	movs	r2, #0
 8002658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800265a:	4818      	ldr	r0, [pc, #96]	@ (80026bc <MX_TIM2_Init+0xac>)
 800265c:	f002 fc34 	bl	8004ec8 <HAL_TIM_PWM_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002666:	f000 f981 	bl	800296c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002672:	f107 0320 	add.w	r3, r7, #32
 8002676:	4619      	mov	r1, r3
 8002678:	4810      	ldr	r0, [pc, #64]	@ (80026bc <MX_TIM2_Init+0xac>)
 800267a:	f003 f937 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002684:	f000 f972 	bl	800296c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002688:	2360      	movs	r3, #96	@ 0x60
 800268a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	2200      	movs	r2, #0
 800269c:	4619      	mov	r1, r3
 800269e:	4807      	ldr	r0, [pc, #28]	@ (80026bc <MX_TIM2_Init+0xac>)
 80026a0:	f002 fe02 	bl	80052a8 <HAL_TIM_PWM_ConfigChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80026aa:	f000 f95f 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026ae:	4803      	ldr	r0, [pc, #12]	@ (80026bc <MX_TIM2_Init+0xac>)
 80026b0:	f000 fa94 	bl	8002bdc <HAL_TIM_MspPostInit>

}
 80026b4:	bf00      	nop
 80026b6:	3728      	adds	r7, #40	@ 0x28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200002fc 	.word	0x200002fc

080026c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	@ 0x28
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c6:	f107 0320 	add.w	r3, r7, #32
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
 80026dc:	611a      	str	r2, [r3, #16]
 80026de:	615a      	str	r2, [r3, #20]
 80026e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026e2:	4b27      	ldr	r3, [pc, #156]	@ (8002780 <MX_TIM3_Init+0xc0>)
 80026e4:	4a27      	ldr	r2, [pc, #156]	@ (8002784 <MX_TIM3_Init+0xc4>)
 80026e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026e8:	4b25      	ldr	r3, [pc, #148]	@ (8002780 <MX_TIM3_Init+0xc0>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ee:	4b24      	ldr	r3, [pc, #144]	@ (8002780 <MX_TIM3_Init+0xc0>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80026f4:	4b22      	ldr	r3, [pc, #136]	@ (8002780 <MX_TIM3_Init+0xc0>)
 80026f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fc:	4b20      	ldr	r3, [pc, #128]	@ (8002780 <MX_TIM3_Init+0xc0>)
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002702:	4b1f      	ldr	r3, [pc, #124]	@ (8002780 <MX_TIM3_Init+0xc0>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002708:	481d      	ldr	r0, [pc, #116]	@ (8002780 <MX_TIM3_Init+0xc0>)
 800270a:	f002 fbdd 	bl	8004ec8 <HAL_TIM_PWM_Init>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002714:	f000 f92a 	bl	800296c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002720:	f107 0320 	add.w	r3, r7, #32
 8002724:	4619      	mov	r1, r3
 8002726:	4816      	ldr	r0, [pc, #88]	@ (8002780 <MX_TIM3_Init+0xc0>)
 8002728:	f003 f8e0 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002732:	f000 f91b 	bl	800296c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002736:	2360      	movs	r3, #96	@ 0x60
 8002738:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	2200      	movs	r2, #0
 800274a:	4619      	mov	r1, r3
 800274c:	480c      	ldr	r0, [pc, #48]	@ (8002780 <MX_TIM3_Init+0xc0>)
 800274e:	f002 fdab 	bl	80052a8 <HAL_TIM_PWM_ConfigChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002758:	f000 f908 	bl	800296c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	2204      	movs	r2, #4
 8002760:	4619      	mov	r1, r3
 8002762:	4807      	ldr	r0, [pc, #28]	@ (8002780 <MX_TIM3_Init+0xc0>)
 8002764:	f002 fda0 	bl	80052a8 <HAL_TIM_PWM_ConfigChannel>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800276e:	f000 f8fd 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002772:	4803      	ldr	r0, [pc, #12]	@ (8002780 <MX_TIM3_Init+0xc0>)
 8002774:	f000 fa32 	bl	8002bdc <HAL_TIM_MspPostInit>

}
 8002778:	bf00      	nop
 800277a:	3728      	adds	r7, #40	@ 0x28
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000344 	.word	0x20000344
 8002784:	40000400 	.word	0x40000400

08002788 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800278c:	4b12      	ldr	r3, [pc, #72]	@ (80027d8 <MX_TIM11_Init+0x50>)
 800278e:	4a13      	ldr	r2, [pc, #76]	@ (80027dc <MX_TIM11_Init+0x54>)
 8002790:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8399;
 8002792:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <MX_TIM11_Init+0x50>)
 8002794:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002798:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279a:	4b0f      	ldr	r3, [pc, #60]	@ (80027d8 <MX_TIM11_Init+0x50>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1999;
 80027a0:	4b0d      	ldr	r3, [pc, #52]	@ (80027d8 <MX_TIM11_Init+0x50>)
 80027a2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80027a6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a8:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <MX_TIM11_Init+0x50>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ae:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <MX_TIM11_Init+0x50>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80027b4:	4808      	ldr	r0, [pc, #32]	@ (80027d8 <MX_TIM11_Init+0x50>)
 80027b6:	f002 fad5 	bl	8004d64 <HAL_TIM_Base_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80027c0:	f000 f8d4 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2100      	movs	r1, #0
 80027c8:	201a      	movs	r0, #26
 80027ca:	f000 fd88 	bl	80032de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80027ce:	201a      	movs	r0, #26
 80027d0:	f000 fda1 	bl	8003316 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM11_Init 2 */

}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	2000038c 	.word	0x2000038c
 80027dc:	40014800 	.word	0x40014800

080027e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027e4:	4b11      	ldr	r3, [pc, #68]	@ (800282c <MX_USART2_UART_Init+0x4c>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <MX_USART2_UART_Init+0x50>)
 80027e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027ea:	4b10      	ldr	r3, [pc, #64]	@ (800282c <MX_USART2_UART_Init+0x4c>)
 80027ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <MX_USART2_UART_Init+0x4c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027f8:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <MX_USART2_UART_Init+0x4c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <MX_USART2_UART_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002804:	4b09      	ldr	r3, [pc, #36]	@ (800282c <MX_USART2_UART_Init+0x4c>)
 8002806:	220c      	movs	r2, #12
 8002808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280a:	4b08      	ldr	r3, [pc, #32]	@ (800282c <MX_USART2_UART_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002810:	4b06      	ldr	r3, [pc, #24]	@ (800282c <MX_USART2_UART_Init+0x4c>)
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002816:	4805      	ldr	r0, [pc, #20]	@ (800282c <MX_USART2_UART_Init+0x4c>)
 8002818:	f003 f93c 	bl	8005a94 <HAL_UART_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002822:	f000 f8a3 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200003d4 	.word	0x200003d4
 8002830:	40004400 	.word	0x40004400

08002834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	@ 0x28
 8002838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	60da      	str	r2, [r3, #12]
 8002848:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	4b43      	ldr	r3, [pc, #268]	@ (800295c <MX_GPIO_Init+0x128>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	4a42      	ldr	r2, [pc, #264]	@ (800295c <MX_GPIO_Init+0x128>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	6313      	str	r3, [r2, #48]	@ 0x30
 800285a:	4b40      	ldr	r3, [pc, #256]	@ (800295c <MX_GPIO_Init+0x128>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b3c      	ldr	r3, [pc, #240]	@ (800295c <MX_GPIO_Init+0x128>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	4a3b      	ldr	r2, [pc, #236]	@ (800295c <MX_GPIO_Init+0x128>)
 8002870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002874:	6313      	str	r3, [r2, #48]	@ 0x30
 8002876:	4b39      	ldr	r3, [pc, #228]	@ (800295c <MX_GPIO_Init+0x128>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	4b35      	ldr	r3, [pc, #212]	@ (800295c <MX_GPIO_Init+0x128>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	4a34      	ldr	r2, [pc, #208]	@ (800295c <MX_GPIO_Init+0x128>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6313      	str	r3, [r2, #48]	@ 0x30
 8002892:	4b32      	ldr	r3, [pc, #200]	@ (800295c <MX_GPIO_Init+0x128>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	4b2e      	ldr	r3, [pc, #184]	@ (800295c <MX_GPIO_Init+0x128>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	4a2d      	ldr	r2, [pc, #180]	@ (800295c <MX_GPIO_Init+0x128>)
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ae:	4b2b      	ldr	r3, [pc, #172]	@ (800295c <MX_GPIO_Init+0x128>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
 80028ba:	2200      	movs	r2, #0
 80028bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028c0:	4827      	ldr	r0, [pc, #156]	@ (8002960 <MX_GPIO_Init+0x12c>)
 80028c2:	f000 fec7 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENTIDO0_MOTOR3_Pin|SENTIDO1_MOTOR3_Pin|SENTIDO1_MOTOR2_Pin|SENTIDO0_MOTOR2_Pin
 80028c6:	2200      	movs	r2, #0
 80028c8:	f240 41c7 	movw	r1, #1223	@ 0x4c7
 80028cc:	4825      	ldr	r0, [pc, #148]	@ (8002964 <MX_GPIO_Init+0x130>)
 80028ce:	f000 fec1 	bl	8003654 <HAL_GPIO_WritePin>
                          |CE_Pin|CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENTIDO0_MOTOR1_Pin|SENTIDO1_MOTOR1_Pin|SENTIDO1_MOTOR4_Pin|SENTIDO0_MOTOR4_Pin, GPIO_PIN_RESET);
 80028d2:	2200      	movs	r2, #0
 80028d4:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80028d8:	4823      	ldr	r0, [pc, #140]	@ (8002968 <MX_GPIO_Init+0x134>)
 80028da:	f000 febb 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_AZUL_Pin */
  GPIO_InitStruct.Pin = LED_AZUL_Pin;
 80028de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e4:	2301      	movs	r3, #1
 80028e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ec:	2300      	movs	r3, #0
 80028ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_AZUL_GPIO_Port, &GPIO_InitStruct);
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	4619      	mov	r1, r3
 80028f6:	481a      	ldr	r0, [pc, #104]	@ (8002960 <MX_GPIO_Init+0x12c>)
 80028f8:	f000 fd28 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : SENTIDO0_MOTOR3_Pin SENTIDO1_MOTOR3_Pin SENTIDO1_MOTOR2_Pin SENTIDO0_MOTOR2_Pin */
  GPIO_InitStruct.Pin = SENTIDO0_MOTOR3_Pin|SENTIDO1_MOTOR3_Pin|SENTIDO1_MOTOR2_Pin|SENTIDO0_MOTOR2_Pin;
 80028fc:	f240 4307 	movw	r3, #1031	@ 0x407
 8002900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002902:	2301      	movs	r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	4619      	mov	r1, r3
 8002914:	4813      	ldr	r0, [pc, #76]	@ (8002964 <MX_GPIO_Init+0x130>)
 8002916:	f000 fd19 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : SENTIDO0_MOTOR1_Pin SENTIDO1_MOTOR1_Pin SENTIDO1_MOTOR4_Pin SENTIDO0_MOTOR4_Pin */
  GPIO_InitStruct.Pin = SENTIDO0_MOTOR1_Pin|SENTIDO1_MOTOR1_Pin|SENTIDO1_MOTOR4_Pin|SENTIDO0_MOTOR4_Pin;
 800291a:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 800291e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002920:	2301      	movs	r3, #1
 8002922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	4619      	mov	r1, r3
 8002932:	480d      	ldr	r0, [pc, #52]	@ (8002968 <MX_GPIO_Init+0x134>)
 8002934:	f000 fd0a 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8002938:	23c0      	movs	r3, #192	@ 0xc0
 800293a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	4619      	mov	r1, r3
 800294e:	4805      	ldr	r0, [pc, #20]	@ (8002964 <MX_GPIO_Init+0x130>)
 8002950:	f000 fcfc 	bl	800334c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002954:	bf00      	nop
 8002956:	3728      	adds	r7, #40	@ 0x28
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	40020800 	.word	0x40020800
 8002964:	40020400 	.word	0x40020400
 8002968:	40020000 	.word	0x40020000

0800296c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002970:	b672      	cpsid	i
}
 8002972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002974:	bf00      	nop
 8002976:	e7fd      	b.n	8002974 <Error_Handler+0x8>

08002978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <HAL_MspInit+0x4c>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002986:	4a0f      	ldr	r2, [pc, #60]	@ (80029c4 <HAL_MspInit+0x4c>)
 8002988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800298c:	6453      	str	r3, [r2, #68]	@ 0x44
 800298e:	4b0d      	ldr	r3, [pc, #52]	@ (80029c4 <HAL_MspInit+0x4c>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <HAL_MspInit+0x4c>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	4a08      	ldr	r2, [pc, #32]	@ (80029c4 <HAL_MspInit+0x4c>)
 80029a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_MspInit+0x4c>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	@ 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	@ (8002a4c <HAL_I2C_MspInit+0x84>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d12c      	bne.n	8002a44 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	4b18      	ldr	r3, [pc, #96]	@ (8002a50 <HAL_I2C_MspInit+0x88>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	4a17      	ldr	r2, [pc, #92]	@ (8002a50 <HAL_I2C_MspInit+0x88>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fa:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <HAL_I2C_MspInit+0x88>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a0c:	2312      	movs	r3, #18
 8002a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a14:	2303      	movs	r3, #3
 8002a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a18:	2304      	movs	r3, #4
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4619      	mov	r1, r3
 8002a22:	480c      	ldr	r0, [pc, #48]	@ (8002a54 <HAL_I2C_MspInit+0x8c>)
 8002a24:	f000 fc92 	bl	800334c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <HAL_I2C_MspInit+0x88>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	4a07      	ldr	r2, [pc, #28]	@ (8002a50 <HAL_I2C_MspInit+0x88>)
 8002a32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a36:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <HAL_I2C_MspInit+0x88>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	@ 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40005400 	.word	0x40005400
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020400 	.word	0x40020400

08002a58 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	@ 0x28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a19      	ldr	r2, [pc, #100]	@ (8002adc <HAL_SPI_MspInit+0x84>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d12b      	bne.n	8002ad2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ae0 <HAL_SPI_MspInit+0x88>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a82:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <HAL_SPI_MspInit+0x88>)
 8002a84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ae0 <HAL_SPI_MspInit+0x88>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <HAL_SPI_MspInit+0x88>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	4a10      	ldr	r2, [pc, #64]	@ (8002ae0 <HAL_SPI_MspInit+0x88>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae0 <HAL_SPI_MspInit+0x88>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ab2:	23e0      	movs	r3, #224	@ 0xe0
 8002ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ac2:	2305      	movs	r3, #5
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac6:	f107 0314 	add.w	r3, r7, #20
 8002aca:	4619      	mov	r1, r3
 8002acc:	4805      	ldr	r0, [pc, #20]	@ (8002ae4 <HAL_SPI_MspInit+0x8c>)
 8002ace:	f000 fc3d 	bl	800334c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002ad2:	bf00      	nop
 8002ad4:	3728      	adds	r7, #40	@ 0x28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40013000 	.word	0x40013000
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40020000 	.word	0x40020000

08002ae8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a22      	ldr	r2, [pc, #136]	@ (8002b80 <HAL_TIM_PWM_MspInit+0x98>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d116      	bne.n	8002b28 <HAL_TIM_PWM_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	4b21      	ldr	r3, [pc, #132]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x9c>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	4a20      	ldr	r2, [pc, #128]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x9c>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x9c>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2100      	movs	r1, #0
 8002b1a:	201a      	movs	r0, #26
 8002b1c:	f000 fbdf 	bl	80032de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b20:	201a      	movs	r0, #26
 8002b22:	f000 fbf8 	bl	8003316 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b26:	e026      	b.n	8002b76 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b30:	d10e      	bne.n	8002b50 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	4b13      	ldr	r3, [pc, #76]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x9c>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	4a12      	ldr	r2, [pc, #72]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x9c>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b42:	4b10      	ldr	r3, [pc, #64]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x9c>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
}
 8002b4e:	e012      	b.n	8002b76 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM3)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a0c      	ldr	r2, [pc, #48]	@ (8002b88 <HAL_TIM_PWM_MspInit+0xa0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d10d      	bne.n	8002b76 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	4b09      	ldr	r3, [pc, #36]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x9c>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	4a08      	ldr	r2, [pc, #32]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x9c>)
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x9c>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
}
 8002b76:	bf00      	nop
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40010000 	.word	0x40010000
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40000400 	.word	0x40000400

08002b8c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0e      	ldr	r2, [pc, #56]	@ (8002bd4 <HAL_TIM_Base_MspInit+0x48>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d115      	bne.n	8002bca <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM11_MspInit 0 */

    /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <HAL_TIM_Base_MspInit+0x4c>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd8 <HAL_TIM_Base_MspInit+0x4c>)
 8002ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bae:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <HAL_TIM_Base_MspInit+0x4c>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	201a      	movs	r0, #26
 8002bc0:	f000 fb8d 	bl	80032de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002bc4:	201a      	movs	r0, #26
 8002bc6:	f000 fba6 	bl	8003316 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM11_MspInit 1 */

  }

}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40014800 	.word	0x40014800
 8002bd8:	40023800 	.word	0x40023800

08002bdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	@ 0x28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a37      	ldr	r2, [pc, #220]	@ (8002cd8 <HAL_TIM_MspPostInit+0xfc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d11f      	bne.n	8002c3e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <HAL_TIM_MspPostInit+0x100>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	4a35      	ldr	r2, [pc, #212]	@ (8002cdc <HAL_TIM_MspPostInit+0x100>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0e:	4b33      	ldr	r3, [pc, #204]	@ (8002cdc <HAL_TIM_MspPostInit+0x100>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_MOTOR1_Pin;
 8002c1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MOTOR1_GPIO_Port, &GPIO_InitStruct);
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	4619      	mov	r1, r3
 8002c36:	482a      	ldr	r0, [pc, #168]	@ (8002ce0 <HAL_TIM_MspPostInit+0x104>)
 8002c38:	f000 fb88 	bl	800334c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c3c:	e047      	b.n	8002cce <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c46:	d11f      	bne.n	8002c88 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	4b23      	ldr	r3, [pc, #140]	@ (8002cdc <HAL_TIM_MspPostInit+0x100>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c50:	4a22      	ldr	r2, [pc, #136]	@ (8002cdc <HAL_TIM_MspPostInit+0x100>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c58:	4b20      	ldr	r3, [pc, #128]	@ (8002cdc <HAL_TIM_MspPostInit+0x100>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOTOR4_Pin;
 8002c64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c72:	2302      	movs	r3, #2
 8002c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c76:	2301      	movs	r3, #1
 8002c78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MOTOR4_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4817      	ldr	r0, [pc, #92]	@ (8002ce0 <HAL_TIM_MspPostInit+0x104>)
 8002c82:	f000 fb63 	bl	800334c <HAL_GPIO_Init>
}
 8002c86:	e022      	b.n	8002cce <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a15      	ldr	r2, [pc, #84]	@ (8002ce4 <HAL_TIM_MspPostInit+0x108>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d11d      	bne.n	8002cce <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <HAL_TIM_MspPostInit+0x100>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	4a10      	ldr	r2, [pc, #64]	@ (8002cdc <HAL_TIM_MspPostInit+0x100>)
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cdc <HAL_TIM_MspPostInit+0x100>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MOTOR3_Pin|PWM_MOTOR2_Pin;
 8002cae:	2330      	movs	r3, #48	@ 0x30
 8002cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc2:	f107 0314 	add.w	r3, r7, #20
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4807      	ldr	r0, [pc, #28]	@ (8002ce8 <HAL_TIM_MspPostInit+0x10c>)
 8002cca:	f000 fb3f 	bl	800334c <HAL_GPIO_Init>
}
 8002cce:	bf00      	nop
 8002cd0:	3728      	adds	r7, #40	@ 0x28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40020400 	.word	0x40020400

08002cec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	@ 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a19      	ldr	r2, [pc, #100]	@ (8002d70 <HAL_UART_MspInit+0x84>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d12b      	bne.n	8002d66 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	4b18      	ldr	r3, [pc, #96]	@ (8002d74 <HAL_UART_MspInit+0x88>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	4a17      	ldr	r2, [pc, #92]	@ (8002d74 <HAL_UART_MspInit+0x88>)
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d1e:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <HAL_UART_MspInit+0x88>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <HAL_UART_MspInit+0x88>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	4a10      	ldr	r2, [pc, #64]	@ (8002d74 <HAL_UART_MspInit+0x88>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d74 <HAL_UART_MspInit+0x88>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d46:	230c      	movs	r3, #12
 8002d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d52:	2303      	movs	r3, #3
 8002d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d56:	2307      	movs	r3, #7
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <HAL_UART_MspInit+0x8c>)
 8002d62:	f000 faf3 	bl	800334c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002d66:	bf00      	nop
 8002d68:	3728      	adds	r7, #40	@ 0x28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40004400 	.word	0x40004400
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40020000 	.word	0x40020000

08002d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <NMI_Handler+0x4>

08002d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d88:	bf00      	nop
 8002d8a:	e7fd      	b.n	8002d88 <HardFault_Handler+0x4>

08002d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <MemManage_Handler+0x4>

08002d94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d98:	bf00      	nop
 8002d9a:	e7fd      	b.n	8002d98 <BusFault_Handler+0x4>

08002d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002da0:	bf00      	nop
 8002da2:	e7fd      	b.n	8002da0 <UsageFault_Handler+0x4>

08002da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dd2:	f000 f965 	bl	80030a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002de0:	4803      	ldr	r0, [pc, #12]	@ (8002df0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002de2:	f002 f971 	bl	80050c8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002de6:	4803      	ldr	r0, [pc, #12]	@ (8002df4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002de8:	f002 f96e 	bl	80050c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200002b4 	.word	0x200002b4
 8002df4:	2000038c 	.word	0x2000038c

08002df8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return 1;
 8002dfc:	2301      	movs	r3, #1
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <_kill>:

int _kill(int pid, int sig)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e12:	f004 f8c5 	bl	8006fa0 <__errno>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2216      	movs	r2, #22
 8002e1a:	601a      	str	r2, [r3, #0]
  return -1;
 8002e1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_exit>:

void _exit (int status)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ffe7 	bl	8002e08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e3a:	bf00      	nop
 8002e3c:	e7fd      	b.n	8002e3a <_exit+0x12>

08002e3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b086      	sub	sp, #24
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e00a      	b.n	8002e66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e50:	f3af 8000 	nop.w
 8002e54:	4601      	mov	r1, r0
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	60ba      	str	r2, [r7, #8]
 8002e5c:	b2ca      	uxtb	r2, r1
 8002e5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	3301      	adds	r3, #1
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	dbf0      	blt.n	8002e50 <_read+0x12>
  }

  return len;
 8002e6e:	687b      	ldr	r3, [r7, #4]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	e009      	b.n	8002e9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	60ba      	str	r2, [r7, #8]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	dbf1      	blt.n	8002e8a <_write+0x12>
  }
  return len;
 8002ea6:	687b      	ldr	r3, [r7, #4]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <_close>:

int _close(int file)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002eb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ed8:	605a      	str	r2, [r3, #4]
  return 0;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <_isatty>:

int _isatty(int file)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ef0:	2301      	movs	r3, #1
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b085      	sub	sp, #20
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f20:	4a14      	ldr	r2, [pc, #80]	@ (8002f74 <_sbrk+0x5c>)
 8002f22:	4b15      	ldr	r3, [pc, #84]	@ (8002f78 <_sbrk+0x60>)
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f2c:	4b13      	ldr	r3, [pc, #76]	@ (8002f7c <_sbrk+0x64>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d102      	bne.n	8002f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <_sbrk+0x64>)
 8002f36:	4a12      	ldr	r2, [pc, #72]	@ (8002f80 <_sbrk+0x68>)
 8002f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f3a:	4b10      	ldr	r3, [pc, #64]	@ (8002f7c <_sbrk+0x64>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d207      	bcs.n	8002f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f48:	f004 f82a 	bl	8006fa0 <__errno>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	220c      	movs	r2, #12
 8002f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f56:	e009      	b.n	8002f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f58:	4b08      	ldr	r3, [pc, #32]	@ (8002f7c <_sbrk+0x64>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f5e:	4b07      	ldr	r3, [pc, #28]	@ (8002f7c <_sbrk+0x64>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	4a05      	ldr	r2, [pc, #20]	@ (8002f7c <_sbrk+0x64>)
 8002f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20020000 	.word	0x20020000
 8002f78:	00000400 	.word	0x00000400
 8002f7c:	2000041c 	.word	0x2000041c
 8002f80:	20000570 	.word	0x20000570

08002f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <SystemInit+0x20>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8e:	4a05      	ldr	r2, [pc, #20]	@ (8002fa4 <SystemInit+0x20>)
 8002f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fe0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fac:	f7ff ffea 	bl	8002f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fb0:	480c      	ldr	r0, [pc, #48]	@ (8002fe4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fb2:	490d      	ldr	r1, [pc, #52]	@ (8002fe8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002fec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fb8:	e002      	b.n	8002fc0 <LoopCopyDataInit>

08002fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fbe:	3304      	adds	r3, #4

08002fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fc4:	d3f9      	bcc.n	8002fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fc8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ff4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fcc:	e001      	b.n	8002fd2 <LoopFillZerobss>

08002fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd0:	3204      	adds	r2, #4

08002fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fd4:	d3fb      	bcc.n	8002fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fd6:	f003 ffe9 	bl	8006fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fda:	f7fe fcdd 	bl	8001998 <main>
  bx  lr    
 8002fde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fe8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002fec:	0800a750 	.word	0x0800a750
  ldr r2, =_sbss
 8002ff0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002ff4:	20000570 	.word	0x20000570

08002ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ff8:	e7fe      	b.n	8002ff8 <ADC_IRQHandler>
	...

08002ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003000:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <HAL_Init+0x40>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0d      	ldr	r2, [pc, #52]	@ (800303c <HAL_Init+0x40>)
 8003006:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800300a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_Init+0x40>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <HAL_Init+0x40>)
 8003012:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <HAL_Init+0x40>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a07      	ldr	r2, [pc, #28]	@ (800303c <HAL_Init+0x40>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003024:	2003      	movs	r0, #3
 8003026:	f000 f94f 	bl	80032c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800302a:	200f      	movs	r0, #15
 800302c:	f000 f808 	bl	8003040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003030:	f7ff fca2 	bl	8002978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023c00 	.word	0x40023c00

08003040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003048:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <HAL_InitTick+0x54>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b12      	ldr	r3, [pc, #72]	@ (8003098 <HAL_InitTick+0x58>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	4619      	mov	r1, r3
 8003052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003056:	fbb3 f3f1 	udiv	r3, r3, r1
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f967 	bl	8003332 <HAL_SYSTICK_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e00e      	b.n	800308c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b0f      	cmp	r3, #15
 8003072:	d80a      	bhi.n	800308a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003074:	2200      	movs	r2, #0
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800307c:	f000 f92f 	bl	80032de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003080:	4a06      	ldr	r2, [pc, #24]	@ (800309c <HAL_InitTick+0x5c>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e000      	b.n	800308c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000008 	.word	0x20000008
 8003098:	20000010 	.word	0x20000010
 800309c:	2000000c 	.word	0x2000000c

080030a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030a4:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <HAL_IncTick+0x20>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <HAL_IncTick+0x24>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4413      	add	r3, r2
 80030b0:	4a04      	ldr	r2, [pc, #16]	@ (80030c4 <HAL_IncTick+0x24>)
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000010 	.word	0x20000010
 80030c4:	20000420 	.word	0x20000420

080030c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return uwTick;
 80030cc:	4b03      	ldr	r3, [pc, #12]	@ (80030dc <HAL_GetTick+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000420 	.word	0x20000420

080030e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e8:	f7ff ffee 	bl	80030c8 <HAL_GetTick>
 80030ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030f8:	d005      	beq.n	8003106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <HAL_Delay+0x44>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003106:	bf00      	nop
 8003108:	f7ff ffde 	bl	80030c8 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	429a      	cmp	r2, r3
 8003116:	d8f7      	bhi.n	8003108 <HAL_Delay+0x28>
  {
  }
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000010 	.word	0x20000010

08003128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <__NVIC_SetPriorityGrouping+0x44>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003144:	4013      	ands	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003150:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800315a:	4a04      	ldr	r2, [pc, #16]	@ (800316c <__NVIC_SetPriorityGrouping+0x44>)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	60d3      	str	r3, [r2, #12]
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003174:	4b04      	ldr	r3, [pc, #16]	@ (8003188 <__NVIC_GetPriorityGrouping+0x18>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	f003 0307 	and.w	r3, r3, #7
}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	2b00      	cmp	r3, #0
 800319c:	db0b      	blt.n	80031b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	f003 021f 	and.w	r2, r3, #31
 80031a4:	4907      	ldr	r1, [pc, #28]	@ (80031c4 <__NVIC_EnableIRQ+0x38>)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	2001      	movs	r0, #1
 80031ae:	fa00 f202 	lsl.w	r2, r0, r2
 80031b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	e000e100 	.word	0xe000e100

080031c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	6039      	str	r1, [r7, #0]
 80031d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	db0a      	blt.n	80031f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	490c      	ldr	r1, [pc, #48]	@ (8003214 <__NVIC_SetPriority+0x4c>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	440b      	add	r3, r1
 80031ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f0:	e00a      	b.n	8003208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4908      	ldr	r1, [pc, #32]	@ (8003218 <__NVIC_SetPriority+0x50>)
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	3b04      	subs	r3, #4
 8003200:	0112      	lsls	r2, r2, #4
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	440b      	add	r3, r1
 8003206:	761a      	strb	r2, [r3, #24]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000e100 	.word	0xe000e100
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800321c:	b480      	push	{r7}
 800321e:	b089      	sub	sp, #36	@ 0x24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f1c3 0307 	rsb	r3, r3, #7
 8003236:	2b04      	cmp	r3, #4
 8003238:	bf28      	it	cs
 800323a:	2304      	movcs	r3, #4
 800323c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3304      	adds	r3, #4
 8003242:	2b06      	cmp	r3, #6
 8003244:	d902      	bls.n	800324c <NVIC_EncodePriority+0x30>
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3b03      	subs	r3, #3
 800324a:	e000      	b.n	800324e <NVIC_EncodePriority+0x32>
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003250:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43da      	mvns	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	401a      	ands	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003264:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	43d9      	mvns	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003274:	4313      	orrs	r3, r2
         );
}
 8003276:	4618      	mov	r0, r3
 8003278:	3724      	adds	r7, #36	@ 0x24
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3b01      	subs	r3, #1
 8003290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003294:	d301      	bcc.n	800329a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003296:	2301      	movs	r3, #1
 8003298:	e00f      	b.n	80032ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800329a:	4a0a      	ldr	r2, [pc, #40]	@ (80032c4 <SysTick_Config+0x40>)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3b01      	subs	r3, #1
 80032a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032a2:	210f      	movs	r1, #15
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032a8:	f7ff ff8e 	bl	80031c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032ac:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <SysTick_Config+0x40>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032b2:	4b04      	ldr	r3, [pc, #16]	@ (80032c4 <SysTick_Config+0x40>)
 80032b4:	2207      	movs	r2, #7
 80032b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	e000e010 	.word	0xe000e010

080032c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ff29 	bl	8003128 <__NVIC_SetPriorityGrouping>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032de:	b580      	push	{r7, lr}
 80032e0:	b086      	sub	sp, #24
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	4603      	mov	r3, r0
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032f0:	f7ff ff3e 	bl	8003170 <__NVIC_GetPriorityGrouping>
 80032f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	6978      	ldr	r0, [r7, #20]
 80032fc:	f7ff ff8e 	bl	800321c <NVIC_EncodePriority>
 8003300:	4602      	mov	r2, r0
 8003302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff5d 	bl	80031c8 <__NVIC_SetPriority>
}
 800330e:	bf00      	nop
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	4603      	mov	r3, r0
 800331e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff31 	bl	800318c <__NVIC_EnableIRQ>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff ffa2 	bl	8003284 <SysTick_Config>
 8003340:	4603      	mov	r3, r0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	@ 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	e159      	b.n	800361c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003368:	2201      	movs	r2, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	429a      	cmp	r2, r3
 8003382:	f040 8148 	bne.w	8003616 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d005      	beq.n	800339e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800339a:	2b02      	cmp	r3, #2
 800339c:	d130      	bne.n	8003400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033d4:	2201      	movs	r2, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 0201 	and.w	r2, r3, #1
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b03      	cmp	r3, #3
 800340a:	d017      	beq.n	800343c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d123      	bne.n	8003490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	08da      	lsrs	r2, r3, #3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3208      	adds	r2, #8
 8003450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	220f      	movs	r2, #15
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	08da      	lsrs	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3208      	adds	r2, #8
 800348a:	69b9      	ldr	r1, [r7, #24]
 800348c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0203 	and.w	r2, r3, #3
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a2 	beq.w	8003616 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4b57      	ldr	r3, [pc, #348]	@ (8003634 <HAL_GPIO_Init+0x2e8>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034da:	4a56      	ldr	r2, [pc, #344]	@ (8003634 <HAL_GPIO_Init+0x2e8>)
 80034dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034e2:	4b54      	ldr	r3, [pc, #336]	@ (8003634 <HAL_GPIO_Init+0x2e8>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ee:	4a52      	ldr	r2, [pc, #328]	@ (8003638 <HAL_GPIO_Init+0x2ec>)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	3302      	adds	r3, #2
 80034f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	220f      	movs	r2, #15
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a49      	ldr	r2, [pc, #292]	@ (800363c <HAL_GPIO_Init+0x2f0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d019      	beq.n	800354e <HAL_GPIO_Init+0x202>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a48      	ldr	r2, [pc, #288]	@ (8003640 <HAL_GPIO_Init+0x2f4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_GPIO_Init+0x1fe>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a47      	ldr	r2, [pc, #284]	@ (8003644 <HAL_GPIO_Init+0x2f8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00d      	beq.n	8003546 <HAL_GPIO_Init+0x1fa>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a46      	ldr	r2, [pc, #280]	@ (8003648 <HAL_GPIO_Init+0x2fc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <HAL_GPIO_Init+0x1f6>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a45      	ldr	r2, [pc, #276]	@ (800364c <HAL_GPIO_Init+0x300>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_GPIO_Init+0x1f2>
 800353a:	2304      	movs	r3, #4
 800353c:	e008      	b.n	8003550 <HAL_GPIO_Init+0x204>
 800353e:	2307      	movs	r3, #7
 8003540:	e006      	b.n	8003550 <HAL_GPIO_Init+0x204>
 8003542:	2303      	movs	r3, #3
 8003544:	e004      	b.n	8003550 <HAL_GPIO_Init+0x204>
 8003546:	2302      	movs	r3, #2
 8003548:	e002      	b.n	8003550 <HAL_GPIO_Init+0x204>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_GPIO_Init+0x204>
 800354e:	2300      	movs	r3, #0
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	f002 0203 	and.w	r2, r2, #3
 8003556:	0092      	lsls	r2, r2, #2
 8003558:	4093      	lsls	r3, r2
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003560:	4935      	ldr	r1, [pc, #212]	@ (8003638 <HAL_GPIO_Init+0x2ec>)
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	089b      	lsrs	r3, r3, #2
 8003566:	3302      	adds	r3, #2
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800356e:	4b38      	ldr	r3, [pc, #224]	@ (8003650 <HAL_GPIO_Init+0x304>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003592:	4a2f      	ldr	r2, [pc, #188]	@ (8003650 <HAL_GPIO_Init+0x304>)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003598:	4b2d      	ldr	r3, [pc, #180]	@ (8003650 <HAL_GPIO_Init+0x304>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035bc:	4a24      	ldr	r2, [pc, #144]	@ (8003650 <HAL_GPIO_Init+0x304>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035c2:	4b23      	ldr	r3, [pc, #140]	@ (8003650 <HAL_GPIO_Init+0x304>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003650 <HAL_GPIO_Init+0x304>)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ec:	4b18      	ldr	r3, [pc, #96]	@ (8003650 <HAL_GPIO_Init+0x304>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003610:	4a0f      	ldr	r2, [pc, #60]	@ (8003650 <HAL_GPIO_Init+0x304>)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3301      	adds	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b0f      	cmp	r3, #15
 8003620:	f67f aea2 	bls.w	8003368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3724      	adds	r7, #36	@ 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	40013800 	.word	0x40013800
 800363c:	40020000 	.word	0x40020000
 8003640:	40020400 	.word	0x40020400
 8003644:	40020800 	.word	0x40020800
 8003648:	40020c00 	.word	0x40020c00
 800364c:	40021000 	.word	0x40021000
 8003650:	40013c00 	.word	0x40013c00

08003654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
 8003660:	4613      	mov	r3, r2
 8003662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003664:	787b      	ldrb	r3, [r7, #1]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800366a:	887a      	ldrh	r2, [r7, #2]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003670:	e003      	b.n	800367a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003672:	887b      	ldrh	r3, [r7, #2]
 8003674:	041a      	lsls	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	619a      	str	r2, [r3, #24]
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e12b      	b.n	80038f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff f98a 	bl	80029c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	@ 0x24
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036ec:	f000 fd40 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 80036f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4a81      	ldr	r2, [pc, #516]	@ (80038fc <HAL_I2C_Init+0x274>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d807      	bhi.n	800370c <HAL_I2C_Init+0x84>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4a80      	ldr	r2, [pc, #512]	@ (8003900 <HAL_I2C_Init+0x278>)
 8003700:	4293      	cmp	r3, r2
 8003702:	bf94      	ite	ls
 8003704:	2301      	movls	r3, #1
 8003706:	2300      	movhi	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	e006      	b.n	800371a <HAL_I2C_Init+0x92>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a7d      	ldr	r2, [pc, #500]	@ (8003904 <HAL_I2C_Init+0x27c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	bf94      	ite	ls
 8003714:	2301      	movls	r3, #1
 8003716:	2300      	movhi	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0e7      	b.n	80038f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4a78      	ldr	r2, [pc, #480]	@ (8003908 <HAL_I2C_Init+0x280>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	0c9b      	lsrs	r3, r3, #18
 800372c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a6a      	ldr	r2, [pc, #424]	@ (80038fc <HAL_I2C_Init+0x274>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d802      	bhi.n	800375c <HAL_I2C_Init+0xd4>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	3301      	adds	r3, #1
 800375a:	e009      	b.n	8003770 <HAL_I2C_Init+0xe8>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	4a69      	ldr	r2, [pc, #420]	@ (800390c <HAL_I2C_Init+0x284>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	099b      	lsrs	r3, r3, #6
 800376e:	3301      	adds	r3, #1
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	430b      	orrs	r3, r1
 8003776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003782:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	495c      	ldr	r1, [pc, #368]	@ (80038fc <HAL_I2C_Init+0x274>)
 800378c:	428b      	cmp	r3, r1
 800378e:	d819      	bhi.n	80037c4 <HAL_I2C_Init+0x13c>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	1e59      	subs	r1, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	fbb1 f3f3 	udiv	r3, r1, r3
 800379e:	1c59      	adds	r1, r3, #1
 80037a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037a4:	400b      	ands	r3, r1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_I2C_Init+0x138>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1e59      	subs	r1, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80037b8:	3301      	adds	r3, #1
 80037ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037be:	e051      	b.n	8003864 <HAL_I2C_Init+0x1dc>
 80037c0:	2304      	movs	r3, #4
 80037c2:	e04f      	b.n	8003864 <HAL_I2C_Init+0x1dc>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d111      	bne.n	80037f0 <HAL_I2C_Init+0x168>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1e58      	subs	r0, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	440b      	add	r3, r1
 80037da:	fbb0 f3f3 	udiv	r3, r0, r3
 80037de:	3301      	adds	r3, #1
 80037e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e012      	b.n	8003816 <HAL_I2C_Init+0x18e>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e58      	subs	r0, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	0099      	lsls	r1, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	fbb0 f3f3 	udiv	r3, r0, r3
 8003806:	3301      	adds	r3, #1
 8003808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Init+0x196>
 800381a:	2301      	movs	r3, #1
 800381c:	e022      	b.n	8003864 <HAL_I2C_Init+0x1dc>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10e      	bne.n	8003844 <HAL_I2C_Init+0x1bc>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1e58      	subs	r0, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6859      	ldr	r1, [r3, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	440b      	add	r3, r1
 8003834:	fbb0 f3f3 	udiv	r3, r0, r3
 8003838:	3301      	adds	r3, #1
 800383a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003842:	e00f      	b.n	8003864 <HAL_I2C_Init+0x1dc>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1e58      	subs	r0, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	0099      	lsls	r1, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	fbb0 f3f3 	udiv	r3, r0, r3
 800385a:	3301      	adds	r3, #1
 800385c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003860:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	6809      	ldr	r1, [r1, #0]
 8003868:	4313      	orrs	r3, r2
 800386a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003892:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6911      	ldr	r1, [r2, #16]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	68d2      	ldr	r2, [r2, #12]
 800389e:	4311      	orrs	r1, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	000186a0 	.word	0x000186a0
 8003900:	001e847f 	.word	0x001e847f
 8003904:	003d08ff 	.word	0x003d08ff
 8003908:	431bde83 	.word	0x431bde83
 800390c:	10624dd3 	.word	0x10624dd3

08003910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e267      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d075      	beq.n	8003a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800392e:	4b88      	ldr	r3, [pc, #544]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b04      	cmp	r3, #4
 8003938:	d00c      	beq.n	8003954 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393a:	4b85      	ldr	r3, [pc, #532]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003942:	2b08      	cmp	r3, #8
 8003944:	d112      	bne.n	800396c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003946:	4b82      	ldr	r3, [pc, #520]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800394e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003952:	d10b      	bne.n	800396c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003954:	4b7e      	ldr	r3, [pc, #504]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d05b      	beq.n	8003a18 <HAL_RCC_OscConfig+0x108>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d157      	bne.n	8003a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e242      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003974:	d106      	bne.n	8003984 <HAL_RCC_OscConfig+0x74>
 8003976:	4b76      	ldr	r3, [pc, #472]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a75      	ldr	r2, [pc, #468]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e01d      	b.n	80039c0 <HAL_RCC_OscConfig+0xb0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x98>
 800398e:	4b70      	ldr	r3, [pc, #448]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a6f      	ldr	r2, [pc, #444]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6c      	ldr	r2, [pc, #432]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e00b      	b.n	80039c0 <HAL_RCC_OscConfig+0xb0>
 80039a8:	4b69      	ldr	r3, [pc, #420]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a68      	ldr	r2, [pc, #416]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4b66      	ldr	r3, [pc, #408]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a65      	ldr	r2, [pc, #404]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d013      	beq.n	80039f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7ff fb7e 	bl	80030c8 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d0:	f7ff fb7a 	bl	80030c8 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	@ 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e207      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0xc0>
 80039ee:	e014      	b.n	8003a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7ff fb6a 	bl	80030c8 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f8:	f7ff fb66 	bl	80030c8 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	@ 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e1f3      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0a:	4b51      	ldr	r3, [pc, #324]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0xe8>
 8003a16:	e000      	b.n	8003a1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d063      	beq.n	8003aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a26:	4b4a      	ldr	r3, [pc, #296]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a32:	4b47      	ldr	r3, [pc, #284]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d11c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3e:	4b44      	ldr	r3, [pc, #272]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d116      	bne.n	8003a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4a:	4b41      	ldr	r3, [pc, #260]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_RCC_OscConfig+0x152>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e1c7      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b3b      	ldr	r3, [pc, #236]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4937      	ldr	r1, [pc, #220]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	e03a      	b.n	8003aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a80:	4b34      	ldr	r3, [pc, #208]	@ (8003b54 <HAL_RCC_OscConfig+0x244>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7ff fb1f 	bl	80030c8 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8e:	f7ff fb1b 	bl	80030c8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e1a8      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aac:	4b28      	ldr	r3, [pc, #160]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4925      	ldr	r1, [pc, #148]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac2:	4b24      	ldr	r3, [pc, #144]	@ (8003b54 <HAL_RCC_OscConfig+0x244>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7ff fafe 	bl	80030c8 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad0:	f7ff fafa 	bl	80030c8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e187      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d036      	beq.n	8003b68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d016      	beq.n	8003b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b02:	4b15      	ldr	r3, [pc, #84]	@ (8003b58 <HAL_RCC_OscConfig+0x248>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7ff fade 	bl	80030c8 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b10:	f7ff fada 	bl	80030c8 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e167      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b22:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x200>
 8003b2e:	e01b      	b.n	8003b68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b30:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <HAL_RCC_OscConfig+0x248>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b36:	f7ff fac7 	bl	80030c8 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b3c:	e00e      	b.n	8003b5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3e:	f7ff fac3 	bl	80030c8 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d907      	bls.n	8003b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e150      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
 8003b50:	40023800 	.word	0x40023800
 8003b54:	42470000 	.word	0x42470000
 8003b58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5c:	4b88      	ldr	r3, [pc, #544]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ea      	bne.n	8003b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8097 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b76:	2300      	movs	r3, #0
 8003b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7a:	4b81      	ldr	r3, [pc, #516]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10f      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	4b7d      	ldr	r3, [pc, #500]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b96:	4b7a      	ldr	r3, [pc, #488]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	4b77      	ldr	r3, [pc, #476]	@ (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d118      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb2:	4b74      	ldr	r3, [pc, #464]	@ (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a73      	ldr	r2, [pc, #460]	@ (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bbe:	f7ff fa83 	bl	80030c8 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7ff fa7f 	bl	80030c8 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e10c      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x2ea>
 8003bec:	4b64      	ldr	r3, [pc, #400]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf0:	4a63      	ldr	r2, [pc, #396]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf8:	e01c      	b.n	8003c34 <HAL_RCC_OscConfig+0x324>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b05      	cmp	r3, #5
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x30c>
 8003c02:	4b5f      	ldr	r3, [pc, #380]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	4a5e      	ldr	r2, [pc, #376]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c0e:	4b5c      	ldr	r3, [pc, #368]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	4a5b      	ldr	r2, [pc, #364]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0x324>
 8003c1c:	4b58      	ldr	r3, [pc, #352]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c20:	4a57      	ldr	r2, [pc, #348]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c28:	4b55      	ldr	r3, [pc, #340]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2c:	4a54      	ldr	r2, [pc, #336]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	f023 0304 	bic.w	r3, r3, #4
 8003c32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d015      	beq.n	8003c68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7ff fa44 	bl	80030c8 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c44:	f7ff fa40 	bl	80030c8 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e0cb      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5a:	4b49      	ldr	r3, [pc, #292]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ee      	beq.n	8003c44 <HAL_RCC_OscConfig+0x334>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c68:	f7ff fa2e 	bl	80030c8 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c70:	f7ff fa2a 	bl	80030c8 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0b5      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c86:	4b3e      	ldr	r3, [pc, #248]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1ee      	bne.n	8003c70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c98:	4b39      	ldr	r3, [pc, #228]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9c:	4a38      	ldr	r2, [pc, #224]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80a1 	beq.w	8003df0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cae:	4b34      	ldr	r3, [pc, #208]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d05c      	beq.n	8003d74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d141      	bne.n	8003d46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc2:	4b31      	ldr	r3, [pc, #196]	@ (8003d88 <HAL_RCC_OscConfig+0x478>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7ff f9fe 	bl	80030c8 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7ff f9fa 	bl	80030c8 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e087      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce2:	4b27      	ldr	r3, [pc, #156]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69da      	ldr	r2, [r3, #28]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	019b      	lsls	r3, r3, #6
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	3b01      	subs	r3, #1
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	491b      	ldr	r1, [pc, #108]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d18:	4b1b      	ldr	r3, [pc, #108]	@ (8003d88 <HAL_RCC_OscConfig+0x478>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7ff f9d3 	bl	80030c8 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d26:	f7ff f9cf 	bl	80030c8 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e05c      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d38:	4b11      	ldr	r3, [pc, #68]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x416>
 8003d44:	e054      	b.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <HAL_RCC_OscConfig+0x478>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7ff f9bc 	bl	80030c8 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d54:	f7ff f9b8 	bl	80030c8 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e045      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x444>
 8003d72:	e03d      	b.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d107      	bne.n	8003d8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e038      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40007000 	.word	0x40007000
 8003d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dfc <HAL_RCC_OscConfig+0x4ec>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d028      	beq.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d121      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d11a      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d111      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d107      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800

08003e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0cc      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e14:	4b68      	ldr	r3, [pc, #416]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d90c      	bls.n	8003e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e22:	4b65      	ldr	r3, [pc, #404]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b63      	ldr	r3, [pc, #396]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0b8      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d020      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e54:	4b59      	ldr	r3, [pc, #356]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a58      	ldr	r2, [pc, #352]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e6c:	4b53      	ldr	r3, [pc, #332]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a52      	ldr	r2, [pc, #328]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e78:	4b50      	ldr	r3, [pc, #320]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	494d      	ldr	r1, [pc, #308]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d044      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	4b47      	ldr	r3, [pc, #284]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d119      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e07f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e06f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ece:	4b3b      	ldr	r3, [pc, #236]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e067      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ede:	4b37      	ldr	r3, [pc, #220]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f023 0203 	bic.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4934      	ldr	r1, [pc, #208]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef0:	f7ff f8ea 	bl	80030c8 <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef8:	f7ff f8e6 	bl	80030c8 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e04f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 020c 	and.w	r2, r3, #12
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d1eb      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f20:	4b25      	ldr	r3, [pc, #148]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d20c      	bcs.n	8003f48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b22      	ldr	r3, [pc, #136]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e032      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f54:	4b19      	ldr	r3, [pc, #100]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4916      	ldr	r1, [pc, #88]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f72:	4b12      	ldr	r3, [pc, #72]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	490e      	ldr	r1, [pc, #56]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f86:	f000 f821 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	490a      	ldr	r1, [pc, #40]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	5ccb      	ldrb	r3, [r1, r3]
 8003f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9e:	4a09      	ldr	r2, [pc, #36]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003fa2:	4b09      	ldr	r3, [pc, #36]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff f84a 	bl	8003040 <HAL_InitTick>

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023c00 	.word	0x40023c00
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	0800a1d8 	.word	0x0800a1d8
 8003fc4:	20000008 	.word	0x20000008
 8003fc8:	2000000c 	.word	0x2000000c

08003fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd0:	b090      	sub	sp, #64	@ 0x40
 8003fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe4:	4b59      	ldr	r3, [pc, #356]	@ (800414c <HAL_RCC_GetSysClockFreq+0x180>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d00d      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x40>
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	f200 80a1 	bhi.w	8004138 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_RCC_GetSysClockFreq+0x34>
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d003      	beq.n	8004006 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ffe:	e09b      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004000:	4b53      	ldr	r3, [pc, #332]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x184>)
 8004002:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004004:	e09b      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004006:	4b53      	ldr	r3, [pc, #332]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x188>)
 8004008:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800400a:	e098      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800400c:	4b4f      	ldr	r3, [pc, #316]	@ (800414c <HAL_RCC_GetSysClockFreq+0x180>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004014:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004016:	4b4d      	ldr	r3, [pc, #308]	@ (800414c <HAL_RCC_GetSysClockFreq+0x180>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d028      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004022:	4b4a      	ldr	r3, [pc, #296]	@ (800414c <HAL_RCC_GetSysClockFreq+0x180>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	099b      	lsrs	r3, r3, #6
 8004028:	2200      	movs	r2, #0
 800402a:	623b      	str	r3, [r7, #32]
 800402c:	627a      	str	r2, [r7, #36]	@ 0x24
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004034:	2100      	movs	r1, #0
 8004036:	4b47      	ldr	r3, [pc, #284]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x188>)
 8004038:	fb03 f201 	mul.w	r2, r3, r1
 800403c:	2300      	movs	r3, #0
 800403e:	fb00 f303 	mul.w	r3, r0, r3
 8004042:	4413      	add	r3, r2
 8004044:	4a43      	ldr	r2, [pc, #268]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x188>)
 8004046:	fba0 1202 	umull	r1, r2, r0, r2
 800404a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800404c:	460a      	mov	r2, r1
 800404e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004050:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004052:	4413      	add	r3, r2
 8004054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004058:	2200      	movs	r2, #0
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	61fa      	str	r2, [r7, #28]
 800405e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004062:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004066:	f7fc fdf7 	bl	8000c58 <__aeabi_uldivmod>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4613      	mov	r3, r2
 8004070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004072:	e053      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004074:	4b35      	ldr	r3, [pc, #212]	@ (800414c <HAL_RCC_GetSysClockFreq+0x180>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	099b      	lsrs	r3, r3, #6
 800407a:	2200      	movs	r2, #0
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	617a      	str	r2, [r7, #20]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004086:	f04f 0b00 	mov.w	fp, #0
 800408a:	4652      	mov	r2, sl
 800408c:	465b      	mov	r3, fp
 800408e:	f04f 0000 	mov.w	r0, #0
 8004092:	f04f 0100 	mov.w	r1, #0
 8004096:	0159      	lsls	r1, r3, #5
 8004098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800409c:	0150      	lsls	r0, r2, #5
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	ebb2 080a 	subs.w	r8, r2, sl
 80040a6:	eb63 090b 	sbc.w	r9, r3, fp
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040be:	ebb2 0408 	subs.w	r4, r2, r8
 80040c2:	eb63 0509 	sbc.w	r5, r3, r9
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	00eb      	lsls	r3, r5, #3
 80040d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040d4:	00e2      	lsls	r2, r4, #3
 80040d6:	4614      	mov	r4, r2
 80040d8:	461d      	mov	r5, r3
 80040da:	eb14 030a 	adds.w	r3, r4, sl
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	eb45 030b 	adc.w	r3, r5, fp
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040f2:	4629      	mov	r1, r5
 80040f4:	028b      	lsls	r3, r1, #10
 80040f6:	4621      	mov	r1, r4
 80040f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040fc:	4621      	mov	r1, r4
 80040fe:	028a      	lsls	r2, r1, #10
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004106:	2200      	movs	r2, #0
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	60fa      	str	r2, [r7, #12]
 800410c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004110:	f7fc fda2 	bl	8000c58 <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4613      	mov	r3, r2
 800411a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800411c:	4b0b      	ldr	r3, [pc, #44]	@ (800414c <HAL_RCC_GetSysClockFreq+0x180>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	3301      	adds	r3, #1
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800412c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800412e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004136:	e002      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004138:	4b05      	ldr	r3, [pc, #20]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x184>)
 800413a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800413c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004140:	4618      	mov	r0, r3
 8004142:	3740      	adds	r7, #64	@ 0x40
 8004144:	46bd      	mov	sp, r7
 8004146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	00f42400 	.word	0x00f42400
 8004154:	017d7840 	.word	0x017d7840

08004158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800415c:	4b03      	ldr	r3, [pc, #12]	@ (800416c <HAL_RCC_GetHCLKFreq+0x14>)
 800415e:	681b      	ldr	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000008 	.word	0x20000008

08004170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004174:	f7ff fff0 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0a9b      	lsrs	r3, r3, #10
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4903      	ldr	r1, [pc, #12]	@ (8004194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800
 8004194:	0800a1e8 	.word	0x0800a1e8

08004198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800419c:	f7ff ffdc 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	0b5b      	lsrs	r3, r3, #13
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	4903      	ldr	r1, [pc, #12]	@ (80041bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40023800 	.word	0x40023800
 80041bc:	0800a1e8 	.word	0x0800a1e8

080041c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e07b      	b.n	80042ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d108      	bne.n	80041ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041e2:	d009      	beq.n	80041f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	61da      	str	r2, [r3, #28]
 80041ea:	e005      	b.n	80041f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fe fc20 	bl	8002a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800422e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427c:	ea42 0103 	orr.w	r1, r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	f003 0104 	and.w	r1, r3, #4
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	f003 0210 	and.w	r2, r3, #16
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b088      	sub	sp, #32
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042e2:	f7fe fef1 	bl	80030c8 <HAL_GetTick>
 80042e6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d001      	beq.n	80042fc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80042f8:	2302      	movs	r3, #2
 80042fa:	e12a      	b.n	8004552 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_SPI_Transmit+0x36>
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e122      	b.n	8004552 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_SPI_Transmit+0x48>
 8004316:	2302      	movs	r3, #2
 8004318:	e11b      	b.n	8004552 <HAL_SPI_Transmit+0x280>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2203      	movs	r2, #3
 8004326:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	88fa      	ldrh	r2, [r7, #6]
 8004340:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004368:	d10f      	bne.n	800438a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004378:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004388:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004394:	2b40      	cmp	r3, #64	@ 0x40
 8004396:	d007      	beq.n	80043a8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043b0:	d152      	bne.n	8004458 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_SPI_Transmit+0xee>
 80043ba:	8b7b      	ldrh	r3, [r7, #26]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d145      	bne.n	800444c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c4:	881a      	ldrh	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d0:	1c9a      	adds	r2, r3, #2
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043e4:	e032      	b.n	800444c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d112      	bne.n	800441a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f8:	881a      	ldrh	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004404:	1c9a      	adds	r2, r3, #2
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004418:	e018      	b.n	800444c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800441a:	f7fe fe55 	bl	80030c8 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d803      	bhi.n	8004432 <HAL_SPI_Transmit+0x160>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004430:	d102      	bne.n	8004438 <HAL_SPI_Transmit+0x166>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e082      	b.n	8004552 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1c7      	bne.n	80043e6 <HAL_SPI_Transmit+0x114>
 8004456:	e053      	b.n	8004500 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_SPI_Transmit+0x194>
 8004460:	8b7b      	ldrh	r3, [r7, #26]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d147      	bne.n	80044f6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	7812      	ldrb	r2, [r2, #0]
 8004472:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800448c:	e033      	b.n	80044f6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b02      	cmp	r3, #2
 800449a:	d113      	bne.n	80044c4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	7812      	ldrb	r2, [r2, #0]
 80044a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80044c2:	e018      	b.n	80044f6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044c4:	f7fe fe00 	bl	80030c8 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d803      	bhi.n	80044dc <HAL_SPI_Transmit+0x20a>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044da:	d102      	bne.n	80044e2 <HAL_SPI_Transmit+0x210>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e02d      	b.n	8004552 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1c6      	bne.n	800448e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	6839      	ldr	r1, [r7, #0]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 fbd9 	bl	8004cbc <SPI_EndRxTxTransaction>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004550:	2300      	movs	r3, #0
  }
}
 8004552:	4618      	mov	r0, r3
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b088      	sub	sp, #32
 800455e:	af02      	add	r7, sp, #8
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	4613      	mov	r3, r2
 8004568:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b01      	cmp	r3, #1
 8004574:	d001      	beq.n	800457a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004576:	2302      	movs	r3, #2
 8004578:	e104      	b.n	8004784 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_SPI_Receive+0x2c>
 8004580:	88fb      	ldrh	r3, [r7, #6]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e0fc      	b.n	8004784 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004592:	d112      	bne.n	80045ba <HAL_SPI_Receive+0x60>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10e      	bne.n	80045ba <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2204      	movs	r2, #4
 80045a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045a4:	88fa      	ldrh	r2, [r7, #6]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f8eb 	bl	800478c <HAL_SPI_TransmitReceive>
 80045b6:	4603      	mov	r3, r0
 80045b8:	e0e4      	b.n	8004784 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ba:	f7fe fd85 	bl	80030c8 <HAL_GetTick>
 80045be:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_SPI_Receive+0x74>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e0da      	b.n	8004784 <HAL_SPI_Receive+0x22a>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2204      	movs	r2, #4
 80045da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	88fa      	ldrh	r2, [r7, #6]
 80045ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	88fa      	ldrh	r2, [r7, #6]
 80045f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800461c:	d10f      	bne.n	800463e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800462c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800463c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004648:	2b40      	cmp	r3, #64	@ 0x40
 800464a:	d007      	beq.n	800465c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800465a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d170      	bne.n	8004746 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004664:	e035      	b.n	80046d2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d115      	bne.n	80046a0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f103 020c 	add.w	r2, r3, #12
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004680:	7812      	ldrb	r2, [r2, #0]
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800469e:	e018      	b.n	80046d2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a0:	f7fe fd12 	bl	80030c8 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d803      	bhi.n	80046b8 <HAL_SPI_Receive+0x15e>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046b6:	d102      	bne.n	80046be <HAL_SPI_Receive+0x164>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e058      	b.n	8004784 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1c4      	bne.n	8004666 <HAL_SPI_Receive+0x10c>
 80046dc:	e038      	b.n	8004750 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d113      	bne.n	8004714 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f6:	b292      	uxth	r2, r2
 80046f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004712:	e018      	b.n	8004746 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004714:	f7fe fcd8 	bl	80030c8 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d803      	bhi.n	800472c <HAL_SPI_Receive+0x1d2>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800472a:	d102      	bne.n	8004732 <HAL_SPI_Receive+0x1d8>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e01e      	b.n	8004784 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1c6      	bne.n	80046de <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fa4b 	bl	8004bf0 <SPI_EndRxTransaction>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004782:	2300      	movs	r3, #0
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	@ 0x28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800479a:	2301      	movs	r3, #1
 800479c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800479e:	f7fe fc93 	bl	80030c8 <HAL_GetTick>
 80047a2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047aa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80047b2:	887b      	ldrh	r3, [r7, #2]
 80047b4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047b6:	7ffb      	ldrb	r3, [r7, #31]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d00c      	beq.n	80047d6 <HAL_SPI_TransmitReceive+0x4a>
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047c2:	d106      	bne.n	80047d2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <HAL_SPI_TransmitReceive+0x46>
 80047cc:	7ffb      	ldrb	r3, [r7, #31]
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d001      	beq.n	80047d6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80047d2:	2302      	movs	r3, #2
 80047d4:	e17f      	b.n	8004ad6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x5c>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x5c>
 80047e2:	887b      	ldrh	r3, [r7, #2]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e174      	b.n	8004ad6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_SPI_TransmitReceive+0x6e>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e16d      	b.n	8004ad6 <HAL_SPI_TransmitReceive+0x34a>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b04      	cmp	r3, #4
 800480c:	d003      	beq.n	8004816 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2205      	movs	r2, #5
 8004812:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	887a      	ldrh	r2, [r7, #2]
 8004826:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	887a      	ldrh	r2, [r7, #2]
 8004838:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	887a      	ldrh	r2, [r7, #2]
 800483e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004856:	2b40      	cmp	r3, #64	@ 0x40
 8004858:	d007      	beq.n	800486a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004868:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004872:	d17e      	bne.n	8004972 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_SPI_TransmitReceive+0xf6>
 800487c:	8afb      	ldrh	r3, [r7, #22]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d16c      	bne.n	800495c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004886:	881a      	ldrh	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004892:	1c9a      	adds	r2, r3, #2
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048a6:	e059      	b.n	800495c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d11b      	bne.n	80048ee <HAL_SPI_TransmitReceive+0x162>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d016      	beq.n	80048ee <HAL_SPI_TransmitReceive+0x162>
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d113      	bne.n	80048ee <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ca:	881a      	ldrh	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d6:	1c9a      	adds	r2, r3, #2
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d119      	bne.n	8004930 <HAL_SPI_TransmitReceive+0x1a4>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d014      	beq.n	8004930 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004910:	b292      	uxth	r2, r2
 8004912:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004918:	1c9a      	adds	r2, r3, #2
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800492c:	2301      	movs	r3, #1
 800492e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004930:	f7fe fbca 	bl	80030c8 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800493c:	429a      	cmp	r2, r3
 800493e:	d80d      	bhi.n	800495c <HAL_SPI_TransmitReceive+0x1d0>
 8004940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004946:	d009      	beq.n	800495c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e0bc      	b.n	8004ad6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1a0      	bne.n	80048a8 <HAL_SPI_TransmitReceive+0x11c>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d19b      	bne.n	80048a8 <HAL_SPI_TransmitReceive+0x11c>
 8004970:	e082      	b.n	8004a78 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_SPI_TransmitReceive+0x1f4>
 800497a:	8afb      	ldrh	r3, [r7, #22]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d171      	bne.n	8004a64 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	330c      	adds	r3, #12
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a6:	e05d      	b.n	8004a64 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d11c      	bne.n	80049f0 <HAL_SPI_TransmitReceive+0x264>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d017      	beq.n	80049f0 <HAL_SPI_TransmitReceive+0x264>
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d114      	bne.n	80049f0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	7812      	ldrb	r2, [r2, #0]
 80049d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d119      	bne.n	8004a32 <HAL_SPI_TransmitReceive+0x2a6>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d014      	beq.n	8004a32 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a32:	f7fe fb49 	bl	80030c8 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d803      	bhi.n	8004a4a <HAL_SPI_TransmitReceive+0x2be>
 8004a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a48:	d102      	bne.n	8004a50 <HAL_SPI_TransmitReceive+0x2c4>
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d109      	bne.n	8004a64 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e038      	b.n	8004ad6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d19c      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x21c>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d197      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a78:	6a3a      	ldr	r2, [r7, #32]
 8004a7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f91d 	bl	8004cbc <SPI_EndRxTxTransaction>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e01d      	b.n	8004ad6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10a      	bne.n	8004ab8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
  }
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3728      	adds	r7, #40	@ 0x28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	4613      	mov	r3, r2
 8004aee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004af0:	f7fe faea 	bl	80030c8 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	4413      	add	r3, r2
 8004afe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b00:	f7fe fae2 	bl	80030c8 <HAL_GetTick>
 8004b04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b06:	4b39      	ldr	r3, [pc, #228]	@ (8004bec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	015b      	lsls	r3, r3, #5
 8004b0c:	0d1b      	lsrs	r3, r3, #20
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	fb02 f303 	mul.w	r3, r2, r3
 8004b14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b16:	e055      	b.n	8004bc4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b1e:	d051      	beq.n	8004bc4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b20:	f7fe fad2 	bl	80030c8 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d902      	bls.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d13d      	bne.n	8004bb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b4e:	d111      	bne.n	8004b74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b58:	d004      	beq.n	8004b64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b62:	d107      	bne.n	8004b74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b7c:	d10f      	bne.n	8004b9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e018      	b.n	8004be4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61fb      	str	r3, [r7, #28]
 8004bbc:	e002      	b.n	8004bc4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d19a      	bne.n	8004b18 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3720      	adds	r7, #32
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20000008 	.word	0x20000008

08004bf0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c04:	d111      	bne.n	8004c2a <SPI_EndRxTransaction+0x3a>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c0e:	d004      	beq.n	8004c1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c18:	d107      	bne.n	8004c2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c32:	d12a      	bne.n	8004c8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c3c:	d012      	beq.n	8004c64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2200      	movs	r2, #0
 8004c46:	2180      	movs	r1, #128	@ 0x80
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7ff ff49 	bl	8004ae0 <SPI_WaitFlagStateUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d02d      	beq.n	8004cb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c58:	f043 0220 	orr.w	r2, r3, #32
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e026      	b.n	8004cb2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff ff36 	bl	8004ae0 <SPI_WaitFlagStateUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01a      	beq.n	8004cb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7e:	f043 0220 	orr.w	r2, r3, #32
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e013      	b.n	8004cb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2200      	movs	r2, #0
 8004c92:	2101      	movs	r1, #1
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff ff23 	bl	8004ae0 <SPI_WaitFlagStateUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e000      	b.n	8004cb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	2102      	movs	r1, #2
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7ff ff04 	bl	8004ae0 <SPI_WaitFlagStateUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce2:	f043 0220 	orr.w	r2, r3, #32
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e032      	b.n	8004d54 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cee:	4b1b      	ldr	r3, [pc, #108]	@ (8004d5c <SPI_EndRxTxTransaction+0xa0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d60 <SPI_EndRxTxTransaction+0xa4>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	0d5b      	lsrs	r3, r3, #21
 8004cfa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004cfe:	fb02 f303 	mul.w	r3, r2, r3
 8004d02:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d0c:	d112      	bne.n	8004d34 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2200      	movs	r2, #0
 8004d16:	2180      	movs	r1, #128	@ 0x80
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7ff fee1 	bl	8004ae0 <SPI_WaitFlagStateUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d016      	beq.n	8004d52 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d28:	f043 0220 	orr.w	r2, r3, #32
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e00f      	b.n	8004d54 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4a:	2b80      	cmp	r3, #128	@ 0x80
 8004d4c:	d0f2      	beq.n	8004d34 <SPI_EndRxTxTransaction+0x78>
 8004d4e:	e000      	b.n	8004d52 <SPI_EndRxTxTransaction+0x96>
        break;
 8004d50:	bf00      	nop
  }

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000008 	.word	0x20000008
 8004d60:	165e9f81 	.word	0x165e9f81

08004d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e041      	b.n	8004dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fd fefe 	bl	8002b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f000 fb6a 	bl	800547c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d001      	beq.n	8004e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e044      	b.n	8004ea6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0201 	orr.w	r2, r2, #1
 8004e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d018      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x6c>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e46:	d013      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x6c>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00e      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x6c>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a19      	ldr	r2, [pc, #100]	@ (8004ebc <HAL_TIM_Base_Start_IT+0xb8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d009      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x6c>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a17      	ldr	r2, [pc, #92]	@ (8004ec0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d004      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x6c>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a16      	ldr	r2, [pc, #88]	@ (8004ec4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d111      	bne.n	8004e94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b06      	cmp	r3, #6
 8004e80:	d010      	beq.n	8004ea4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0201 	orr.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e92:	e007      	b.n	8004ea4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40000c00 	.word	0x40000c00
 8004ec4:	40014000 	.word	0x40014000

08004ec8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e041      	b.n	8004f5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fd fdfa 	bl	8002ae8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f000 fab8 	bl	800547c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <HAL_TIM_PWM_Start+0x24>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	e022      	b.n	8004fd2 <HAL_TIM_PWM_Start+0x6a>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d109      	bne.n	8004fa6 <HAL_TIM_PWM_Start+0x3e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	bf14      	ite	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	2300      	moveq	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	e015      	b.n	8004fd2 <HAL_TIM_PWM_Start+0x6a>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d109      	bne.n	8004fc0 <HAL_TIM_PWM_Start+0x58>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	bf14      	ite	ne
 8004fb8:	2301      	movne	r3, #1
 8004fba:	2300      	moveq	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	e008      	b.n	8004fd2 <HAL_TIM_PWM_Start+0x6a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	bf14      	ite	ne
 8004fcc:	2301      	movne	r3, #1
 8004fce:	2300      	moveq	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e068      	b.n	80050ac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_PWM_Start+0x82>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fe8:	e013      	b.n	8005012 <HAL_TIM_PWM_Start+0xaa>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start+0x92>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ff8:	e00b      	b.n	8005012 <HAL_TIM_PWM_Start+0xaa>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_PWM_Start+0xa2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005008:	e003      	b.n	8005012 <HAL_TIM_PWM_Start+0xaa>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2201      	movs	r2, #1
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fc40 	bl	80058a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a23      	ldr	r2, [pc, #140]	@ (80050b4 <HAL_TIM_PWM_Start+0x14c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d107      	bne.n	800503a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005038:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1d      	ldr	r2, [pc, #116]	@ (80050b4 <HAL_TIM_PWM_Start+0x14c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d018      	beq.n	8005076 <HAL_TIM_PWM_Start+0x10e>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800504c:	d013      	beq.n	8005076 <HAL_TIM_PWM_Start+0x10e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a19      	ldr	r2, [pc, #100]	@ (80050b8 <HAL_TIM_PWM_Start+0x150>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00e      	beq.n	8005076 <HAL_TIM_PWM_Start+0x10e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a17      	ldr	r2, [pc, #92]	@ (80050bc <HAL_TIM_PWM_Start+0x154>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d009      	beq.n	8005076 <HAL_TIM_PWM_Start+0x10e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a16      	ldr	r2, [pc, #88]	@ (80050c0 <HAL_TIM_PWM_Start+0x158>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_TIM_PWM_Start+0x10e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a14      	ldr	r2, [pc, #80]	@ (80050c4 <HAL_TIM_PWM_Start+0x15c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d111      	bne.n	800509a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b06      	cmp	r3, #6
 8005086:	d010      	beq.n	80050aa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005098:	e007      	b.n	80050aa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0201 	orr.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40000c00 	.word	0x40000c00
 80050c4:	40014000 	.word	0x40014000

080050c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d020      	beq.n	800512c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01b      	beq.n	800512c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0202 	mvn.w	r2, #2
 80050fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f994 	bl	8005440 <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f986 	bl	800542c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f997 	bl	8005454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d020      	beq.n	8005178 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0204 	mvn.w	r2, #4
 8005148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f96e 	bl	8005440 <HAL_TIM_IC_CaptureCallback>
 8005164:	e005      	b.n	8005172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f960 	bl	800542c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f971 	bl	8005454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d020      	beq.n	80051c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01b      	beq.n	80051c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0208 	mvn.w	r2, #8
 8005194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2204      	movs	r2, #4
 800519a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f948 	bl	8005440 <HAL_TIM_IC_CaptureCallback>
 80051b0:	e005      	b.n	80051be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f93a 	bl	800542c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f94b 	bl	8005454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d020      	beq.n	8005210 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01b      	beq.n	8005210 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0210 	mvn.w	r2, #16
 80051e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2208      	movs	r2, #8
 80051e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f922 	bl	8005440 <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f914 	bl	800542c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f925 	bl	8005454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00c      	beq.n	8005234 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0201 	mvn.w	r2, #1
 800522c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7fc fa96 	bl	8001760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fc14 	bl	8005a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00c      	beq.n	800527c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f8f6 	bl	8005468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00c      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0220 	mvn.w	r2, #32
 8005298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fbe6 	bl	8005a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e0ae      	b.n	8005424 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b0c      	cmp	r3, #12
 80052d2:	f200 809f 	bhi.w	8005414 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052d6:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	08005311 	.word	0x08005311
 80052e0:	08005415 	.word	0x08005415
 80052e4:	08005415 	.word	0x08005415
 80052e8:	08005415 	.word	0x08005415
 80052ec:	08005351 	.word	0x08005351
 80052f0:	08005415 	.word	0x08005415
 80052f4:	08005415 	.word	0x08005415
 80052f8:	08005415 	.word	0x08005415
 80052fc:	08005393 	.word	0x08005393
 8005300:	08005415 	.word	0x08005415
 8005304:	08005415 	.word	0x08005415
 8005308:	08005415 	.word	0x08005415
 800530c:	080053d3 	.word	0x080053d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	4618      	mov	r0, r3
 8005318:	f000 f936 	bl	8005588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0208 	orr.w	r2, r2, #8
 800532a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0204 	bic.w	r2, r2, #4
 800533a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6999      	ldr	r1, [r3, #24]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	619a      	str	r2, [r3, #24]
      break;
 800534e:	e064      	b.n	800541a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	4618      	mov	r0, r3
 8005358:	f000 f97c 	bl	8005654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800536a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800537a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6999      	ldr	r1, [r3, #24]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	021a      	lsls	r2, r3, #8
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	619a      	str	r2, [r3, #24]
      break;
 8005390:	e043      	b.n	800541a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68b9      	ldr	r1, [r7, #8]
 8005398:	4618      	mov	r0, r3
 800539a:	f000 f9c7 	bl	800572c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0208 	orr.w	r2, r2, #8
 80053ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0204 	bic.w	r2, r2, #4
 80053bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69d9      	ldr	r1, [r3, #28]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	61da      	str	r2, [r3, #28]
      break;
 80053d0:	e023      	b.n	800541a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fa11 	bl	8005800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69da      	ldr	r2, [r3, #28]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69d9      	ldr	r1, [r3, #28]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	021a      	lsls	r2, r3, #8
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	61da      	str	r2, [r3, #28]
      break;
 8005412:	e002      	b.n	800541a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
      break;
 8005418:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005422:	7dfb      	ldrb	r3, [r7, #23]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a37      	ldr	r2, [pc, #220]	@ (800556c <TIM_Base_SetConfig+0xf0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00f      	beq.n	80054b4 <TIM_Base_SetConfig+0x38>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800549a:	d00b      	beq.n	80054b4 <TIM_Base_SetConfig+0x38>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a34      	ldr	r2, [pc, #208]	@ (8005570 <TIM_Base_SetConfig+0xf4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_Base_SetConfig+0x38>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a33      	ldr	r2, [pc, #204]	@ (8005574 <TIM_Base_SetConfig+0xf8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_Base_SetConfig+0x38>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a32      	ldr	r2, [pc, #200]	@ (8005578 <TIM_Base_SetConfig+0xfc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d108      	bne.n	80054c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a28      	ldr	r2, [pc, #160]	@ (800556c <TIM_Base_SetConfig+0xf0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d01b      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d4:	d017      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a25      	ldr	r2, [pc, #148]	@ (8005570 <TIM_Base_SetConfig+0xf4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a24      	ldr	r2, [pc, #144]	@ (8005574 <TIM_Base_SetConfig+0xf8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00f      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a23      	ldr	r2, [pc, #140]	@ (8005578 <TIM_Base_SetConfig+0xfc>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00b      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a22      	ldr	r2, [pc, #136]	@ (800557c <TIM_Base_SetConfig+0x100>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d007      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a21      	ldr	r2, [pc, #132]	@ (8005580 <TIM_Base_SetConfig+0x104>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d003      	beq.n	8005506 <TIM_Base_SetConfig+0x8a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a20      	ldr	r2, [pc, #128]	@ (8005584 <TIM_Base_SetConfig+0x108>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d108      	bne.n	8005518 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800550c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a0c      	ldr	r2, [pc, #48]	@ (800556c <TIM_Base_SetConfig+0xf0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d103      	bne.n	8005546 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f043 0204 	orr.w	r2, r3, #4
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	601a      	str	r2, [r3, #0]
}
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40010000 	.word	0x40010000
 8005570:	40000400 	.word	0x40000400
 8005574:	40000800 	.word	0x40000800
 8005578:	40000c00 	.word	0x40000c00
 800557c:	40014000 	.word	0x40014000
 8005580:	40014400 	.word	0x40014400
 8005584:	40014800 	.word	0x40014800

08005588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	f023 0201 	bic.w	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f023 0302 	bic.w	r3, r3, #2
 80055d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a1c      	ldr	r2, [pc, #112]	@ (8005650 <TIM_OC1_SetConfig+0xc8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d10c      	bne.n	80055fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f023 0308 	bic.w	r3, r3, #8
 80055ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f023 0304 	bic.w	r3, r3, #4
 80055fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a13      	ldr	r2, [pc, #76]	@ (8005650 <TIM_OC1_SetConfig+0xc8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d111      	bne.n	800562a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800560c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	621a      	str	r2, [r3, #32]
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	40010000 	.word	0x40010000

08005654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f023 0210 	bic.w	r2, r3, #16
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800568a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	021b      	lsls	r3, r3, #8
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f023 0320 	bic.w	r3, r3, #32
 800569e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005728 <TIM_OC2_SetConfig+0xd4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d10d      	bne.n	80056d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a15      	ldr	r2, [pc, #84]	@ (8005728 <TIM_OC2_SetConfig+0xd4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d113      	bne.n	8005700 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	621a      	str	r2, [r3, #32]
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40010000 	.word	0x40010000

0800572c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0303 	bic.w	r3, r3, #3
 8005762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1d      	ldr	r2, [pc, #116]	@ (80057fc <TIM_OC3_SetConfig+0xd0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d10d      	bne.n	80057a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a14      	ldr	r2, [pc, #80]	@ (80057fc <TIM_OC3_SetConfig+0xd0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d113      	bne.n	80057d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	621a      	str	r2, [r3, #32]
}
 80057f0:	bf00      	nop
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	40010000 	.word	0x40010000

08005800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800582e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800584a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	031b      	lsls	r3, r3, #12
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a10      	ldr	r2, [pc, #64]	@ (800589c <TIM_OC4_SetConfig+0x9c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d109      	bne.n	8005874 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	019b      	lsls	r3, r3, #6
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40010000 	.word	0x40010000

080058a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	2201      	movs	r2, #1
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a1a      	ldr	r2, [r3, #32]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	43db      	mvns	r3, r3
 80058c2:	401a      	ands	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a1a      	ldr	r2, [r3, #32]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	fa01 f303 	lsl.w	r3, r1, r3
 80058d8:	431a      	orrs	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	621a      	str	r2, [r3, #32]
}
 80058de:	bf00      	nop
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
	...

080058ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005900:	2302      	movs	r3, #2
 8005902:	e050      	b.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1c      	ldr	r2, [pc, #112]	@ (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d018      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005950:	d013      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a18      	ldr	r2, [pc, #96]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00e      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a16      	ldr	r2, [pc, #88]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d009      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a15      	ldr	r2, [pc, #84]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d004      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a13      	ldr	r2, [pc, #76]	@ (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d10c      	bne.n	8005994 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	4313      	orrs	r3, r2
 800598a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800
 80059c0:	40000c00 	.word	0x40000c00
 80059c4:	40014000 	.word	0x40014000

080059c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e03d      	b.n	8005a60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e042      	b.n	8005b2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fd f916 	bl	8002cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2224      	movs	r2, #36	@ 0x24
 8005ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fa09 	bl	8005ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695a      	ldr	r2, [r3, #20]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08a      	sub	sp, #40	@ 0x28
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	603b      	str	r3, [r7, #0]
 8005b40:	4613      	mov	r3, r2
 8005b42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d175      	bne.n	8005c40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_UART_Transmit+0x2c>
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e06e      	b.n	8005c42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2221      	movs	r2, #33	@ 0x21
 8005b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b72:	f7fd faa9 	bl	80030c8 <HAL_GetTick>
 8005b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	88fa      	ldrh	r2, [r7, #6]
 8005b7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	88fa      	ldrh	r2, [r7, #6]
 8005b82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b8c:	d108      	bne.n	8005ba0 <HAL_UART_Transmit+0x6c>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d104      	bne.n	8005ba0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	e003      	b.n	8005ba8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ba8:	e02e      	b.n	8005c08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2180      	movs	r1, #128	@ 0x80
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f8df 	bl	8005d78 <UART_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e03a      	b.n	8005c42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10b      	bne.n	8005bea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	3302      	adds	r3, #2
 8005be6:	61bb      	str	r3, [r7, #24]
 8005be8:	e007      	b.n	8005bfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	781a      	ldrb	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1cb      	bne.n	8005baa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2140      	movs	r1, #64	@ 0x40
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f8ab 	bl	8005d78 <UART_WaitOnFlagUntilTimeout>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d005      	beq.n	8005c34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e006      	b.n	8005c42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	e000      	b.n	8005c42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c40:	2302      	movs	r3, #2
  }
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b08a      	sub	sp, #40	@ 0x28
 8005c4e:	af02      	add	r7, sp, #8
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	f040 8081 	bne.w	8005d6e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_UART_Receive+0x2e>
 8005c72:	88fb      	ldrh	r3, [r7, #6]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e079      	b.n	8005d70 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2222      	movs	r2, #34	@ 0x22
 8005c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c90:	f7fd fa1a 	bl	80030c8 <HAL_GetTick>
 8005c94:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	88fa      	ldrh	r2, [r7, #6]
 8005c9a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	88fa      	ldrh	r2, [r7, #6]
 8005ca0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005caa:	d108      	bne.n	8005cbe <HAL_UART_Receive+0x74>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	61bb      	str	r3, [r7, #24]
 8005cbc:	e003      	b.n	8005cc6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005cc6:	e047      	b.n	8005d58 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2120      	movs	r1, #32
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f850 	bl	8005d78 <UART_WaitOnFlagUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e042      	b.n	8005d70 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10c      	bne.n	8005d0a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	3302      	adds	r3, #2
 8005d06:	61bb      	str	r3, [r7, #24]
 8005d08:	e01f      	b.n	8005d4a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d12:	d007      	beq.n	8005d24 <HAL_UART_Receive+0xda>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <HAL_UART_Receive+0xe8>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	e008      	b.n	8005d44 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	3301      	adds	r3, #1
 8005d48:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1b2      	bne.n	8005cc8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e000      	b.n	8005d70 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005d6e:	2302      	movs	r3, #2
  }
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	4613      	mov	r3, r2
 8005d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d88:	e03b      	b.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d90:	d037      	beq.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d92:	f7fd f999 	bl	80030c8 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	6a3a      	ldr	r2, [r7, #32]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d302      	bcc.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e03a      	b.n	8005e22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d023      	beq.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b80      	cmp	r3, #128	@ 0x80
 8005dbe:	d020      	beq.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b40      	cmp	r3, #64	@ 0x40
 8005dc4:	d01d      	beq.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d116      	bne.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 f81d 	bl	8005e2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2208      	movs	r2, #8
 8005df4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e00f      	b.n	8005e22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	bf0c      	ite	eq
 8005e12:	2301      	moveq	r3, #1
 8005e14:	2300      	movne	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d0b4      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b095      	sub	sp, #84	@ 0x54
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e52:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e5      	bne.n	8005e32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3314      	adds	r3, #20
 8005e6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e5      	bne.n	8005e66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d119      	bne.n	8005ed6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	330c      	adds	r3, #12
 8005ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f023 0310 	bic.w	r3, r3, #16
 8005eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	330c      	adds	r3, #12
 8005ec0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ec2:	61ba      	str	r2, [r7, #24]
 8005ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6979      	ldr	r1, [r7, #20]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e5      	bne.n	8005ea2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ee4:	bf00      	nop
 8005ee6:	3754      	adds	r7, #84	@ 0x54
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef4:	b0c0      	sub	sp, #256	@ 0x100
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f0c:	68d9      	ldr	r1, [r3, #12]
 8005f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	ea40 0301 	orr.w	r3, r0, r1
 8005f18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f48:	f021 010c 	bic.w	r1, r1, #12
 8005f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f56:	430b      	orrs	r3, r1
 8005f58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f6a:	6999      	ldr	r1, [r3, #24]
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	ea40 0301 	orr.w	r3, r0, r1
 8005f76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	4b8f      	ldr	r3, [pc, #572]	@ (80061bc <UART_SetConfig+0x2cc>)
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d005      	beq.n	8005f90 <UART_SetConfig+0xa0>
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	4b8d      	ldr	r3, [pc, #564]	@ (80061c0 <UART_SetConfig+0x2d0>)
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d104      	bne.n	8005f9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f90:	f7fe f902 	bl	8004198 <HAL_RCC_GetPCLK2Freq>
 8005f94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f98:	e003      	b.n	8005fa2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f9a:	f7fe f8e9 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 8005f9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fac:	f040 810c 	bne.w	80061c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005fbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	1891      	adds	r1, r2, r2
 8005fc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005fca:	415b      	adcs	r3, r3
 8005fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	eb12 0801 	adds.w	r8, r2, r1
 8005fd8:	4629      	mov	r1, r5
 8005fda:	eb43 0901 	adc.w	r9, r3, r1
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ff2:	4690      	mov	r8, r2
 8005ff4:	4699      	mov	r9, r3
 8005ff6:	4623      	mov	r3, r4
 8005ff8:	eb18 0303 	adds.w	r3, r8, r3
 8005ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006000:	462b      	mov	r3, r5
 8006002:	eb49 0303 	adc.w	r3, r9, r3
 8006006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800600a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006016:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800601a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800601e:	460b      	mov	r3, r1
 8006020:	18db      	adds	r3, r3, r3
 8006022:	653b      	str	r3, [r7, #80]	@ 0x50
 8006024:	4613      	mov	r3, r2
 8006026:	eb42 0303 	adc.w	r3, r2, r3
 800602a:	657b      	str	r3, [r7, #84]	@ 0x54
 800602c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006030:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006034:	f7fa fe10 	bl	8000c58 <__aeabi_uldivmod>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4b61      	ldr	r3, [pc, #388]	@ (80061c4 <UART_SetConfig+0x2d4>)
 800603e:	fba3 2302 	umull	r2, r3, r3, r2
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	011c      	lsls	r4, r3, #4
 8006046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800604a:	2200      	movs	r2, #0
 800604c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006050:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006054:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006058:	4642      	mov	r2, r8
 800605a:	464b      	mov	r3, r9
 800605c:	1891      	adds	r1, r2, r2
 800605e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006060:	415b      	adcs	r3, r3
 8006062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006064:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006068:	4641      	mov	r1, r8
 800606a:	eb12 0a01 	adds.w	sl, r2, r1
 800606e:	4649      	mov	r1, r9
 8006070:	eb43 0b01 	adc.w	fp, r3, r1
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006080:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006084:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006088:	4692      	mov	sl, r2
 800608a:	469b      	mov	fp, r3
 800608c:	4643      	mov	r3, r8
 800608e:	eb1a 0303 	adds.w	r3, sl, r3
 8006092:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006096:	464b      	mov	r3, r9
 8006098:	eb4b 0303 	adc.w	r3, fp, r3
 800609c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80060b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80060b4:	460b      	mov	r3, r1
 80060b6:	18db      	adds	r3, r3, r3
 80060b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80060ba:	4613      	mov	r3, r2
 80060bc:	eb42 0303 	adc.w	r3, r2, r3
 80060c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80060c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80060c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80060ca:	f7fa fdc5 	bl	8000c58 <__aeabi_uldivmod>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4611      	mov	r1, r2
 80060d4:	4b3b      	ldr	r3, [pc, #236]	@ (80061c4 <UART_SetConfig+0x2d4>)
 80060d6:	fba3 2301 	umull	r2, r3, r3, r1
 80060da:	095b      	lsrs	r3, r3, #5
 80060dc:	2264      	movs	r2, #100	@ 0x64
 80060de:	fb02 f303 	mul.w	r3, r2, r3
 80060e2:	1acb      	subs	r3, r1, r3
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80060ea:	4b36      	ldr	r3, [pc, #216]	@ (80061c4 <UART_SetConfig+0x2d4>)
 80060ec:	fba3 2302 	umull	r2, r3, r3, r2
 80060f0:	095b      	lsrs	r3, r3, #5
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80060f8:	441c      	add	r4, r3
 80060fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006104:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006108:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800610c:	4642      	mov	r2, r8
 800610e:	464b      	mov	r3, r9
 8006110:	1891      	adds	r1, r2, r2
 8006112:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006114:	415b      	adcs	r3, r3
 8006116:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006118:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800611c:	4641      	mov	r1, r8
 800611e:	1851      	adds	r1, r2, r1
 8006120:	6339      	str	r1, [r7, #48]	@ 0x30
 8006122:	4649      	mov	r1, r9
 8006124:	414b      	adcs	r3, r1
 8006126:	637b      	str	r3, [r7, #52]	@ 0x34
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006134:	4659      	mov	r1, fp
 8006136:	00cb      	lsls	r3, r1, #3
 8006138:	4651      	mov	r1, sl
 800613a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800613e:	4651      	mov	r1, sl
 8006140:	00ca      	lsls	r2, r1, #3
 8006142:	4610      	mov	r0, r2
 8006144:	4619      	mov	r1, r3
 8006146:	4603      	mov	r3, r0
 8006148:	4642      	mov	r2, r8
 800614a:	189b      	adds	r3, r3, r2
 800614c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006150:	464b      	mov	r3, r9
 8006152:	460a      	mov	r2, r1
 8006154:	eb42 0303 	adc.w	r3, r2, r3
 8006158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006168:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800616c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006170:	460b      	mov	r3, r1
 8006172:	18db      	adds	r3, r3, r3
 8006174:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006176:	4613      	mov	r3, r2
 8006178:	eb42 0303 	adc.w	r3, r2, r3
 800617c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800617e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006182:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006186:	f7fa fd67 	bl	8000c58 <__aeabi_uldivmod>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4b0d      	ldr	r3, [pc, #52]	@ (80061c4 <UART_SetConfig+0x2d4>)
 8006190:	fba3 1302 	umull	r1, r3, r3, r2
 8006194:	095b      	lsrs	r3, r3, #5
 8006196:	2164      	movs	r1, #100	@ 0x64
 8006198:	fb01 f303 	mul.w	r3, r1, r3
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	3332      	adds	r3, #50	@ 0x32
 80061a2:	4a08      	ldr	r2, [pc, #32]	@ (80061c4 <UART_SetConfig+0x2d4>)
 80061a4:	fba2 2303 	umull	r2, r3, r2, r3
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	f003 0207 	and.w	r2, r3, #7
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4422      	add	r2, r4
 80061b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061b8:	e106      	b.n	80063c8 <UART_SetConfig+0x4d8>
 80061ba:	bf00      	nop
 80061bc:	40011000 	.word	0x40011000
 80061c0:	40011400 	.word	0x40011400
 80061c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80061d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80061d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80061da:	4642      	mov	r2, r8
 80061dc:	464b      	mov	r3, r9
 80061de:	1891      	adds	r1, r2, r2
 80061e0:	6239      	str	r1, [r7, #32]
 80061e2:	415b      	adcs	r3, r3
 80061e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061ea:	4641      	mov	r1, r8
 80061ec:	1854      	adds	r4, r2, r1
 80061ee:	4649      	mov	r1, r9
 80061f0:	eb43 0501 	adc.w	r5, r3, r1
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	00eb      	lsls	r3, r5, #3
 80061fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006202:	00e2      	lsls	r2, r4, #3
 8006204:	4614      	mov	r4, r2
 8006206:	461d      	mov	r5, r3
 8006208:	4643      	mov	r3, r8
 800620a:	18e3      	adds	r3, r4, r3
 800620c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006210:	464b      	mov	r3, r9
 8006212:	eb45 0303 	adc.w	r3, r5, r3
 8006216:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800621a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006226:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800622a:	f04f 0200 	mov.w	r2, #0
 800622e:	f04f 0300 	mov.w	r3, #0
 8006232:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006236:	4629      	mov	r1, r5
 8006238:	008b      	lsls	r3, r1, #2
 800623a:	4621      	mov	r1, r4
 800623c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006240:	4621      	mov	r1, r4
 8006242:	008a      	lsls	r2, r1, #2
 8006244:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006248:	f7fa fd06 	bl	8000c58 <__aeabi_uldivmod>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4b60      	ldr	r3, [pc, #384]	@ (80063d4 <UART_SetConfig+0x4e4>)
 8006252:	fba3 2302 	umull	r2, r3, r3, r2
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	011c      	lsls	r4, r3, #4
 800625a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800625e:	2200      	movs	r2, #0
 8006260:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006264:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006268:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800626c:	4642      	mov	r2, r8
 800626e:	464b      	mov	r3, r9
 8006270:	1891      	adds	r1, r2, r2
 8006272:	61b9      	str	r1, [r7, #24]
 8006274:	415b      	adcs	r3, r3
 8006276:	61fb      	str	r3, [r7, #28]
 8006278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800627c:	4641      	mov	r1, r8
 800627e:	1851      	adds	r1, r2, r1
 8006280:	6139      	str	r1, [r7, #16]
 8006282:	4649      	mov	r1, r9
 8006284:	414b      	adcs	r3, r1
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006294:	4659      	mov	r1, fp
 8006296:	00cb      	lsls	r3, r1, #3
 8006298:	4651      	mov	r1, sl
 800629a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800629e:	4651      	mov	r1, sl
 80062a0:	00ca      	lsls	r2, r1, #3
 80062a2:	4610      	mov	r0, r2
 80062a4:	4619      	mov	r1, r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	4642      	mov	r2, r8
 80062aa:	189b      	adds	r3, r3, r2
 80062ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062b0:	464b      	mov	r3, r9
 80062b2:	460a      	mov	r2, r1
 80062b4:	eb42 0303 	adc.w	r3, r2, r3
 80062b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80062d4:	4649      	mov	r1, r9
 80062d6:	008b      	lsls	r3, r1, #2
 80062d8:	4641      	mov	r1, r8
 80062da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062de:	4641      	mov	r1, r8
 80062e0:	008a      	lsls	r2, r1, #2
 80062e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80062e6:	f7fa fcb7 	bl	8000c58 <__aeabi_uldivmod>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4611      	mov	r1, r2
 80062f0:	4b38      	ldr	r3, [pc, #224]	@ (80063d4 <UART_SetConfig+0x4e4>)
 80062f2:	fba3 2301 	umull	r2, r3, r3, r1
 80062f6:	095b      	lsrs	r3, r3, #5
 80062f8:	2264      	movs	r2, #100	@ 0x64
 80062fa:	fb02 f303 	mul.w	r3, r2, r3
 80062fe:	1acb      	subs	r3, r1, r3
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	3332      	adds	r3, #50	@ 0x32
 8006304:	4a33      	ldr	r2, [pc, #204]	@ (80063d4 <UART_SetConfig+0x4e4>)
 8006306:	fba2 2303 	umull	r2, r3, r2, r3
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006310:	441c      	add	r4, r3
 8006312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006316:	2200      	movs	r2, #0
 8006318:	673b      	str	r3, [r7, #112]	@ 0x70
 800631a:	677a      	str	r2, [r7, #116]	@ 0x74
 800631c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006320:	4642      	mov	r2, r8
 8006322:	464b      	mov	r3, r9
 8006324:	1891      	adds	r1, r2, r2
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	415b      	adcs	r3, r3
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006330:	4641      	mov	r1, r8
 8006332:	1851      	adds	r1, r2, r1
 8006334:	6039      	str	r1, [r7, #0]
 8006336:	4649      	mov	r1, r9
 8006338:	414b      	adcs	r3, r1
 800633a:	607b      	str	r3, [r7, #4]
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006348:	4659      	mov	r1, fp
 800634a:	00cb      	lsls	r3, r1, #3
 800634c:	4651      	mov	r1, sl
 800634e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006352:	4651      	mov	r1, sl
 8006354:	00ca      	lsls	r2, r1, #3
 8006356:	4610      	mov	r0, r2
 8006358:	4619      	mov	r1, r3
 800635a:	4603      	mov	r3, r0
 800635c:	4642      	mov	r2, r8
 800635e:	189b      	adds	r3, r3, r2
 8006360:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006362:	464b      	mov	r3, r9
 8006364:	460a      	mov	r2, r1
 8006366:	eb42 0303 	adc.w	r3, r2, r3
 800636a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800636c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	663b      	str	r3, [r7, #96]	@ 0x60
 8006376:	667a      	str	r2, [r7, #100]	@ 0x64
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006384:	4649      	mov	r1, r9
 8006386:	008b      	lsls	r3, r1, #2
 8006388:	4641      	mov	r1, r8
 800638a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800638e:	4641      	mov	r1, r8
 8006390:	008a      	lsls	r2, r1, #2
 8006392:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006396:	f7fa fc5f 	bl	8000c58 <__aeabi_uldivmod>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4b0d      	ldr	r3, [pc, #52]	@ (80063d4 <UART_SetConfig+0x4e4>)
 80063a0:	fba3 1302 	umull	r1, r3, r3, r2
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	2164      	movs	r1, #100	@ 0x64
 80063a8:	fb01 f303 	mul.w	r3, r1, r3
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	3332      	adds	r3, #50	@ 0x32
 80063b2:	4a08      	ldr	r2, [pc, #32]	@ (80063d4 <UART_SetConfig+0x4e4>)
 80063b4:	fba2 2303 	umull	r2, r3, r2, r3
 80063b8:	095b      	lsrs	r3, r3, #5
 80063ba:	f003 020f 	and.w	r2, r3, #15
 80063be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4422      	add	r2, r4
 80063c6:	609a      	str	r2, [r3, #8]
}
 80063c8:	bf00      	nop
 80063ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80063ce:	46bd      	mov	sp, r7
 80063d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063d4:	51eb851f 	.word	0x51eb851f

080063d8 <__cvt>:
 80063d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063dc:	ec57 6b10 	vmov	r6, r7, d0
 80063e0:	2f00      	cmp	r7, #0
 80063e2:	460c      	mov	r4, r1
 80063e4:	4619      	mov	r1, r3
 80063e6:	463b      	mov	r3, r7
 80063e8:	bfbb      	ittet	lt
 80063ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80063ee:	461f      	movlt	r7, r3
 80063f0:	2300      	movge	r3, #0
 80063f2:	232d      	movlt	r3, #45	@ 0x2d
 80063f4:	700b      	strb	r3, [r1, #0]
 80063f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80063fc:	4691      	mov	r9, r2
 80063fe:	f023 0820 	bic.w	r8, r3, #32
 8006402:	bfbc      	itt	lt
 8006404:	4632      	movlt	r2, r6
 8006406:	4616      	movlt	r6, r2
 8006408:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800640c:	d005      	beq.n	800641a <__cvt+0x42>
 800640e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006412:	d100      	bne.n	8006416 <__cvt+0x3e>
 8006414:	3401      	adds	r4, #1
 8006416:	2102      	movs	r1, #2
 8006418:	e000      	b.n	800641c <__cvt+0x44>
 800641a:	2103      	movs	r1, #3
 800641c:	ab03      	add	r3, sp, #12
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	ab02      	add	r3, sp, #8
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	ec47 6b10 	vmov	d0, r6, r7
 8006428:	4653      	mov	r3, sl
 800642a:	4622      	mov	r2, r4
 800642c:	f000 fe70 	bl	8007110 <_dtoa_r>
 8006430:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006434:	4605      	mov	r5, r0
 8006436:	d119      	bne.n	800646c <__cvt+0x94>
 8006438:	f019 0f01 	tst.w	r9, #1
 800643c:	d00e      	beq.n	800645c <__cvt+0x84>
 800643e:	eb00 0904 	add.w	r9, r0, r4
 8006442:	2200      	movs	r2, #0
 8006444:	2300      	movs	r3, #0
 8006446:	4630      	mov	r0, r6
 8006448:	4639      	mov	r1, r7
 800644a:	f7fa fb45 	bl	8000ad8 <__aeabi_dcmpeq>
 800644e:	b108      	cbz	r0, 8006454 <__cvt+0x7c>
 8006450:	f8cd 900c 	str.w	r9, [sp, #12]
 8006454:	2230      	movs	r2, #48	@ 0x30
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	454b      	cmp	r3, r9
 800645a:	d31e      	bcc.n	800649a <__cvt+0xc2>
 800645c:	9b03      	ldr	r3, [sp, #12]
 800645e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006460:	1b5b      	subs	r3, r3, r5
 8006462:	4628      	mov	r0, r5
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	b004      	add	sp, #16
 8006468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800646c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006470:	eb00 0904 	add.w	r9, r0, r4
 8006474:	d1e5      	bne.n	8006442 <__cvt+0x6a>
 8006476:	7803      	ldrb	r3, [r0, #0]
 8006478:	2b30      	cmp	r3, #48	@ 0x30
 800647a:	d10a      	bne.n	8006492 <__cvt+0xba>
 800647c:	2200      	movs	r2, #0
 800647e:	2300      	movs	r3, #0
 8006480:	4630      	mov	r0, r6
 8006482:	4639      	mov	r1, r7
 8006484:	f7fa fb28 	bl	8000ad8 <__aeabi_dcmpeq>
 8006488:	b918      	cbnz	r0, 8006492 <__cvt+0xba>
 800648a:	f1c4 0401 	rsb	r4, r4, #1
 800648e:	f8ca 4000 	str.w	r4, [sl]
 8006492:	f8da 3000 	ldr.w	r3, [sl]
 8006496:	4499      	add	r9, r3
 8006498:	e7d3      	b.n	8006442 <__cvt+0x6a>
 800649a:	1c59      	adds	r1, r3, #1
 800649c:	9103      	str	r1, [sp, #12]
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	e7d9      	b.n	8006456 <__cvt+0x7e>

080064a2 <__exponent>:
 80064a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064a4:	2900      	cmp	r1, #0
 80064a6:	bfba      	itte	lt
 80064a8:	4249      	neglt	r1, r1
 80064aa:	232d      	movlt	r3, #45	@ 0x2d
 80064ac:	232b      	movge	r3, #43	@ 0x2b
 80064ae:	2909      	cmp	r1, #9
 80064b0:	7002      	strb	r2, [r0, #0]
 80064b2:	7043      	strb	r3, [r0, #1]
 80064b4:	dd29      	ble.n	800650a <__exponent+0x68>
 80064b6:	f10d 0307 	add.w	r3, sp, #7
 80064ba:	461d      	mov	r5, r3
 80064bc:	270a      	movs	r7, #10
 80064be:	461a      	mov	r2, r3
 80064c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80064c4:	fb07 1416 	mls	r4, r7, r6, r1
 80064c8:	3430      	adds	r4, #48	@ 0x30
 80064ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064ce:	460c      	mov	r4, r1
 80064d0:	2c63      	cmp	r4, #99	@ 0x63
 80064d2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80064d6:	4631      	mov	r1, r6
 80064d8:	dcf1      	bgt.n	80064be <__exponent+0x1c>
 80064da:	3130      	adds	r1, #48	@ 0x30
 80064dc:	1e94      	subs	r4, r2, #2
 80064de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064e2:	1c41      	adds	r1, r0, #1
 80064e4:	4623      	mov	r3, r4
 80064e6:	42ab      	cmp	r3, r5
 80064e8:	d30a      	bcc.n	8006500 <__exponent+0x5e>
 80064ea:	f10d 0309 	add.w	r3, sp, #9
 80064ee:	1a9b      	subs	r3, r3, r2
 80064f0:	42ac      	cmp	r4, r5
 80064f2:	bf88      	it	hi
 80064f4:	2300      	movhi	r3, #0
 80064f6:	3302      	adds	r3, #2
 80064f8:	4403      	add	r3, r0
 80064fa:	1a18      	subs	r0, r3, r0
 80064fc:	b003      	add	sp, #12
 80064fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006500:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006504:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006508:	e7ed      	b.n	80064e6 <__exponent+0x44>
 800650a:	2330      	movs	r3, #48	@ 0x30
 800650c:	3130      	adds	r1, #48	@ 0x30
 800650e:	7083      	strb	r3, [r0, #2]
 8006510:	70c1      	strb	r1, [r0, #3]
 8006512:	1d03      	adds	r3, r0, #4
 8006514:	e7f1      	b.n	80064fa <__exponent+0x58>
	...

08006518 <_printf_float>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	b08d      	sub	sp, #52	@ 0x34
 800651e:	460c      	mov	r4, r1
 8006520:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006524:	4616      	mov	r6, r2
 8006526:	461f      	mov	r7, r3
 8006528:	4605      	mov	r5, r0
 800652a:	f000 fcef 	bl	8006f0c <_localeconv_r>
 800652e:	6803      	ldr	r3, [r0, #0]
 8006530:	9304      	str	r3, [sp, #16]
 8006532:	4618      	mov	r0, r3
 8006534:	f7f9 fea4 	bl	8000280 <strlen>
 8006538:	2300      	movs	r3, #0
 800653a:	930a      	str	r3, [sp, #40]	@ 0x28
 800653c:	f8d8 3000 	ldr.w	r3, [r8]
 8006540:	9005      	str	r0, [sp, #20]
 8006542:	3307      	adds	r3, #7
 8006544:	f023 0307 	bic.w	r3, r3, #7
 8006548:	f103 0208 	add.w	r2, r3, #8
 800654c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006550:	f8d4 b000 	ldr.w	fp, [r4]
 8006554:	f8c8 2000 	str.w	r2, [r8]
 8006558:	e9d3 8900 	ldrd	r8, r9, [r3]
 800655c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006560:	9307      	str	r3, [sp, #28]
 8006562:	f8cd 8018 	str.w	r8, [sp, #24]
 8006566:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800656a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800656e:	4b9c      	ldr	r3, [pc, #624]	@ (80067e0 <_printf_float+0x2c8>)
 8006570:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006574:	f7fa fae2 	bl	8000b3c <__aeabi_dcmpun>
 8006578:	bb70      	cbnz	r0, 80065d8 <_printf_float+0xc0>
 800657a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800657e:	4b98      	ldr	r3, [pc, #608]	@ (80067e0 <_printf_float+0x2c8>)
 8006580:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006584:	f7fa fabc 	bl	8000b00 <__aeabi_dcmple>
 8006588:	bb30      	cbnz	r0, 80065d8 <_printf_float+0xc0>
 800658a:	2200      	movs	r2, #0
 800658c:	2300      	movs	r3, #0
 800658e:	4640      	mov	r0, r8
 8006590:	4649      	mov	r1, r9
 8006592:	f7fa faab 	bl	8000aec <__aeabi_dcmplt>
 8006596:	b110      	cbz	r0, 800659e <_printf_float+0x86>
 8006598:	232d      	movs	r3, #45	@ 0x2d
 800659a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800659e:	4a91      	ldr	r2, [pc, #580]	@ (80067e4 <_printf_float+0x2cc>)
 80065a0:	4b91      	ldr	r3, [pc, #580]	@ (80067e8 <_printf_float+0x2d0>)
 80065a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80065a6:	bf8c      	ite	hi
 80065a8:	4690      	movhi	r8, r2
 80065aa:	4698      	movls	r8, r3
 80065ac:	2303      	movs	r3, #3
 80065ae:	6123      	str	r3, [r4, #16]
 80065b0:	f02b 0304 	bic.w	r3, fp, #4
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	f04f 0900 	mov.w	r9, #0
 80065ba:	9700      	str	r7, [sp, #0]
 80065bc:	4633      	mov	r3, r6
 80065be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80065c0:	4621      	mov	r1, r4
 80065c2:	4628      	mov	r0, r5
 80065c4:	f000 f9d2 	bl	800696c <_printf_common>
 80065c8:	3001      	adds	r0, #1
 80065ca:	f040 808d 	bne.w	80066e8 <_printf_float+0x1d0>
 80065ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065d2:	b00d      	add	sp, #52	@ 0x34
 80065d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d8:	4642      	mov	r2, r8
 80065da:	464b      	mov	r3, r9
 80065dc:	4640      	mov	r0, r8
 80065de:	4649      	mov	r1, r9
 80065e0:	f7fa faac 	bl	8000b3c <__aeabi_dcmpun>
 80065e4:	b140      	cbz	r0, 80065f8 <_printf_float+0xe0>
 80065e6:	464b      	mov	r3, r9
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bfbc      	itt	lt
 80065ec:	232d      	movlt	r3, #45	@ 0x2d
 80065ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065f2:	4a7e      	ldr	r2, [pc, #504]	@ (80067ec <_printf_float+0x2d4>)
 80065f4:	4b7e      	ldr	r3, [pc, #504]	@ (80067f0 <_printf_float+0x2d8>)
 80065f6:	e7d4      	b.n	80065a2 <_printf_float+0x8a>
 80065f8:	6863      	ldr	r3, [r4, #4]
 80065fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80065fe:	9206      	str	r2, [sp, #24]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	d13b      	bne.n	800667c <_printf_float+0x164>
 8006604:	2306      	movs	r3, #6
 8006606:	6063      	str	r3, [r4, #4]
 8006608:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800660c:	2300      	movs	r3, #0
 800660e:	6022      	str	r2, [r4, #0]
 8006610:	9303      	str	r3, [sp, #12]
 8006612:	ab0a      	add	r3, sp, #40	@ 0x28
 8006614:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006618:	ab09      	add	r3, sp, #36	@ 0x24
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	6861      	ldr	r1, [r4, #4]
 800661e:	ec49 8b10 	vmov	d0, r8, r9
 8006622:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006626:	4628      	mov	r0, r5
 8006628:	f7ff fed6 	bl	80063d8 <__cvt>
 800662c:	9b06      	ldr	r3, [sp, #24]
 800662e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006630:	2b47      	cmp	r3, #71	@ 0x47
 8006632:	4680      	mov	r8, r0
 8006634:	d129      	bne.n	800668a <_printf_float+0x172>
 8006636:	1cc8      	adds	r0, r1, #3
 8006638:	db02      	blt.n	8006640 <_printf_float+0x128>
 800663a:	6863      	ldr	r3, [r4, #4]
 800663c:	4299      	cmp	r1, r3
 800663e:	dd41      	ble.n	80066c4 <_printf_float+0x1ac>
 8006640:	f1aa 0a02 	sub.w	sl, sl, #2
 8006644:	fa5f fa8a 	uxtb.w	sl, sl
 8006648:	3901      	subs	r1, #1
 800664a:	4652      	mov	r2, sl
 800664c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006650:	9109      	str	r1, [sp, #36]	@ 0x24
 8006652:	f7ff ff26 	bl	80064a2 <__exponent>
 8006656:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006658:	1813      	adds	r3, r2, r0
 800665a:	2a01      	cmp	r2, #1
 800665c:	4681      	mov	r9, r0
 800665e:	6123      	str	r3, [r4, #16]
 8006660:	dc02      	bgt.n	8006668 <_printf_float+0x150>
 8006662:	6822      	ldr	r2, [r4, #0]
 8006664:	07d2      	lsls	r2, r2, #31
 8006666:	d501      	bpl.n	800666c <_printf_float+0x154>
 8006668:	3301      	adds	r3, #1
 800666a:	6123      	str	r3, [r4, #16]
 800666c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0a2      	beq.n	80065ba <_printf_float+0xa2>
 8006674:	232d      	movs	r3, #45	@ 0x2d
 8006676:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800667a:	e79e      	b.n	80065ba <_printf_float+0xa2>
 800667c:	9a06      	ldr	r2, [sp, #24]
 800667e:	2a47      	cmp	r2, #71	@ 0x47
 8006680:	d1c2      	bne.n	8006608 <_printf_float+0xf0>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1c0      	bne.n	8006608 <_printf_float+0xf0>
 8006686:	2301      	movs	r3, #1
 8006688:	e7bd      	b.n	8006606 <_printf_float+0xee>
 800668a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800668e:	d9db      	bls.n	8006648 <_printf_float+0x130>
 8006690:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006694:	d118      	bne.n	80066c8 <_printf_float+0x1b0>
 8006696:	2900      	cmp	r1, #0
 8006698:	6863      	ldr	r3, [r4, #4]
 800669a:	dd0b      	ble.n	80066b4 <_printf_float+0x19c>
 800669c:	6121      	str	r1, [r4, #16]
 800669e:	b913      	cbnz	r3, 80066a6 <_printf_float+0x18e>
 80066a0:	6822      	ldr	r2, [r4, #0]
 80066a2:	07d0      	lsls	r0, r2, #31
 80066a4:	d502      	bpl.n	80066ac <_printf_float+0x194>
 80066a6:	3301      	adds	r3, #1
 80066a8:	440b      	add	r3, r1
 80066aa:	6123      	str	r3, [r4, #16]
 80066ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80066ae:	f04f 0900 	mov.w	r9, #0
 80066b2:	e7db      	b.n	800666c <_printf_float+0x154>
 80066b4:	b913      	cbnz	r3, 80066bc <_printf_float+0x1a4>
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	07d2      	lsls	r2, r2, #31
 80066ba:	d501      	bpl.n	80066c0 <_printf_float+0x1a8>
 80066bc:	3302      	adds	r3, #2
 80066be:	e7f4      	b.n	80066aa <_printf_float+0x192>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e7f2      	b.n	80066aa <_printf_float+0x192>
 80066c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80066c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066ca:	4299      	cmp	r1, r3
 80066cc:	db05      	blt.n	80066da <_printf_float+0x1c2>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	6121      	str	r1, [r4, #16]
 80066d2:	07d8      	lsls	r0, r3, #31
 80066d4:	d5ea      	bpl.n	80066ac <_printf_float+0x194>
 80066d6:	1c4b      	adds	r3, r1, #1
 80066d8:	e7e7      	b.n	80066aa <_printf_float+0x192>
 80066da:	2900      	cmp	r1, #0
 80066dc:	bfd4      	ite	le
 80066de:	f1c1 0202 	rsble	r2, r1, #2
 80066e2:	2201      	movgt	r2, #1
 80066e4:	4413      	add	r3, r2
 80066e6:	e7e0      	b.n	80066aa <_printf_float+0x192>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	055a      	lsls	r2, r3, #21
 80066ec:	d407      	bmi.n	80066fe <_printf_float+0x1e6>
 80066ee:	6923      	ldr	r3, [r4, #16]
 80066f0:	4642      	mov	r2, r8
 80066f2:	4631      	mov	r1, r6
 80066f4:	4628      	mov	r0, r5
 80066f6:	47b8      	blx	r7
 80066f8:	3001      	adds	r0, #1
 80066fa:	d12b      	bne.n	8006754 <_printf_float+0x23c>
 80066fc:	e767      	b.n	80065ce <_printf_float+0xb6>
 80066fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006702:	f240 80dd 	bls.w	80068c0 <_printf_float+0x3a8>
 8006706:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800670a:	2200      	movs	r2, #0
 800670c:	2300      	movs	r3, #0
 800670e:	f7fa f9e3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006712:	2800      	cmp	r0, #0
 8006714:	d033      	beq.n	800677e <_printf_float+0x266>
 8006716:	4a37      	ldr	r2, [pc, #220]	@ (80067f4 <_printf_float+0x2dc>)
 8006718:	2301      	movs	r3, #1
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	f43f af54 	beq.w	80065ce <_printf_float+0xb6>
 8006726:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800672a:	4543      	cmp	r3, r8
 800672c:	db02      	blt.n	8006734 <_printf_float+0x21c>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	07d8      	lsls	r0, r3, #31
 8006732:	d50f      	bpl.n	8006754 <_printf_float+0x23c>
 8006734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	f43f af45 	beq.w	80065ce <_printf_float+0xb6>
 8006744:	f04f 0900 	mov.w	r9, #0
 8006748:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800674c:	f104 0a1a 	add.w	sl, r4, #26
 8006750:	45c8      	cmp	r8, r9
 8006752:	dc09      	bgt.n	8006768 <_printf_float+0x250>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	079b      	lsls	r3, r3, #30
 8006758:	f100 8103 	bmi.w	8006962 <_printf_float+0x44a>
 800675c:	68e0      	ldr	r0, [r4, #12]
 800675e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006760:	4298      	cmp	r0, r3
 8006762:	bfb8      	it	lt
 8006764:	4618      	movlt	r0, r3
 8006766:	e734      	b.n	80065d2 <_printf_float+0xba>
 8006768:	2301      	movs	r3, #1
 800676a:	4652      	mov	r2, sl
 800676c:	4631      	mov	r1, r6
 800676e:	4628      	mov	r0, r5
 8006770:	47b8      	blx	r7
 8006772:	3001      	adds	r0, #1
 8006774:	f43f af2b 	beq.w	80065ce <_printf_float+0xb6>
 8006778:	f109 0901 	add.w	r9, r9, #1
 800677c:	e7e8      	b.n	8006750 <_printf_float+0x238>
 800677e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	dc39      	bgt.n	80067f8 <_printf_float+0x2e0>
 8006784:	4a1b      	ldr	r2, [pc, #108]	@ (80067f4 <_printf_float+0x2dc>)
 8006786:	2301      	movs	r3, #1
 8006788:	4631      	mov	r1, r6
 800678a:	4628      	mov	r0, r5
 800678c:	47b8      	blx	r7
 800678e:	3001      	adds	r0, #1
 8006790:	f43f af1d 	beq.w	80065ce <_printf_float+0xb6>
 8006794:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006798:	ea59 0303 	orrs.w	r3, r9, r3
 800679c:	d102      	bne.n	80067a4 <_printf_float+0x28c>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	07d9      	lsls	r1, r3, #31
 80067a2:	d5d7      	bpl.n	8006754 <_printf_float+0x23c>
 80067a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067a8:	4631      	mov	r1, r6
 80067aa:	4628      	mov	r0, r5
 80067ac:	47b8      	blx	r7
 80067ae:	3001      	adds	r0, #1
 80067b0:	f43f af0d 	beq.w	80065ce <_printf_float+0xb6>
 80067b4:	f04f 0a00 	mov.w	sl, #0
 80067b8:	f104 0b1a 	add.w	fp, r4, #26
 80067bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067be:	425b      	negs	r3, r3
 80067c0:	4553      	cmp	r3, sl
 80067c2:	dc01      	bgt.n	80067c8 <_printf_float+0x2b0>
 80067c4:	464b      	mov	r3, r9
 80067c6:	e793      	b.n	80066f0 <_printf_float+0x1d8>
 80067c8:	2301      	movs	r3, #1
 80067ca:	465a      	mov	r2, fp
 80067cc:	4631      	mov	r1, r6
 80067ce:	4628      	mov	r0, r5
 80067d0:	47b8      	blx	r7
 80067d2:	3001      	adds	r0, #1
 80067d4:	f43f aefb 	beq.w	80065ce <_printf_float+0xb6>
 80067d8:	f10a 0a01 	add.w	sl, sl, #1
 80067dc:	e7ee      	b.n	80067bc <_printf_float+0x2a4>
 80067de:	bf00      	nop
 80067e0:	7fefffff 	.word	0x7fefffff
 80067e4:	0800a1f4 	.word	0x0800a1f4
 80067e8:	0800a1f0 	.word	0x0800a1f0
 80067ec:	0800a1fc 	.word	0x0800a1fc
 80067f0:	0800a1f8 	.word	0x0800a1f8
 80067f4:	0800a200 	.word	0x0800a200
 80067f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067fe:	4553      	cmp	r3, sl
 8006800:	bfa8      	it	ge
 8006802:	4653      	movge	r3, sl
 8006804:	2b00      	cmp	r3, #0
 8006806:	4699      	mov	r9, r3
 8006808:	dc36      	bgt.n	8006878 <_printf_float+0x360>
 800680a:	f04f 0b00 	mov.w	fp, #0
 800680e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006812:	f104 021a 	add.w	r2, r4, #26
 8006816:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006818:	9306      	str	r3, [sp, #24]
 800681a:	eba3 0309 	sub.w	r3, r3, r9
 800681e:	455b      	cmp	r3, fp
 8006820:	dc31      	bgt.n	8006886 <_printf_float+0x36e>
 8006822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006824:	459a      	cmp	sl, r3
 8006826:	dc3a      	bgt.n	800689e <_printf_float+0x386>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	07da      	lsls	r2, r3, #31
 800682c:	d437      	bmi.n	800689e <_printf_float+0x386>
 800682e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006830:	ebaa 0903 	sub.w	r9, sl, r3
 8006834:	9b06      	ldr	r3, [sp, #24]
 8006836:	ebaa 0303 	sub.w	r3, sl, r3
 800683a:	4599      	cmp	r9, r3
 800683c:	bfa8      	it	ge
 800683e:	4699      	movge	r9, r3
 8006840:	f1b9 0f00 	cmp.w	r9, #0
 8006844:	dc33      	bgt.n	80068ae <_printf_float+0x396>
 8006846:	f04f 0800 	mov.w	r8, #0
 800684a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800684e:	f104 0b1a 	add.w	fp, r4, #26
 8006852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006854:	ebaa 0303 	sub.w	r3, sl, r3
 8006858:	eba3 0309 	sub.w	r3, r3, r9
 800685c:	4543      	cmp	r3, r8
 800685e:	f77f af79 	ble.w	8006754 <_printf_float+0x23c>
 8006862:	2301      	movs	r3, #1
 8006864:	465a      	mov	r2, fp
 8006866:	4631      	mov	r1, r6
 8006868:	4628      	mov	r0, r5
 800686a:	47b8      	blx	r7
 800686c:	3001      	adds	r0, #1
 800686e:	f43f aeae 	beq.w	80065ce <_printf_float+0xb6>
 8006872:	f108 0801 	add.w	r8, r8, #1
 8006876:	e7ec      	b.n	8006852 <_printf_float+0x33a>
 8006878:	4642      	mov	r2, r8
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	47b8      	blx	r7
 8006880:	3001      	adds	r0, #1
 8006882:	d1c2      	bne.n	800680a <_printf_float+0x2f2>
 8006884:	e6a3      	b.n	80065ce <_printf_float+0xb6>
 8006886:	2301      	movs	r3, #1
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	9206      	str	r2, [sp, #24]
 800688e:	47b8      	blx	r7
 8006890:	3001      	adds	r0, #1
 8006892:	f43f ae9c 	beq.w	80065ce <_printf_float+0xb6>
 8006896:	9a06      	ldr	r2, [sp, #24]
 8006898:	f10b 0b01 	add.w	fp, fp, #1
 800689c:	e7bb      	b.n	8006816 <_printf_float+0x2fe>
 800689e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068a2:	4631      	mov	r1, r6
 80068a4:	4628      	mov	r0, r5
 80068a6:	47b8      	blx	r7
 80068a8:	3001      	adds	r0, #1
 80068aa:	d1c0      	bne.n	800682e <_printf_float+0x316>
 80068ac:	e68f      	b.n	80065ce <_printf_float+0xb6>
 80068ae:	9a06      	ldr	r2, [sp, #24]
 80068b0:	464b      	mov	r3, r9
 80068b2:	4442      	add	r2, r8
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
 80068b8:	47b8      	blx	r7
 80068ba:	3001      	adds	r0, #1
 80068bc:	d1c3      	bne.n	8006846 <_printf_float+0x32e>
 80068be:	e686      	b.n	80065ce <_printf_float+0xb6>
 80068c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068c4:	f1ba 0f01 	cmp.w	sl, #1
 80068c8:	dc01      	bgt.n	80068ce <_printf_float+0x3b6>
 80068ca:	07db      	lsls	r3, r3, #31
 80068cc:	d536      	bpl.n	800693c <_printf_float+0x424>
 80068ce:	2301      	movs	r3, #1
 80068d0:	4642      	mov	r2, r8
 80068d2:	4631      	mov	r1, r6
 80068d4:	4628      	mov	r0, r5
 80068d6:	47b8      	blx	r7
 80068d8:	3001      	adds	r0, #1
 80068da:	f43f ae78 	beq.w	80065ce <_printf_float+0xb6>
 80068de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068e2:	4631      	mov	r1, r6
 80068e4:	4628      	mov	r0, r5
 80068e6:	47b8      	blx	r7
 80068e8:	3001      	adds	r0, #1
 80068ea:	f43f ae70 	beq.w	80065ce <_printf_float+0xb6>
 80068ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068f2:	2200      	movs	r2, #0
 80068f4:	2300      	movs	r3, #0
 80068f6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80068fa:	f7fa f8ed 	bl	8000ad8 <__aeabi_dcmpeq>
 80068fe:	b9c0      	cbnz	r0, 8006932 <_printf_float+0x41a>
 8006900:	4653      	mov	r3, sl
 8006902:	f108 0201 	add.w	r2, r8, #1
 8006906:	4631      	mov	r1, r6
 8006908:	4628      	mov	r0, r5
 800690a:	47b8      	blx	r7
 800690c:	3001      	adds	r0, #1
 800690e:	d10c      	bne.n	800692a <_printf_float+0x412>
 8006910:	e65d      	b.n	80065ce <_printf_float+0xb6>
 8006912:	2301      	movs	r3, #1
 8006914:	465a      	mov	r2, fp
 8006916:	4631      	mov	r1, r6
 8006918:	4628      	mov	r0, r5
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	f43f ae56 	beq.w	80065ce <_printf_float+0xb6>
 8006922:	f108 0801 	add.w	r8, r8, #1
 8006926:	45d0      	cmp	r8, sl
 8006928:	dbf3      	blt.n	8006912 <_printf_float+0x3fa>
 800692a:	464b      	mov	r3, r9
 800692c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006930:	e6df      	b.n	80066f2 <_printf_float+0x1da>
 8006932:	f04f 0800 	mov.w	r8, #0
 8006936:	f104 0b1a 	add.w	fp, r4, #26
 800693a:	e7f4      	b.n	8006926 <_printf_float+0x40e>
 800693c:	2301      	movs	r3, #1
 800693e:	4642      	mov	r2, r8
 8006940:	e7e1      	b.n	8006906 <_printf_float+0x3ee>
 8006942:	2301      	movs	r3, #1
 8006944:	464a      	mov	r2, r9
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	47b8      	blx	r7
 800694c:	3001      	adds	r0, #1
 800694e:	f43f ae3e 	beq.w	80065ce <_printf_float+0xb6>
 8006952:	f108 0801 	add.w	r8, r8, #1
 8006956:	68e3      	ldr	r3, [r4, #12]
 8006958:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800695a:	1a5b      	subs	r3, r3, r1
 800695c:	4543      	cmp	r3, r8
 800695e:	dcf0      	bgt.n	8006942 <_printf_float+0x42a>
 8006960:	e6fc      	b.n	800675c <_printf_float+0x244>
 8006962:	f04f 0800 	mov.w	r8, #0
 8006966:	f104 0919 	add.w	r9, r4, #25
 800696a:	e7f4      	b.n	8006956 <_printf_float+0x43e>

0800696c <_printf_common>:
 800696c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006970:	4616      	mov	r6, r2
 8006972:	4698      	mov	r8, r3
 8006974:	688a      	ldr	r2, [r1, #8]
 8006976:	690b      	ldr	r3, [r1, #16]
 8006978:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800697c:	4293      	cmp	r3, r2
 800697e:	bfb8      	it	lt
 8006980:	4613      	movlt	r3, r2
 8006982:	6033      	str	r3, [r6, #0]
 8006984:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006988:	4607      	mov	r7, r0
 800698a:	460c      	mov	r4, r1
 800698c:	b10a      	cbz	r2, 8006992 <_printf_common+0x26>
 800698e:	3301      	adds	r3, #1
 8006990:	6033      	str	r3, [r6, #0]
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	0699      	lsls	r1, r3, #26
 8006996:	bf42      	ittt	mi
 8006998:	6833      	ldrmi	r3, [r6, #0]
 800699a:	3302      	addmi	r3, #2
 800699c:	6033      	strmi	r3, [r6, #0]
 800699e:	6825      	ldr	r5, [r4, #0]
 80069a0:	f015 0506 	ands.w	r5, r5, #6
 80069a4:	d106      	bne.n	80069b4 <_printf_common+0x48>
 80069a6:	f104 0a19 	add.w	sl, r4, #25
 80069aa:	68e3      	ldr	r3, [r4, #12]
 80069ac:	6832      	ldr	r2, [r6, #0]
 80069ae:	1a9b      	subs	r3, r3, r2
 80069b0:	42ab      	cmp	r3, r5
 80069b2:	dc26      	bgt.n	8006a02 <_printf_common+0x96>
 80069b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069b8:	6822      	ldr	r2, [r4, #0]
 80069ba:	3b00      	subs	r3, #0
 80069bc:	bf18      	it	ne
 80069be:	2301      	movne	r3, #1
 80069c0:	0692      	lsls	r2, r2, #26
 80069c2:	d42b      	bmi.n	8006a1c <_printf_common+0xb0>
 80069c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069c8:	4641      	mov	r1, r8
 80069ca:	4638      	mov	r0, r7
 80069cc:	47c8      	blx	r9
 80069ce:	3001      	adds	r0, #1
 80069d0:	d01e      	beq.n	8006a10 <_printf_common+0xa4>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	6922      	ldr	r2, [r4, #16]
 80069d6:	f003 0306 	and.w	r3, r3, #6
 80069da:	2b04      	cmp	r3, #4
 80069dc:	bf02      	ittt	eq
 80069de:	68e5      	ldreq	r5, [r4, #12]
 80069e0:	6833      	ldreq	r3, [r6, #0]
 80069e2:	1aed      	subeq	r5, r5, r3
 80069e4:	68a3      	ldr	r3, [r4, #8]
 80069e6:	bf0c      	ite	eq
 80069e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069ec:	2500      	movne	r5, #0
 80069ee:	4293      	cmp	r3, r2
 80069f0:	bfc4      	itt	gt
 80069f2:	1a9b      	subgt	r3, r3, r2
 80069f4:	18ed      	addgt	r5, r5, r3
 80069f6:	2600      	movs	r6, #0
 80069f8:	341a      	adds	r4, #26
 80069fa:	42b5      	cmp	r5, r6
 80069fc:	d11a      	bne.n	8006a34 <_printf_common+0xc8>
 80069fe:	2000      	movs	r0, #0
 8006a00:	e008      	b.n	8006a14 <_printf_common+0xa8>
 8006a02:	2301      	movs	r3, #1
 8006a04:	4652      	mov	r2, sl
 8006a06:	4641      	mov	r1, r8
 8006a08:	4638      	mov	r0, r7
 8006a0a:	47c8      	blx	r9
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d103      	bne.n	8006a18 <_printf_common+0xac>
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a18:	3501      	adds	r5, #1
 8006a1a:	e7c6      	b.n	80069aa <_printf_common+0x3e>
 8006a1c:	18e1      	adds	r1, r4, r3
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	2030      	movs	r0, #48	@ 0x30
 8006a22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a26:	4422      	add	r2, r4
 8006a28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a30:	3302      	adds	r3, #2
 8006a32:	e7c7      	b.n	80069c4 <_printf_common+0x58>
 8006a34:	2301      	movs	r3, #1
 8006a36:	4622      	mov	r2, r4
 8006a38:	4641      	mov	r1, r8
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	47c8      	blx	r9
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d0e6      	beq.n	8006a10 <_printf_common+0xa4>
 8006a42:	3601      	adds	r6, #1
 8006a44:	e7d9      	b.n	80069fa <_printf_common+0x8e>
	...

08006a48 <_printf_i>:
 8006a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a4c:	7e0f      	ldrb	r7, [r1, #24]
 8006a4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a50:	2f78      	cmp	r7, #120	@ 0x78
 8006a52:	4691      	mov	r9, r2
 8006a54:	4680      	mov	r8, r0
 8006a56:	460c      	mov	r4, r1
 8006a58:	469a      	mov	sl, r3
 8006a5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a5e:	d807      	bhi.n	8006a70 <_printf_i+0x28>
 8006a60:	2f62      	cmp	r7, #98	@ 0x62
 8006a62:	d80a      	bhi.n	8006a7a <_printf_i+0x32>
 8006a64:	2f00      	cmp	r7, #0
 8006a66:	f000 80d1 	beq.w	8006c0c <_printf_i+0x1c4>
 8006a6a:	2f58      	cmp	r7, #88	@ 0x58
 8006a6c:	f000 80b8 	beq.w	8006be0 <_printf_i+0x198>
 8006a70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a78:	e03a      	b.n	8006af0 <_printf_i+0xa8>
 8006a7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a7e:	2b15      	cmp	r3, #21
 8006a80:	d8f6      	bhi.n	8006a70 <_printf_i+0x28>
 8006a82:	a101      	add	r1, pc, #4	@ (adr r1, 8006a88 <_printf_i+0x40>)
 8006a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a88:	08006ae1 	.word	0x08006ae1
 8006a8c:	08006af5 	.word	0x08006af5
 8006a90:	08006a71 	.word	0x08006a71
 8006a94:	08006a71 	.word	0x08006a71
 8006a98:	08006a71 	.word	0x08006a71
 8006a9c:	08006a71 	.word	0x08006a71
 8006aa0:	08006af5 	.word	0x08006af5
 8006aa4:	08006a71 	.word	0x08006a71
 8006aa8:	08006a71 	.word	0x08006a71
 8006aac:	08006a71 	.word	0x08006a71
 8006ab0:	08006a71 	.word	0x08006a71
 8006ab4:	08006bf3 	.word	0x08006bf3
 8006ab8:	08006b1f 	.word	0x08006b1f
 8006abc:	08006bad 	.word	0x08006bad
 8006ac0:	08006a71 	.word	0x08006a71
 8006ac4:	08006a71 	.word	0x08006a71
 8006ac8:	08006c15 	.word	0x08006c15
 8006acc:	08006a71 	.word	0x08006a71
 8006ad0:	08006b1f 	.word	0x08006b1f
 8006ad4:	08006a71 	.word	0x08006a71
 8006ad8:	08006a71 	.word	0x08006a71
 8006adc:	08006bb5 	.word	0x08006bb5
 8006ae0:	6833      	ldr	r3, [r6, #0]
 8006ae2:	1d1a      	adds	r2, r3, #4
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6032      	str	r2, [r6, #0]
 8006ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006aec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006af0:	2301      	movs	r3, #1
 8006af2:	e09c      	b.n	8006c2e <_printf_i+0x1e6>
 8006af4:	6833      	ldr	r3, [r6, #0]
 8006af6:	6820      	ldr	r0, [r4, #0]
 8006af8:	1d19      	adds	r1, r3, #4
 8006afa:	6031      	str	r1, [r6, #0]
 8006afc:	0606      	lsls	r6, r0, #24
 8006afe:	d501      	bpl.n	8006b04 <_printf_i+0xbc>
 8006b00:	681d      	ldr	r5, [r3, #0]
 8006b02:	e003      	b.n	8006b0c <_printf_i+0xc4>
 8006b04:	0645      	lsls	r5, r0, #25
 8006b06:	d5fb      	bpl.n	8006b00 <_printf_i+0xb8>
 8006b08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b0c:	2d00      	cmp	r5, #0
 8006b0e:	da03      	bge.n	8006b18 <_printf_i+0xd0>
 8006b10:	232d      	movs	r3, #45	@ 0x2d
 8006b12:	426d      	negs	r5, r5
 8006b14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b18:	4858      	ldr	r0, [pc, #352]	@ (8006c7c <_printf_i+0x234>)
 8006b1a:	230a      	movs	r3, #10
 8006b1c:	e011      	b.n	8006b42 <_printf_i+0xfa>
 8006b1e:	6821      	ldr	r1, [r4, #0]
 8006b20:	6833      	ldr	r3, [r6, #0]
 8006b22:	0608      	lsls	r0, r1, #24
 8006b24:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b28:	d402      	bmi.n	8006b30 <_printf_i+0xe8>
 8006b2a:	0649      	lsls	r1, r1, #25
 8006b2c:	bf48      	it	mi
 8006b2e:	b2ad      	uxthmi	r5, r5
 8006b30:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b32:	4852      	ldr	r0, [pc, #328]	@ (8006c7c <_printf_i+0x234>)
 8006b34:	6033      	str	r3, [r6, #0]
 8006b36:	bf14      	ite	ne
 8006b38:	230a      	movne	r3, #10
 8006b3a:	2308      	moveq	r3, #8
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b42:	6866      	ldr	r6, [r4, #4]
 8006b44:	60a6      	str	r6, [r4, #8]
 8006b46:	2e00      	cmp	r6, #0
 8006b48:	db05      	blt.n	8006b56 <_printf_i+0x10e>
 8006b4a:	6821      	ldr	r1, [r4, #0]
 8006b4c:	432e      	orrs	r6, r5
 8006b4e:	f021 0104 	bic.w	r1, r1, #4
 8006b52:	6021      	str	r1, [r4, #0]
 8006b54:	d04b      	beq.n	8006bee <_printf_i+0x1a6>
 8006b56:	4616      	mov	r6, r2
 8006b58:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b5c:	fb03 5711 	mls	r7, r3, r1, r5
 8006b60:	5dc7      	ldrb	r7, [r0, r7]
 8006b62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b66:	462f      	mov	r7, r5
 8006b68:	42bb      	cmp	r3, r7
 8006b6a:	460d      	mov	r5, r1
 8006b6c:	d9f4      	bls.n	8006b58 <_printf_i+0x110>
 8006b6e:	2b08      	cmp	r3, #8
 8006b70:	d10b      	bne.n	8006b8a <_printf_i+0x142>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	07df      	lsls	r7, r3, #31
 8006b76:	d508      	bpl.n	8006b8a <_printf_i+0x142>
 8006b78:	6923      	ldr	r3, [r4, #16]
 8006b7a:	6861      	ldr	r1, [r4, #4]
 8006b7c:	4299      	cmp	r1, r3
 8006b7e:	bfde      	ittt	le
 8006b80:	2330      	movle	r3, #48	@ 0x30
 8006b82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b86:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006b8a:	1b92      	subs	r2, r2, r6
 8006b8c:	6122      	str	r2, [r4, #16]
 8006b8e:	f8cd a000 	str.w	sl, [sp]
 8006b92:	464b      	mov	r3, r9
 8006b94:	aa03      	add	r2, sp, #12
 8006b96:	4621      	mov	r1, r4
 8006b98:	4640      	mov	r0, r8
 8006b9a:	f7ff fee7 	bl	800696c <_printf_common>
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d14a      	bne.n	8006c38 <_printf_i+0x1f0>
 8006ba2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ba6:	b004      	add	sp, #16
 8006ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	f043 0320 	orr.w	r3, r3, #32
 8006bb2:	6023      	str	r3, [r4, #0]
 8006bb4:	4832      	ldr	r0, [pc, #200]	@ (8006c80 <_printf_i+0x238>)
 8006bb6:	2778      	movs	r7, #120	@ 0x78
 8006bb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	6831      	ldr	r1, [r6, #0]
 8006bc0:	061f      	lsls	r7, r3, #24
 8006bc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bc6:	d402      	bmi.n	8006bce <_printf_i+0x186>
 8006bc8:	065f      	lsls	r7, r3, #25
 8006bca:	bf48      	it	mi
 8006bcc:	b2ad      	uxthmi	r5, r5
 8006bce:	6031      	str	r1, [r6, #0]
 8006bd0:	07d9      	lsls	r1, r3, #31
 8006bd2:	bf44      	itt	mi
 8006bd4:	f043 0320 	orrmi.w	r3, r3, #32
 8006bd8:	6023      	strmi	r3, [r4, #0]
 8006bda:	b11d      	cbz	r5, 8006be4 <_printf_i+0x19c>
 8006bdc:	2310      	movs	r3, #16
 8006bde:	e7ad      	b.n	8006b3c <_printf_i+0xf4>
 8006be0:	4826      	ldr	r0, [pc, #152]	@ (8006c7c <_printf_i+0x234>)
 8006be2:	e7e9      	b.n	8006bb8 <_printf_i+0x170>
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	f023 0320 	bic.w	r3, r3, #32
 8006bea:	6023      	str	r3, [r4, #0]
 8006bec:	e7f6      	b.n	8006bdc <_printf_i+0x194>
 8006bee:	4616      	mov	r6, r2
 8006bf0:	e7bd      	b.n	8006b6e <_printf_i+0x126>
 8006bf2:	6833      	ldr	r3, [r6, #0]
 8006bf4:	6825      	ldr	r5, [r4, #0]
 8006bf6:	6961      	ldr	r1, [r4, #20]
 8006bf8:	1d18      	adds	r0, r3, #4
 8006bfa:	6030      	str	r0, [r6, #0]
 8006bfc:	062e      	lsls	r6, r5, #24
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	d501      	bpl.n	8006c06 <_printf_i+0x1be>
 8006c02:	6019      	str	r1, [r3, #0]
 8006c04:	e002      	b.n	8006c0c <_printf_i+0x1c4>
 8006c06:	0668      	lsls	r0, r5, #25
 8006c08:	d5fb      	bpl.n	8006c02 <_printf_i+0x1ba>
 8006c0a:	8019      	strh	r1, [r3, #0]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	6123      	str	r3, [r4, #16]
 8006c10:	4616      	mov	r6, r2
 8006c12:	e7bc      	b.n	8006b8e <_printf_i+0x146>
 8006c14:	6833      	ldr	r3, [r6, #0]
 8006c16:	1d1a      	adds	r2, r3, #4
 8006c18:	6032      	str	r2, [r6, #0]
 8006c1a:	681e      	ldr	r6, [r3, #0]
 8006c1c:	6862      	ldr	r2, [r4, #4]
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4630      	mov	r0, r6
 8006c22:	f7f9 fadd 	bl	80001e0 <memchr>
 8006c26:	b108      	cbz	r0, 8006c2c <_printf_i+0x1e4>
 8006c28:	1b80      	subs	r0, r0, r6
 8006c2a:	6060      	str	r0, [r4, #4]
 8006c2c:	6863      	ldr	r3, [r4, #4]
 8006c2e:	6123      	str	r3, [r4, #16]
 8006c30:	2300      	movs	r3, #0
 8006c32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c36:	e7aa      	b.n	8006b8e <_printf_i+0x146>
 8006c38:	6923      	ldr	r3, [r4, #16]
 8006c3a:	4632      	mov	r2, r6
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	4640      	mov	r0, r8
 8006c40:	47d0      	blx	sl
 8006c42:	3001      	adds	r0, #1
 8006c44:	d0ad      	beq.n	8006ba2 <_printf_i+0x15a>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	079b      	lsls	r3, r3, #30
 8006c4a:	d413      	bmi.n	8006c74 <_printf_i+0x22c>
 8006c4c:	68e0      	ldr	r0, [r4, #12]
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	4298      	cmp	r0, r3
 8006c52:	bfb8      	it	lt
 8006c54:	4618      	movlt	r0, r3
 8006c56:	e7a6      	b.n	8006ba6 <_printf_i+0x15e>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	4632      	mov	r2, r6
 8006c5c:	4649      	mov	r1, r9
 8006c5e:	4640      	mov	r0, r8
 8006c60:	47d0      	blx	sl
 8006c62:	3001      	adds	r0, #1
 8006c64:	d09d      	beq.n	8006ba2 <_printf_i+0x15a>
 8006c66:	3501      	adds	r5, #1
 8006c68:	68e3      	ldr	r3, [r4, #12]
 8006c6a:	9903      	ldr	r1, [sp, #12]
 8006c6c:	1a5b      	subs	r3, r3, r1
 8006c6e:	42ab      	cmp	r3, r5
 8006c70:	dcf2      	bgt.n	8006c58 <_printf_i+0x210>
 8006c72:	e7eb      	b.n	8006c4c <_printf_i+0x204>
 8006c74:	2500      	movs	r5, #0
 8006c76:	f104 0619 	add.w	r6, r4, #25
 8006c7a:	e7f5      	b.n	8006c68 <_printf_i+0x220>
 8006c7c:	0800a202 	.word	0x0800a202
 8006c80:	0800a213 	.word	0x0800a213

08006c84 <std>:
 8006c84:	2300      	movs	r3, #0
 8006c86:	b510      	push	{r4, lr}
 8006c88:	4604      	mov	r4, r0
 8006c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c92:	6083      	str	r3, [r0, #8]
 8006c94:	8181      	strh	r1, [r0, #12]
 8006c96:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c98:	81c2      	strh	r2, [r0, #14]
 8006c9a:	6183      	str	r3, [r0, #24]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	2208      	movs	r2, #8
 8006ca0:	305c      	adds	r0, #92	@ 0x5c
 8006ca2:	f000 f92a 	bl	8006efa <memset>
 8006ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cdc <std+0x58>)
 8006ca8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006caa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce0 <std+0x5c>)
 8006cac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce4 <std+0x60>)
 8006cb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce8 <std+0x64>)
 8006cb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cec <std+0x68>)
 8006cb8:	6224      	str	r4, [r4, #32]
 8006cba:	429c      	cmp	r4, r3
 8006cbc:	d006      	beq.n	8006ccc <std+0x48>
 8006cbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cc2:	4294      	cmp	r4, r2
 8006cc4:	d002      	beq.n	8006ccc <std+0x48>
 8006cc6:	33d0      	adds	r3, #208	@ 0xd0
 8006cc8:	429c      	cmp	r4, r3
 8006cca:	d105      	bne.n	8006cd8 <std+0x54>
 8006ccc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd4:	f000 b98e 	b.w	8006ff4 <__retarget_lock_init_recursive>
 8006cd8:	bd10      	pop	{r4, pc}
 8006cda:	bf00      	nop
 8006cdc:	08006e75 	.word	0x08006e75
 8006ce0:	08006e97 	.word	0x08006e97
 8006ce4:	08006ecf 	.word	0x08006ecf
 8006ce8:	08006ef3 	.word	0x08006ef3
 8006cec:	20000424 	.word	0x20000424

08006cf0 <stdio_exit_handler>:
 8006cf0:	4a02      	ldr	r2, [pc, #8]	@ (8006cfc <stdio_exit_handler+0xc>)
 8006cf2:	4903      	ldr	r1, [pc, #12]	@ (8006d00 <stdio_exit_handler+0x10>)
 8006cf4:	4803      	ldr	r0, [pc, #12]	@ (8006d04 <stdio_exit_handler+0x14>)
 8006cf6:	f000 b869 	b.w	8006dcc <_fwalk_sglue>
 8006cfa:	bf00      	nop
 8006cfc:	20000014 	.word	0x20000014
 8006d00:	0800895d 	.word	0x0800895d
 8006d04:	20000024 	.word	0x20000024

08006d08 <cleanup_stdio>:
 8006d08:	6841      	ldr	r1, [r0, #4]
 8006d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d3c <cleanup_stdio+0x34>)
 8006d0c:	4299      	cmp	r1, r3
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	4604      	mov	r4, r0
 8006d12:	d001      	beq.n	8006d18 <cleanup_stdio+0x10>
 8006d14:	f001 fe22 	bl	800895c <_fflush_r>
 8006d18:	68a1      	ldr	r1, [r4, #8]
 8006d1a:	4b09      	ldr	r3, [pc, #36]	@ (8006d40 <cleanup_stdio+0x38>)
 8006d1c:	4299      	cmp	r1, r3
 8006d1e:	d002      	beq.n	8006d26 <cleanup_stdio+0x1e>
 8006d20:	4620      	mov	r0, r4
 8006d22:	f001 fe1b 	bl	800895c <_fflush_r>
 8006d26:	68e1      	ldr	r1, [r4, #12]
 8006d28:	4b06      	ldr	r3, [pc, #24]	@ (8006d44 <cleanup_stdio+0x3c>)
 8006d2a:	4299      	cmp	r1, r3
 8006d2c:	d004      	beq.n	8006d38 <cleanup_stdio+0x30>
 8006d2e:	4620      	mov	r0, r4
 8006d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d34:	f001 be12 	b.w	800895c <_fflush_r>
 8006d38:	bd10      	pop	{r4, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000424 	.word	0x20000424
 8006d40:	2000048c 	.word	0x2000048c
 8006d44:	200004f4 	.word	0x200004f4

08006d48 <global_stdio_init.part.0>:
 8006d48:	b510      	push	{r4, lr}
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d78 <global_stdio_init.part.0+0x30>)
 8006d4c:	4c0b      	ldr	r4, [pc, #44]	@ (8006d7c <global_stdio_init.part.0+0x34>)
 8006d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d80 <global_stdio_init.part.0+0x38>)
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	4620      	mov	r0, r4
 8006d54:	2200      	movs	r2, #0
 8006d56:	2104      	movs	r1, #4
 8006d58:	f7ff ff94 	bl	8006c84 <std>
 8006d5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d60:	2201      	movs	r2, #1
 8006d62:	2109      	movs	r1, #9
 8006d64:	f7ff ff8e 	bl	8006c84 <std>
 8006d68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d72:	2112      	movs	r1, #18
 8006d74:	f7ff bf86 	b.w	8006c84 <std>
 8006d78:	2000055c 	.word	0x2000055c
 8006d7c:	20000424 	.word	0x20000424
 8006d80:	08006cf1 	.word	0x08006cf1

08006d84 <__sfp_lock_acquire>:
 8006d84:	4801      	ldr	r0, [pc, #4]	@ (8006d8c <__sfp_lock_acquire+0x8>)
 8006d86:	f000 b936 	b.w	8006ff6 <__retarget_lock_acquire_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	20000565 	.word	0x20000565

08006d90 <__sfp_lock_release>:
 8006d90:	4801      	ldr	r0, [pc, #4]	@ (8006d98 <__sfp_lock_release+0x8>)
 8006d92:	f000 b931 	b.w	8006ff8 <__retarget_lock_release_recursive>
 8006d96:	bf00      	nop
 8006d98:	20000565 	.word	0x20000565

08006d9c <__sinit>:
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	4604      	mov	r4, r0
 8006da0:	f7ff fff0 	bl	8006d84 <__sfp_lock_acquire>
 8006da4:	6a23      	ldr	r3, [r4, #32]
 8006da6:	b11b      	cbz	r3, 8006db0 <__sinit+0x14>
 8006da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dac:	f7ff bff0 	b.w	8006d90 <__sfp_lock_release>
 8006db0:	4b04      	ldr	r3, [pc, #16]	@ (8006dc4 <__sinit+0x28>)
 8006db2:	6223      	str	r3, [r4, #32]
 8006db4:	4b04      	ldr	r3, [pc, #16]	@ (8006dc8 <__sinit+0x2c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1f5      	bne.n	8006da8 <__sinit+0xc>
 8006dbc:	f7ff ffc4 	bl	8006d48 <global_stdio_init.part.0>
 8006dc0:	e7f2      	b.n	8006da8 <__sinit+0xc>
 8006dc2:	bf00      	nop
 8006dc4:	08006d09 	.word	0x08006d09
 8006dc8:	2000055c 	.word	0x2000055c

08006dcc <_fwalk_sglue>:
 8006dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd0:	4607      	mov	r7, r0
 8006dd2:	4688      	mov	r8, r1
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	2600      	movs	r6, #0
 8006dd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ddc:	f1b9 0901 	subs.w	r9, r9, #1
 8006de0:	d505      	bpl.n	8006dee <_fwalk_sglue+0x22>
 8006de2:	6824      	ldr	r4, [r4, #0]
 8006de4:	2c00      	cmp	r4, #0
 8006de6:	d1f7      	bne.n	8006dd8 <_fwalk_sglue+0xc>
 8006de8:	4630      	mov	r0, r6
 8006dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dee:	89ab      	ldrh	r3, [r5, #12]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d907      	bls.n	8006e04 <_fwalk_sglue+0x38>
 8006df4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	d003      	beq.n	8006e04 <_fwalk_sglue+0x38>
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	4638      	mov	r0, r7
 8006e00:	47c0      	blx	r8
 8006e02:	4306      	orrs	r6, r0
 8006e04:	3568      	adds	r5, #104	@ 0x68
 8006e06:	e7e9      	b.n	8006ddc <_fwalk_sglue+0x10>

08006e08 <sniprintf>:
 8006e08:	b40c      	push	{r2, r3}
 8006e0a:	b530      	push	{r4, r5, lr}
 8006e0c:	4b18      	ldr	r3, [pc, #96]	@ (8006e70 <sniprintf+0x68>)
 8006e0e:	1e0c      	subs	r4, r1, #0
 8006e10:	681d      	ldr	r5, [r3, #0]
 8006e12:	b09d      	sub	sp, #116	@ 0x74
 8006e14:	da08      	bge.n	8006e28 <sniprintf+0x20>
 8006e16:	238b      	movs	r3, #139	@ 0x8b
 8006e18:	602b      	str	r3, [r5, #0]
 8006e1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e1e:	b01d      	add	sp, #116	@ 0x74
 8006e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e24:	b002      	add	sp, #8
 8006e26:	4770      	bx	lr
 8006e28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006e2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e30:	f04f 0300 	mov.w	r3, #0
 8006e34:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006e36:	bf14      	ite	ne
 8006e38:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006e3c:	4623      	moveq	r3, r4
 8006e3e:	9304      	str	r3, [sp, #16]
 8006e40:	9307      	str	r3, [sp, #28]
 8006e42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e46:	9002      	str	r0, [sp, #8]
 8006e48:	9006      	str	r0, [sp, #24]
 8006e4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e4e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e50:	ab21      	add	r3, sp, #132	@ 0x84
 8006e52:	a902      	add	r1, sp, #8
 8006e54:	4628      	mov	r0, r5
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	f001 fc00 	bl	800865c <_svfiprintf_r>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	bfbc      	itt	lt
 8006e60:	238b      	movlt	r3, #139	@ 0x8b
 8006e62:	602b      	strlt	r3, [r5, #0]
 8006e64:	2c00      	cmp	r4, #0
 8006e66:	d0da      	beq.n	8006e1e <sniprintf+0x16>
 8006e68:	9b02      	ldr	r3, [sp, #8]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	e7d6      	b.n	8006e1e <sniprintf+0x16>
 8006e70:	20000020 	.word	0x20000020

08006e74 <__sread>:
 8006e74:	b510      	push	{r4, lr}
 8006e76:	460c      	mov	r4, r1
 8006e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e7c:	f000 f86c 	bl	8006f58 <_read_r>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	bfab      	itete	ge
 8006e84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e86:	89a3      	ldrhlt	r3, [r4, #12]
 8006e88:	181b      	addge	r3, r3, r0
 8006e8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e8e:	bfac      	ite	ge
 8006e90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e92:	81a3      	strhlt	r3, [r4, #12]
 8006e94:	bd10      	pop	{r4, pc}

08006e96 <__swrite>:
 8006e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9a:	461f      	mov	r7, r3
 8006e9c:	898b      	ldrh	r3, [r1, #12]
 8006e9e:	05db      	lsls	r3, r3, #23
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	4616      	mov	r6, r2
 8006ea6:	d505      	bpl.n	8006eb4 <__swrite+0x1e>
 8006ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eac:	2302      	movs	r3, #2
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f000 f840 	bl	8006f34 <_lseek_r>
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ebe:	81a3      	strh	r3, [r4, #12]
 8006ec0:	4632      	mov	r2, r6
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eca:	f000 b857 	b.w	8006f7c <_write_r>

08006ece <__sseek>:
 8006ece:	b510      	push	{r4, lr}
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed6:	f000 f82d 	bl	8006f34 <_lseek_r>
 8006eda:	1c43      	adds	r3, r0, #1
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	bf15      	itete	ne
 8006ee0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ee2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ee6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eea:	81a3      	strheq	r3, [r4, #12]
 8006eec:	bf18      	it	ne
 8006eee:	81a3      	strhne	r3, [r4, #12]
 8006ef0:	bd10      	pop	{r4, pc}

08006ef2 <__sclose>:
 8006ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef6:	f000 b80d 	b.w	8006f14 <_close_r>

08006efa <memset>:
 8006efa:	4402      	add	r2, r0
 8006efc:	4603      	mov	r3, r0
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d100      	bne.n	8006f04 <memset+0xa>
 8006f02:	4770      	bx	lr
 8006f04:	f803 1b01 	strb.w	r1, [r3], #1
 8006f08:	e7f9      	b.n	8006efe <memset+0x4>
	...

08006f0c <_localeconv_r>:
 8006f0c:	4800      	ldr	r0, [pc, #0]	@ (8006f10 <_localeconv_r+0x4>)
 8006f0e:	4770      	bx	lr
 8006f10:	20000160 	.word	0x20000160

08006f14 <_close_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	4d06      	ldr	r5, [pc, #24]	@ (8006f30 <_close_r+0x1c>)
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	602b      	str	r3, [r5, #0]
 8006f20:	f7fb ffc6 	bl	8002eb0 <_close>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d102      	bne.n	8006f2e <_close_r+0x1a>
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	b103      	cbz	r3, 8006f2e <_close_r+0x1a>
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	bd38      	pop	{r3, r4, r5, pc}
 8006f30:	20000560 	.word	0x20000560

08006f34 <_lseek_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	4d07      	ldr	r5, [pc, #28]	@ (8006f54 <_lseek_r+0x20>)
 8006f38:	4604      	mov	r4, r0
 8006f3a:	4608      	mov	r0, r1
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	2200      	movs	r2, #0
 8006f40:	602a      	str	r2, [r5, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	f7fb ffdb 	bl	8002efe <_lseek>
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	d102      	bne.n	8006f52 <_lseek_r+0x1e>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	b103      	cbz	r3, 8006f52 <_lseek_r+0x1e>
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	20000560 	.word	0x20000560

08006f58 <_read_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	4d07      	ldr	r5, [pc, #28]	@ (8006f78 <_read_r+0x20>)
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	4608      	mov	r0, r1
 8006f60:	4611      	mov	r1, r2
 8006f62:	2200      	movs	r2, #0
 8006f64:	602a      	str	r2, [r5, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	f7fb ff69 	bl	8002e3e <_read>
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	d102      	bne.n	8006f76 <_read_r+0x1e>
 8006f70:	682b      	ldr	r3, [r5, #0]
 8006f72:	b103      	cbz	r3, 8006f76 <_read_r+0x1e>
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	bd38      	pop	{r3, r4, r5, pc}
 8006f78:	20000560 	.word	0x20000560

08006f7c <_write_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4d07      	ldr	r5, [pc, #28]	@ (8006f9c <_write_r+0x20>)
 8006f80:	4604      	mov	r4, r0
 8006f82:	4608      	mov	r0, r1
 8006f84:	4611      	mov	r1, r2
 8006f86:	2200      	movs	r2, #0
 8006f88:	602a      	str	r2, [r5, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f7fb ff74 	bl	8002e78 <_write>
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	d102      	bne.n	8006f9a <_write_r+0x1e>
 8006f94:	682b      	ldr	r3, [r5, #0]
 8006f96:	b103      	cbz	r3, 8006f9a <_write_r+0x1e>
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	bd38      	pop	{r3, r4, r5, pc}
 8006f9c:	20000560 	.word	0x20000560

08006fa0 <__errno>:
 8006fa0:	4b01      	ldr	r3, [pc, #4]	@ (8006fa8 <__errno+0x8>)
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	20000020 	.word	0x20000020

08006fac <__libc_init_array>:
 8006fac:	b570      	push	{r4, r5, r6, lr}
 8006fae:	4d0d      	ldr	r5, [pc, #52]	@ (8006fe4 <__libc_init_array+0x38>)
 8006fb0:	4c0d      	ldr	r4, [pc, #52]	@ (8006fe8 <__libc_init_array+0x3c>)
 8006fb2:	1b64      	subs	r4, r4, r5
 8006fb4:	10a4      	asrs	r4, r4, #2
 8006fb6:	2600      	movs	r6, #0
 8006fb8:	42a6      	cmp	r6, r4
 8006fba:	d109      	bne.n	8006fd0 <__libc_init_array+0x24>
 8006fbc:	4d0b      	ldr	r5, [pc, #44]	@ (8006fec <__libc_init_array+0x40>)
 8006fbe:	4c0c      	ldr	r4, [pc, #48]	@ (8006ff0 <__libc_init_array+0x44>)
 8006fc0:	f003 f8e2 	bl	800a188 <_init>
 8006fc4:	1b64      	subs	r4, r4, r5
 8006fc6:	10a4      	asrs	r4, r4, #2
 8006fc8:	2600      	movs	r6, #0
 8006fca:	42a6      	cmp	r6, r4
 8006fcc:	d105      	bne.n	8006fda <__libc_init_array+0x2e>
 8006fce:	bd70      	pop	{r4, r5, r6, pc}
 8006fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd4:	4798      	blx	r3
 8006fd6:	3601      	adds	r6, #1
 8006fd8:	e7ee      	b.n	8006fb8 <__libc_init_array+0xc>
 8006fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fde:	4798      	blx	r3
 8006fe0:	3601      	adds	r6, #1
 8006fe2:	e7f2      	b.n	8006fca <__libc_init_array+0x1e>
 8006fe4:	0800a748 	.word	0x0800a748
 8006fe8:	0800a748 	.word	0x0800a748
 8006fec:	0800a748 	.word	0x0800a748
 8006ff0:	0800a74c 	.word	0x0800a74c

08006ff4 <__retarget_lock_init_recursive>:
 8006ff4:	4770      	bx	lr

08006ff6 <__retarget_lock_acquire_recursive>:
 8006ff6:	4770      	bx	lr

08006ff8 <__retarget_lock_release_recursive>:
 8006ff8:	4770      	bx	lr

08006ffa <quorem>:
 8006ffa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffe:	6903      	ldr	r3, [r0, #16]
 8007000:	690c      	ldr	r4, [r1, #16]
 8007002:	42a3      	cmp	r3, r4
 8007004:	4607      	mov	r7, r0
 8007006:	db7e      	blt.n	8007106 <quorem+0x10c>
 8007008:	3c01      	subs	r4, #1
 800700a:	f101 0814 	add.w	r8, r1, #20
 800700e:	00a3      	lsls	r3, r4, #2
 8007010:	f100 0514 	add.w	r5, r0, #20
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007024:	3301      	adds	r3, #1
 8007026:	429a      	cmp	r2, r3
 8007028:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800702c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007030:	d32e      	bcc.n	8007090 <quorem+0x96>
 8007032:	f04f 0a00 	mov.w	sl, #0
 8007036:	46c4      	mov	ip, r8
 8007038:	46ae      	mov	lr, r5
 800703a:	46d3      	mov	fp, sl
 800703c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007040:	b298      	uxth	r0, r3
 8007042:	fb06 a000 	mla	r0, r6, r0, sl
 8007046:	0c02      	lsrs	r2, r0, #16
 8007048:	0c1b      	lsrs	r3, r3, #16
 800704a:	fb06 2303 	mla	r3, r6, r3, r2
 800704e:	f8de 2000 	ldr.w	r2, [lr]
 8007052:	b280      	uxth	r0, r0
 8007054:	b292      	uxth	r2, r2
 8007056:	1a12      	subs	r2, r2, r0
 8007058:	445a      	add	r2, fp
 800705a:	f8de 0000 	ldr.w	r0, [lr]
 800705e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007062:	b29b      	uxth	r3, r3
 8007064:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007068:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800706c:	b292      	uxth	r2, r2
 800706e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007072:	45e1      	cmp	r9, ip
 8007074:	f84e 2b04 	str.w	r2, [lr], #4
 8007078:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800707c:	d2de      	bcs.n	800703c <quorem+0x42>
 800707e:	9b00      	ldr	r3, [sp, #0]
 8007080:	58eb      	ldr	r3, [r5, r3]
 8007082:	b92b      	cbnz	r3, 8007090 <quorem+0x96>
 8007084:	9b01      	ldr	r3, [sp, #4]
 8007086:	3b04      	subs	r3, #4
 8007088:	429d      	cmp	r5, r3
 800708a:	461a      	mov	r2, r3
 800708c:	d32f      	bcc.n	80070ee <quorem+0xf4>
 800708e:	613c      	str	r4, [r7, #16]
 8007090:	4638      	mov	r0, r7
 8007092:	f001 f97f 	bl	8008394 <__mcmp>
 8007096:	2800      	cmp	r0, #0
 8007098:	db25      	blt.n	80070e6 <quorem+0xec>
 800709a:	4629      	mov	r1, r5
 800709c:	2000      	movs	r0, #0
 800709e:	f858 2b04 	ldr.w	r2, [r8], #4
 80070a2:	f8d1 c000 	ldr.w	ip, [r1]
 80070a6:	fa1f fe82 	uxth.w	lr, r2
 80070aa:	fa1f f38c 	uxth.w	r3, ip
 80070ae:	eba3 030e 	sub.w	r3, r3, lr
 80070b2:	4403      	add	r3, r0
 80070b4:	0c12      	lsrs	r2, r2, #16
 80070b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80070ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80070be:	b29b      	uxth	r3, r3
 80070c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070c4:	45c1      	cmp	r9, r8
 80070c6:	f841 3b04 	str.w	r3, [r1], #4
 80070ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070ce:	d2e6      	bcs.n	800709e <quorem+0xa4>
 80070d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070d8:	b922      	cbnz	r2, 80070e4 <quorem+0xea>
 80070da:	3b04      	subs	r3, #4
 80070dc:	429d      	cmp	r5, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	d30b      	bcc.n	80070fa <quorem+0x100>
 80070e2:	613c      	str	r4, [r7, #16]
 80070e4:	3601      	adds	r6, #1
 80070e6:	4630      	mov	r0, r6
 80070e8:	b003      	add	sp, #12
 80070ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ee:	6812      	ldr	r2, [r2, #0]
 80070f0:	3b04      	subs	r3, #4
 80070f2:	2a00      	cmp	r2, #0
 80070f4:	d1cb      	bne.n	800708e <quorem+0x94>
 80070f6:	3c01      	subs	r4, #1
 80070f8:	e7c6      	b.n	8007088 <quorem+0x8e>
 80070fa:	6812      	ldr	r2, [r2, #0]
 80070fc:	3b04      	subs	r3, #4
 80070fe:	2a00      	cmp	r2, #0
 8007100:	d1ef      	bne.n	80070e2 <quorem+0xe8>
 8007102:	3c01      	subs	r4, #1
 8007104:	e7ea      	b.n	80070dc <quorem+0xe2>
 8007106:	2000      	movs	r0, #0
 8007108:	e7ee      	b.n	80070e8 <quorem+0xee>
 800710a:	0000      	movs	r0, r0
 800710c:	0000      	movs	r0, r0
	...

08007110 <_dtoa_r>:
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	69c7      	ldr	r7, [r0, #28]
 8007116:	b097      	sub	sp, #92	@ 0x5c
 8007118:	ed8d 0b04 	vstr	d0, [sp, #16]
 800711c:	ec55 4b10 	vmov	r4, r5, d0
 8007120:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007122:	9107      	str	r1, [sp, #28]
 8007124:	4681      	mov	r9, r0
 8007126:	920c      	str	r2, [sp, #48]	@ 0x30
 8007128:	9311      	str	r3, [sp, #68]	@ 0x44
 800712a:	b97f      	cbnz	r7, 800714c <_dtoa_r+0x3c>
 800712c:	2010      	movs	r0, #16
 800712e:	f000 fe09 	bl	8007d44 <malloc>
 8007132:	4602      	mov	r2, r0
 8007134:	f8c9 001c 	str.w	r0, [r9, #28]
 8007138:	b920      	cbnz	r0, 8007144 <_dtoa_r+0x34>
 800713a:	4ba9      	ldr	r3, [pc, #676]	@ (80073e0 <_dtoa_r+0x2d0>)
 800713c:	21ef      	movs	r1, #239	@ 0xef
 800713e:	48a9      	ldr	r0, [pc, #676]	@ (80073e4 <_dtoa_r+0x2d4>)
 8007140:	f001 fc6c 	bl	8008a1c <__assert_func>
 8007144:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007148:	6007      	str	r7, [r0, #0]
 800714a:	60c7      	str	r7, [r0, #12]
 800714c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007150:	6819      	ldr	r1, [r3, #0]
 8007152:	b159      	cbz	r1, 800716c <_dtoa_r+0x5c>
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	604a      	str	r2, [r1, #4]
 8007158:	2301      	movs	r3, #1
 800715a:	4093      	lsls	r3, r2
 800715c:	608b      	str	r3, [r1, #8]
 800715e:	4648      	mov	r0, r9
 8007160:	f000 fee6 	bl	8007f30 <_Bfree>
 8007164:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	1e2b      	subs	r3, r5, #0
 800716e:	bfb9      	ittee	lt
 8007170:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007174:	9305      	strlt	r3, [sp, #20]
 8007176:	2300      	movge	r3, #0
 8007178:	6033      	strge	r3, [r6, #0]
 800717a:	9f05      	ldr	r7, [sp, #20]
 800717c:	4b9a      	ldr	r3, [pc, #616]	@ (80073e8 <_dtoa_r+0x2d8>)
 800717e:	bfbc      	itt	lt
 8007180:	2201      	movlt	r2, #1
 8007182:	6032      	strlt	r2, [r6, #0]
 8007184:	43bb      	bics	r3, r7
 8007186:	d112      	bne.n	80071ae <_dtoa_r+0x9e>
 8007188:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800718a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007194:	4323      	orrs	r3, r4
 8007196:	f000 855a 	beq.w	8007c4e <_dtoa_r+0xb3e>
 800719a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800719c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80073fc <_dtoa_r+0x2ec>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 855c 	beq.w	8007c5e <_dtoa_r+0xb4e>
 80071a6:	f10a 0303 	add.w	r3, sl, #3
 80071aa:	f000 bd56 	b.w	8007c5a <_dtoa_r+0xb4a>
 80071ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80071b2:	2200      	movs	r2, #0
 80071b4:	ec51 0b17 	vmov	r0, r1, d7
 80071b8:	2300      	movs	r3, #0
 80071ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80071be:	f7f9 fc8b 	bl	8000ad8 <__aeabi_dcmpeq>
 80071c2:	4680      	mov	r8, r0
 80071c4:	b158      	cbz	r0, 80071de <_dtoa_r+0xce>
 80071c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80071c8:	2301      	movs	r3, #1
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071ce:	b113      	cbz	r3, 80071d6 <_dtoa_r+0xc6>
 80071d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80071d2:	4b86      	ldr	r3, [pc, #536]	@ (80073ec <_dtoa_r+0x2dc>)
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007400 <_dtoa_r+0x2f0>
 80071da:	f000 bd40 	b.w	8007c5e <_dtoa_r+0xb4e>
 80071de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80071e2:	aa14      	add	r2, sp, #80	@ 0x50
 80071e4:	a915      	add	r1, sp, #84	@ 0x54
 80071e6:	4648      	mov	r0, r9
 80071e8:	f001 f984 	bl	80084f4 <__d2b>
 80071ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80071f0:	9002      	str	r0, [sp, #8]
 80071f2:	2e00      	cmp	r6, #0
 80071f4:	d078      	beq.n	80072e8 <_dtoa_r+0x1d8>
 80071f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80071fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007200:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007204:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007208:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800720c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007210:	4619      	mov	r1, r3
 8007212:	2200      	movs	r2, #0
 8007214:	4b76      	ldr	r3, [pc, #472]	@ (80073f0 <_dtoa_r+0x2e0>)
 8007216:	f7f9 f83f 	bl	8000298 <__aeabi_dsub>
 800721a:	a36b      	add	r3, pc, #428	@ (adr r3, 80073c8 <_dtoa_r+0x2b8>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f7f9 f9f2 	bl	8000608 <__aeabi_dmul>
 8007224:	a36a      	add	r3, pc, #424	@ (adr r3, 80073d0 <_dtoa_r+0x2c0>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f9 f837 	bl	800029c <__adddf3>
 800722e:	4604      	mov	r4, r0
 8007230:	4630      	mov	r0, r6
 8007232:	460d      	mov	r5, r1
 8007234:	f7f9 f97e 	bl	8000534 <__aeabi_i2d>
 8007238:	a367      	add	r3, pc, #412	@ (adr r3, 80073d8 <_dtoa_r+0x2c8>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f9 f9e3 	bl	8000608 <__aeabi_dmul>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f9 f827 	bl	800029c <__adddf3>
 800724e:	4604      	mov	r4, r0
 8007250:	460d      	mov	r5, r1
 8007252:	f7f9 fc89 	bl	8000b68 <__aeabi_d2iz>
 8007256:	2200      	movs	r2, #0
 8007258:	4607      	mov	r7, r0
 800725a:	2300      	movs	r3, #0
 800725c:	4620      	mov	r0, r4
 800725e:	4629      	mov	r1, r5
 8007260:	f7f9 fc44 	bl	8000aec <__aeabi_dcmplt>
 8007264:	b140      	cbz	r0, 8007278 <_dtoa_r+0x168>
 8007266:	4638      	mov	r0, r7
 8007268:	f7f9 f964 	bl	8000534 <__aeabi_i2d>
 800726c:	4622      	mov	r2, r4
 800726e:	462b      	mov	r3, r5
 8007270:	f7f9 fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 8007274:	b900      	cbnz	r0, 8007278 <_dtoa_r+0x168>
 8007276:	3f01      	subs	r7, #1
 8007278:	2f16      	cmp	r7, #22
 800727a:	d852      	bhi.n	8007322 <_dtoa_r+0x212>
 800727c:	4b5d      	ldr	r3, [pc, #372]	@ (80073f4 <_dtoa_r+0x2e4>)
 800727e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800728a:	f7f9 fc2f 	bl	8000aec <__aeabi_dcmplt>
 800728e:	2800      	cmp	r0, #0
 8007290:	d049      	beq.n	8007326 <_dtoa_r+0x216>
 8007292:	3f01      	subs	r7, #1
 8007294:	2300      	movs	r3, #0
 8007296:	9310      	str	r3, [sp, #64]	@ 0x40
 8007298:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800729a:	1b9b      	subs	r3, r3, r6
 800729c:	1e5a      	subs	r2, r3, #1
 800729e:	bf45      	ittet	mi
 80072a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80072a4:	9300      	strmi	r3, [sp, #0]
 80072a6:	2300      	movpl	r3, #0
 80072a8:	2300      	movmi	r3, #0
 80072aa:	9206      	str	r2, [sp, #24]
 80072ac:	bf54      	ite	pl
 80072ae:	9300      	strpl	r3, [sp, #0]
 80072b0:	9306      	strmi	r3, [sp, #24]
 80072b2:	2f00      	cmp	r7, #0
 80072b4:	db39      	blt.n	800732a <_dtoa_r+0x21a>
 80072b6:	9b06      	ldr	r3, [sp, #24]
 80072b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80072ba:	443b      	add	r3, r7
 80072bc:	9306      	str	r3, [sp, #24]
 80072be:	2300      	movs	r3, #0
 80072c0:	9308      	str	r3, [sp, #32]
 80072c2:	9b07      	ldr	r3, [sp, #28]
 80072c4:	2b09      	cmp	r3, #9
 80072c6:	d863      	bhi.n	8007390 <_dtoa_r+0x280>
 80072c8:	2b05      	cmp	r3, #5
 80072ca:	bfc4      	itt	gt
 80072cc:	3b04      	subgt	r3, #4
 80072ce:	9307      	strgt	r3, [sp, #28]
 80072d0:	9b07      	ldr	r3, [sp, #28]
 80072d2:	f1a3 0302 	sub.w	r3, r3, #2
 80072d6:	bfcc      	ite	gt
 80072d8:	2400      	movgt	r4, #0
 80072da:	2401      	movle	r4, #1
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d863      	bhi.n	80073a8 <_dtoa_r+0x298>
 80072e0:	e8df f003 	tbb	[pc, r3]
 80072e4:	2b375452 	.word	0x2b375452
 80072e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80072ec:	441e      	add	r6, r3
 80072ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	bfc1      	itttt	gt
 80072f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80072fa:	409f      	lslgt	r7, r3
 80072fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007300:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007304:	bfd6      	itet	le
 8007306:	f1c3 0320 	rsble	r3, r3, #32
 800730a:	ea47 0003 	orrgt.w	r0, r7, r3
 800730e:	fa04 f003 	lslle.w	r0, r4, r3
 8007312:	f7f9 f8ff 	bl	8000514 <__aeabi_ui2d>
 8007316:	2201      	movs	r2, #1
 8007318:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800731c:	3e01      	subs	r6, #1
 800731e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007320:	e776      	b.n	8007210 <_dtoa_r+0x100>
 8007322:	2301      	movs	r3, #1
 8007324:	e7b7      	b.n	8007296 <_dtoa_r+0x186>
 8007326:	9010      	str	r0, [sp, #64]	@ 0x40
 8007328:	e7b6      	b.n	8007298 <_dtoa_r+0x188>
 800732a:	9b00      	ldr	r3, [sp, #0]
 800732c:	1bdb      	subs	r3, r3, r7
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	427b      	negs	r3, r7
 8007332:	9308      	str	r3, [sp, #32]
 8007334:	2300      	movs	r3, #0
 8007336:	930d      	str	r3, [sp, #52]	@ 0x34
 8007338:	e7c3      	b.n	80072c2 <_dtoa_r+0x1b2>
 800733a:	2301      	movs	r3, #1
 800733c:	9309      	str	r3, [sp, #36]	@ 0x24
 800733e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007340:	eb07 0b03 	add.w	fp, r7, r3
 8007344:	f10b 0301 	add.w	r3, fp, #1
 8007348:	2b01      	cmp	r3, #1
 800734a:	9303      	str	r3, [sp, #12]
 800734c:	bfb8      	it	lt
 800734e:	2301      	movlt	r3, #1
 8007350:	e006      	b.n	8007360 <_dtoa_r+0x250>
 8007352:	2301      	movs	r3, #1
 8007354:	9309      	str	r3, [sp, #36]	@ 0x24
 8007356:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007358:	2b00      	cmp	r3, #0
 800735a:	dd28      	ble.n	80073ae <_dtoa_r+0x29e>
 800735c:	469b      	mov	fp, r3
 800735e:	9303      	str	r3, [sp, #12]
 8007360:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007364:	2100      	movs	r1, #0
 8007366:	2204      	movs	r2, #4
 8007368:	f102 0514 	add.w	r5, r2, #20
 800736c:	429d      	cmp	r5, r3
 800736e:	d926      	bls.n	80073be <_dtoa_r+0x2ae>
 8007370:	6041      	str	r1, [r0, #4]
 8007372:	4648      	mov	r0, r9
 8007374:	f000 fd9c 	bl	8007eb0 <_Balloc>
 8007378:	4682      	mov	sl, r0
 800737a:	2800      	cmp	r0, #0
 800737c:	d142      	bne.n	8007404 <_dtoa_r+0x2f4>
 800737e:	4b1e      	ldr	r3, [pc, #120]	@ (80073f8 <_dtoa_r+0x2e8>)
 8007380:	4602      	mov	r2, r0
 8007382:	f240 11af 	movw	r1, #431	@ 0x1af
 8007386:	e6da      	b.n	800713e <_dtoa_r+0x2e>
 8007388:	2300      	movs	r3, #0
 800738a:	e7e3      	b.n	8007354 <_dtoa_r+0x244>
 800738c:	2300      	movs	r3, #0
 800738e:	e7d5      	b.n	800733c <_dtoa_r+0x22c>
 8007390:	2401      	movs	r4, #1
 8007392:	2300      	movs	r3, #0
 8007394:	9307      	str	r3, [sp, #28]
 8007396:	9409      	str	r4, [sp, #36]	@ 0x24
 8007398:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800739c:	2200      	movs	r2, #0
 800739e:	f8cd b00c 	str.w	fp, [sp, #12]
 80073a2:	2312      	movs	r3, #18
 80073a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80073a6:	e7db      	b.n	8007360 <_dtoa_r+0x250>
 80073a8:	2301      	movs	r3, #1
 80073aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ac:	e7f4      	b.n	8007398 <_dtoa_r+0x288>
 80073ae:	f04f 0b01 	mov.w	fp, #1
 80073b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80073b6:	465b      	mov	r3, fp
 80073b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80073bc:	e7d0      	b.n	8007360 <_dtoa_r+0x250>
 80073be:	3101      	adds	r1, #1
 80073c0:	0052      	lsls	r2, r2, #1
 80073c2:	e7d1      	b.n	8007368 <_dtoa_r+0x258>
 80073c4:	f3af 8000 	nop.w
 80073c8:	636f4361 	.word	0x636f4361
 80073cc:	3fd287a7 	.word	0x3fd287a7
 80073d0:	8b60c8b3 	.word	0x8b60c8b3
 80073d4:	3fc68a28 	.word	0x3fc68a28
 80073d8:	509f79fb 	.word	0x509f79fb
 80073dc:	3fd34413 	.word	0x3fd34413
 80073e0:	0800a231 	.word	0x0800a231
 80073e4:	0800a248 	.word	0x0800a248
 80073e8:	7ff00000 	.word	0x7ff00000
 80073ec:	0800a201 	.word	0x0800a201
 80073f0:	3ff80000 	.word	0x3ff80000
 80073f4:	0800a398 	.word	0x0800a398
 80073f8:	0800a2a0 	.word	0x0800a2a0
 80073fc:	0800a22d 	.word	0x0800a22d
 8007400:	0800a200 	.word	0x0800a200
 8007404:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007408:	6018      	str	r0, [r3, #0]
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	2b0e      	cmp	r3, #14
 800740e:	f200 80a1 	bhi.w	8007554 <_dtoa_r+0x444>
 8007412:	2c00      	cmp	r4, #0
 8007414:	f000 809e 	beq.w	8007554 <_dtoa_r+0x444>
 8007418:	2f00      	cmp	r7, #0
 800741a:	dd33      	ble.n	8007484 <_dtoa_r+0x374>
 800741c:	4b9c      	ldr	r3, [pc, #624]	@ (8007690 <_dtoa_r+0x580>)
 800741e:	f007 020f 	and.w	r2, r7, #15
 8007422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007426:	ed93 7b00 	vldr	d7, [r3]
 800742a:	05f8      	lsls	r0, r7, #23
 800742c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007430:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007434:	d516      	bpl.n	8007464 <_dtoa_r+0x354>
 8007436:	4b97      	ldr	r3, [pc, #604]	@ (8007694 <_dtoa_r+0x584>)
 8007438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800743c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007440:	f7f9 fa0c 	bl	800085c <__aeabi_ddiv>
 8007444:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007448:	f004 040f 	and.w	r4, r4, #15
 800744c:	2603      	movs	r6, #3
 800744e:	4d91      	ldr	r5, [pc, #580]	@ (8007694 <_dtoa_r+0x584>)
 8007450:	b954      	cbnz	r4, 8007468 <_dtoa_r+0x358>
 8007452:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007456:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800745a:	f7f9 f9ff 	bl	800085c <__aeabi_ddiv>
 800745e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007462:	e028      	b.n	80074b6 <_dtoa_r+0x3a6>
 8007464:	2602      	movs	r6, #2
 8007466:	e7f2      	b.n	800744e <_dtoa_r+0x33e>
 8007468:	07e1      	lsls	r1, r4, #31
 800746a:	d508      	bpl.n	800747e <_dtoa_r+0x36e>
 800746c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007470:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007474:	f7f9 f8c8 	bl	8000608 <__aeabi_dmul>
 8007478:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800747c:	3601      	adds	r6, #1
 800747e:	1064      	asrs	r4, r4, #1
 8007480:	3508      	adds	r5, #8
 8007482:	e7e5      	b.n	8007450 <_dtoa_r+0x340>
 8007484:	f000 80af 	beq.w	80075e6 <_dtoa_r+0x4d6>
 8007488:	427c      	negs	r4, r7
 800748a:	4b81      	ldr	r3, [pc, #516]	@ (8007690 <_dtoa_r+0x580>)
 800748c:	4d81      	ldr	r5, [pc, #516]	@ (8007694 <_dtoa_r+0x584>)
 800748e:	f004 020f 	and.w	r2, r4, #15
 8007492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800749e:	f7f9 f8b3 	bl	8000608 <__aeabi_dmul>
 80074a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074a6:	1124      	asrs	r4, r4, #4
 80074a8:	2300      	movs	r3, #0
 80074aa:	2602      	movs	r6, #2
 80074ac:	2c00      	cmp	r4, #0
 80074ae:	f040 808f 	bne.w	80075d0 <_dtoa_r+0x4c0>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1d3      	bne.n	800745e <_dtoa_r+0x34e>
 80074b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80074b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 8094 	beq.w	80075ea <_dtoa_r+0x4da>
 80074c2:	4b75      	ldr	r3, [pc, #468]	@ (8007698 <_dtoa_r+0x588>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	4620      	mov	r0, r4
 80074c8:	4629      	mov	r1, r5
 80074ca:	f7f9 fb0f 	bl	8000aec <__aeabi_dcmplt>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	f000 808b 	beq.w	80075ea <_dtoa_r+0x4da>
 80074d4:	9b03      	ldr	r3, [sp, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 8087 	beq.w	80075ea <_dtoa_r+0x4da>
 80074dc:	f1bb 0f00 	cmp.w	fp, #0
 80074e0:	dd34      	ble.n	800754c <_dtoa_r+0x43c>
 80074e2:	4620      	mov	r0, r4
 80074e4:	4b6d      	ldr	r3, [pc, #436]	@ (800769c <_dtoa_r+0x58c>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	4629      	mov	r1, r5
 80074ea:	f7f9 f88d 	bl	8000608 <__aeabi_dmul>
 80074ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074f2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80074f6:	3601      	adds	r6, #1
 80074f8:	465c      	mov	r4, fp
 80074fa:	4630      	mov	r0, r6
 80074fc:	f7f9 f81a 	bl	8000534 <__aeabi_i2d>
 8007500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007504:	f7f9 f880 	bl	8000608 <__aeabi_dmul>
 8007508:	4b65      	ldr	r3, [pc, #404]	@ (80076a0 <_dtoa_r+0x590>)
 800750a:	2200      	movs	r2, #0
 800750c:	f7f8 fec6 	bl	800029c <__adddf3>
 8007510:	4605      	mov	r5, r0
 8007512:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007516:	2c00      	cmp	r4, #0
 8007518:	d16a      	bne.n	80075f0 <_dtoa_r+0x4e0>
 800751a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800751e:	4b61      	ldr	r3, [pc, #388]	@ (80076a4 <_dtoa_r+0x594>)
 8007520:	2200      	movs	r2, #0
 8007522:	f7f8 feb9 	bl	8000298 <__aeabi_dsub>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800752e:	462a      	mov	r2, r5
 8007530:	4633      	mov	r3, r6
 8007532:	f7f9 faf9 	bl	8000b28 <__aeabi_dcmpgt>
 8007536:	2800      	cmp	r0, #0
 8007538:	f040 8298 	bne.w	8007a6c <_dtoa_r+0x95c>
 800753c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007540:	462a      	mov	r2, r5
 8007542:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007546:	f7f9 fad1 	bl	8000aec <__aeabi_dcmplt>
 800754a:	bb38      	cbnz	r0, 800759c <_dtoa_r+0x48c>
 800754c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007550:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007554:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007556:	2b00      	cmp	r3, #0
 8007558:	f2c0 8157 	blt.w	800780a <_dtoa_r+0x6fa>
 800755c:	2f0e      	cmp	r7, #14
 800755e:	f300 8154 	bgt.w	800780a <_dtoa_r+0x6fa>
 8007562:	4b4b      	ldr	r3, [pc, #300]	@ (8007690 <_dtoa_r+0x580>)
 8007564:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007568:	ed93 7b00 	vldr	d7, [r3]
 800756c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800756e:	2b00      	cmp	r3, #0
 8007570:	ed8d 7b00 	vstr	d7, [sp]
 8007574:	f280 80e5 	bge.w	8007742 <_dtoa_r+0x632>
 8007578:	9b03      	ldr	r3, [sp, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f300 80e1 	bgt.w	8007742 <_dtoa_r+0x632>
 8007580:	d10c      	bne.n	800759c <_dtoa_r+0x48c>
 8007582:	4b48      	ldr	r3, [pc, #288]	@ (80076a4 <_dtoa_r+0x594>)
 8007584:	2200      	movs	r2, #0
 8007586:	ec51 0b17 	vmov	r0, r1, d7
 800758a:	f7f9 f83d 	bl	8000608 <__aeabi_dmul>
 800758e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007592:	f7f9 fabf 	bl	8000b14 <__aeabi_dcmpge>
 8007596:	2800      	cmp	r0, #0
 8007598:	f000 8266 	beq.w	8007a68 <_dtoa_r+0x958>
 800759c:	2400      	movs	r4, #0
 800759e:	4625      	mov	r5, r4
 80075a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075a2:	4656      	mov	r6, sl
 80075a4:	ea6f 0803 	mvn.w	r8, r3
 80075a8:	2700      	movs	r7, #0
 80075aa:	4621      	mov	r1, r4
 80075ac:	4648      	mov	r0, r9
 80075ae:	f000 fcbf 	bl	8007f30 <_Bfree>
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	f000 80bd 	beq.w	8007732 <_dtoa_r+0x622>
 80075b8:	b12f      	cbz	r7, 80075c6 <_dtoa_r+0x4b6>
 80075ba:	42af      	cmp	r7, r5
 80075bc:	d003      	beq.n	80075c6 <_dtoa_r+0x4b6>
 80075be:	4639      	mov	r1, r7
 80075c0:	4648      	mov	r0, r9
 80075c2:	f000 fcb5 	bl	8007f30 <_Bfree>
 80075c6:	4629      	mov	r1, r5
 80075c8:	4648      	mov	r0, r9
 80075ca:	f000 fcb1 	bl	8007f30 <_Bfree>
 80075ce:	e0b0      	b.n	8007732 <_dtoa_r+0x622>
 80075d0:	07e2      	lsls	r2, r4, #31
 80075d2:	d505      	bpl.n	80075e0 <_dtoa_r+0x4d0>
 80075d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075d8:	f7f9 f816 	bl	8000608 <__aeabi_dmul>
 80075dc:	3601      	adds	r6, #1
 80075de:	2301      	movs	r3, #1
 80075e0:	1064      	asrs	r4, r4, #1
 80075e2:	3508      	adds	r5, #8
 80075e4:	e762      	b.n	80074ac <_dtoa_r+0x39c>
 80075e6:	2602      	movs	r6, #2
 80075e8:	e765      	b.n	80074b6 <_dtoa_r+0x3a6>
 80075ea:	9c03      	ldr	r4, [sp, #12]
 80075ec:	46b8      	mov	r8, r7
 80075ee:	e784      	b.n	80074fa <_dtoa_r+0x3ea>
 80075f0:	4b27      	ldr	r3, [pc, #156]	@ (8007690 <_dtoa_r+0x580>)
 80075f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075fc:	4454      	add	r4, sl
 80075fe:	2900      	cmp	r1, #0
 8007600:	d054      	beq.n	80076ac <_dtoa_r+0x59c>
 8007602:	4929      	ldr	r1, [pc, #164]	@ (80076a8 <_dtoa_r+0x598>)
 8007604:	2000      	movs	r0, #0
 8007606:	f7f9 f929 	bl	800085c <__aeabi_ddiv>
 800760a:	4633      	mov	r3, r6
 800760c:	462a      	mov	r2, r5
 800760e:	f7f8 fe43 	bl	8000298 <__aeabi_dsub>
 8007612:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007616:	4656      	mov	r6, sl
 8007618:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800761c:	f7f9 faa4 	bl	8000b68 <__aeabi_d2iz>
 8007620:	4605      	mov	r5, r0
 8007622:	f7f8 ff87 	bl	8000534 <__aeabi_i2d>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800762e:	f7f8 fe33 	bl	8000298 <__aeabi_dsub>
 8007632:	3530      	adds	r5, #48	@ 0x30
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800763c:	f806 5b01 	strb.w	r5, [r6], #1
 8007640:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007644:	f7f9 fa52 	bl	8000aec <__aeabi_dcmplt>
 8007648:	2800      	cmp	r0, #0
 800764a:	d172      	bne.n	8007732 <_dtoa_r+0x622>
 800764c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007650:	4911      	ldr	r1, [pc, #68]	@ (8007698 <_dtoa_r+0x588>)
 8007652:	2000      	movs	r0, #0
 8007654:	f7f8 fe20 	bl	8000298 <__aeabi_dsub>
 8007658:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800765c:	f7f9 fa46 	bl	8000aec <__aeabi_dcmplt>
 8007660:	2800      	cmp	r0, #0
 8007662:	f040 80b4 	bne.w	80077ce <_dtoa_r+0x6be>
 8007666:	42a6      	cmp	r6, r4
 8007668:	f43f af70 	beq.w	800754c <_dtoa_r+0x43c>
 800766c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007670:	4b0a      	ldr	r3, [pc, #40]	@ (800769c <_dtoa_r+0x58c>)
 8007672:	2200      	movs	r2, #0
 8007674:	f7f8 ffc8 	bl	8000608 <__aeabi_dmul>
 8007678:	4b08      	ldr	r3, [pc, #32]	@ (800769c <_dtoa_r+0x58c>)
 800767a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800767e:	2200      	movs	r2, #0
 8007680:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007684:	f7f8 ffc0 	bl	8000608 <__aeabi_dmul>
 8007688:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800768c:	e7c4      	b.n	8007618 <_dtoa_r+0x508>
 800768e:	bf00      	nop
 8007690:	0800a398 	.word	0x0800a398
 8007694:	0800a370 	.word	0x0800a370
 8007698:	3ff00000 	.word	0x3ff00000
 800769c:	40240000 	.word	0x40240000
 80076a0:	401c0000 	.word	0x401c0000
 80076a4:	40140000 	.word	0x40140000
 80076a8:	3fe00000 	.word	0x3fe00000
 80076ac:	4631      	mov	r1, r6
 80076ae:	4628      	mov	r0, r5
 80076b0:	f7f8 ffaa 	bl	8000608 <__aeabi_dmul>
 80076b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80076b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80076ba:	4656      	mov	r6, sl
 80076bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076c0:	f7f9 fa52 	bl	8000b68 <__aeabi_d2iz>
 80076c4:	4605      	mov	r5, r0
 80076c6:	f7f8 ff35 	bl	8000534 <__aeabi_i2d>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076d2:	f7f8 fde1 	bl	8000298 <__aeabi_dsub>
 80076d6:	3530      	adds	r5, #48	@ 0x30
 80076d8:	f806 5b01 	strb.w	r5, [r6], #1
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	42a6      	cmp	r6, r4
 80076e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076e6:	f04f 0200 	mov.w	r2, #0
 80076ea:	d124      	bne.n	8007736 <_dtoa_r+0x626>
 80076ec:	4baf      	ldr	r3, [pc, #700]	@ (80079ac <_dtoa_r+0x89c>)
 80076ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80076f2:	f7f8 fdd3 	bl	800029c <__adddf3>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076fe:	f7f9 fa13 	bl	8000b28 <__aeabi_dcmpgt>
 8007702:	2800      	cmp	r0, #0
 8007704:	d163      	bne.n	80077ce <_dtoa_r+0x6be>
 8007706:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800770a:	49a8      	ldr	r1, [pc, #672]	@ (80079ac <_dtoa_r+0x89c>)
 800770c:	2000      	movs	r0, #0
 800770e:	f7f8 fdc3 	bl	8000298 <__aeabi_dsub>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800771a:	f7f9 f9e7 	bl	8000aec <__aeabi_dcmplt>
 800771e:	2800      	cmp	r0, #0
 8007720:	f43f af14 	beq.w	800754c <_dtoa_r+0x43c>
 8007724:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007726:	1e73      	subs	r3, r6, #1
 8007728:	9313      	str	r3, [sp, #76]	@ 0x4c
 800772a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800772e:	2b30      	cmp	r3, #48	@ 0x30
 8007730:	d0f8      	beq.n	8007724 <_dtoa_r+0x614>
 8007732:	4647      	mov	r7, r8
 8007734:	e03b      	b.n	80077ae <_dtoa_r+0x69e>
 8007736:	4b9e      	ldr	r3, [pc, #632]	@ (80079b0 <_dtoa_r+0x8a0>)
 8007738:	f7f8 ff66 	bl	8000608 <__aeabi_dmul>
 800773c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007740:	e7bc      	b.n	80076bc <_dtoa_r+0x5ac>
 8007742:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007746:	4656      	mov	r6, sl
 8007748:	e9dd 2300 	ldrd	r2, r3, [sp]
 800774c:	4620      	mov	r0, r4
 800774e:	4629      	mov	r1, r5
 8007750:	f7f9 f884 	bl	800085c <__aeabi_ddiv>
 8007754:	f7f9 fa08 	bl	8000b68 <__aeabi_d2iz>
 8007758:	4680      	mov	r8, r0
 800775a:	f7f8 feeb 	bl	8000534 <__aeabi_i2d>
 800775e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007762:	f7f8 ff51 	bl	8000608 <__aeabi_dmul>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4620      	mov	r0, r4
 800776c:	4629      	mov	r1, r5
 800776e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007772:	f7f8 fd91 	bl	8000298 <__aeabi_dsub>
 8007776:	f806 4b01 	strb.w	r4, [r6], #1
 800777a:	9d03      	ldr	r5, [sp, #12]
 800777c:	eba6 040a 	sub.w	r4, r6, sl
 8007780:	42a5      	cmp	r5, r4
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	d133      	bne.n	80077f0 <_dtoa_r+0x6e0>
 8007788:	f7f8 fd88 	bl	800029c <__adddf3>
 800778c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007790:	4604      	mov	r4, r0
 8007792:	460d      	mov	r5, r1
 8007794:	f7f9 f9c8 	bl	8000b28 <__aeabi_dcmpgt>
 8007798:	b9c0      	cbnz	r0, 80077cc <_dtoa_r+0x6bc>
 800779a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800779e:	4620      	mov	r0, r4
 80077a0:	4629      	mov	r1, r5
 80077a2:	f7f9 f999 	bl	8000ad8 <__aeabi_dcmpeq>
 80077a6:	b110      	cbz	r0, 80077ae <_dtoa_r+0x69e>
 80077a8:	f018 0f01 	tst.w	r8, #1
 80077ac:	d10e      	bne.n	80077cc <_dtoa_r+0x6bc>
 80077ae:	9902      	ldr	r1, [sp, #8]
 80077b0:	4648      	mov	r0, r9
 80077b2:	f000 fbbd 	bl	8007f30 <_Bfree>
 80077b6:	2300      	movs	r3, #0
 80077b8:	7033      	strb	r3, [r6, #0]
 80077ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80077bc:	3701      	adds	r7, #1
 80077be:	601f      	str	r7, [r3, #0]
 80077c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 824b 	beq.w	8007c5e <_dtoa_r+0xb4e>
 80077c8:	601e      	str	r6, [r3, #0]
 80077ca:	e248      	b.n	8007c5e <_dtoa_r+0xb4e>
 80077cc:	46b8      	mov	r8, r7
 80077ce:	4633      	mov	r3, r6
 80077d0:	461e      	mov	r6, r3
 80077d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077d6:	2a39      	cmp	r2, #57	@ 0x39
 80077d8:	d106      	bne.n	80077e8 <_dtoa_r+0x6d8>
 80077da:	459a      	cmp	sl, r3
 80077dc:	d1f8      	bne.n	80077d0 <_dtoa_r+0x6c0>
 80077de:	2230      	movs	r2, #48	@ 0x30
 80077e0:	f108 0801 	add.w	r8, r8, #1
 80077e4:	f88a 2000 	strb.w	r2, [sl]
 80077e8:	781a      	ldrb	r2, [r3, #0]
 80077ea:	3201      	adds	r2, #1
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	e7a0      	b.n	8007732 <_dtoa_r+0x622>
 80077f0:	4b6f      	ldr	r3, [pc, #444]	@ (80079b0 <_dtoa_r+0x8a0>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	f7f8 ff08 	bl	8000608 <__aeabi_dmul>
 80077f8:	2200      	movs	r2, #0
 80077fa:	2300      	movs	r3, #0
 80077fc:	4604      	mov	r4, r0
 80077fe:	460d      	mov	r5, r1
 8007800:	f7f9 f96a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007804:	2800      	cmp	r0, #0
 8007806:	d09f      	beq.n	8007748 <_dtoa_r+0x638>
 8007808:	e7d1      	b.n	80077ae <_dtoa_r+0x69e>
 800780a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800780c:	2a00      	cmp	r2, #0
 800780e:	f000 80ea 	beq.w	80079e6 <_dtoa_r+0x8d6>
 8007812:	9a07      	ldr	r2, [sp, #28]
 8007814:	2a01      	cmp	r2, #1
 8007816:	f300 80cd 	bgt.w	80079b4 <_dtoa_r+0x8a4>
 800781a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800781c:	2a00      	cmp	r2, #0
 800781e:	f000 80c1 	beq.w	80079a4 <_dtoa_r+0x894>
 8007822:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007826:	9c08      	ldr	r4, [sp, #32]
 8007828:	9e00      	ldr	r6, [sp, #0]
 800782a:	9a00      	ldr	r2, [sp, #0]
 800782c:	441a      	add	r2, r3
 800782e:	9200      	str	r2, [sp, #0]
 8007830:	9a06      	ldr	r2, [sp, #24]
 8007832:	2101      	movs	r1, #1
 8007834:	441a      	add	r2, r3
 8007836:	4648      	mov	r0, r9
 8007838:	9206      	str	r2, [sp, #24]
 800783a:	f000 fc2d 	bl	8008098 <__i2b>
 800783e:	4605      	mov	r5, r0
 8007840:	b166      	cbz	r6, 800785c <_dtoa_r+0x74c>
 8007842:	9b06      	ldr	r3, [sp, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	dd09      	ble.n	800785c <_dtoa_r+0x74c>
 8007848:	42b3      	cmp	r3, r6
 800784a:	9a00      	ldr	r2, [sp, #0]
 800784c:	bfa8      	it	ge
 800784e:	4633      	movge	r3, r6
 8007850:	1ad2      	subs	r2, r2, r3
 8007852:	9200      	str	r2, [sp, #0]
 8007854:	9a06      	ldr	r2, [sp, #24]
 8007856:	1af6      	subs	r6, r6, r3
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	9306      	str	r3, [sp, #24]
 800785c:	9b08      	ldr	r3, [sp, #32]
 800785e:	b30b      	cbz	r3, 80078a4 <_dtoa_r+0x794>
 8007860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 80c6 	beq.w	80079f4 <_dtoa_r+0x8e4>
 8007868:	2c00      	cmp	r4, #0
 800786a:	f000 80c0 	beq.w	80079ee <_dtoa_r+0x8de>
 800786e:	4629      	mov	r1, r5
 8007870:	4622      	mov	r2, r4
 8007872:	4648      	mov	r0, r9
 8007874:	f000 fcc8 	bl	8008208 <__pow5mult>
 8007878:	9a02      	ldr	r2, [sp, #8]
 800787a:	4601      	mov	r1, r0
 800787c:	4605      	mov	r5, r0
 800787e:	4648      	mov	r0, r9
 8007880:	f000 fc20 	bl	80080c4 <__multiply>
 8007884:	9902      	ldr	r1, [sp, #8]
 8007886:	4680      	mov	r8, r0
 8007888:	4648      	mov	r0, r9
 800788a:	f000 fb51 	bl	8007f30 <_Bfree>
 800788e:	9b08      	ldr	r3, [sp, #32]
 8007890:	1b1b      	subs	r3, r3, r4
 8007892:	9308      	str	r3, [sp, #32]
 8007894:	f000 80b1 	beq.w	80079fa <_dtoa_r+0x8ea>
 8007898:	9a08      	ldr	r2, [sp, #32]
 800789a:	4641      	mov	r1, r8
 800789c:	4648      	mov	r0, r9
 800789e:	f000 fcb3 	bl	8008208 <__pow5mult>
 80078a2:	9002      	str	r0, [sp, #8]
 80078a4:	2101      	movs	r1, #1
 80078a6:	4648      	mov	r0, r9
 80078a8:	f000 fbf6 	bl	8008098 <__i2b>
 80078ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078ae:	4604      	mov	r4, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 81d8 	beq.w	8007c66 <_dtoa_r+0xb56>
 80078b6:	461a      	mov	r2, r3
 80078b8:	4601      	mov	r1, r0
 80078ba:	4648      	mov	r0, r9
 80078bc:	f000 fca4 	bl	8008208 <__pow5mult>
 80078c0:	9b07      	ldr	r3, [sp, #28]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	4604      	mov	r4, r0
 80078c6:	f300 809f 	bgt.w	8007a08 <_dtoa_r+0x8f8>
 80078ca:	9b04      	ldr	r3, [sp, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f040 8097 	bne.w	8007a00 <_dtoa_r+0x8f0>
 80078d2:	9b05      	ldr	r3, [sp, #20]
 80078d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f040 8093 	bne.w	8007a04 <_dtoa_r+0x8f4>
 80078de:	9b05      	ldr	r3, [sp, #20]
 80078e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078e4:	0d1b      	lsrs	r3, r3, #20
 80078e6:	051b      	lsls	r3, r3, #20
 80078e8:	b133      	cbz	r3, 80078f8 <_dtoa_r+0x7e8>
 80078ea:	9b00      	ldr	r3, [sp, #0]
 80078ec:	3301      	adds	r3, #1
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	9b06      	ldr	r3, [sp, #24]
 80078f2:	3301      	adds	r3, #1
 80078f4:	9306      	str	r3, [sp, #24]
 80078f6:	2301      	movs	r3, #1
 80078f8:	9308      	str	r3, [sp, #32]
 80078fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 81b8 	beq.w	8007c72 <_dtoa_r+0xb62>
 8007902:	6923      	ldr	r3, [r4, #16]
 8007904:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007908:	6918      	ldr	r0, [r3, #16]
 800790a:	f000 fb79 	bl	8008000 <__hi0bits>
 800790e:	f1c0 0020 	rsb	r0, r0, #32
 8007912:	9b06      	ldr	r3, [sp, #24]
 8007914:	4418      	add	r0, r3
 8007916:	f010 001f 	ands.w	r0, r0, #31
 800791a:	f000 8082 	beq.w	8007a22 <_dtoa_r+0x912>
 800791e:	f1c0 0320 	rsb	r3, r0, #32
 8007922:	2b04      	cmp	r3, #4
 8007924:	dd73      	ble.n	8007a0e <_dtoa_r+0x8fe>
 8007926:	9b00      	ldr	r3, [sp, #0]
 8007928:	f1c0 001c 	rsb	r0, r0, #28
 800792c:	4403      	add	r3, r0
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	9b06      	ldr	r3, [sp, #24]
 8007932:	4403      	add	r3, r0
 8007934:	4406      	add	r6, r0
 8007936:	9306      	str	r3, [sp, #24]
 8007938:	9b00      	ldr	r3, [sp, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	dd05      	ble.n	800794a <_dtoa_r+0x83a>
 800793e:	9902      	ldr	r1, [sp, #8]
 8007940:	461a      	mov	r2, r3
 8007942:	4648      	mov	r0, r9
 8007944:	f000 fcba 	bl	80082bc <__lshift>
 8007948:	9002      	str	r0, [sp, #8]
 800794a:	9b06      	ldr	r3, [sp, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	dd05      	ble.n	800795c <_dtoa_r+0x84c>
 8007950:	4621      	mov	r1, r4
 8007952:	461a      	mov	r2, r3
 8007954:	4648      	mov	r0, r9
 8007956:	f000 fcb1 	bl	80082bc <__lshift>
 800795a:	4604      	mov	r4, r0
 800795c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800795e:	2b00      	cmp	r3, #0
 8007960:	d061      	beq.n	8007a26 <_dtoa_r+0x916>
 8007962:	9802      	ldr	r0, [sp, #8]
 8007964:	4621      	mov	r1, r4
 8007966:	f000 fd15 	bl	8008394 <__mcmp>
 800796a:	2800      	cmp	r0, #0
 800796c:	da5b      	bge.n	8007a26 <_dtoa_r+0x916>
 800796e:	2300      	movs	r3, #0
 8007970:	9902      	ldr	r1, [sp, #8]
 8007972:	220a      	movs	r2, #10
 8007974:	4648      	mov	r0, r9
 8007976:	f000 fafd 	bl	8007f74 <__multadd>
 800797a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800797c:	9002      	str	r0, [sp, #8]
 800797e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 8177 	beq.w	8007c76 <_dtoa_r+0xb66>
 8007988:	4629      	mov	r1, r5
 800798a:	2300      	movs	r3, #0
 800798c:	220a      	movs	r2, #10
 800798e:	4648      	mov	r0, r9
 8007990:	f000 faf0 	bl	8007f74 <__multadd>
 8007994:	f1bb 0f00 	cmp.w	fp, #0
 8007998:	4605      	mov	r5, r0
 800799a:	dc6f      	bgt.n	8007a7c <_dtoa_r+0x96c>
 800799c:	9b07      	ldr	r3, [sp, #28]
 800799e:	2b02      	cmp	r3, #2
 80079a0:	dc49      	bgt.n	8007a36 <_dtoa_r+0x926>
 80079a2:	e06b      	b.n	8007a7c <_dtoa_r+0x96c>
 80079a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80079a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80079aa:	e73c      	b.n	8007826 <_dtoa_r+0x716>
 80079ac:	3fe00000 	.word	0x3fe00000
 80079b0:	40240000 	.word	0x40240000
 80079b4:	9b03      	ldr	r3, [sp, #12]
 80079b6:	1e5c      	subs	r4, r3, #1
 80079b8:	9b08      	ldr	r3, [sp, #32]
 80079ba:	42a3      	cmp	r3, r4
 80079bc:	db09      	blt.n	80079d2 <_dtoa_r+0x8c2>
 80079be:	1b1c      	subs	r4, r3, r4
 80079c0:	9b03      	ldr	r3, [sp, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f6bf af30 	bge.w	8007828 <_dtoa_r+0x718>
 80079c8:	9b00      	ldr	r3, [sp, #0]
 80079ca:	9a03      	ldr	r2, [sp, #12]
 80079cc:	1a9e      	subs	r6, r3, r2
 80079ce:	2300      	movs	r3, #0
 80079d0:	e72b      	b.n	800782a <_dtoa_r+0x71a>
 80079d2:	9b08      	ldr	r3, [sp, #32]
 80079d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80079d6:	9408      	str	r4, [sp, #32]
 80079d8:	1ae3      	subs	r3, r4, r3
 80079da:	441a      	add	r2, r3
 80079dc:	9e00      	ldr	r6, [sp, #0]
 80079de:	9b03      	ldr	r3, [sp, #12]
 80079e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80079e2:	2400      	movs	r4, #0
 80079e4:	e721      	b.n	800782a <_dtoa_r+0x71a>
 80079e6:	9c08      	ldr	r4, [sp, #32]
 80079e8:	9e00      	ldr	r6, [sp, #0]
 80079ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80079ec:	e728      	b.n	8007840 <_dtoa_r+0x730>
 80079ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80079f2:	e751      	b.n	8007898 <_dtoa_r+0x788>
 80079f4:	9a08      	ldr	r2, [sp, #32]
 80079f6:	9902      	ldr	r1, [sp, #8]
 80079f8:	e750      	b.n	800789c <_dtoa_r+0x78c>
 80079fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80079fe:	e751      	b.n	80078a4 <_dtoa_r+0x794>
 8007a00:	2300      	movs	r3, #0
 8007a02:	e779      	b.n	80078f8 <_dtoa_r+0x7e8>
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	e777      	b.n	80078f8 <_dtoa_r+0x7e8>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	9308      	str	r3, [sp, #32]
 8007a0c:	e779      	b.n	8007902 <_dtoa_r+0x7f2>
 8007a0e:	d093      	beq.n	8007938 <_dtoa_r+0x828>
 8007a10:	9a00      	ldr	r2, [sp, #0]
 8007a12:	331c      	adds	r3, #28
 8007a14:	441a      	add	r2, r3
 8007a16:	9200      	str	r2, [sp, #0]
 8007a18:	9a06      	ldr	r2, [sp, #24]
 8007a1a:	441a      	add	r2, r3
 8007a1c:	441e      	add	r6, r3
 8007a1e:	9206      	str	r2, [sp, #24]
 8007a20:	e78a      	b.n	8007938 <_dtoa_r+0x828>
 8007a22:	4603      	mov	r3, r0
 8007a24:	e7f4      	b.n	8007a10 <_dtoa_r+0x900>
 8007a26:	9b03      	ldr	r3, [sp, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	46b8      	mov	r8, r7
 8007a2c:	dc20      	bgt.n	8007a70 <_dtoa_r+0x960>
 8007a2e:	469b      	mov	fp, r3
 8007a30:	9b07      	ldr	r3, [sp, #28]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	dd1e      	ble.n	8007a74 <_dtoa_r+0x964>
 8007a36:	f1bb 0f00 	cmp.w	fp, #0
 8007a3a:	f47f adb1 	bne.w	80075a0 <_dtoa_r+0x490>
 8007a3e:	4621      	mov	r1, r4
 8007a40:	465b      	mov	r3, fp
 8007a42:	2205      	movs	r2, #5
 8007a44:	4648      	mov	r0, r9
 8007a46:	f000 fa95 	bl	8007f74 <__multadd>
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	9802      	ldr	r0, [sp, #8]
 8007a50:	f000 fca0 	bl	8008394 <__mcmp>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	f77f ada3 	ble.w	80075a0 <_dtoa_r+0x490>
 8007a5a:	4656      	mov	r6, sl
 8007a5c:	2331      	movs	r3, #49	@ 0x31
 8007a5e:	f806 3b01 	strb.w	r3, [r6], #1
 8007a62:	f108 0801 	add.w	r8, r8, #1
 8007a66:	e59f      	b.n	80075a8 <_dtoa_r+0x498>
 8007a68:	9c03      	ldr	r4, [sp, #12]
 8007a6a:	46b8      	mov	r8, r7
 8007a6c:	4625      	mov	r5, r4
 8007a6e:	e7f4      	b.n	8007a5a <_dtoa_r+0x94a>
 8007a70:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8101 	beq.w	8007c7e <_dtoa_r+0xb6e>
 8007a7c:	2e00      	cmp	r6, #0
 8007a7e:	dd05      	ble.n	8007a8c <_dtoa_r+0x97c>
 8007a80:	4629      	mov	r1, r5
 8007a82:	4632      	mov	r2, r6
 8007a84:	4648      	mov	r0, r9
 8007a86:	f000 fc19 	bl	80082bc <__lshift>
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	9b08      	ldr	r3, [sp, #32]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d05c      	beq.n	8007b4c <_dtoa_r+0xa3c>
 8007a92:	6869      	ldr	r1, [r5, #4]
 8007a94:	4648      	mov	r0, r9
 8007a96:	f000 fa0b 	bl	8007eb0 <_Balloc>
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	b928      	cbnz	r0, 8007aaa <_dtoa_r+0x99a>
 8007a9e:	4b82      	ldr	r3, [pc, #520]	@ (8007ca8 <_dtoa_r+0xb98>)
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007aa6:	f7ff bb4a 	b.w	800713e <_dtoa_r+0x2e>
 8007aaa:	692a      	ldr	r2, [r5, #16]
 8007aac:	3202      	adds	r2, #2
 8007aae:	0092      	lsls	r2, r2, #2
 8007ab0:	f105 010c 	add.w	r1, r5, #12
 8007ab4:	300c      	adds	r0, #12
 8007ab6:	f000 ffa3 	bl	8008a00 <memcpy>
 8007aba:	2201      	movs	r2, #1
 8007abc:	4631      	mov	r1, r6
 8007abe:	4648      	mov	r0, r9
 8007ac0:	f000 fbfc 	bl	80082bc <__lshift>
 8007ac4:	f10a 0301 	add.w	r3, sl, #1
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	eb0a 030b 	add.w	r3, sl, fp
 8007ace:	9308      	str	r3, [sp, #32]
 8007ad0:	9b04      	ldr	r3, [sp, #16]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	462f      	mov	r7, r5
 8007ad8:	9306      	str	r3, [sp, #24]
 8007ada:	4605      	mov	r5, r0
 8007adc:	9b00      	ldr	r3, [sp, #0]
 8007ade:	9802      	ldr	r0, [sp, #8]
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8007ae6:	f7ff fa88 	bl	8006ffa <quorem>
 8007aea:	4603      	mov	r3, r0
 8007aec:	3330      	adds	r3, #48	@ 0x30
 8007aee:	9003      	str	r0, [sp, #12]
 8007af0:	4639      	mov	r1, r7
 8007af2:	9802      	ldr	r0, [sp, #8]
 8007af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af6:	f000 fc4d 	bl	8008394 <__mcmp>
 8007afa:	462a      	mov	r2, r5
 8007afc:	9004      	str	r0, [sp, #16]
 8007afe:	4621      	mov	r1, r4
 8007b00:	4648      	mov	r0, r9
 8007b02:	f000 fc63 	bl	80083cc <__mdiff>
 8007b06:	68c2      	ldr	r2, [r0, #12]
 8007b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	bb02      	cbnz	r2, 8007b50 <_dtoa_r+0xa40>
 8007b0e:	4601      	mov	r1, r0
 8007b10:	9802      	ldr	r0, [sp, #8]
 8007b12:	f000 fc3f 	bl	8008394 <__mcmp>
 8007b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b18:	4602      	mov	r2, r0
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4648      	mov	r0, r9
 8007b1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b20:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b22:	f000 fa05 	bl	8007f30 <_Bfree>
 8007b26:	9b07      	ldr	r3, [sp, #28]
 8007b28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b2a:	9e00      	ldr	r6, [sp, #0]
 8007b2c:	ea42 0103 	orr.w	r1, r2, r3
 8007b30:	9b06      	ldr	r3, [sp, #24]
 8007b32:	4319      	orrs	r1, r3
 8007b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b36:	d10d      	bne.n	8007b54 <_dtoa_r+0xa44>
 8007b38:	2b39      	cmp	r3, #57	@ 0x39
 8007b3a:	d027      	beq.n	8007b8c <_dtoa_r+0xa7c>
 8007b3c:	9a04      	ldr	r2, [sp, #16]
 8007b3e:	2a00      	cmp	r2, #0
 8007b40:	dd01      	ble.n	8007b46 <_dtoa_r+0xa36>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	3331      	adds	r3, #49	@ 0x31
 8007b46:	f88b 3000 	strb.w	r3, [fp]
 8007b4a:	e52e      	b.n	80075aa <_dtoa_r+0x49a>
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	e7b9      	b.n	8007ac4 <_dtoa_r+0x9b4>
 8007b50:	2201      	movs	r2, #1
 8007b52:	e7e2      	b.n	8007b1a <_dtoa_r+0xa0a>
 8007b54:	9904      	ldr	r1, [sp, #16]
 8007b56:	2900      	cmp	r1, #0
 8007b58:	db04      	blt.n	8007b64 <_dtoa_r+0xa54>
 8007b5a:	9807      	ldr	r0, [sp, #28]
 8007b5c:	4301      	orrs	r1, r0
 8007b5e:	9806      	ldr	r0, [sp, #24]
 8007b60:	4301      	orrs	r1, r0
 8007b62:	d120      	bne.n	8007ba6 <_dtoa_r+0xa96>
 8007b64:	2a00      	cmp	r2, #0
 8007b66:	ddee      	ble.n	8007b46 <_dtoa_r+0xa36>
 8007b68:	9902      	ldr	r1, [sp, #8]
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	4648      	mov	r0, r9
 8007b70:	f000 fba4 	bl	80082bc <__lshift>
 8007b74:	4621      	mov	r1, r4
 8007b76:	9002      	str	r0, [sp, #8]
 8007b78:	f000 fc0c 	bl	8008394 <__mcmp>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	9b00      	ldr	r3, [sp, #0]
 8007b80:	dc02      	bgt.n	8007b88 <_dtoa_r+0xa78>
 8007b82:	d1e0      	bne.n	8007b46 <_dtoa_r+0xa36>
 8007b84:	07da      	lsls	r2, r3, #31
 8007b86:	d5de      	bpl.n	8007b46 <_dtoa_r+0xa36>
 8007b88:	2b39      	cmp	r3, #57	@ 0x39
 8007b8a:	d1da      	bne.n	8007b42 <_dtoa_r+0xa32>
 8007b8c:	2339      	movs	r3, #57	@ 0x39
 8007b8e:	f88b 3000 	strb.w	r3, [fp]
 8007b92:	4633      	mov	r3, r6
 8007b94:	461e      	mov	r6, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b9c:	2a39      	cmp	r2, #57	@ 0x39
 8007b9e:	d04e      	beq.n	8007c3e <_dtoa_r+0xb2e>
 8007ba0:	3201      	adds	r2, #1
 8007ba2:	701a      	strb	r2, [r3, #0]
 8007ba4:	e501      	b.n	80075aa <_dtoa_r+0x49a>
 8007ba6:	2a00      	cmp	r2, #0
 8007ba8:	dd03      	ble.n	8007bb2 <_dtoa_r+0xaa2>
 8007baa:	2b39      	cmp	r3, #57	@ 0x39
 8007bac:	d0ee      	beq.n	8007b8c <_dtoa_r+0xa7c>
 8007bae:	3301      	adds	r3, #1
 8007bb0:	e7c9      	b.n	8007b46 <_dtoa_r+0xa36>
 8007bb2:	9a00      	ldr	r2, [sp, #0]
 8007bb4:	9908      	ldr	r1, [sp, #32]
 8007bb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007bba:	428a      	cmp	r2, r1
 8007bbc:	d028      	beq.n	8007c10 <_dtoa_r+0xb00>
 8007bbe:	9902      	ldr	r1, [sp, #8]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	220a      	movs	r2, #10
 8007bc4:	4648      	mov	r0, r9
 8007bc6:	f000 f9d5 	bl	8007f74 <__multadd>
 8007bca:	42af      	cmp	r7, r5
 8007bcc:	9002      	str	r0, [sp, #8]
 8007bce:	f04f 0300 	mov.w	r3, #0
 8007bd2:	f04f 020a 	mov.w	r2, #10
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	4648      	mov	r0, r9
 8007bda:	d107      	bne.n	8007bec <_dtoa_r+0xadc>
 8007bdc:	f000 f9ca 	bl	8007f74 <__multadd>
 8007be0:	4607      	mov	r7, r0
 8007be2:	4605      	mov	r5, r0
 8007be4:	9b00      	ldr	r3, [sp, #0]
 8007be6:	3301      	adds	r3, #1
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	e777      	b.n	8007adc <_dtoa_r+0x9cc>
 8007bec:	f000 f9c2 	bl	8007f74 <__multadd>
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4607      	mov	r7, r0
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	220a      	movs	r2, #10
 8007bf8:	4648      	mov	r0, r9
 8007bfa:	f000 f9bb 	bl	8007f74 <__multadd>
 8007bfe:	4605      	mov	r5, r0
 8007c00:	e7f0      	b.n	8007be4 <_dtoa_r+0xad4>
 8007c02:	f1bb 0f00 	cmp.w	fp, #0
 8007c06:	bfcc      	ite	gt
 8007c08:	465e      	movgt	r6, fp
 8007c0a:	2601      	movle	r6, #1
 8007c0c:	4456      	add	r6, sl
 8007c0e:	2700      	movs	r7, #0
 8007c10:	9902      	ldr	r1, [sp, #8]
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	2201      	movs	r2, #1
 8007c16:	4648      	mov	r0, r9
 8007c18:	f000 fb50 	bl	80082bc <__lshift>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	9002      	str	r0, [sp, #8]
 8007c20:	f000 fbb8 	bl	8008394 <__mcmp>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	dcb4      	bgt.n	8007b92 <_dtoa_r+0xa82>
 8007c28:	d102      	bne.n	8007c30 <_dtoa_r+0xb20>
 8007c2a:	9b00      	ldr	r3, [sp, #0]
 8007c2c:	07db      	lsls	r3, r3, #31
 8007c2e:	d4b0      	bmi.n	8007b92 <_dtoa_r+0xa82>
 8007c30:	4633      	mov	r3, r6
 8007c32:	461e      	mov	r6, r3
 8007c34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c38:	2a30      	cmp	r2, #48	@ 0x30
 8007c3a:	d0fa      	beq.n	8007c32 <_dtoa_r+0xb22>
 8007c3c:	e4b5      	b.n	80075aa <_dtoa_r+0x49a>
 8007c3e:	459a      	cmp	sl, r3
 8007c40:	d1a8      	bne.n	8007b94 <_dtoa_r+0xa84>
 8007c42:	2331      	movs	r3, #49	@ 0x31
 8007c44:	f108 0801 	add.w	r8, r8, #1
 8007c48:	f88a 3000 	strb.w	r3, [sl]
 8007c4c:	e4ad      	b.n	80075aa <_dtoa_r+0x49a>
 8007c4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007cac <_dtoa_r+0xb9c>
 8007c54:	b11b      	cbz	r3, 8007c5e <_dtoa_r+0xb4e>
 8007c56:	f10a 0308 	add.w	r3, sl, #8
 8007c5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	4650      	mov	r0, sl
 8007c60:	b017      	add	sp, #92	@ 0x5c
 8007c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c66:	9b07      	ldr	r3, [sp, #28]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	f77f ae2e 	ble.w	80078ca <_dtoa_r+0x7ba>
 8007c6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c70:	9308      	str	r3, [sp, #32]
 8007c72:	2001      	movs	r0, #1
 8007c74:	e64d      	b.n	8007912 <_dtoa_r+0x802>
 8007c76:	f1bb 0f00 	cmp.w	fp, #0
 8007c7a:	f77f aed9 	ble.w	8007a30 <_dtoa_r+0x920>
 8007c7e:	4656      	mov	r6, sl
 8007c80:	9802      	ldr	r0, [sp, #8]
 8007c82:	4621      	mov	r1, r4
 8007c84:	f7ff f9b9 	bl	8006ffa <quorem>
 8007c88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007c8c:	f806 3b01 	strb.w	r3, [r6], #1
 8007c90:	eba6 020a 	sub.w	r2, r6, sl
 8007c94:	4593      	cmp	fp, r2
 8007c96:	ddb4      	ble.n	8007c02 <_dtoa_r+0xaf2>
 8007c98:	9902      	ldr	r1, [sp, #8]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	220a      	movs	r2, #10
 8007c9e:	4648      	mov	r0, r9
 8007ca0:	f000 f968 	bl	8007f74 <__multadd>
 8007ca4:	9002      	str	r0, [sp, #8]
 8007ca6:	e7eb      	b.n	8007c80 <_dtoa_r+0xb70>
 8007ca8:	0800a2a0 	.word	0x0800a2a0
 8007cac:	0800a224 	.word	0x0800a224

08007cb0 <_free_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	2900      	cmp	r1, #0
 8007cb6:	d041      	beq.n	8007d3c <_free_r+0x8c>
 8007cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cbc:	1f0c      	subs	r4, r1, #4
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bfb8      	it	lt
 8007cc2:	18e4      	addlt	r4, r4, r3
 8007cc4:	f000 f8e8 	bl	8007e98 <__malloc_lock>
 8007cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d40 <_free_r+0x90>)
 8007cca:	6813      	ldr	r3, [r2, #0]
 8007ccc:	b933      	cbnz	r3, 8007cdc <_free_r+0x2c>
 8007cce:	6063      	str	r3, [r4, #4]
 8007cd0:	6014      	str	r4, [r2, #0]
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cd8:	f000 b8e4 	b.w	8007ea4 <__malloc_unlock>
 8007cdc:	42a3      	cmp	r3, r4
 8007cde:	d908      	bls.n	8007cf2 <_free_r+0x42>
 8007ce0:	6820      	ldr	r0, [r4, #0]
 8007ce2:	1821      	adds	r1, r4, r0
 8007ce4:	428b      	cmp	r3, r1
 8007ce6:	bf01      	itttt	eq
 8007ce8:	6819      	ldreq	r1, [r3, #0]
 8007cea:	685b      	ldreq	r3, [r3, #4]
 8007cec:	1809      	addeq	r1, r1, r0
 8007cee:	6021      	streq	r1, [r4, #0]
 8007cf0:	e7ed      	b.n	8007cce <_free_r+0x1e>
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	b10b      	cbz	r3, 8007cfc <_free_r+0x4c>
 8007cf8:	42a3      	cmp	r3, r4
 8007cfa:	d9fa      	bls.n	8007cf2 <_free_r+0x42>
 8007cfc:	6811      	ldr	r1, [r2, #0]
 8007cfe:	1850      	adds	r0, r2, r1
 8007d00:	42a0      	cmp	r0, r4
 8007d02:	d10b      	bne.n	8007d1c <_free_r+0x6c>
 8007d04:	6820      	ldr	r0, [r4, #0]
 8007d06:	4401      	add	r1, r0
 8007d08:	1850      	adds	r0, r2, r1
 8007d0a:	4283      	cmp	r3, r0
 8007d0c:	6011      	str	r1, [r2, #0]
 8007d0e:	d1e0      	bne.n	8007cd2 <_free_r+0x22>
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	6053      	str	r3, [r2, #4]
 8007d16:	4408      	add	r0, r1
 8007d18:	6010      	str	r0, [r2, #0]
 8007d1a:	e7da      	b.n	8007cd2 <_free_r+0x22>
 8007d1c:	d902      	bls.n	8007d24 <_free_r+0x74>
 8007d1e:	230c      	movs	r3, #12
 8007d20:	602b      	str	r3, [r5, #0]
 8007d22:	e7d6      	b.n	8007cd2 <_free_r+0x22>
 8007d24:	6820      	ldr	r0, [r4, #0]
 8007d26:	1821      	adds	r1, r4, r0
 8007d28:	428b      	cmp	r3, r1
 8007d2a:	bf04      	itt	eq
 8007d2c:	6819      	ldreq	r1, [r3, #0]
 8007d2e:	685b      	ldreq	r3, [r3, #4]
 8007d30:	6063      	str	r3, [r4, #4]
 8007d32:	bf04      	itt	eq
 8007d34:	1809      	addeq	r1, r1, r0
 8007d36:	6021      	streq	r1, [r4, #0]
 8007d38:	6054      	str	r4, [r2, #4]
 8007d3a:	e7ca      	b.n	8007cd2 <_free_r+0x22>
 8007d3c:	bd38      	pop	{r3, r4, r5, pc}
 8007d3e:	bf00      	nop
 8007d40:	2000056c 	.word	0x2000056c

08007d44 <malloc>:
 8007d44:	4b02      	ldr	r3, [pc, #8]	@ (8007d50 <malloc+0xc>)
 8007d46:	4601      	mov	r1, r0
 8007d48:	6818      	ldr	r0, [r3, #0]
 8007d4a:	f000 b825 	b.w	8007d98 <_malloc_r>
 8007d4e:	bf00      	nop
 8007d50:	20000020 	.word	0x20000020

08007d54 <sbrk_aligned>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	4e0f      	ldr	r6, [pc, #60]	@ (8007d94 <sbrk_aligned+0x40>)
 8007d58:	460c      	mov	r4, r1
 8007d5a:	6831      	ldr	r1, [r6, #0]
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	b911      	cbnz	r1, 8007d66 <sbrk_aligned+0x12>
 8007d60:	f000 fe3e 	bl	80089e0 <_sbrk_r>
 8007d64:	6030      	str	r0, [r6, #0]
 8007d66:	4621      	mov	r1, r4
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f000 fe39 	bl	80089e0 <_sbrk_r>
 8007d6e:	1c43      	adds	r3, r0, #1
 8007d70:	d103      	bne.n	8007d7a <sbrk_aligned+0x26>
 8007d72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007d76:	4620      	mov	r0, r4
 8007d78:	bd70      	pop	{r4, r5, r6, pc}
 8007d7a:	1cc4      	adds	r4, r0, #3
 8007d7c:	f024 0403 	bic.w	r4, r4, #3
 8007d80:	42a0      	cmp	r0, r4
 8007d82:	d0f8      	beq.n	8007d76 <sbrk_aligned+0x22>
 8007d84:	1a21      	subs	r1, r4, r0
 8007d86:	4628      	mov	r0, r5
 8007d88:	f000 fe2a 	bl	80089e0 <_sbrk_r>
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d1f2      	bne.n	8007d76 <sbrk_aligned+0x22>
 8007d90:	e7ef      	b.n	8007d72 <sbrk_aligned+0x1e>
 8007d92:	bf00      	nop
 8007d94:	20000568 	.word	0x20000568

08007d98 <_malloc_r>:
 8007d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d9c:	1ccd      	adds	r5, r1, #3
 8007d9e:	f025 0503 	bic.w	r5, r5, #3
 8007da2:	3508      	adds	r5, #8
 8007da4:	2d0c      	cmp	r5, #12
 8007da6:	bf38      	it	cc
 8007da8:	250c      	movcc	r5, #12
 8007daa:	2d00      	cmp	r5, #0
 8007dac:	4606      	mov	r6, r0
 8007dae:	db01      	blt.n	8007db4 <_malloc_r+0x1c>
 8007db0:	42a9      	cmp	r1, r5
 8007db2:	d904      	bls.n	8007dbe <_malloc_r+0x26>
 8007db4:	230c      	movs	r3, #12
 8007db6:	6033      	str	r3, [r6, #0]
 8007db8:	2000      	movs	r0, #0
 8007dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e94 <_malloc_r+0xfc>
 8007dc2:	f000 f869 	bl	8007e98 <__malloc_lock>
 8007dc6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dca:	461c      	mov	r4, r3
 8007dcc:	bb44      	cbnz	r4, 8007e20 <_malloc_r+0x88>
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f7ff ffbf 	bl	8007d54 <sbrk_aligned>
 8007dd6:	1c43      	adds	r3, r0, #1
 8007dd8:	4604      	mov	r4, r0
 8007dda:	d158      	bne.n	8007e8e <_malloc_r+0xf6>
 8007ddc:	f8d8 4000 	ldr.w	r4, [r8]
 8007de0:	4627      	mov	r7, r4
 8007de2:	2f00      	cmp	r7, #0
 8007de4:	d143      	bne.n	8007e6e <_malloc_r+0xd6>
 8007de6:	2c00      	cmp	r4, #0
 8007de8:	d04b      	beq.n	8007e82 <_malloc_r+0xea>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	4639      	mov	r1, r7
 8007dee:	4630      	mov	r0, r6
 8007df0:	eb04 0903 	add.w	r9, r4, r3
 8007df4:	f000 fdf4 	bl	80089e0 <_sbrk_r>
 8007df8:	4581      	cmp	r9, r0
 8007dfa:	d142      	bne.n	8007e82 <_malloc_r+0xea>
 8007dfc:	6821      	ldr	r1, [r4, #0]
 8007dfe:	1a6d      	subs	r5, r5, r1
 8007e00:	4629      	mov	r1, r5
 8007e02:	4630      	mov	r0, r6
 8007e04:	f7ff ffa6 	bl	8007d54 <sbrk_aligned>
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d03a      	beq.n	8007e82 <_malloc_r+0xea>
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	442b      	add	r3, r5
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	f8d8 3000 	ldr.w	r3, [r8]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	bb62      	cbnz	r2, 8007e74 <_malloc_r+0xdc>
 8007e1a:	f8c8 7000 	str.w	r7, [r8]
 8007e1e:	e00f      	b.n	8007e40 <_malloc_r+0xa8>
 8007e20:	6822      	ldr	r2, [r4, #0]
 8007e22:	1b52      	subs	r2, r2, r5
 8007e24:	d420      	bmi.n	8007e68 <_malloc_r+0xd0>
 8007e26:	2a0b      	cmp	r2, #11
 8007e28:	d917      	bls.n	8007e5a <_malloc_r+0xc2>
 8007e2a:	1961      	adds	r1, r4, r5
 8007e2c:	42a3      	cmp	r3, r4
 8007e2e:	6025      	str	r5, [r4, #0]
 8007e30:	bf18      	it	ne
 8007e32:	6059      	strne	r1, [r3, #4]
 8007e34:	6863      	ldr	r3, [r4, #4]
 8007e36:	bf08      	it	eq
 8007e38:	f8c8 1000 	streq.w	r1, [r8]
 8007e3c:	5162      	str	r2, [r4, r5]
 8007e3e:	604b      	str	r3, [r1, #4]
 8007e40:	4630      	mov	r0, r6
 8007e42:	f000 f82f 	bl	8007ea4 <__malloc_unlock>
 8007e46:	f104 000b 	add.w	r0, r4, #11
 8007e4a:	1d23      	adds	r3, r4, #4
 8007e4c:	f020 0007 	bic.w	r0, r0, #7
 8007e50:	1ac2      	subs	r2, r0, r3
 8007e52:	bf1c      	itt	ne
 8007e54:	1a1b      	subne	r3, r3, r0
 8007e56:	50a3      	strne	r3, [r4, r2]
 8007e58:	e7af      	b.n	8007dba <_malloc_r+0x22>
 8007e5a:	6862      	ldr	r2, [r4, #4]
 8007e5c:	42a3      	cmp	r3, r4
 8007e5e:	bf0c      	ite	eq
 8007e60:	f8c8 2000 	streq.w	r2, [r8]
 8007e64:	605a      	strne	r2, [r3, #4]
 8007e66:	e7eb      	b.n	8007e40 <_malloc_r+0xa8>
 8007e68:	4623      	mov	r3, r4
 8007e6a:	6864      	ldr	r4, [r4, #4]
 8007e6c:	e7ae      	b.n	8007dcc <_malloc_r+0x34>
 8007e6e:	463c      	mov	r4, r7
 8007e70:	687f      	ldr	r7, [r7, #4]
 8007e72:	e7b6      	b.n	8007de2 <_malloc_r+0x4a>
 8007e74:	461a      	mov	r2, r3
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	d1fb      	bne.n	8007e74 <_malloc_r+0xdc>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	6053      	str	r3, [r2, #4]
 8007e80:	e7de      	b.n	8007e40 <_malloc_r+0xa8>
 8007e82:	230c      	movs	r3, #12
 8007e84:	6033      	str	r3, [r6, #0]
 8007e86:	4630      	mov	r0, r6
 8007e88:	f000 f80c 	bl	8007ea4 <__malloc_unlock>
 8007e8c:	e794      	b.n	8007db8 <_malloc_r+0x20>
 8007e8e:	6005      	str	r5, [r0, #0]
 8007e90:	e7d6      	b.n	8007e40 <_malloc_r+0xa8>
 8007e92:	bf00      	nop
 8007e94:	2000056c 	.word	0x2000056c

08007e98 <__malloc_lock>:
 8007e98:	4801      	ldr	r0, [pc, #4]	@ (8007ea0 <__malloc_lock+0x8>)
 8007e9a:	f7ff b8ac 	b.w	8006ff6 <__retarget_lock_acquire_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	20000564 	.word	0x20000564

08007ea4 <__malloc_unlock>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	@ (8007eac <__malloc_unlock+0x8>)
 8007ea6:	f7ff b8a7 	b.w	8006ff8 <__retarget_lock_release_recursive>
 8007eaa:	bf00      	nop
 8007eac:	20000564 	.word	0x20000564

08007eb0 <_Balloc>:
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	69c6      	ldr	r6, [r0, #28]
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	460d      	mov	r5, r1
 8007eb8:	b976      	cbnz	r6, 8007ed8 <_Balloc+0x28>
 8007eba:	2010      	movs	r0, #16
 8007ebc:	f7ff ff42 	bl	8007d44 <malloc>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	61e0      	str	r0, [r4, #28]
 8007ec4:	b920      	cbnz	r0, 8007ed0 <_Balloc+0x20>
 8007ec6:	4b18      	ldr	r3, [pc, #96]	@ (8007f28 <_Balloc+0x78>)
 8007ec8:	4818      	ldr	r0, [pc, #96]	@ (8007f2c <_Balloc+0x7c>)
 8007eca:	216b      	movs	r1, #107	@ 0x6b
 8007ecc:	f000 fda6 	bl	8008a1c <__assert_func>
 8007ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ed4:	6006      	str	r6, [r0, #0]
 8007ed6:	60c6      	str	r6, [r0, #12]
 8007ed8:	69e6      	ldr	r6, [r4, #28]
 8007eda:	68f3      	ldr	r3, [r6, #12]
 8007edc:	b183      	cbz	r3, 8007f00 <_Balloc+0x50>
 8007ede:	69e3      	ldr	r3, [r4, #28]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ee6:	b9b8      	cbnz	r0, 8007f18 <_Balloc+0x68>
 8007ee8:	2101      	movs	r1, #1
 8007eea:	fa01 f605 	lsl.w	r6, r1, r5
 8007eee:	1d72      	adds	r2, r6, #5
 8007ef0:	0092      	lsls	r2, r2, #2
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 fdb0 	bl	8008a58 <_calloc_r>
 8007ef8:	b160      	cbz	r0, 8007f14 <_Balloc+0x64>
 8007efa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007efe:	e00e      	b.n	8007f1e <_Balloc+0x6e>
 8007f00:	2221      	movs	r2, #33	@ 0x21
 8007f02:	2104      	movs	r1, #4
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 fda7 	bl	8008a58 <_calloc_r>
 8007f0a:	69e3      	ldr	r3, [r4, #28]
 8007f0c:	60f0      	str	r0, [r6, #12]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e4      	bne.n	8007ede <_Balloc+0x2e>
 8007f14:	2000      	movs	r0, #0
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
 8007f18:	6802      	ldr	r2, [r0, #0]
 8007f1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f24:	e7f7      	b.n	8007f16 <_Balloc+0x66>
 8007f26:	bf00      	nop
 8007f28:	0800a231 	.word	0x0800a231
 8007f2c:	0800a2b1 	.word	0x0800a2b1

08007f30 <_Bfree>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	69c6      	ldr	r6, [r0, #28]
 8007f34:	4605      	mov	r5, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	b976      	cbnz	r6, 8007f58 <_Bfree+0x28>
 8007f3a:	2010      	movs	r0, #16
 8007f3c:	f7ff ff02 	bl	8007d44 <malloc>
 8007f40:	4602      	mov	r2, r0
 8007f42:	61e8      	str	r0, [r5, #28]
 8007f44:	b920      	cbnz	r0, 8007f50 <_Bfree+0x20>
 8007f46:	4b09      	ldr	r3, [pc, #36]	@ (8007f6c <_Bfree+0x3c>)
 8007f48:	4809      	ldr	r0, [pc, #36]	@ (8007f70 <_Bfree+0x40>)
 8007f4a:	218f      	movs	r1, #143	@ 0x8f
 8007f4c:	f000 fd66 	bl	8008a1c <__assert_func>
 8007f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f54:	6006      	str	r6, [r0, #0]
 8007f56:	60c6      	str	r6, [r0, #12]
 8007f58:	b13c      	cbz	r4, 8007f6a <_Bfree+0x3a>
 8007f5a:	69eb      	ldr	r3, [r5, #28]
 8007f5c:	6862      	ldr	r2, [r4, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f64:	6021      	str	r1, [r4, #0]
 8007f66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f6a:	bd70      	pop	{r4, r5, r6, pc}
 8007f6c:	0800a231 	.word	0x0800a231
 8007f70:	0800a2b1 	.word	0x0800a2b1

08007f74 <__multadd>:
 8007f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f78:	690d      	ldr	r5, [r1, #16]
 8007f7a:	4607      	mov	r7, r0
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	461e      	mov	r6, r3
 8007f80:	f101 0c14 	add.w	ip, r1, #20
 8007f84:	2000      	movs	r0, #0
 8007f86:	f8dc 3000 	ldr.w	r3, [ip]
 8007f8a:	b299      	uxth	r1, r3
 8007f8c:	fb02 6101 	mla	r1, r2, r1, r6
 8007f90:	0c1e      	lsrs	r6, r3, #16
 8007f92:	0c0b      	lsrs	r3, r1, #16
 8007f94:	fb02 3306 	mla	r3, r2, r6, r3
 8007f98:	b289      	uxth	r1, r1
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fa0:	4285      	cmp	r5, r0
 8007fa2:	f84c 1b04 	str.w	r1, [ip], #4
 8007fa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007faa:	dcec      	bgt.n	8007f86 <__multadd+0x12>
 8007fac:	b30e      	cbz	r6, 8007ff2 <__multadd+0x7e>
 8007fae:	68a3      	ldr	r3, [r4, #8]
 8007fb0:	42ab      	cmp	r3, r5
 8007fb2:	dc19      	bgt.n	8007fe8 <__multadd+0x74>
 8007fb4:	6861      	ldr	r1, [r4, #4]
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	3101      	adds	r1, #1
 8007fba:	f7ff ff79 	bl	8007eb0 <_Balloc>
 8007fbe:	4680      	mov	r8, r0
 8007fc0:	b928      	cbnz	r0, 8007fce <__multadd+0x5a>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff8 <__multadd+0x84>)
 8007fc6:	480d      	ldr	r0, [pc, #52]	@ (8007ffc <__multadd+0x88>)
 8007fc8:	21ba      	movs	r1, #186	@ 0xba
 8007fca:	f000 fd27 	bl	8008a1c <__assert_func>
 8007fce:	6922      	ldr	r2, [r4, #16]
 8007fd0:	3202      	adds	r2, #2
 8007fd2:	f104 010c 	add.w	r1, r4, #12
 8007fd6:	0092      	lsls	r2, r2, #2
 8007fd8:	300c      	adds	r0, #12
 8007fda:	f000 fd11 	bl	8008a00 <memcpy>
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	f7ff ffa5 	bl	8007f30 <_Bfree>
 8007fe6:	4644      	mov	r4, r8
 8007fe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fec:	3501      	adds	r5, #1
 8007fee:	615e      	str	r6, [r3, #20]
 8007ff0:	6125      	str	r5, [r4, #16]
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff8:	0800a2a0 	.word	0x0800a2a0
 8007ffc:	0800a2b1 	.word	0x0800a2b1

08008000 <__hi0bits>:
 8008000:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008004:	4603      	mov	r3, r0
 8008006:	bf36      	itet	cc
 8008008:	0403      	lslcc	r3, r0, #16
 800800a:	2000      	movcs	r0, #0
 800800c:	2010      	movcc	r0, #16
 800800e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008012:	bf3c      	itt	cc
 8008014:	021b      	lslcc	r3, r3, #8
 8008016:	3008      	addcc	r0, #8
 8008018:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800801c:	bf3c      	itt	cc
 800801e:	011b      	lslcc	r3, r3, #4
 8008020:	3004      	addcc	r0, #4
 8008022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008026:	bf3c      	itt	cc
 8008028:	009b      	lslcc	r3, r3, #2
 800802a:	3002      	addcc	r0, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	db05      	blt.n	800803c <__hi0bits+0x3c>
 8008030:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008034:	f100 0001 	add.w	r0, r0, #1
 8008038:	bf08      	it	eq
 800803a:	2020      	moveq	r0, #32
 800803c:	4770      	bx	lr

0800803e <__lo0bits>:
 800803e:	6803      	ldr	r3, [r0, #0]
 8008040:	4602      	mov	r2, r0
 8008042:	f013 0007 	ands.w	r0, r3, #7
 8008046:	d00b      	beq.n	8008060 <__lo0bits+0x22>
 8008048:	07d9      	lsls	r1, r3, #31
 800804a:	d421      	bmi.n	8008090 <__lo0bits+0x52>
 800804c:	0798      	lsls	r0, r3, #30
 800804e:	bf49      	itett	mi
 8008050:	085b      	lsrmi	r3, r3, #1
 8008052:	089b      	lsrpl	r3, r3, #2
 8008054:	2001      	movmi	r0, #1
 8008056:	6013      	strmi	r3, [r2, #0]
 8008058:	bf5c      	itt	pl
 800805a:	6013      	strpl	r3, [r2, #0]
 800805c:	2002      	movpl	r0, #2
 800805e:	4770      	bx	lr
 8008060:	b299      	uxth	r1, r3
 8008062:	b909      	cbnz	r1, 8008068 <__lo0bits+0x2a>
 8008064:	0c1b      	lsrs	r3, r3, #16
 8008066:	2010      	movs	r0, #16
 8008068:	b2d9      	uxtb	r1, r3
 800806a:	b909      	cbnz	r1, 8008070 <__lo0bits+0x32>
 800806c:	3008      	adds	r0, #8
 800806e:	0a1b      	lsrs	r3, r3, #8
 8008070:	0719      	lsls	r1, r3, #28
 8008072:	bf04      	itt	eq
 8008074:	091b      	lsreq	r3, r3, #4
 8008076:	3004      	addeq	r0, #4
 8008078:	0799      	lsls	r1, r3, #30
 800807a:	bf04      	itt	eq
 800807c:	089b      	lsreq	r3, r3, #2
 800807e:	3002      	addeq	r0, #2
 8008080:	07d9      	lsls	r1, r3, #31
 8008082:	d403      	bmi.n	800808c <__lo0bits+0x4e>
 8008084:	085b      	lsrs	r3, r3, #1
 8008086:	f100 0001 	add.w	r0, r0, #1
 800808a:	d003      	beq.n	8008094 <__lo0bits+0x56>
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	4770      	bx	lr
 8008090:	2000      	movs	r0, #0
 8008092:	4770      	bx	lr
 8008094:	2020      	movs	r0, #32
 8008096:	4770      	bx	lr

08008098 <__i2b>:
 8008098:	b510      	push	{r4, lr}
 800809a:	460c      	mov	r4, r1
 800809c:	2101      	movs	r1, #1
 800809e:	f7ff ff07 	bl	8007eb0 <_Balloc>
 80080a2:	4602      	mov	r2, r0
 80080a4:	b928      	cbnz	r0, 80080b2 <__i2b+0x1a>
 80080a6:	4b05      	ldr	r3, [pc, #20]	@ (80080bc <__i2b+0x24>)
 80080a8:	4805      	ldr	r0, [pc, #20]	@ (80080c0 <__i2b+0x28>)
 80080aa:	f240 1145 	movw	r1, #325	@ 0x145
 80080ae:	f000 fcb5 	bl	8008a1c <__assert_func>
 80080b2:	2301      	movs	r3, #1
 80080b4:	6144      	str	r4, [r0, #20]
 80080b6:	6103      	str	r3, [r0, #16]
 80080b8:	bd10      	pop	{r4, pc}
 80080ba:	bf00      	nop
 80080bc:	0800a2a0 	.word	0x0800a2a0
 80080c0:	0800a2b1 	.word	0x0800a2b1

080080c4 <__multiply>:
 80080c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c8:	4617      	mov	r7, r2
 80080ca:	690a      	ldr	r2, [r1, #16]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	bfa8      	it	ge
 80080d2:	463b      	movge	r3, r7
 80080d4:	4689      	mov	r9, r1
 80080d6:	bfa4      	itt	ge
 80080d8:	460f      	movge	r7, r1
 80080da:	4699      	movge	r9, r3
 80080dc:	693d      	ldr	r5, [r7, #16]
 80080de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	eb05 060a 	add.w	r6, r5, sl
 80080ea:	42b3      	cmp	r3, r6
 80080ec:	b085      	sub	sp, #20
 80080ee:	bfb8      	it	lt
 80080f0:	3101      	addlt	r1, #1
 80080f2:	f7ff fedd 	bl	8007eb0 <_Balloc>
 80080f6:	b930      	cbnz	r0, 8008106 <__multiply+0x42>
 80080f8:	4602      	mov	r2, r0
 80080fa:	4b41      	ldr	r3, [pc, #260]	@ (8008200 <__multiply+0x13c>)
 80080fc:	4841      	ldr	r0, [pc, #260]	@ (8008204 <__multiply+0x140>)
 80080fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008102:	f000 fc8b 	bl	8008a1c <__assert_func>
 8008106:	f100 0414 	add.w	r4, r0, #20
 800810a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800810e:	4623      	mov	r3, r4
 8008110:	2200      	movs	r2, #0
 8008112:	4573      	cmp	r3, lr
 8008114:	d320      	bcc.n	8008158 <__multiply+0x94>
 8008116:	f107 0814 	add.w	r8, r7, #20
 800811a:	f109 0114 	add.w	r1, r9, #20
 800811e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008122:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008126:	9302      	str	r3, [sp, #8]
 8008128:	1beb      	subs	r3, r5, r7
 800812a:	3b15      	subs	r3, #21
 800812c:	f023 0303 	bic.w	r3, r3, #3
 8008130:	3304      	adds	r3, #4
 8008132:	3715      	adds	r7, #21
 8008134:	42bd      	cmp	r5, r7
 8008136:	bf38      	it	cc
 8008138:	2304      	movcc	r3, #4
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	9103      	str	r1, [sp, #12]
 8008140:	428b      	cmp	r3, r1
 8008142:	d80c      	bhi.n	800815e <__multiply+0x9a>
 8008144:	2e00      	cmp	r6, #0
 8008146:	dd03      	ble.n	8008150 <__multiply+0x8c>
 8008148:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800814c:	2b00      	cmp	r3, #0
 800814e:	d055      	beq.n	80081fc <__multiply+0x138>
 8008150:	6106      	str	r6, [r0, #16]
 8008152:	b005      	add	sp, #20
 8008154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008158:	f843 2b04 	str.w	r2, [r3], #4
 800815c:	e7d9      	b.n	8008112 <__multiply+0x4e>
 800815e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008162:	f1ba 0f00 	cmp.w	sl, #0
 8008166:	d01f      	beq.n	80081a8 <__multiply+0xe4>
 8008168:	46c4      	mov	ip, r8
 800816a:	46a1      	mov	r9, r4
 800816c:	2700      	movs	r7, #0
 800816e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008172:	f8d9 3000 	ldr.w	r3, [r9]
 8008176:	fa1f fb82 	uxth.w	fp, r2
 800817a:	b29b      	uxth	r3, r3
 800817c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008180:	443b      	add	r3, r7
 8008182:	f8d9 7000 	ldr.w	r7, [r9]
 8008186:	0c12      	lsrs	r2, r2, #16
 8008188:	0c3f      	lsrs	r7, r7, #16
 800818a:	fb0a 7202 	mla	r2, sl, r2, r7
 800818e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008192:	b29b      	uxth	r3, r3
 8008194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008198:	4565      	cmp	r5, ip
 800819a:	f849 3b04 	str.w	r3, [r9], #4
 800819e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80081a2:	d8e4      	bhi.n	800816e <__multiply+0xaa>
 80081a4:	9b01      	ldr	r3, [sp, #4]
 80081a6:	50e7      	str	r7, [r4, r3]
 80081a8:	9b03      	ldr	r3, [sp, #12]
 80081aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80081ae:	3104      	adds	r1, #4
 80081b0:	f1b9 0f00 	cmp.w	r9, #0
 80081b4:	d020      	beq.n	80081f8 <__multiply+0x134>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	4647      	mov	r7, r8
 80081ba:	46a4      	mov	ip, r4
 80081bc:	f04f 0a00 	mov.w	sl, #0
 80081c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80081c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80081c8:	fb09 220b 	mla	r2, r9, fp, r2
 80081cc:	4452      	add	r2, sl
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081d4:	f84c 3b04 	str.w	r3, [ip], #4
 80081d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80081dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80081e4:	fb09 330a 	mla	r3, r9, sl, r3
 80081e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80081ec:	42bd      	cmp	r5, r7
 80081ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081f2:	d8e5      	bhi.n	80081c0 <__multiply+0xfc>
 80081f4:	9a01      	ldr	r2, [sp, #4]
 80081f6:	50a3      	str	r3, [r4, r2]
 80081f8:	3404      	adds	r4, #4
 80081fa:	e79f      	b.n	800813c <__multiply+0x78>
 80081fc:	3e01      	subs	r6, #1
 80081fe:	e7a1      	b.n	8008144 <__multiply+0x80>
 8008200:	0800a2a0 	.word	0x0800a2a0
 8008204:	0800a2b1 	.word	0x0800a2b1

08008208 <__pow5mult>:
 8008208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800820c:	4615      	mov	r5, r2
 800820e:	f012 0203 	ands.w	r2, r2, #3
 8008212:	4607      	mov	r7, r0
 8008214:	460e      	mov	r6, r1
 8008216:	d007      	beq.n	8008228 <__pow5mult+0x20>
 8008218:	4c25      	ldr	r4, [pc, #148]	@ (80082b0 <__pow5mult+0xa8>)
 800821a:	3a01      	subs	r2, #1
 800821c:	2300      	movs	r3, #0
 800821e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008222:	f7ff fea7 	bl	8007f74 <__multadd>
 8008226:	4606      	mov	r6, r0
 8008228:	10ad      	asrs	r5, r5, #2
 800822a:	d03d      	beq.n	80082a8 <__pow5mult+0xa0>
 800822c:	69fc      	ldr	r4, [r7, #28]
 800822e:	b97c      	cbnz	r4, 8008250 <__pow5mult+0x48>
 8008230:	2010      	movs	r0, #16
 8008232:	f7ff fd87 	bl	8007d44 <malloc>
 8008236:	4602      	mov	r2, r0
 8008238:	61f8      	str	r0, [r7, #28]
 800823a:	b928      	cbnz	r0, 8008248 <__pow5mult+0x40>
 800823c:	4b1d      	ldr	r3, [pc, #116]	@ (80082b4 <__pow5mult+0xac>)
 800823e:	481e      	ldr	r0, [pc, #120]	@ (80082b8 <__pow5mult+0xb0>)
 8008240:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008244:	f000 fbea 	bl	8008a1c <__assert_func>
 8008248:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800824c:	6004      	str	r4, [r0, #0]
 800824e:	60c4      	str	r4, [r0, #12]
 8008250:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008254:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008258:	b94c      	cbnz	r4, 800826e <__pow5mult+0x66>
 800825a:	f240 2171 	movw	r1, #625	@ 0x271
 800825e:	4638      	mov	r0, r7
 8008260:	f7ff ff1a 	bl	8008098 <__i2b>
 8008264:	2300      	movs	r3, #0
 8008266:	f8c8 0008 	str.w	r0, [r8, #8]
 800826a:	4604      	mov	r4, r0
 800826c:	6003      	str	r3, [r0, #0]
 800826e:	f04f 0900 	mov.w	r9, #0
 8008272:	07eb      	lsls	r3, r5, #31
 8008274:	d50a      	bpl.n	800828c <__pow5mult+0x84>
 8008276:	4631      	mov	r1, r6
 8008278:	4622      	mov	r2, r4
 800827a:	4638      	mov	r0, r7
 800827c:	f7ff ff22 	bl	80080c4 <__multiply>
 8008280:	4631      	mov	r1, r6
 8008282:	4680      	mov	r8, r0
 8008284:	4638      	mov	r0, r7
 8008286:	f7ff fe53 	bl	8007f30 <_Bfree>
 800828a:	4646      	mov	r6, r8
 800828c:	106d      	asrs	r5, r5, #1
 800828e:	d00b      	beq.n	80082a8 <__pow5mult+0xa0>
 8008290:	6820      	ldr	r0, [r4, #0]
 8008292:	b938      	cbnz	r0, 80082a4 <__pow5mult+0x9c>
 8008294:	4622      	mov	r2, r4
 8008296:	4621      	mov	r1, r4
 8008298:	4638      	mov	r0, r7
 800829a:	f7ff ff13 	bl	80080c4 <__multiply>
 800829e:	6020      	str	r0, [r4, #0]
 80082a0:	f8c0 9000 	str.w	r9, [r0]
 80082a4:	4604      	mov	r4, r0
 80082a6:	e7e4      	b.n	8008272 <__pow5mult+0x6a>
 80082a8:	4630      	mov	r0, r6
 80082aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ae:	bf00      	nop
 80082b0:	0800a364 	.word	0x0800a364
 80082b4:	0800a231 	.word	0x0800a231
 80082b8:	0800a2b1 	.word	0x0800a2b1

080082bc <__lshift>:
 80082bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c0:	460c      	mov	r4, r1
 80082c2:	6849      	ldr	r1, [r1, #4]
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082ca:	68a3      	ldr	r3, [r4, #8]
 80082cc:	4607      	mov	r7, r0
 80082ce:	4691      	mov	r9, r2
 80082d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082d4:	f108 0601 	add.w	r6, r8, #1
 80082d8:	42b3      	cmp	r3, r6
 80082da:	db0b      	blt.n	80082f4 <__lshift+0x38>
 80082dc:	4638      	mov	r0, r7
 80082de:	f7ff fde7 	bl	8007eb0 <_Balloc>
 80082e2:	4605      	mov	r5, r0
 80082e4:	b948      	cbnz	r0, 80082fa <__lshift+0x3e>
 80082e6:	4602      	mov	r2, r0
 80082e8:	4b28      	ldr	r3, [pc, #160]	@ (800838c <__lshift+0xd0>)
 80082ea:	4829      	ldr	r0, [pc, #164]	@ (8008390 <__lshift+0xd4>)
 80082ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80082f0:	f000 fb94 	bl	8008a1c <__assert_func>
 80082f4:	3101      	adds	r1, #1
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	e7ee      	b.n	80082d8 <__lshift+0x1c>
 80082fa:	2300      	movs	r3, #0
 80082fc:	f100 0114 	add.w	r1, r0, #20
 8008300:	f100 0210 	add.w	r2, r0, #16
 8008304:	4618      	mov	r0, r3
 8008306:	4553      	cmp	r3, sl
 8008308:	db33      	blt.n	8008372 <__lshift+0xb6>
 800830a:	6920      	ldr	r0, [r4, #16]
 800830c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008310:	f104 0314 	add.w	r3, r4, #20
 8008314:	f019 091f 	ands.w	r9, r9, #31
 8008318:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800831c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008320:	d02b      	beq.n	800837a <__lshift+0xbe>
 8008322:	f1c9 0e20 	rsb	lr, r9, #32
 8008326:	468a      	mov	sl, r1
 8008328:	2200      	movs	r2, #0
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	fa00 f009 	lsl.w	r0, r0, r9
 8008330:	4310      	orrs	r0, r2
 8008332:	f84a 0b04 	str.w	r0, [sl], #4
 8008336:	f853 2b04 	ldr.w	r2, [r3], #4
 800833a:	459c      	cmp	ip, r3
 800833c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008340:	d8f3      	bhi.n	800832a <__lshift+0x6e>
 8008342:	ebac 0304 	sub.w	r3, ip, r4
 8008346:	3b15      	subs	r3, #21
 8008348:	f023 0303 	bic.w	r3, r3, #3
 800834c:	3304      	adds	r3, #4
 800834e:	f104 0015 	add.w	r0, r4, #21
 8008352:	4560      	cmp	r0, ip
 8008354:	bf88      	it	hi
 8008356:	2304      	movhi	r3, #4
 8008358:	50ca      	str	r2, [r1, r3]
 800835a:	b10a      	cbz	r2, 8008360 <__lshift+0xa4>
 800835c:	f108 0602 	add.w	r6, r8, #2
 8008360:	3e01      	subs	r6, #1
 8008362:	4638      	mov	r0, r7
 8008364:	612e      	str	r6, [r5, #16]
 8008366:	4621      	mov	r1, r4
 8008368:	f7ff fde2 	bl	8007f30 <_Bfree>
 800836c:	4628      	mov	r0, r5
 800836e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008372:	f842 0f04 	str.w	r0, [r2, #4]!
 8008376:	3301      	adds	r3, #1
 8008378:	e7c5      	b.n	8008306 <__lshift+0x4a>
 800837a:	3904      	subs	r1, #4
 800837c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008380:	f841 2f04 	str.w	r2, [r1, #4]!
 8008384:	459c      	cmp	ip, r3
 8008386:	d8f9      	bhi.n	800837c <__lshift+0xc0>
 8008388:	e7ea      	b.n	8008360 <__lshift+0xa4>
 800838a:	bf00      	nop
 800838c:	0800a2a0 	.word	0x0800a2a0
 8008390:	0800a2b1 	.word	0x0800a2b1

08008394 <__mcmp>:
 8008394:	690a      	ldr	r2, [r1, #16]
 8008396:	4603      	mov	r3, r0
 8008398:	6900      	ldr	r0, [r0, #16]
 800839a:	1a80      	subs	r0, r0, r2
 800839c:	b530      	push	{r4, r5, lr}
 800839e:	d10e      	bne.n	80083be <__mcmp+0x2a>
 80083a0:	3314      	adds	r3, #20
 80083a2:	3114      	adds	r1, #20
 80083a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80083ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083b4:	4295      	cmp	r5, r2
 80083b6:	d003      	beq.n	80083c0 <__mcmp+0x2c>
 80083b8:	d205      	bcs.n	80083c6 <__mcmp+0x32>
 80083ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083be:	bd30      	pop	{r4, r5, pc}
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	d3f3      	bcc.n	80083ac <__mcmp+0x18>
 80083c4:	e7fb      	b.n	80083be <__mcmp+0x2a>
 80083c6:	2001      	movs	r0, #1
 80083c8:	e7f9      	b.n	80083be <__mcmp+0x2a>
	...

080083cc <__mdiff>:
 80083cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d0:	4689      	mov	r9, r1
 80083d2:	4606      	mov	r6, r0
 80083d4:	4611      	mov	r1, r2
 80083d6:	4648      	mov	r0, r9
 80083d8:	4614      	mov	r4, r2
 80083da:	f7ff ffdb 	bl	8008394 <__mcmp>
 80083de:	1e05      	subs	r5, r0, #0
 80083e0:	d112      	bne.n	8008408 <__mdiff+0x3c>
 80083e2:	4629      	mov	r1, r5
 80083e4:	4630      	mov	r0, r6
 80083e6:	f7ff fd63 	bl	8007eb0 <_Balloc>
 80083ea:	4602      	mov	r2, r0
 80083ec:	b928      	cbnz	r0, 80083fa <__mdiff+0x2e>
 80083ee:	4b3f      	ldr	r3, [pc, #252]	@ (80084ec <__mdiff+0x120>)
 80083f0:	f240 2137 	movw	r1, #567	@ 0x237
 80083f4:	483e      	ldr	r0, [pc, #248]	@ (80084f0 <__mdiff+0x124>)
 80083f6:	f000 fb11 	bl	8008a1c <__assert_func>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008400:	4610      	mov	r0, r2
 8008402:	b003      	add	sp, #12
 8008404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008408:	bfbc      	itt	lt
 800840a:	464b      	movlt	r3, r9
 800840c:	46a1      	movlt	r9, r4
 800840e:	4630      	mov	r0, r6
 8008410:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008414:	bfba      	itte	lt
 8008416:	461c      	movlt	r4, r3
 8008418:	2501      	movlt	r5, #1
 800841a:	2500      	movge	r5, #0
 800841c:	f7ff fd48 	bl	8007eb0 <_Balloc>
 8008420:	4602      	mov	r2, r0
 8008422:	b918      	cbnz	r0, 800842c <__mdiff+0x60>
 8008424:	4b31      	ldr	r3, [pc, #196]	@ (80084ec <__mdiff+0x120>)
 8008426:	f240 2145 	movw	r1, #581	@ 0x245
 800842a:	e7e3      	b.n	80083f4 <__mdiff+0x28>
 800842c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008430:	6926      	ldr	r6, [r4, #16]
 8008432:	60c5      	str	r5, [r0, #12]
 8008434:	f109 0310 	add.w	r3, r9, #16
 8008438:	f109 0514 	add.w	r5, r9, #20
 800843c:	f104 0e14 	add.w	lr, r4, #20
 8008440:	f100 0b14 	add.w	fp, r0, #20
 8008444:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008448:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	46d9      	mov	r9, fp
 8008450:	f04f 0c00 	mov.w	ip, #0
 8008454:	9b01      	ldr	r3, [sp, #4]
 8008456:	f85e 0b04 	ldr.w	r0, [lr], #4
 800845a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	fa1f f38a 	uxth.w	r3, sl
 8008464:	4619      	mov	r1, r3
 8008466:	b283      	uxth	r3, r0
 8008468:	1acb      	subs	r3, r1, r3
 800846a:	0c00      	lsrs	r0, r0, #16
 800846c:	4463      	add	r3, ip
 800846e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008472:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008476:	b29b      	uxth	r3, r3
 8008478:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800847c:	4576      	cmp	r6, lr
 800847e:	f849 3b04 	str.w	r3, [r9], #4
 8008482:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008486:	d8e5      	bhi.n	8008454 <__mdiff+0x88>
 8008488:	1b33      	subs	r3, r6, r4
 800848a:	3b15      	subs	r3, #21
 800848c:	f023 0303 	bic.w	r3, r3, #3
 8008490:	3415      	adds	r4, #21
 8008492:	3304      	adds	r3, #4
 8008494:	42a6      	cmp	r6, r4
 8008496:	bf38      	it	cc
 8008498:	2304      	movcc	r3, #4
 800849a:	441d      	add	r5, r3
 800849c:	445b      	add	r3, fp
 800849e:	461e      	mov	r6, r3
 80084a0:	462c      	mov	r4, r5
 80084a2:	4544      	cmp	r4, r8
 80084a4:	d30e      	bcc.n	80084c4 <__mdiff+0xf8>
 80084a6:	f108 0103 	add.w	r1, r8, #3
 80084aa:	1b49      	subs	r1, r1, r5
 80084ac:	f021 0103 	bic.w	r1, r1, #3
 80084b0:	3d03      	subs	r5, #3
 80084b2:	45a8      	cmp	r8, r5
 80084b4:	bf38      	it	cc
 80084b6:	2100      	movcc	r1, #0
 80084b8:	440b      	add	r3, r1
 80084ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084be:	b191      	cbz	r1, 80084e6 <__mdiff+0x11a>
 80084c0:	6117      	str	r7, [r2, #16]
 80084c2:	e79d      	b.n	8008400 <__mdiff+0x34>
 80084c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80084c8:	46e6      	mov	lr, ip
 80084ca:	0c08      	lsrs	r0, r1, #16
 80084cc:	fa1c fc81 	uxtah	ip, ip, r1
 80084d0:	4471      	add	r1, lr
 80084d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80084d6:	b289      	uxth	r1, r1
 80084d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80084dc:	f846 1b04 	str.w	r1, [r6], #4
 80084e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084e4:	e7dd      	b.n	80084a2 <__mdiff+0xd6>
 80084e6:	3f01      	subs	r7, #1
 80084e8:	e7e7      	b.n	80084ba <__mdiff+0xee>
 80084ea:	bf00      	nop
 80084ec:	0800a2a0 	.word	0x0800a2a0
 80084f0:	0800a2b1 	.word	0x0800a2b1

080084f4 <__d2b>:
 80084f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084f8:	460f      	mov	r7, r1
 80084fa:	2101      	movs	r1, #1
 80084fc:	ec59 8b10 	vmov	r8, r9, d0
 8008500:	4616      	mov	r6, r2
 8008502:	f7ff fcd5 	bl	8007eb0 <_Balloc>
 8008506:	4604      	mov	r4, r0
 8008508:	b930      	cbnz	r0, 8008518 <__d2b+0x24>
 800850a:	4602      	mov	r2, r0
 800850c:	4b23      	ldr	r3, [pc, #140]	@ (800859c <__d2b+0xa8>)
 800850e:	4824      	ldr	r0, [pc, #144]	@ (80085a0 <__d2b+0xac>)
 8008510:	f240 310f 	movw	r1, #783	@ 0x30f
 8008514:	f000 fa82 	bl	8008a1c <__assert_func>
 8008518:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800851c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008520:	b10d      	cbz	r5, 8008526 <__d2b+0x32>
 8008522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	f1b8 0300 	subs.w	r3, r8, #0
 800852c:	d023      	beq.n	8008576 <__d2b+0x82>
 800852e:	4668      	mov	r0, sp
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	f7ff fd84 	bl	800803e <__lo0bits>
 8008536:	e9dd 1200 	ldrd	r1, r2, [sp]
 800853a:	b1d0      	cbz	r0, 8008572 <__d2b+0x7e>
 800853c:	f1c0 0320 	rsb	r3, r0, #32
 8008540:	fa02 f303 	lsl.w	r3, r2, r3
 8008544:	430b      	orrs	r3, r1
 8008546:	40c2      	lsrs	r2, r0
 8008548:	6163      	str	r3, [r4, #20]
 800854a:	9201      	str	r2, [sp, #4]
 800854c:	9b01      	ldr	r3, [sp, #4]
 800854e:	61a3      	str	r3, [r4, #24]
 8008550:	2b00      	cmp	r3, #0
 8008552:	bf0c      	ite	eq
 8008554:	2201      	moveq	r2, #1
 8008556:	2202      	movne	r2, #2
 8008558:	6122      	str	r2, [r4, #16]
 800855a:	b1a5      	cbz	r5, 8008586 <__d2b+0x92>
 800855c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008560:	4405      	add	r5, r0
 8008562:	603d      	str	r5, [r7, #0]
 8008564:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008568:	6030      	str	r0, [r6, #0]
 800856a:	4620      	mov	r0, r4
 800856c:	b003      	add	sp, #12
 800856e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008572:	6161      	str	r1, [r4, #20]
 8008574:	e7ea      	b.n	800854c <__d2b+0x58>
 8008576:	a801      	add	r0, sp, #4
 8008578:	f7ff fd61 	bl	800803e <__lo0bits>
 800857c:	9b01      	ldr	r3, [sp, #4]
 800857e:	6163      	str	r3, [r4, #20]
 8008580:	3020      	adds	r0, #32
 8008582:	2201      	movs	r2, #1
 8008584:	e7e8      	b.n	8008558 <__d2b+0x64>
 8008586:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800858a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800858e:	6038      	str	r0, [r7, #0]
 8008590:	6918      	ldr	r0, [r3, #16]
 8008592:	f7ff fd35 	bl	8008000 <__hi0bits>
 8008596:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800859a:	e7e5      	b.n	8008568 <__d2b+0x74>
 800859c:	0800a2a0 	.word	0x0800a2a0
 80085a0:	0800a2b1 	.word	0x0800a2b1

080085a4 <__ssputs_r>:
 80085a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a8:	688e      	ldr	r6, [r1, #8]
 80085aa:	461f      	mov	r7, r3
 80085ac:	42be      	cmp	r6, r7
 80085ae:	680b      	ldr	r3, [r1, #0]
 80085b0:	4682      	mov	sl, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	4690      	mov	r8, r2
 80085b6:	d82d      	bhi.n	8008614 <__ssputs_r+0x70>
 80085b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085c0:	d026      	beq.n	8008610 <__ssputs_r+0x6c>
 80085c2:	6965      	ldr	r5, [r4, #20]
 80085c4:	6909      	ldr	r1, [r1, #16]
 80085c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085ca:	eba3 0901 	sub.w	r9, r3, r1
 80085ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085d2:	1c7b      	adds	r3, r7, #1
 80085d4:	444b      	add	r3, r9
 80085d6:	106d      	asrs	r5, r5, #1
 80085d8:	429d      	cmp	r5, r3
 80085da:	bf38      	it	cc
 80085dc:	461d      	movcc	r5, r3
 80085de:	0553      	lsls	r3, r2, #21
 80085e0:	d527      	bpl.n	8008632 <__ssputs_r+0x8e>
 80085e2:	4629      	mov	r1, r5
 80085e4:	f7ff fbd8 	bl	8007d98 <_malloc_r>
 80085e8:	4606      	mov	r6, r0
 80085ea:	b360      	cbz	r0, 8008646 <__ssputs_r+0xa2>
 80085ec:	6921      	ldr	r1, [r4, #16]
 80085ee:	464a      	mov	r2, r9
 80085f0:	f000 fa06 	bl	8008a00 <memcpy>
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085fe:	81a3      	strh	r3, [r4, #12]
 8008600:	6126      	str	r6, [r4, #16]
 8008602:	6165      	str	r5, [r4, #20]
 8008604:	444e      	add	r6, r9
 8008606:	eba5 0509 	sub.w	r5, r5, r9
 800860a:	6026      	str	r6, [r4, #0]
 800860c:	60a5      	str	r5, [r4, #8]
 800860e:	463e      	mov	r6, r7
 8008610:	42be      	cmp	r6, r7
 8008612:	d900      	bls.n	8008616 <__ssputs_r+0x72>
 8008614:	463e      	mov	r6, r7
 8008616:	6820      	ldr	r0, [r4, #0]
 8008618:	4632      	mov	r2, r6
 800861a:	4641      	mov	r1, r8
 800861c:	f000 f9c6 	bl	80089ac <memmove>
 8008620:	68a3      	ldr	r3, [r4, #8]
 8008622:	1b9b      	subs	r3, r3, r6
 8008624:	60a3      	str	r3, [r4, #8]
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	4433      	add	r3, r6
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	2000      	movs	r0, #0
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008632:	462a      	mov	r2, r5
 8008634:	f000 fa36 	bl	8008aa4 <_realloc_r>
 8008638:	4606      	mov	r6, r0
 800863a:	2800      	cmp	r0, #0
 800863c:	d1e0      	bne.n	8008600 <__ssputs_r+0x5c>
 800863e:	6921      	ldr	r1, [r4, #16]
 8008640:	4650      	mov	r0, sl
 8008642:	f7ff fb35 	bl	8007cb0 <_free_r>
 8008646:	230c      	movs	r3, #12
 8008648:	f8ca 3000 	str.w	r3, [sl]
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008652:	81a3      	strh	r3, [r4, #12]
 8008654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008658:	e7e9      	b.n	800862e <__ssputs_r+0x8a>
	...

0800865c <_svfiprintf_r>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	4698      	mov	r8, r3
 8008662:	898b      	ldrh	r3, [r1, #12]
 8008664:	061b      	lsls	r3, r3, #24
 8008666:	b09d      	sub	sp, #116	@ 0x74
 8008668:	4607      	mov	r7, r0
 800866a:	460d      	mov	r5, r1
 800866c:	4614      	mov	r4, r2
 800866e:	d510      	bpl.n	8008692 <_svfiprintf_r+0x36>
 8008670:	690b      	ldr	r3, [r1, #16]
 8008672:	b973      	cbnz	r3, 8008692 <_svfiprintf_r+0x36>
 8008674:	2140      	movs	r1, #64	@ 0x40
 8008676:	f7ff fb8f 	bl	8007d98 <_malloc_r>
 800867a:	6028      	str	r0, [r5, #0]
 800867c:	6128      	str	r0, [r5, #16]
 800867e:	b930      	cbnz	r0, 800868e <_svfiprintf_r+0x32>
 8008680:	230c      	movs	r3, #12
 8008682:	603b      	str	r3, [r7, #0]
 8008684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008688:	b01d      	add	sp, #116	@ 0x74
 800868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868e:	2340      	movs	r3, #64	@ 0x40
 8008690:	616b      	str	r3, [r5, #20]
 8008692:	2300      	movs	r3, #0
 8008694:	9309      	str	r3, [sp, #36]	@ 0x24
 8008696:	2320      	movs	r3, #32
 8008698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800869c:	f8cd 800c 	str.w	r8, [sp, #12]
 80086a0:	2330      	movs	r3, #48	@ 0x30
 80086a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008840 <_svfiprintf_r+0x1e4>
 80086a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086aa:	f04f 0901 	mov.w	r9, #1
 80086ae:	4623      	mov	r3, r4
 80086b0:	469a      	mov	sl, r3
 80086b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086b6:	b10a      	cbz	r2, 80086bc <_svfiprintf_r+0x60>
 80086b8:	2a25      	cmp	r2, #37	@ 0x25
 80086ba:	d1f9      	bne.n	80086b0 <_svfiprintf_r+0x54>
 80086bc:	ebba 0b04 	subs.w	fp, sl, r4
 80086c0:	d00b      	beq.n	80086da <_svfiprintf_r+0x7e>
 80086c2:	465b      	mov	r3, fp
 80086c4:	4622      	mov	r2, r4
 80086c6:	4629      	mov	r1, r5
 80086c8:	4638      	mov	r0, r7
 80086ca:	f7ff ff6b 	bl	80085a4 <__ssputs_r>
 80086ce:	3001      	adds	r0, #1
 80086d0:	f000 80a7 	beq.w	8008822 <_svfiprintf_r+0x1c6>
 80086d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086d6:	445a      	add	r2, fp
 80086d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80086da:	f89a 3000 	ldrb.w	r3, [sl]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 809f 	beq.w	8008822 <_svfiprintf_r+0x1c6>
 80086e4:	2300      	movs	r3, #0
 80086e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086ee:	f10a 0a01 	add.w	sl, sl, #1
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	9307      	str	r3, [sp, #28]
 80086f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80086fc:	4654      	mov	r4, sl
 80086fe:	2205      	movs	r2, #5
 8008700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008704:	484e      	ldr	r0, [pc, #312]	@ (8008840 <_svfiprintf_r+0x1e4>)
 8008706:	f7f7 fd6b 	bl	80001e0 <memchr>
 800870a:	9a04      	ldr	r2, [sp, #16]
 800870c:	b9d8      	cbnz	r0, 8008746 <_svfiprintf_r+0xea>
 800870e:	06d0      	lsls	r0, r2, #27
 8008710:	bf44      	itt	mi
 8008712:	2320      	movmi	r3, #32
 8008714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008718:	0711      	lsls	r1, r2, #28
 800871a:	bf44      	itt	mi
 800871c:	232b      	movmi	r3, #43	@ 0x2b
 800871e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008722:	f89a 3000 	ldrb.w	r3, [sl]
 8008726:	2b2a      	cmp	r3, #42	@ 0x2a
 8008728:	d015      	beq.n	8008756 <_svfiprintf_r+0xfa>
 800872a:	9a07      	ldr	r2, [sp, #28]
 800872c:	4654      	mov	r4, sl
 800872e:	2000      	movs	r0, #0
 8008730:	f04f 0c0a 	mov.w	ip, #10
 8008734:	4621      	mov	r1, r4
 8008736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873a:	3b30      	subs	r3, #48	@ 0x30
 800873c:	2b09      	cmp	r3, #9
 800873e:	d94b      	bls.n	80087d8 <_svfiprintf_r+0x17c>
 8008740:	b1b0      	cbz	r0, 8008770 <_svfiprintf_r+0x114>
 8008742:	9207      	str	r2, [sp, #28]
 8008744:	e014      	b.n	8008770 <_svfiprintf_r+0x114>
 8008746:	eba0 0308 	sub.w	r3, r0, r8
 800874a:	fa09 f303 	lsl.w	r3, r9, r3
 800874e:	4313      	orrs	r3, r2
 8008750:	9304      	str	r3, [sp, #16]
 8008752:	46a2      	mov	sl, r4
 8008754:	e7d2      	b.n	80086fc <_svfiprintf_r+0xa0>
 8008756:	9b03      	ldr	r3, [sp, #12]
 8008758:	1d19      	adds	r1, r3, #4
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	9103      	str	r1, [sp, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	bfbb      	ittet	lt
 8008762:	425b      	neglt	r3, r3
 8008764:	f042 0202 	orrlt.w	r2, r2, #2
 8008768:	9307      	strge	r3, [sp, #28]
 800876a:	9307      	strlt	r3, [sp, #28]
 800876c:	bfb8      	it	lt
 800876e:	9204      	strlt	r2, [sp, #16]
 8008770:	7823      	ldrb	r3, [r4, #0]
 8008772:	2b2e      	cmp	r3, #46	@ 0x2e
 8008774:	d10a      	bne.n	800878c <_svfiprintf_r+0x130>
 8008776:	7863      	ldrb	r3, [r4, #1]
 8008778:	2b2a      	cmp	r3, #42	@ 0x2a
 800877a:	d132      	bne.n	80087e2 <_svfiprintf_r+0x186>
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	1d1a      	adds	r2, r3, #4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	9203      	str	r2, [sp, #12]
 8008784:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008788:	3402      	adds	r4, #2
 800878a:	9305      	str	r3, [sp, #20]
 800878c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008850 <_svfiprintf_r+0x1f4>
 8008790:	7821      	ldrb	r1, [r4, #0]
 8008792:	2203      	movs	r2, #3
 8008794:	4650      	mov	r0, sl
 8008796:	f7f7 fd23 	bl	80001e0 <memchr>
 800879a:	b138      	cbz	r0, 80087ac <_svfiprintf_r+0x150>
 800879c:	9b04      	ldr	r3, [sp, #16]
 800879e:	eba0 000a 	sub.w	r0, r0, sl
 80087a2:	2240      	movs	r2, #64	@ 0x40
 80087a4:	4082      	lsls	r2, r0
 80087a6:	4313      	orrs	r3, r2
 80087a8:	3401      	adds	r4, #1
 80087aa:	9304      	str	r3, [sp, #16]
 80087ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b0:	4824      	ldr	r0, [pc, #144]	@ (8008844 <_svfiprintf_r+0x1e8>)
 80087b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087b6:	2206      	movs	r2, #6
 80087b8:	f7f7 fd12 	bl	80001e0 <memchr>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d036      	beq.n	800882e <_svfiprintf_r+0x1d2>
 80087c0:	4b21      	ldr	r3, [pc, #132]	@ (8008848 <_svfiprintf_r+0x1ec>)
 80087c2:	bb1b      	cbnz	r3, 800880c <_svfiprintf_r+0x1b0>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	3307      	adds	r3, #7
 80087c8:	f023 0307 	bic.w	r3, r3, #7
 80087cc:	3308      	adds	r3, #8
 80087ce:	9303      	str	r3, [sp, #12]
 80087d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d2:	4433      	add	r3, r6
 80087d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d6:	e76a      	b.n	80086ae <_svfiprintf_r+0x52>
 80087d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087dc:	460c      	mov	r4, r1
 80087de:	2001      	movs	r0, #1
 80087e0:	e7a8      	b.n	8008734 <_svfiprintf_r+0xd8>
 80087e2:	2300      	movs	r3, #0
 80087e4:	3401      	adds	r4, #1
 80087e6:	9305      	str	r3, [sp, #20]
 80087e8:	4619      	mov	r1, r3
 80087ea:	f04f 0c0a 	mov.w	ip, #10
 80087ee:	4620      	mov	r0, r4
 80087f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f4:	3a30      	subs	r2, #48	@ 0x30
 80087f6:	2a09      	cmp	r2, #9
 80087f8:	d903      	bls.n	8008802 <_svfiprintf_r+0x1a6>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0c6      	beq.n	800878c <_svfiprintf_r+0x130>
 80087fe:	9105      	str	r1, [sp, #20]
 8008800:	e7c4      	b.n	800878c <_svfiprintf_r+0x130>
 8008802:	fb0c 2101 	mla	r1, ip, r1, r2
 8008806:	4604      	mov	r4, r0
 8008808:	2301      	movs	r3, #1
 800880a:	e7f0      	b.n	80087ee <_svfiprintf_r+0x192>
 800880c:	ab03      	add	r3, sp, #12
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	462a      	mov	r2, r5
 8008812:	4b0e      	ldr	r3, [pc, #56]	@ (800884c <_svfiprintf_r+0x1f0>)
 8008814:	a904      	add	r1, sp, #16
 8008816:	4638      	mov	r0, r7
 8008818:	f7fd fe7e 	bl	8006518 <_printf_float>
 800881c:	1c42      	adds	r2, r0, #1
 800881e:	4606      	mov	r6, r0
 8008820:	d1d6      	bne.n	80087d0 <_svfiprintf_r+0x174>
 8008822:	89ab      	ldrh	r3, [r5, #12]
 8008824:	065b      	lsls	r3, r3, #25
 8008826:	f53f af2d 	bmi.w	8008684 <_svfiprintf_r+0x28>
 800882a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800882c:	e72c      	b.n	8008688 <_svfiprintf_r+0x2c>
 800882e:	ab03      	add	r3, sp, #12
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	462a      	mov	r2, r5
 8008834:	4b05      	ldr	r3, [pc, #20]	@ (800884c <_svfiprintf_r+0x1f0>)
 8008836:	a904      	add	r1, sp, #16
 8008838:	4638      	mov	r0, r7
 800883a:	f7fe f905 	bl	8006a48 <_printf_i>
 800883e:	e7ed      	b.n	800881c <_svfiprintf_r+0x1c0>
 8008840:	0800a30a 	.word	0x0800a30a
 8008844:	0800a314 	.word	0x0800a314
 8008848:	08006519 	.word	0x08006519
 800884c:	080085a5 	.word	0x080085a5
 8008850:	0800a310 	.word	0x0800a310

08008854 <__sflush_r>:
 8008854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885c:	0716      	lsls	r6, r2, #28
 800885e:	4605      	mov	r5, r0
 8008860:	460c      	mov	r4, r1
 8008862:	d454      	bmi.n	800890e <__sflush_r+0xba>
 8008864:	684b      	ldr	r3, [r1, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	dc02      	bgt.n	8008870 <__sflush_r+0x1c>
 800886a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800886c:	2b00      	cmp	r3, #0
 800886e:	dd48      	ble.n	8008902 <__sflush_r+0xae>
 8008870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008872:	2e00      	cmp	r6, #0
 8008874:	d045      	beq.n	8008902 <__sflush_r+0xae>
 8008876:	2300      	movs	r3, #0
 8008878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800887c:	682f      	ldr	r7, [r5, #0]
 800887e:	6a21      	ldr	r1, [r4, #32]
 8008880:	602b      	str	r3, [r5, #0]
 8008882:	d030      	beq.n	80088e6 <__sflush_r+0x92>
 8008884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	0759      	lsls	r1, r3, #29
 800888a:	d505      	bpl.n	8008898 <__sflush_r+0x44>
 800888c:	6863      	ldr	r3, [r4, #4]
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008892:	b10b      	cbz	r3, 8008898 <__sflush_r+0x44>
 8008894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008896:	1ad2      	subs	r2, r2, r3
 8008898:	2300      	movs	r3, #0
 800889a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800889c:	6a21      	ldr	r1, [r4, #32]
 800889e:	4628      	mov	r0, r5
 80088a0:	47b0      	blx	r6
 80088a2:	1c43      	adds	r3, r0, #1
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	d106      	bne.n	80088b6 <__sflush_r+0x62>
 80088a8:	6829      	ldr	r1, [r5, #0]
 80088aa:	291d      	cmp	r1, #29
 80088ac:	d82b      	bhi.n	8008906 <__sflush_r+0xb2>
 80088ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008958 <__sflush_r+0x104>)
 80088b0:	40ca      	lsrs	r2, r1
 80088b2:	07d6      	lsls	r6, r2, #31
 80088b4:	d527      	bpl.n	8008906 <__sflush_r+0xb2>
 80088b6:	2200      	movs	r2, #0
 80088b8:	6062      	str	r2, [r4, #4]
 80088ba:	04d9      	lsls	r1, r3, #19
 80088bc:	6922      	ldr	r2, [r4, #16]
 80088be:	6022      	str	r2, [r4, #0]
 80088c0:	d504      	bpl.n	80088cc <__sflush_r+0x78>
 80088c2:	1c42      	adds	r2, r0, #1
 80088c4:	d101      	bne.n	80088ca <__sflush_r+0x76>
 80088c6:	682b      	ldr	r3, [r5, #0]
 80088c8:	b903      	cbnz	r3, 80088cc <__sflush_r+0x78>
 80088ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80088cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088ce:	602f      	str	r7, [r5, #0]
 80088d0:	b1b9      	cbz	r1, 8008902 <__sflush_r+0xae>
 80088d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088d6:	4299      	cmp	r1, r3
 80088d8:	d002      	beq.n	80088e0 <__sflush_r+0x8c>
 80088da:	4628      	mov	r0, r5
 80088dc:	f7ff f9e8 	bl	8007cb0 <_free_r>
 80088e0:	2300      	movs	r3, #0
 80088e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80088e4:	e00d      	b.n	8008902 <__sflush_r+0xae>
 80088e6:	2301      	movs	r3, #1
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b0      	blx	r6
 80088ec:	4602      	mov	r2, r0
 80088ee:	1c50      	adds	r0, r2, #1
 80088f0:	d1c9      	bne.n	8008886 <__sflush_r+0x32>
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0c6      	beq.n	8008886 <__sflush_r+0x32>
 80088f8:	2b1d      	cmp	r3, #29
 80088fa:	d001      	beq.n	8008900 <__sflush_r+0xac>
 80088fc:	2b16      	cmp	r3, #22
 80088fe:	d11e      	bne.n	800893e <__sflush_r+0xea>
 8008900:	602f      	str	r7, [r5, #0]
 8008902:	2000      	movs	r0, #0
 8008904:	e022      	b.n	800894c <__sflush_r+0xf8>
 8008906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800890a:	b21b      	sxth	r3, r3
 800890c:	e01b      	b.n	8008946 <__sflush_r+0xf2>
 800890e:	690f      	ldr	r7, [r1, #16]
 8008910:	2f00      	cmp	r7, #0
 8008912:	d0f6      	beq.n	8008902 <__sflush_r+0xae>
 8008914:	0793      	lsls	r3, r2, #30
 8008916:	680e      	ldr	r6, [r1, #0]
 8008918:	bf08      	it	eq
 800891a:	694b      	ldreq	r3, [r1, #20]
 800891c:	600f      	str	r7, [r1, #0]
 800891e:	bf18      	it	ne
 8008920:	2300      	movne	r3, #0
 8008922:	eba6 0807 	sub.w	r8, r6, r7
 8008926:	608b      	str	r3, [r1, #8]
 8008928:	f1b8 0f00 	cmp.w	r8, #0
 800892c:	dde9      	ble.n	8008902 <__sflush_r+0xae>
 800892e:	6a21      	ldr	r1, [r4, #32]
 8008930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008932:	4643      	mov	r3, r8
 8008934:	463a      	mov	r2, r7
 8008936:	4628      	mov	r0, r5
 8008938:	47b0      	blx	r6
 800893a:	2800      	cmp	r0, #0
 800893c:	dc08      	bgt.n	8008950 <__sflush_r+0xfc>
 800893e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008950:	4407      	add	r7, r0
 8008952:	eba8 0800 	sub.w	r8, r8, r0
 8008956:	e7e7      	b.n	8008928 <__sflush_r+0xd4>
 8008958:	20400001 	.word	0x20400001

0800895c <_fflush_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	690b      	ldr	r3, [r1, #16]
 8008960:	4605      	mov	r5, r0
 8008962:	460c      	mov	r4, r1
 8008964:	b913      	cbnz	r3, 800896c <_fflush_r+0x10>
 8008966:	2500      	movs	r5, #0
 8008968:	4628      	mov	r0, r5
 800896a:	bd38      	pop	{r3, r4, r5, pc}
 800896c:	b118      	cbz	r0, 8008976 <_fflush_r+0x1a>
 800896e:	6a03      	ldr	r3, [r0, #32]
 8008970:	b90b      	cbnz	r3, 8008976 <_fflush_r+0x1a>
 8008972:	f7fe fa13 	bl	8006d9c <__sinit>
 8008976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0f3      	beq.n	8008966 <_fflush_r+0xa>
 800897e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008980:	07d0      	lsls	r0, r2, #31
 8008982:	d404      	bmi.n	800898e <_fflush_r+0x32>
 8008984:	0599      	lsls	r1, r3, #22
 8008986:	d402      	bmi.n	800898e <_fflush_r+0x32>
 8008988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800898a:	f7fe fb34 	bl	8006ff6 <__retarget_lock_acquire_recursive>
 800898e:	4628      	mov	r0, r5
 8008990:	4621      	mov	r1, r4
 8008992:	f7ff ff5f 	bl	8008854 <__sflush_r>
 8008996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008998:	07da      	lsls	r2, r3, #31
 800899a:	4605      	mov	r5, r0
 800899c:	d4e4      	bmi.n	8008968 <_fflush_r+0xc>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	059b      	lsls	r3, r3, #22
 80089a2:	d4e1      	bmi.n	8008968 <_fflush_r+0xc>
 80089a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089a6:	f7fe fb27 	bl	8006ff8 <__retarget_lock_release_recursive>
 80089aa:	e7dd      	b.n	8008968 <_fflush_r+0xc>

080089ac <memmove>:
 80089ac:	4288      	cmp	r0, r1
 80089ae:	b510      	push	{r4, lr}
 80089b0:	eb01 0402 	add.w	r4, r1, r2
 80089b4:	d902      	bls.n	80089bc <memmove+0x10>
 80089b6:	4284      	cmp	r4, r0
 80089b8:	4623      	mov	r3, r4
 80089ba:	d807      	bhi.n	80089cc <memmove+0x20>
 80089bc:	1e43      	subs	r3, r0, #1
 80089be:	42a1      	cmp	r1, r4
 80089c0:	d008      	beq.n	80089d4 <memmove+0x28>
 80089c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089ca:	e7f8      	b.n	80089be <memmove+0x12>
 80089cc:	4402      	add	r2, r0
 80089ce:	4601      	mov	r1, r0
 80089d0:	428a      	cmp	r2, r1
 80089d2:	d100      	bne.n	80089d6 <memmove+0x2a>
 80089d4:	bd10      	pop	{r4, pc}
 80089d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089de:	e7f7      	b.n	80089d0 <memmove+0x24>

080089e0 <_sbrk_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4d06      	ldr	r5, [pc, #24]	@ (80089fc <_sbrk_r+0x1c>)
 80089e4:	2300      	movs	r3, #0
 80089e6:	4604      	mov	r4, r0
 80089e8:	4608      	mov	r0, r1
 80089ea:	602b      	str	r3, [r5, #0]
 80089ec:	f7fa fa94 	bl	8002f18 <_sbrk>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d102      	bne.n	80089fa <_sbrk_r+0x1a>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	b103      	cbz	r3, 80089fa <_sbrk_r+0x1a>
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	20000560 	.word	0x20000560

08008a00 <memcpy>:
 8008a00:	440a      	add	r2, r1
 8008a02:	4291      	cmp	r1, r2
 8008a04:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008a08:	d100      	bne.n	8008a0c <memcpy+0xc>
 8008a0a:	4770      	bx	lr
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a16:	4291      	cmp	r1, r2
 8008a18:	d1f9      	bne.n	8008a0e <memcpy+0xe>
 8008a1a:	bd10      	pop	{r4, pc}

08008a1c <__assert_func>:
 8008a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a1e:	4614      	mov	r4, r2
 8008a20:	461a      	mov	r2, r3
 8008a22:	4b09      	ldr	r3, [pc, #36]	@ (8008a48 <__assert_func+0x2c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4605      	mov	r5, r0
 8008a28:	68d8      	ldr	r0, [r3, #12]
 8008a2a:	b14c      	cbz	r4, 8008a40 <__assert_func+0x24>
 8008a2c:	4b07      	ldr	r3, [pc, #28]	@ (8008a4c <__assert_func+0x30>)
 8008a2e:	9100      	str	r1, [sp, #0]
 8008a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a34:	4906      	ldr	r1, [pc, #24]	@ (8008a50 <__assert_func+0x34>)
 8008a36:	462b      	mov	r3, r5
 8008a38:	f000 f870 	bl	8008b1c <fiprintf>
 8008a3c:	f000 f880 	bl	8008b40 <abort>
 8008a40:	4b04      	ldr	r3, [pc, #16]	@ (8008a54 <__assert_func+0x38>)
 8008a42:	461c      	mov	r4, r3
 8008a44:	e7f3      	b.n	8008a2e <__assert_func+0x12>
 8008a46:	bf00      	nop
 8008a48:	20000020 	.word	0x20000020
 8008a4c:	0800a325 	.word	0x0800a325
 8008a50:	0800a332 	.word	0x0800a332
 8008a54:	0800a360 	.word	0x0800a360

08008a58 <_calloc_r>:
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	fba1 5402 	umull	r5, r4, r1, r2
 8008a5e:	b934      	cbnz	r4, 8008a6e <_calloc_r+0x16>
 8008a60:	4629      	mov	r1, r5
 8008a62:	f7ff f999 	bl	8007d98 <_malloc_r>
 8008a66:	4606      	mov	r6, r0
 8008a68:	b928      	cbnz	r0, 8008a76 <_calloc_r+0x1e>
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	bd70      	pop	{r4, r5, r6, pc}
 8008a6e:	220c      	movs	r2, #12
 8008a70:	6002      	str	r2, [r0, #0]
 8008a72:	2600      	movs	r6, #0
 8008a74:	e7f9      	b.n	8008a6a <_calloc_r+0x12>
 8008a76:	462a      	mov	r2, r5
 8008a78:	4621      	mov	r1, r4
 8008a7a:	f7fe fa3e 	bl	8006efa <memset>
 8008a7e:	e7f4      	b.n	8008a6a <_calloc_r+0x12>

08008a80 <__ascii_mbtowc>:
 8008a80:	b082      	sub	sp, #8
 8008a82:	b901      	cbnz	r1, 8008a86 <__ascii_mbtowc+0x6>
 8008a84:	a901      	add	r1, sp, #4
 8008a86:	b142      	cbz	r2, 8008a9a <__ascii_mbtowc+0x1a>
 8008a88:	b14b      	cbz	r3, 8008a9e <__ascii_mbtowc+0x1e>
 8008a8a:	7813      	ldrb	r3, [r2, #0]
 8008a8c:	600b      	str	r3, [r1, #0]
 8008a8e:	7812      	ldrb	r2, [r2, #0]
 8008a90:	1e10      	subs	r0, r2, #0
 8008a92:	bf18      	it	ne
 8008a94:	2001      	movne	r0, #1
 8008a96:	b002      	add	sp, #8
 8008a98:	4770      	bx	lr
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	e7fb      	b.n	8008a96 <__ascii_mbtowc+0x16>
 8008a9e:	f06f 0001 	mvn.w	r0, #1
 8008aa2:	e7f8      	b.n	8008a96 <__ascii_mbtowc+0x16>

08008aa4 <_realloc_r>:
 8008aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	4614      	mov	r4, r2
 8008aac:	460d      	mov	r5, r1
 8008aae:	b921      	cbnz	r1, 8008aba <_realloc_r+0x16>
 8008ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	f7ff b96f 	b.w	8007d98 <_malloc_r>
 8008aba:	b92a      	cbnz	r2, 8008ac8 <_realloc_r+0x24>
 8008abc:	f7ff f8f8 	bl	8007cb0 <_free_r>
 8008ac0:	4625      	mov	r5, r4
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac8:	f000 f841 	bl	8008b4e <_malloc_usable_size_r>
 8008acc:	4284      	cmp	r4, r0
 8008ace:	4606      	mov	r6, r0
 8008ad0:	d802      	bhi.n	8008ad8 <_realloc_r+0x34>
 8008ad2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ad6:	d8f4      	bhi.n	8008ac2 <_realloc_r+0x1e>
 8008ad8:	4621      	mov	r1, r4
 8008ada:	4638      	mov	r0, r7
 8008adc:	f7ff f95c 	bl	8007d98 <_malloc_r>
 8008ae0:	4680      	mov	r8, r0
 8008ae2:	b908      	cbnz	r0, 8008ae8 <_realloc_r+0x44>
 8008ae4:	4645      	mov	r5, r8
 8008ae6:	e7ec      	b.n	8008ac2 <_realloc_r+0x1e>
 8008ae8:	42b4      	cmp	r4, r6
 8008aea:	4622      	mov	r2, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	bf28      	it	cs
 8008af0:	4632      	movcs	r2, r6
 8008af2:	f7ff ff85 	bl	8008a00 <memcpy>
 8008af6:	4629      	mov	r1, r5
 8008af8:	4638      	mov	r0, r7
 8008afa:	f7ff f8d9 	bl	8007cb0 <_free_r>
 8008afe:	e7f1      	b.n	8008ae4 <_realloc_r+0x40>

08008b00 <__ascii_wctomb>:
 8008b00:	4603      	mov	r3, r0
 8008b02:	4608      	mov	r0, r1
 8008b04:	b141      	cbz	r1, 8008b18 <__ascii_wctomb+0x18>
 8008b06:	2aff      	cmp	r2, #255	@ 0xff
 8008b08:	d904      	bls.n	8008b14 <__ascii_wctomb+0x14>
 8008b0a:	228a      	movs	r2, #138	@ 0x8a
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b12:	4770      	bx	lr
 8008b14:	700a      	strb	r2, [r1, #0]
 8008b16:	2001      	movs	r0, #1
 8008b18:	4770      	bx	lr
	...

08008b1c <fiprintf>:
 8008b1c:	b40e      	push	{r1, r2, r3}
 8008b1e:	b503      	push	{r0, r1, lr}
 8008b20:	4601      	mov	r1, r0
 8008b22:	ab03      	add	r3, sp, #12
 8008b24:	4805      	ldr	r0, [pc, #20]	@ (8008b3c <fiprintf+0x20>)
 8008b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b2a:	6800      	ldr	r0, [r0, #0]
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	f000 f83f 	bl	8008bb0 <_vfiprintf_r>
 8008b32:	b002      	add	sp, #8
 8008b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b38:	b003      	add	sp, #12
 8008b3a:	4770      	bx	lr
 8008b3c:	20000020 	.word	0x20000020

08008b40 <abort>:
 8008b40:	b508      	push	{r3, lr}
 8008b42:	2006      	movs	r0, #6
 8008b44:	f000 fa08 	bl	8008f58 <raise>
 8008b48:	2001      	movs	r0, #1
 8008b4a:	f7fa f96d 	bl	8002e28 <_exit>

08008b4e <_malloc_usable_size_r>:
 8008b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b52:	1f18      	subs	r0, r3, #4
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bfbc      	itt	lt
 8008b58:	580b      	ldrlt	r3, [r1, r0]
 8008b5a:	18c0      	addlt	r0, r0, r3
 8008b5c:	4770      	bx	lr

08008b5e <__sfputc_r>:
 8008b5e:	6893      	ldr	r3, [r2, #8]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	b410      	push	{r4}
 8008b66:	6093      	str	r3, [r2, #8]
 8008b68:	da08      	bge.n	8008b7c <__sfputc_r+0x1e>
 8008b6a:	6994      	ldr	r4, [r2, #24]
 8008b6c:	42a3      	cmp	r3, r4
 8008b6e:	db01      	blt.n	8008b74 <__sfputc_r+0x16>
 8008b70:	290a      	cmp	r1, #10
 8008b72:	d103      	bne.n	8008b7c <__sfputc_r+0x1e>
 8008b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b78:	f000 b932 	b.w	8008de0 <__swbuf_r>
 8008b7c:	6813      	ldr	r3, [r2, #0]
 8008b7e:	1c58      	adds	r0, r3, #1
 8008b80:	6010      	str	r0, [r2, #0]
 8008b82:	7019      	strb	r1, [r3, #0]
 8008b84:	4608      	mov	r0, r1
 8008b86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <__sfputs_r>:
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	4606      	mov	r6, r0
 8008b90:	460f      	mov	r7, r1
 8008b92:	4614      	mov	r4, r2
 8008b94:	18d5      	adds	r5, r2, r3
 8008b96:	42ac      	cmp	r4, r5
 8008b98:	d101      	bne.n	8008b9e <__sfputs_r+0x12>
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e007      	b.n	8008bae <__sfputs_r+0x22>
 8008b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba2:	463a      	mov	r2, r7
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f7ff ffda 	bl	8008b5e <__sfputc_r>
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	d1f3      	bne.n	8008b96 <__sfputs_r+0xa>
 8008bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bb0 <_vfiprintf_r>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	b09d      	sub	sp, #116	@ 0x74
 8008bb8:	4614      	mov	r4, r2
 8008bba:	4698      	mov	r8, r3
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	b118      	cbz	r0, 8008bc8 <_vfiprintf_r+0x18>
 8008bc0:	6a03      	ldr	r3, [r0, #32]
 8008bc2:	b90b      	cbnz	r3, 8008bc8 <_vfiprintf_r+0x18>
 8008bc4:	f7fe f8ea 	bl	8006d9c <__sinit>
 8008bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bca:	07d9      	lsls	r1, r3, #31
 8008bcc:	d405      	bmi.n	8008bda <_vfiprintf_r+0x2a>
 8008bce:	89ab      	ldrh	r3, [r5, #12]
 8008bd0:	059a      	lsls	r2, r3, #22
 8008bd2:	d402      	bmi.n	8008bda <_vfiprintf_r+0x2a>
 8008bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bd6:	f7fe fa0e 	bl	8006ff6 <__retarget_lock_acquire_recursive>
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	071b      	lsls	r3, r3, #28
 8008bde:	d501      	bpl.n	8008be4 <_vfiprintf_r+0x34>
 8008be0:	692b      	ldr	r3, [r5, #16]
 8008be2:	b99b      	cbnz	r3, 8008c0c <_vfiprintf_r+0x5c>
 8008be4:	4629      	mov	r1, r5
 8008be6:	4630      	mov	r0, r6
 8008be8:	f000 f938 	bl	8008e5c <__swsetup_r>
 8008bec:	b170      	cbz	r0, 8008c0c <_vfiprintf_r+0x5c>
 8008bee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bf0:	07dc      	lsls	r4, r3, #31
 8008bf2:	d504      	bpl.n	8008bfe <_vfiprintf_r+0x4e>
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008bf8:	b01d      	add	sp, #116	@ 0x74
 8008bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfe:	89ab      	ldrh	r3, [r5, #12]
 8008c00:	0598      	lsls	r0, r3, #22
 8008c02:	d4f7      	bmi.n	8008bf4 <_vfiprintf_r+0x44>
 8008c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c06:	f7fe f9f7 	bl	8006ff8 <__retarget_lock_release_recursive>
 8008c0a:	e7f3      	b.n	8008bf4 <_vfiprintf_r+0x44>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c10:	2320      	movs	r3, #32
 8008c12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c1a:	2330      	movs	r3, #48	@ 0x30
 8008c1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008dcc <_vfiprintf_r+0x21c>
 8008c20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c24:	f04f 0901 	mov.w	r9, #1
 8008c28:	4623      	mov	r3, r4
 8008c2a:	469a      	mov	sl, r3
 8008c2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c30:	b10a      	cbz	r2, 8008c36 <_vfiprintf_r+0x86>
 8008c32:	2a25      	cmp	r2, #37	@ 0x25
 8008c34:	d1f9      	bne.n	8008c2a <_vfiprintf_r+0x7a>
 8008c36:	ebba 0b04 	subs.w	fp, sl, r4
 8008c3a:	d00b      	beq.n	8008c54 <_vfiprintf_r+0xa4>
 8008c3c:	465b      	mov	r3, fp
 8008c3e:	4622      	mov	r2, r4
 8008c40:	4629      	mov	r1, r5
 8008c42:	4630      	mov	r0, r6
 8008c44:	f7ff ffa2 	bl	8008b8c <__sfputs_r>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	f000 80a7 	beq.w	8008d9c <_vfiprintf_r+0x1ec>
 8008c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c50:	445a      	add	r2, fp
 8008c52:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c54:	f89a 3000 	ldrb.w	r3, [sl]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 809f 	beq.w	8008d9c <_vfiprintf_r+0x1ec>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c68:	f10a 0a01 	add.w	sl, sl, #1
 8008c6c:	9304      	str	r3, [sp, #16]
 8008c6e:	9307      	str	r3, [sp, #28]
 8008c70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c74:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c76:	4654      	mov	r4, sl
 8008c78:	2205      	movs	r2, #5
 8008c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c7e:	4853      	ldr	r0, [pc, #332]	@ (8008dcc <_vfiprintf_r+0x21c>)
 8008c80:	f7f7 faae 	bl	80001e0 <memchr>
 8008c84:	9a04      	ldr	r2, [sp, #16]
 8008c86:	b9d8      	cbnz	r0, 8008cc0 <_vfiprintf_r+0x110>
 8008c88:	06d1      	lsls	r1, r2, #27
 8008c8a:	bf44      	itt	mi
 8008c8c:	2320      	movmi	r3, #32
 8008c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c92:	0713      	lsls	r3, r2, #28
 8008c94:	bf44      	itt	mi
 8008c96:	232b      	movmi	r3, #43	@ 0x2b
 8008c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ca2:	d015      	beq.n	8008cd0 <_vfiprintf_r+0x120>
 8008ca4:	9a07      	ldr	r2, [sp, #28]
 8008ca6:	4654      	mov	r4, sl
 8008ca8:	2000      	movs	r0, #0
 8008caa:	f04f 0c0a 	mov.w	ip, #10
 8008cae:	4621      	mov	r1, r4
 8008cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cb4:	3b30      	subs	r3, #48	@ 0x30
 8008cb6:	2b09      	cmp	r3, #9
 8008cb8:	d94b      	bls.n	8008d52 <_vfiprintf_r+0x1a2>
 8008cba:	b1b0      	cbz	r0, 8008cea <_vfiprintf_r+0x13a>
 8008cbc:	9207      	str	r2, [sp, #28]
 8008cbe:	e014      	b.n	8008cea <_vfiprintf_r+0x13a>
 8008cc0:	eba0 0308 	sub.w	r3, r0, r8
 8008cc4:	fa09 f303 	lsl.w	r3, r9, r3
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	9304      	str	r3, [sp, #16]
 8008ccc:	46a2      	mov	sl, r4
 8008cce:	e7d2      	b.n	8008c76 <_vfiprintf_r+0xc6>
 8008cd0:	9b03      	ldr	r3, [sp, #12]
 8008cd2:	1d19      	adds	r1, r3, #4
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	9103      	str	r1, [sp, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	bfbb      	ittet	lt
 8008cdc:	425b      	neglt	r3, r3
 8008cde:	f042 0202 	orrlt.w	r2, r2, #2
 8008ce2:	9307      	strge	r3, [sp, #28]
 8008ce4:	9307      	strlt	r3, [sp, #28]
 8008ce6:	bfb8      	it	lt
 8008ce8:	9204      	strlt	r2, [sp, #16]
 8008cea:	7823      	ldrb	r3, [r4, #0]
 8008cec:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cee:	d10a      	bne.n	8008d06 <_vfiprintf_r+0x156>
 8008cf0:	7863      	ldrb	r3, [r4, #1]
 8008cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cf4:	d132      	bne.n	8008d5c <_vfiprintf_r+0x1ac>
 8008cf6:	9b03      	ldr	r3, [sp, #12]
 8008cf8:	1d1a      	adds	r2, r3, #4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	9203      	str	r2, [sp, #12]
 8008cfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d02:	3402      	adds	r4, #2
 8008d04:	9305      	str	r3, [sp, #20]
 8008d06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ddc <_vfiprintf_r+0x22c>
 8008d0a:	7821      	ldrb	r1, [r4, #0]
 8008d0c:	2203      	movs	r2, #3
 8008d0e:	4650      	mov	r0, sl
 8008d10:	f7f7 fa66 	bl	80001e0 <memchr>
 8008d14:	b138      	cbz	r0, 8008d26 <_vfiprintf_r+0x176>
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	eba0 000a 	sub.w	r0, r0, sl
 8008d1c:	2240      	movs	r2, #64	@ 0x40
 8008d1e:	4082      	lsls	r2, r0
 8008d20:	4313      	orrs	r3, r2
 8008d22:	3401      	adds	r4, #1
 8008d24:	9304      	str	r3, [sp, #16]
 8008d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d2a:	4829      	ldr	r0, [pc, #164]	@ (8008dd0 <_vfiprintf_r+0x220>)
 8008d2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d30:	2206      	movs	r2, #6
 8008d32:	f7f7 fa55 	bl	80001e0 <memchr>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d03f      	beq.n	8008dba <_vfiprintf_r+0x20a>
 8008d3a:	4b26      	ldr	r3, [pc, #152]	@ (8008dd4 <_vfiprintf_r+0x224>)
 8008d3c:	bb1b      	cbnz	r3, 8008d86 <_vfiprintf_r+0x1d6>
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	3307      	adds	r3, #7
 8008d42:	f023 0307 	bic.w	r3, r3, #7
 8008d46:	3308      	adds	r3, #8
 8008d48:	9303      	str	r3, [sp, #12]
 8008d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d4c:	443b      	add	r3, r7
 8008d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d50:	e76a      	b.n	8008c28 <_vfiprintf_r+0x78>
 8008d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d56:	460c      	mov	r4, r1
 8008d58:	2001      	movs	r0, #1
 8008d5a:	e7a8      	b.n	8008cae <_vfiprintf_r+0xfe>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	3401      	adds	r4, #1
 8008d60:	9305      	str	r3, [sp, #20]
 8008d62:	4619      	mov	r1, r3
 8008d64:	f04f 0c0a 	mov.w	ip, #10
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d6e:	3a30      	subs	r2, #48	@ 0x30
 8008d70:	2a09      	cmp	r2, #9
 8008d72:	d903      	bls.n	8008d7c <_vfiprintf_r+0x1cc>
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0c6      	beq.n	8008d06 <_vfiprintf_r+0x156>
 8008d78:	9105      	str	r1, [sp, #20]
 8008d7a:	e7c4      	b.n	8008d06 <_vfiprintf_r+0x156>
 8008d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d80:	4604      	mov	r4, r0
 8008d82:	2301      	movs	r3, #1
 8008d84:	e7f0      	b.n	8008d68 <_vfiprintf_r+0x1b8>
 8008d86:	ab03      	add	r3, sp, #12
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	462a      	mov	r2, r5
 8008d8c:	4b12      	ldr	r3, [pc, #72]	@ (8008dd8 <_vfiprintf_r+0x228>)
 8008d8e:	a904      	add	r1, sp, #16
 8008d90:	4630      	mov	r0, r6
 8008d92:	f7fd fbc1 	bl	8006518 <_printf_float>
 8008d96:	4607      	mov	r7, r0
 8008d98:	1c78      	adds	r0, r7, #1
 8008d9a:	d1d6      	bne.n	8008d4a <_vfiprintf_r+0x19a>
 8008d9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d9e:	07d9      	lsls	r1, r3, #31
 8008da0:	d405      	bmi.n	8008dae <_vfiprintf_r+0x1fe>
 8008da2:	89ab      	ldrh	r3, [r5, #12]
 8008da4:	059a      	lsls	r2, r3, #22
 8008da6:	d402      	bmi.n	8008dae <_vfiprintf_r+0x1fe>
 8008da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008daa:	f7fe f925 	bl	8006ff8 <__retarget_lock_release_recursive>
 8008dae:	89ab      	ldrh	r3, [r5, #12]
 8008db0:	065b      	lsls	r3, r3, #25
 8008db2:	f53f af1f 	bmi.w	8008bf4 <_vfiprintf_r+0x44>
 8008db6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008db8:	e71e      	b.n	8008bf8 <_vfiprintf_r+0x48>
 8008dba:	ab03      	add	r3, sp, #12
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	462a      	mov	r2, r5
 8008dc0:	4b05      	ldr	r3, [pc, #20]	@ (8008dd8 <_vfiprintf_r+0x228>)
 8008dc2:	a904      	add	r1, sp, #16
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	f7fd fe3f 	bl	8006a48 <_printf_i>
 8008dca:	e7e4      	b.n	8008d96 <_vfiprintf_r+0x1e6>
 8008dcc:	0800a30a 	.word	0x0800a30a
 8008dd0:	0800a314 	.word	0x0800a314
 8008dd4:	08006519 	.word	0x08006519
 8008dd8:	08008b8d 	.word	0x08008b8d
 8008ddc:	0800a310 	.word	0x0800a310

08008de0 <__swbuf_r>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	460e      	mov	r6, r1
 8008de4:	4614      	mov	r4, r2
 8008de6:	4605      	mov	r5, r0
 8008de8:	b118      	cbz	r0, 8008df2 <__swbuf_r+0x12>
 8008dea:	6a03      	ldr	r3, [r0, #32]
 8008dec:	b90b      	cbnz	r3, 8008df2 <__swbuf_r+0x12>
 8008dee:	f7fd ffd5 	bl	8006d9c <__sinit>
 8008df2:	69a3      	ldr	r3, [r4, #24]
 8008df4:	60a3      	str	r3, [r4, #8]
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	071a      	lsls	r2, r3, #28
 8008dfa:	d501      	bpl.n	8008e00 <__swbuf_r+0x20>
 8008dfc:	6923      	ldr	r3, [r4, #16]
 8008dfe:	b943      	cbnz	r3, 8008e12 <__swbuf_r+0x32>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4628      	mov	r0, r5
 8008e04:	f000 f82a 	bl	8008e5c <__swsetup_r>
 8008e08:	b118      	cbz	r0, 8008e12 <__swbuf_r+0x32>
 8008e0a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008e0e:	4638      	mov	r0, r7
 8008e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	6922      	ldr	r2, [r4, #16]
 8008e16:	1a98      	subs	r0, r3, r2
 8008e18:	6963      	ldr	r3, [r4, #20]
 8008e1a:	b2f6      	uxtb	r6, r6
 8008e1c:	4283      	cmp	r3, r0
 8008e1e:	4637      	mov	r7, r6
 8008e20:	dc05      	bgt.n	8008e2e <__swbuf_r+0x4e>
 8008e22:	4621      	mov	r1, r4
 8008e24:	4628      	mov	r0, r5
 8008e26:	f7ff fd99 	bl	800895c <_fflush_r>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d1ed      	bne.n	8008e0a <__swbuf_r+0x2a>
 8008e2e:	68a3      	ldr	r3, [r4, #8]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	60a3      	str	r3, [r4, #8]
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	701e      	strb	r6, [r3, #0]
 8008e3c:	6962      	ldr	r2, [r4, #20]
 8008e3e:	1c43      	adds	r3, r0, #1
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d004      	beq.n	8008e4e <__swbuf_r+0x6e>
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	07db      	lsls	r3, r3, #31
 8008e48:	d5e1      	bpl.n	8008e0e <__swbuf_r+0x2e>
 8008e4a:	2e0a      	cmp	r6, #10
 8008e4c:	d1df      	bne.n	8008e0e <__swbuf_r+0x2e>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4628      	mov	r0, r5
 8008e52:	f7ff fd83 	bl	800895c <_fflush_r>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d0d9      	beq.n	8008e0e <__swbuf_r+0x2e>
 8008e5a:	e7d6      	b.n	8008e0a <__swbuf_r+0x2a>

08008e5c <__swsetup_r>:
 8008e5c:	b538      	push	{r3, r4, r5, lr}
 8008e5e:	4b29      	ldr	r3, [pc, #164]	@ (8008f04 <__swsetup_r+0xa8>)
 8008e60:	4605      	mov	r5, r0
 8008e62:	6818      	ldr	r0, [r3, #0]
 8008e64:	460c      	mov	r4, r1
 8008e66:	b118      	cbz	r0, 8008e70 <__swsetup_r+0x14>
 8008e68:	6a03      	ldr	r3, [r0, #32]
 8008e6a:	b90b      	cbnz	r3, 8008e70 <__swsetup_r+0x14>
 8008e6c:	f7fd ff96 	bl	8006d9c <__sinit>
 8008e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e74:	0719      	lsls	r1, r3, #28
 8008e76:	d422      	bmi.n	8008ebe <__swsetup_r+0x62>
 8008e78:	06da      	lsls	r2, r3, #27
 8008e7a:	d407      	bmi.n	8008e8c <__swsetup_r+0x30>
 8008e7c:	2209      	movs	r2, #9
 8008e7e:	602a      	str	r2, [r5, #0]
 8008e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e8a:	e033      	b.n	8008ef4 <__swsetup_r+0x98>
 8008e8c:	0758      	lsls	r0, r3, #29
 8008e8e:	d512      	bpl.n	8008eb6 <__swsetup_r+0x5a>
 8008e90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e92:	b141      	cbz	r1, 8008ea6 <__swsetup_r+0x4a>
 8008e94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	d002      	beq.n	8008ea2 <__swsetup_r+0x46>
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f7fe ff07 	bl	8007cb0 <_free_r>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008eac:	81a3      	strh	r3, [r4, #12]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6063      	str	r3, [r4, #4]
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	f043 0308 	orr.w	r3, r3, #8
 8008ebc:	81a3      	strh	r3, [r4, #12]
 8008ebe:	6923      	ldr	r3, [r4, #16]
 8008ec0:	b94b      	cbnz	r3, 8008ed6 <__swsetup_r+0x7a>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ecc:	d003      	beq.n	8008ed6 <__swsetup_r+0x7a>
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f000 f883 	bl	8008fdc <__smakebuf_r>
 8008ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eda:	f013 0201 	ands.w	r2, r3, #1
 8008ede:	d00a      	beq.n	8008ef6 <__swsetup_r+0x9a>
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	60a2      	str	r2, [r4, #8]
 8008ee4:	6962      	ldr	r2, [r4, #20]
 8008ee6:	4252      	negs	r2, r2
 8008ee8:	61a2      	str	r2, [r4, #24]
 8008eea:	6922      	ldr	r2, [r4, #16]
 8008eec:	b942      	cbnz	r2, 8008f00 <__swsetup_r+0xa4>
 8008eee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ef2:	d1c5      	bne.n	8008e80 <__swsetup_r+0x24>
 8008ef4:	bd38      	pop	{r3, r4, r5, pc}
 8008ef6:	0799      	lsls	r1, r3, #30
 8008ef8:	bf58      	it	pl
 8008efa:	6962      	ldrpl	r2, [r4, #20]
 8008efc:	60a2      	str	r2, [r4, #8]
 8008efe:	e7f4      	b.n	8008eea <__swsetup_r+0x8e>
 8008f00:	2000      	movs	r0, #0
 8008f02:	e7f7      	b.n	8008ef4 <__swsetup_r+0x98>
 8008f04:	20000020 	.word	0x20000020

08008f08 <_raise_r>:
 8008f08:	291f      	cmp	r1, #31
 8008f0a:	b538      	push	{r3, r4, r5, lr}
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	d904      	bls.n	8008f1c <_raise_r+0x14>
 8008f12:	2316      	movs	r3, #22
 8008f14:	6003      	str	r3, [r0, #0]
 8008f16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008f1e:	b112      	cbz	r2, 8008f26 <_raise_r+0x1e>
 8008f20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f24:	b94b      	cbnz	r3, 8008f3a <_raise_r+0x32>
 8008f26:	4628      	mov	r0, r5
 8008f28:	f000 f830 	bl	8008f8c <_getpid_r>
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	4601      	mov	r1, r0
 8008f30:	4628      	mov	r0, r5
 8008f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f36:	f000 b817 	b.w	8008f68 <_kill_r>
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d00a      	beq.n	8008f54 <_raise_r+0x4c>
 8008f3e:	1c59      	adds	r1, r3, #1
 8008f40:	d103      	bne.n	8008f4a <_raise_r+0x42>
 8008f42:	2316      	movs	r3, #22
 8008f44:	6003      	str	r3, [r0, #0]
 8008f46:	2001      	movs	r0, #1
 8008f48:	e7e7      	b.n	8008f1a <_raise_r+0x12>
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f50:	4620      	mov	r0, r4
 8008f52:	4798      	blx	r3
 8008f54:	2000      	movs	r0, #0
 8008f56:	e7e0      	b.n	8008f1a <_raise_r+0x12>

08008f58 <raise>:
 8008f58:	4b02      	ldr	r3, [pc, #8]	@ (8008f64 <raise+0xc>)
 8008f5a:	4601      	mov	r1, r0
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	f7ff bfd3 	b.w	8008f08 <_raise_r>
 8008f62:	bf00      	nop
 8008f64:	20000020 	.word	0x20000020

08008f68 <_kill_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4d07      	ldr	r5, [pc, #28]	@ (8008f88 <_kill_r+0x20>)
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4604      	mov	r4, r0
 8008f70:	4608      	mov	r0, r1
 8008f72:	4611      	mov	r1, r2
 8008f74:	602b      	str	r3, [r5, #0]
 8008f76:	f7f9 ff47 	bl	8002e08 <_kill>
 8008f7a:	1c43      	adds	r3, r0, #1
 8008f7c:	d102      	bne.n	8008f84 <_kill_r+0x1c>
 8008f7e:	682b      	ldr	r3, [r5, #0]
 8008f80:	b103      	cbz	r3, 8008f84 <_kill_r+0x1c>
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	bd38      	pop	{r3, r4, r5, pc}
 8008f86:	bf00      	nop
 8008f88:	20000560 	.word	0x20000560

08008f8c <_getpid_r>:
 8008f8c:	f7f9 bf34 	b.w	8002df8 <_getpid>

08008f90 <__swhatbuf_r>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	460c      	mov	r4, r1
 8008f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f98:	2900      	cmp	r1, #0
 8008f9a:	b096      	sub	sp, #88	@ 0x58
 8008f9c:	4615      	mov	r5, r2
 8008f9e:	461e      	mov	r6, r3
 8008fa0:	da0d      	bge.n	8008fbe <__swhatbuf_r+0x2e>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fa8:	f04f 0100 	mov.w	r1, #0
 8008fac:	bf14      	ite	ne
 8008fae:	2340      	movne	r3, #64	@ 0x40
 8008fb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	6031      	str	r1, [r6, #0]
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	b016      	add	sp, #88	@ 0x58
 8008fbc:	bd70      	pop	{r4, r5, r6, pc}
 8008fbe:	466a      	mov	r2, sp
 8008fc0:	f000 f848 	bl	8009054 <_fstat_r>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	dbec      	blt.n	8008fa2 <__swhatbuf_r+0x12>
 8008fc8:	9901      	ldr	r1, [sp, #4]
 8008fca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fd2:	4259      	negs	r1, r3
 8008fd4:	4159      	adcs	r1, r3
 8008fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fda:	e7eb      	b.n	8008fb4 <__swhatbuf_r+0x24>

08008fdc <__smakebuf_r>:
 8008fdc:	898b      	ldrh	r3, [r1, #12]
 8008fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fe0:	079d      	lsls	r5, r3, #30
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	460c      	mov	r4, r1
 8008fe6:	d507      	bpl.n	8008ff8 <__smakebuf_r+0x1c>
 8008fe8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	6123      	str	r3, [r4, #16]
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	6163      	str	r3, [r4, #20]
 8008ff4:	b003      	add	sp, #12
 8008ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff8:	ab01      	add	r3, sp, #4
 8008ffa:	466a      	mov	r2, sp
 8008ffc:	f7ff ffc8 	bl	8008f90 <__swhatbuf_r>
 8009000:	9f00      	ldr	r7, [sp, #0]
 8009002:	4605      	mov	r5, r0
 8009004:	4639      	mov	r1, r7
 8009006:	4630      	mov	r0, r6
 8009008:	f7fe fec6 	bl	8007d98 <_malloc_r>
 800900c:	b948      	cbnz	r0, 8009022 <__smakebuf_r+0x46>
 800900e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009012:	059a      	lsls	r2, r3, #22
 8009014:	d4ee      	bmi.n	8008ff4 <__smakebuf_r+0x18>
 8009016:	f023 0303 	bic.w	r3, r3, #3
 800901a:	f043 0302 	orr.w	r3, r3, #2
 800901e:	81a3      	strh	r3, [r4, #12]
 8009020:	e7e2      	b.n	8008fe8 <__smakebuf_r+0xc>
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	6020      	str	r0, [r4, #0]
 8009026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800902a:	81a3      	strh	r3, [r4, #12]
 800902c:	9b01      	ldr	r3, [sp, #4]
 800902e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009032:	b15b      	cbz	r3, 800904c <__smakebuf_r+0x70>
 8009034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009038:	4630      	mov	r0, r6
 800903a:	f000 f81d 	bl	8009078 <_isatty_r>
 800903e:	b128      	cbz	r0, 800904c <__smakebuf_r+0x70>
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	f023 0303 	bic.w	r3, r3, #3
 8009046:	f043 0301 	orr.w	r3, r3, #1
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	431d      	orrs	r5, r3
 8009050:	81a5      	strh	r5, [r4, #12]
 8009052:	e7cf      	b.n	8008ff4 <__smakebuf_r+0x18>

08009054 <_fstat_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d07      	ldr	r5, [pc, #28]	@ (8009074 <_fstat_r+0x20>)
 8009058:	2300      	movs	r3, #0
 800905a:	4604      	mov	r4, r0
 800905c:	4608      	mov	r0, r1
 800905e:	4611      	mov	r1, r2
 8009060:	602b      	str	r3, [r5, #0]
 8009062:	f7f9 ff31 	bl	8002ec8 <_fstat>
 8009066:	1c43      	adds	r3, r0, #1
 8009068:	d102      	bne.n	8009070 <_fstat_r+0x1c>
 800906a:	682b      	ldr	r3, [r5, #0]
 800906c:	b103      	cbz	r3, 8009070 <_fstat_r+0x1c>
 800906e:	6023      	str	r3, [r4, #0]
 8009070:	bd38      	pop	{r3, r4, r5, pc}
 8009072:	bf00      	nop
 8009074:	20000560 	.word	0x20000560

08009078 <_isatty_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4d06      	ldr	r5, [pc, #24]	@ (8009094 <_isatty_r+0x1c>)
 800907c:	2300      	movs	r3, #0
 800907e:	4604      	mov	r4, r0
 8009080:	4608      	mov	r0, r1
 8009082:	602b      	str	r3, [r5, #0]
 8009084:	f7f9 ff30 	bl	8002ee8 <_isatty>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	d102      	bne.n	8009092 <_isatty_r+0x1a>
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	b103      	cbz	r3, 8009092 <_isatty_r+0x1a>
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	20000560 	.word	0x20000560

08009098 <cos>:
 8009098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800909a:	ec53 2b10 	vmov	r2, r3, d0
 800909e:	4826      	ldr	r0, [pc, #152]	@ (8009138 <cos+0xa0>)
 80090a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80090a4:	4281      	cmp	r1, r0
 80090a6:	d806      	bhi.n	80090b6 <cos+0x1e>
 80090a8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009130 <cos+0x98>
 80090ac:	b005      	add	sp, #20
 80090ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80090b2:	f000 b899 	b.w	80091e8 <__kernel_cos>
 80090b6:	4821      	ldr	r0, [pc, #132]	@ (800913c <cos+0xa4>)
 80090b8:	4281      	cmp	r1, r0
 80090ba:	d908      	bls.n	80090ce <cos+0x36>
 80090bc:	4610      	mov	r0, r2
 80090be:	4619      	mov	r1, r3
 80090c0:	f7f7 f8ea 	bl	8000298 <__aeabi_dsub>
 80090c4:	ec41 0b10 	vmov	d0, r0, r1
 80090c8:	b005      	add	sp, #20
 80090ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80090ce:	4668      	mov	r0, sp
 80090d0:	f000 fa0e 	bl	80094f0 <__ieee754_rem_pio2>
 80090d4:	f000 0003 	and.w	r0, r0, #3
 80090d8:	2801      	cmp	r0, #1
 80090da:	d00b      	beq.n	80090f4 <cos+0x5c>
 80090dc:	2802      	cmp	r0, #2
 80090de:	d015      	beq.n	800910c <cos+0x74>
 80090e0:	b9d8      	cbnz	r0, 800911a <cos+0x82>
 80090e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80090e6:	ed9d 0b00 	vldr	d0, [sp]
 80090ea:	f000 f87d 	bl	80091e8 <__kernel_cos>
 80090ee:	ec51 0b10 	vmov	r0, r1, d0
 80090f2:	e7e7      	b.n	80090c4 <cos+0x2c>
 80090f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80090f8:	ed9d 0b00 	vldr	d0, [sp]
 80090fc:	f000 f93c 	bl	8009378 <__kernel_sin>
 8009100:	ec53 2b10 	vmov	r2, r3, d0
 8009104:	4610      	mov	r0, r2
 8009106:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800910a:	e7db      	b.n	80090c4 <cos+0x2c>
 800910c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009110:	ed9d 0b00 	vldr	d0, [sp]
 8009114:	f000 f868 	bl	80091e8 <__kernel_cos>
 8009118:	e7f2      	b.n	8009100 <cos+0x68>
 800911a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800911e:	ed9d 0b00 	vldr	d0, [sp]
 8009122:	2001      	movs	r0, #1
 8009124:	f000 f928 	bl	8009378 <__kernel_sin>
 8009128:	e7e1      	b.n	80090ee <cos+0x56>
 800912a:	bf00      	nop
 800912c:	f3af 8000 	nop.w
	...
 8009138:	3fe921fb 	.word	0x3fe921fb
 800913c:	7fefffff 	.word	0x7fefffff

08009140 <sin>:
 8009140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009142:	ec53 2b10 	vmov	r2, r3, d0
 8009146:	4826      	ldr	r0, [pc, #152]	@ (80091e0 <sin+0xa0>)
 8009148:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800914c:	4281      	cmp	r1, r0
 800914e:	d807      	bhi.n	8009160 <sin+0x20>
 8009150:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80091d8 <sin+0x98>
 8009154:	2000      	movs	r0, #0
 8009156:	b005      	add	sp, #20
 8009158:	f85d eb04 	ldr.w	lr, [sp], #4
 800915c:	f000 b90c 	b.w	8009378 <__kernel_sin>
 8009160:	4820      	ldr	r0, [pc, #128]	@ (80091e4 <sin+0xa4>)
 8009162:	4281      	cmp	r1, r0
 8009164:	d908      	bls.n	8009178 <sin+0x38>
 8009166:	4610      	mov	r0, r2
 8009168:	4619      	mov	r1, r3
 800916a:	f7f7 f895 	bl	8000298 <__aeabi_dsub>
 800916e:	ec41 0b10 	vmov	d0, r0, r1
 8009172:	b005      	add	sp, #20
 8009174:	f85d fb04 	ldr.w	pc, [sp], #4
 8009178:	4668      	mov	r0, sp
 800917a:	f000 f9b9 	bl	80094f0 <__ieee754_rem_pio2>
 800917e:	f000 0003 	and.w	r0, r0, #3
 8009182:	2801      	cmp	r0, #1
 8009184:	d00c      	beq.n	80091a0 <sin+0x60>
 8009186:	2802      	cmp	r0, #2
 8009188:	d011      	beq.n	80091ae <sin+0x6e>
 800918a:	b9e8      	cbnz	r0, 80091c8 <sin+0x88>
 800918c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009190:	ed9d 0b00 	vldr	d0, [sp]
 8009194:	2001      	movs	r0, #1
 8009196:	f000 f8ef 	bl	8009378 <__kernel_sin>
 800919a:	ec51 0b10 	vmov	r0, r1, d0
 800919e:	e7e6      	b.n	800916e <sin+0x2e>
 80091a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091a4:	ed9d 0b00 	vldr	d0, [sp]
 80091a8:	f000 f81e 	bl	80091e8 <__kernel_cos>
 80091ac:	e7f5      	b.n	800919a <sin+0x5a>
 80091ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091b2:	ed9d 0b00 	vldr	d0, [sp]
 80091b6:	2001      	movs	r0, #1
 80091b8:	f000 f8de 	bl	8009378 <__kernel_sin>
 80091bc:	ec53 2b10 	vmov	r2, r3, d0
 80091c0:	4610      	mov	r0, r2
 80091c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80091c6:	e7d2      	b.n	800916e <sin+0x2e>
 80091c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091cc:	ed9d 0b00 	vldr	d0, [sp]
 80091d0:	f000 f80a 	bl	80091e8 <__kernel_cos>
 80091d4:	e7f2      	b.n	80091bc <sin+0x7c>
 80091d6:	bf00      	nop
	...
 80091e0:	3fe921fb 	.word	0x3fe921fb
 80091e4:	7fefffff 	.word	0x7fefffff

080091e8 <__kernel_cos>:
 80091e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	ec57 6b10 	vmov	r6, r7, d0
 80091f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80091f4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80091f8:	ed8d 1b00 	vstr	d1, [sp]
 80091fc:	d206      	bcs.n	800920c <__kernel_cos+0x24>
 80091fe:	4630      	mov	r0, r6
 8009200:	4639      	mov	r1, r7
 8009202:	f7f7 fcb1 	bl	8000b68 <__aeabi_d2iz>
 8009206:	2800      	cmp	r0, #0
 8009208:	f000 8088 	beq.w	800931c <__kernel_cos+0x134>
 800920c:	4632      	mov	r2, r6
 800920e:	463b      	mov	r3, r7
 8009210:	4630      	mov	r0, r6
 8009212:	4639      	mov	r1, r7
 8009214:	f7f7 f9f8 	bl	8000608 <__aeabi_dmul>
 8009218:	4b51      	ldr	r3, [pc, #324]	@ (8009360 <__kernel_cos+0x178>)
 800921a:	2200      	movs	r2, #0
 800921c:	4604      	mov	r4, r0
 800921e:	460d      	mov	r5, r1
 8009220:	f7f7 f9f2 	bl	8000608 <__aeabi_dmul>
 8009224:	a340      	add	r3, pc, #256	@ (adr r3, 8009328 <__kernel_cos+0x140>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	4682      	mov	sl, r0
 800922c:	468b      	mov	fp, r1
 800922e:	4620      	mov	r0, r4
 8009230:	4629      	mov	r1, r5
 8009232:	f7f7 f9e9 	bl	8000608 <__aeabi_dmul>
 8009236:	a33e      	add	r3, pc, #248	@ (adr r3, 8009330 <__kernel_cos+0x148>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f7f7 f82e 	bl	800029c <__adddf3>
 8009240:	4622      	mov	r2, r4
 8009242:	462b      	mov	r3, r5
 8009244:	f7f7 f9e0 	bl	8000608 <__aeabi_dmul>
 8009248:	a33b      	add	r3, pc, #236	@ (adr r3, 8009338 <__kernel_cos+0x150>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	f7f7 f823 	bl	8000298 <__aeabi_dsub>
 8009252:	4622      	mov	r2, r4
 8009254:	462b      	mov	r3, r5
 8009256:	f7f7 f9d7 	bl	8000608 <__aeabi_dmul>
 800925a:	a339      	add	r3, pc, #228	@ (adr r3, 8009340 <__kernel_cos+0x158>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	f7f7 f81c 	bl	800029c <__adddf3>
 8009264:	4622      	mov	r2, r4
 8009266:	462b      	mov	r3, r5
 8009268:	f7f7 f9ce 	bl	8000608 <__aeabi_dmul>
 800926c:	a336      	add	r3, pc, #216	@ (adr r3, 8009348 <__kernel_cos+0x160>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	f7f7 f811 	bl	8000298 <__aeabi_dsub>
 8009276:	4622      	mov	r2, r4
 8009278:	462b      	mov	r3, r5
 800927a:	f7f7 f9c5 	bl	8000608 <__aeabi_dmul>
 800927e:	a334      	add	r3, pc, #208	@ (adr r3, 8009350 <__kernel_cos+0x168>)
 8009280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009284:	f7f7 f80a 	bl	800029c <__adddf3>
 8009288:	4622      	mov	r2, r4
 800928a:	462b      	mov	r3, r5
 800928c:	f7f7 f9bc 	bl	8000608 <__aeabi_dmul>
 8009290:	4622      	mov	r2, r4
 8009292:	462b      	mov	r3, r5
 8009294:	f7f7 f9b8 	bl	8000608 <__aeabi_dmul>
 8009298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800929c:	4604      	mov	r4, r0
 800929e:	460d      	mov	r5, r1
 80092a0:	4630      	mov	r0, r6
 80092a2:	4639      	mov	r1, r7
 80092a4:	f7f7 f9b0 	bl	8000608 <__aeabi_dmul>
 80092a8:	460b      	mov	r3, r1
 80092aa:	4602      	mov	r2, r0
 80092ac:	4629      	mov	r1, r5
 80092ae:	4620      	mov	r0, r4
 80092b0:	f7f6 fff2 	bl	8000298 <__aeabi_dsub>
 80092b4:	4b2b      	ldr	r3, [pc, #172]	@ (8009364 <__kernel_cos+0x17c>)
 80092b6:	4598      	cmp	r8, r3
 80092b8:	4606      	mov	r6, r0
 80092ba:	460f      	mov	r7, r1
 80092bc:	d810      	bhi.n	80092e0 <__kernel_cos+0xf8>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	4650      	mov	r0, sl
 80092c4:	4659      	mov	r1, fp
 80092c6:	f7f6 ffe7 	bl	8000298 <__aeabi_dsub>
 80092ca:	460b      	mov	r3, r1
 80092cc:	4926      	ldr	r1, [pc, #152]	@ (8009368 <__kernel_cos+0x180>)
 80092ce:	4602      	mov	r2, r0
 80092d0:	2000      	movs	r0, #0
 80092d2:	f7f6 ffe1 	bl	8000298 <__aeabi_dsub>
 80092d6:	ec41 0b10 	vmov	d0, r0, r1
 80092da:	b003      	add	sp, #12
 80092dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e0:	4b22      	ldr	r3, [pc, #136]	@ (800936c <__kernel_cos+0x184>)
 80092e2:	4921      	ldr	r1, [pc, #132]	@ (8009368 <__kernel_cos+0x180>)
 80092e4:	4598      	cmp	r8, r3
 80092e6:	bf8c      	ite	hi
 80092e8:	4d21      	ldrhi	r5, [pc, #132]	@ (8009370 <__kernel_cos+0x188>)
 80092ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80092ee:	2400      	movs	r4, #0
 80092f0:	4622      	mov	r2, r4
 80092f2:	462b      	mov	r3, r5
 80092f4:	2000      	movs	r0, #0
 80092f6:	f7f6 ffcf 	bl	8000298 <__aeabi_dsub>
 80092fa:	4622      	mov	r2, r4
 80092fc:	4680      	mov	r8, r0
 80092fe:	4689      	mov	r9, r1
 8009300:	462b      	mov	r3, r5
 8009302:	4650      	mov	r0, sl
 8009304:	4659      	mov	r1, fp
 8009306:	f7f6 ffc7 	bl	8000298 <__aeabi_dsub>
 800930a:	4632      	mov	r2, r6
 800930c:	463b      	mov	r3, r7
 800930e:	f7f6 ffc3 	bl	8000298 <__aeabi_dsub>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	4640      	mov	r0, r8
 8009318:	4649      	mov	r1, r9
 800931a:	e7da      	b.n	80092d2 <__kernel_cos+0xea>
 800931c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009358 <__kernel_cos+0x170>
 8009320:	e7db      	b.n	80092da <__kernel_cos+0xf2>
 8009322:	bf00      	nop
 8009324:	f3af 8000 	nop.w
 8009328:	be8838d4 	.word	0xbe8838d4
 800932c:	bda8fae9 	.word	0xbda8fae9
 8009330:	bdb4b1c4 	.word	0xbdb4b1c4
 8009334:	3e21ee9e 	.word	0x3e21ee9e
 8009338:	809c52ad 	.word	0x809c52ad
 800933c:	3e927e4f 	.word	0x3e927e4f
 8009340:	19cb1590 	.word	0x19cb1590
 8009344:	3efa01a0 	.word	0x3efa01a0
 8009348:	16c15177 	.word	0x16c15177
 800934c:	3f56c16c 	.word	0x3f56c16c
 8009350:	5555554c 	.word	0x5555554c
 8009354:	3fa55555 	.word	0x3fa55555
 8009358:	00000000 	.word	0x00000000
 800935c:	3ff00000 	.word	0x3ff00000
 8009360:	3fe00000 	.word	0x3fe00000
 8009364:	3fd33332 	.word	0x3fd33332
 8009368:	3ff00000 	.word	0x3ff00000
 800936c:	3fe90000 	.word	0x3fe90000
 8009370:	3fd20000 	.word	0x3fd20000
 8009374:	00000000 	.word	0x00000000

08009378 <__kernel_sin>:
 8009378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937c:	ec55 4b10 	vmov	r4, r5, d0
 8009380:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009384:	b085      	sub	sp, #20
 8009386:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800938a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800938e:	4680      	mov	r8, r0
 8009390:	d205      	bcs.n	800939e <__kernel_sin+0x26>
 8009392:	4620      	mov	r0, r4
 8009394:	4629      	mov	r1, r5
 8009396:	f7f7 fbe7 	bl	8000b68 <__aeabi_d2iz>
 800939a:	2800      	cmp	r0, #0
 800939c:	d052      	beq.n	8009444 <__kernel_sin+0xcc>
 800939e:	4622      	mov	r2, r4
 80093a0:	462b      	mov	r3, r5
 80093a2:	4620      	mov	r0, r4
 80093a4:	4629      	mov	r1, r5
 80093a6:	f7f7 f92f 	bl	8000608 <__aeabi_dmul>
 80093aa:	4682      	mov	sl, r0
 80093ac:	468b      	mov	fp, r1
 80093ae:	4602      	mov	r2, r0
 80093b0:	460b      	mov	r3, r1
 80093b2:	4620      	mov	r0, r4
 80093b4:	4629      	mov	r1, r5
 80093b6:	f7f7 f927 	bl	8000608 <__aeabi_dmul>
 80093ba:	a342      	add	r3, pc, #264	@ (adr r3, 80094c4 <__kernel_sin+0x14c>)
 80093bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c0:	e9cd 0100 	strd	r0, r1, [sp]
 80093c4:	4650      	mov	r0, sl
 80093c6:	4659      	mov	r1, fp
 80093c8:	f7f7 f91e 	bl	8000608 <__aeabi_dmul>
 80093cc:	a33f      	add	r3, pc, #252	@ (adr r3, 80094cc <__kernel_sin+0x154>)
 80093ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d2:	f7f6 ff61 	bl	8000298 <__aeabi_dsub>
 80093d6:	4652      	mov	r2, sl
 80093d8:	465b      	mov	r3, fp
 80093da:	f7f7 f915 	bl	8000608 <__aeabi_dmul>
 80093de:	a33d      	add	r3, pc, #244	@ (adr r3, 80094d4 <__kernel_sin+0x15c>)
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	f7f6 ff5a 	bl	800029c <__adddf3>
 80093e8:	4652      	mov	r2, sl
 80093ea:	465b      	mov	r3, fp
 80093ec:	f7f7 f90c 	bl	8000608 <__aeabi_dmul>
 80093f0:	a33a      	add	r3, pc, #232	@ (adr r3, 80094dc <__kernel_sin+0x164>)
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	f7f6 ff4f 	bl	8000298 <__aeabi_dsub>
 80093fa:	4652      	mov	r2, sl
 80093fc:	465b      	mov	r3, fp
 80093fe:	f7f7 f903 	bl	8000608 <__aeabi_dmul>
 8009402:	a338      	add	r3, pc, #224	@ (adr r3, 80094e4 <__kernel_sin+0x16c>)
 8009404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009408:	f7f6 ff48 	bl	800029c <__adddf3>
 800940c:	4606      	mov	r6, r0
 800940e:	460f      	mov	r7, r1
 8009410:	f1b8 0f00 	cmp.w	r8, #0
 8009414:	d11b      	bne.n	800944e <__kernel_sin+0xd6>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4650      	mov	r0, sl
 800941c:	4659      	mov	r1, fp
 800941e:	f7f7 f8f3 	bl	8000608 <__aeabi_dmul>
 8009422:	a325      	add	r3, pc, #148	@ (adr r3, 80094b8 <__kernel_sin+0x140>)
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f7f6 ff36 	bl	8000298 <__aeabi_dsub>
 800942c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009430:	f7f7 f8ea 	bl	8000608 <__aeabi_dmul>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4620      	mov	r0, r4
 800943a:	4629      	mov	r1, r5
 800943c:	f7f6 ff2e 	bl	800029c <__adddf3>
 8009440:	4604      	mov	r4, r0
 8009442:	460d      	mov	r5, r1
 8009444:	ec45 4b10 	vmov	d0, r4, r5
 8009448:	b005      	add	sp, #20
 800944a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009452:	4b1b      	ldr	r3, [pc, #108]	@ (80094c0 <__kernel_sin+0x148>)
 8009454:	2200      	movs	r2, #0
 8009456:	f7f7 f8d7 	bl	8000608 <__aeabi_dmul>
 800945a:	4632      	mov	r2, r6
 800945c:	4680      	mov	r8, r0
 800945e:	4689      	mov	r9, r1
 8009460:	463b      	mov	r3, r7
 8009462:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009466:	f7f7 f8cf 	bl	8000608 <__aeabi_dmul>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4640      	mov	r0, r8
 8009470:	4649      	mov	r1, r9
 8009472:	f7f6 ff11 	bl	8000298 <__aeabi_dsub>
 8009476:	4652      	mov	r2, sl
 8009478:	465b      	mov	r3, fp
 800947a:	f7f7 f8c5 	bl	8000608 <__aeabi_dmul>
 800947e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009482:	f7f6 ff09 	bl	8000298 <__aeabi_dsub>
 8009486:	a30c      	add	r3, pc, #48	@ (adr r3, 80094b8 <__kernel_sin+0x140>)
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	4606      	mov	r6, r0
 800948e:	460f      	mov	r7, r1
 8009490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009494:	f7f7 f8b8 	bl	8000608 <__aeabi_dmul>
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	4630      	mov	r0, r6
 800949e:	4639      	mov	r1, r7
 80094a0:	f7f6 fefc 	bl	800029c <__adddf3>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4620      	mov	r0, r4
 80094aa:	4629      	mov	r1, r5
 80094ac:	f7f6 fef4 	bl	8000298 <__aeabi_dsub>
 80094b0:	e7c6      	b.n	8009440 <__kernel_sin+0xc8>
 80094b2:	bf00      	nop
 80094b4:	f3af 8000 	nop.w
 80094b8:	55555549 	.word	0x55555549
 80094bc:	3fc55555 	.word	0x3fc55555
 80094c0:	3fe00000 	.word	0x3fe00000
 80094c4:	5acfd57c 	.word	0x5acfd57c
 80094c8:	3de5d93a 	.word	0x3de5d93a
 80094cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80094d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80094d4:	57b1fe7d 	.word	0x57b1fe7d
 80094d8:	3ec71de3 	.word	0x3ec71de3
 80094dc:	19c161d5 	.word	0x19c161d5
 80094e0:	3f2a01a0 	.word	0x3f2a01a0
 80094e4:	1110f8a6 	.word	0x1110f8a6
 80094e8:	3f811111 	.word	0x3f811111
 80094ec:	00000000 	.word	0x00000000

080094f0 <__ieee754_rem_pio2>:
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	ec57 6b10 	vmov	r6, r7, d0
 80094f8:	4bc5      	ldr	r3, [pc, #788]	@ (8009810 <__ieee754_rem_pio2+0x320>)
 80094fa:	b08d      	sub	sp, #52	@ 0x34
 80094fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009500:	4598      	cmp	r8, r3
 8009502:	4604      	mov	r4, r0
 8009504:	9704      	str	r7, [sp, #16]
 8009506:	d807      	bhi.n	8009518 <__ieee754_rem_pio2+0x28>
 8009508:	2200      	movs	r2, #0
 800950a:	2300      	movs	r3, #0
 800950c:	ed80 0b00 	vstr	d0, [r0]
 8009510:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009514:	2500      	movs	r5, #0
 8009516:	e028      	b.n	800956a <__ieee754_rem_pio2+0x7a>
 8009518:	4bbe      	ldr	r3, [pc, #760]	@ (8009814 <__ieee754_rem_pio2+0x324>)
 800951a:	4598      	cmp	r8, r3
 800951c:	d878      	bhi.n	8009610 <__ieee754_rem_pio2+0x120>
 800951e:	9b04      	ldr	r3, [sp, #16]
 8009520:	4dbd      	ldr	r5, [pc, #756]	@ (8009818 <__ieee754_rem_pio2+0x328>)
 8009522:	2b00      	cmp	r3, #0
 8009524:	4630      	mov	r0, r6
 8009526:	a3ac      	add	r3, pc, #688	@ (adr r3, 80097d8 <__ieee754_rem_pio2+0x2e8>)
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	4639      	mov	r1, r7
 800952e:	dd38      	ble.n	80095a2 <__ieee754_rem_pio2+0xb2>
 8009530:	f7f6 feb2 	bl	8000298 <__aeabi_dsub>
 8009534:	45a8      	cmp	r8, r5
 8009536:	4606      	mov	r6, r0
 8009538:	460f      	mov	r7, r1
 800953a:	d01a      	beq.n	8009572 <__ieee754_rem_pio2+0x82>
 800953c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80097e0 <__ieee754_rem_pio2+0x2f0>)
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	f7f6 fea9 	bl	8000298 <__aeabi_dsub>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4680      	mov	r8, r0
 800954c:	4689      	mov	r9, r1
 800954e:	4630      	mov	r0, r6
 8009550:	4639      	mov	r1, r7
 8009552:	f7f6 fea1 	bl	8000298 <__aeabi_dsub>
 8009556:	a3a2      	add	r3, pc, #648	@ (adr r3, 80097e0 <__ieee754_rem_pio2+0x2f0>)
 8009558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955c:	f7f6 fe9c 	bl	8000298 <__aeabi_dsub>
 8009560:	e9c4 8900 	strd	r8, r9, [r4]
 8009564:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009568:	2501      	movs	r5, #1
 800956a:	4628      	mov	r0, r5
 800956c:	b00d      	add	sp, #52	@ 0x34
 800956e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009572:	a39d      	add	r3, pc, #628	@ (adr r3, 80097e8 <__ieee754_rem_pio2+0x2f8>)
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	f7f6 fe8e 	bl	8000298 <__aeabi_dsub>
 800957c:	a39c      	add	r3, pc, #624	@ (adr r3, 80097f0 <__ieee754_rem_pio2+0x300>)
 800957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009582:	4606      	mov	r6, r0
 8009584:	460f      	mov	r7, r1
 8009586:	f7f6 fe87 	bl	8000298 <__aeabi_dsub>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	4680      	mov	r8, r0
 8009590:	4689      	mov	r9, r1
 8009592:	4630      	mov	r0, r6
 8009594:	4639      	mov	r1, r7
 8009596:	f7f6 fe7f 	bl	8000298 <__aeabi_dsub>
 800959a:	a395      	add	r3, pc, #596	@ (adr r3, 80097f0 <__ieee754_rem_pio2+0x300>)
 800959c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a0:	e7dc      	b.n	800955c <__ieee754_rem_pio2+0x6c>
 80095a2:	f7f6 fe7b 	bl	800029c <__adddf3>
 80095a6:	45a8      	cmp	r8, r5
 80095a8:	4606      	mov	r6, r0
 80095aa:	460f      	mov	r7, r1
 80095ac:	d018      	beq.n	80095e0 <__ieee754_rem_pio2+0xf0>
 80095ae:	a38c      	add	r3, pc, #560	@ (adr r3, 80097e0 <__ieee754_rem_pio2+0x2f0>)
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	f7f6 fe72 	bl	800029c <__adddf3>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4680      	mov	r8, r0
 80095be:	4689      	mov	r9, r1
 80095c0:	4630      	mov	r0, r6
 80095c2:	4639      	mov	r1, r7
 80095c4:	f7f6 fe68 	bl	8000298 <__aeabi_dsub>
 80095c8:	a385      	add	r3, pc, #532	@ (adr r3, 80097e0 <__ieee754_rem_pio2+0x2f0>)
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	f7f6 fe65 	bl	800029c <__adddf3>
 80095d2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80095d6:	e9c4 8900 	strd	r8, r9, [r4]
 80095da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80095de:	e7c4      	b.n	800956a <__ieee754_rem_pio2+0x7a>
 80095e0:	a381      	add	r3, pc, #516	@ (adr r3, 80097e8 <__ieee754_rem_pio2+0x2f8>)
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	f7f6 fe59 	bl	800029c <__adddf3>
 80095ea:	a381      	add	r3, pc, #516	@ (adr r3, 80097f0 <__ieee754_rem_pio2+0x300>)
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	4606      	mov	r6, r0
 80095f2:	460f      	mov	r7, r1
 80095f4:	f7f6 fe52 	bl	800029c <__adddf3>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4680      	mov	r8, r0
 80095fe:	4689      	mov	r9, r1
 8009600:	4630      	mov	r0, r6
 8009602:	4639      	mov	r1, r7
 8009604:	f7f6 fe48 	bl	8000298 <__aeabi_dsub>
 8009608:	a379      	add	r3, pc, #484	@ (adr r3, 80097f0 <__ieee754_rem_pio2+0x300>)
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	e7de      	b.n	80095ce <__ieee754_rem_pio2+0xde>
 8009610:	4b82      	ldr	r3, [pc, #520]	@ (800981c <__ieee754_rem_pio2+0x32c>)
 8009612:	4598      	cmp	r8, r3
 8009614:	f200 80d1 	bhi.w	80097ba <__ieee754_rem_pio2+0x2ca>
 8009618:	f000 f966 	bl	80098e8 <fabs>
 800961c:	ec57 6b10 	vmov	r6, r7, d0
 8009620:	a375      	add	r3, pc, #468	@ (adr r3, 80097f8 <__ieee754_rem_pio2+0x308>)
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	4630      	mov	r0, r6
 8009628:	4639      	mov	r1, r7
 800962a:	f7f6 ffed 	bl	8000608 <__aeabi_dmul>
 800962e:	4b7c      	ldr	r3, [pc, #496]	@ (8009820 <__ieee754_rem_pio2+0x330>)
 8009630:	2200      	movs	r2, #0
 8009632:	f7f6 fe33 	bl	800029c <__adddf3>
 8009636:	f7f7 fa97 	bl	8000b68 <__aeabi_d2iz>
 800963a:	4605      	mov	r5, r0
 800963c:	f7f6 ff7a 	bl	8000534 <__aeabi_i2d>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009648:	a363      	add	r3, pc, #396	@ (adr r3, 80097d8 <__ieee754_rem_pio2+0x2e8>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7f6 ffdb 	bl	8000608 <__aeabi_dmul>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	4630      	mov	r0, r6
 8009658:	4639      	mov	r1, r7
 800965a:	f7f6 fe1d 	bl	8000298 <__aeabi_dsub>
 800965e:	a360      	add	r3, pc, #384	@ (adr r3, 80097e0 <__ieee754_rem_pio2+0x2f0>)
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	4682      	mov	sl, r0
 8009666:	468b      	mov	fp, r1
 8009668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800966c:	f7f6 ffcc 	bl	8000608 <__aeabi_dmul>
 8009670:	2d1f      	cmp	r5, #31
 8009672:	4606      	mov	r6, r0
 8009674:	460f      	mov	r7, r1
 8009676:	dc0c      	bgt.n	8009692 <__ieee754_rem_pio2+0x1a2>
 8009678:	4b6a      	ldr	r3, [pc, #424]	@ (8009824 <__ieee754_rem_pio2+0x334>)
 800967a:	1e6a      	subs	r2, r5, #1
 800967c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009680:	4543      	cmp	r3, r8
 8009682:	d006      	beq.n	8009692 <__ieee754_rem_pio2+0x1a2>
 8009684:	4632      	mov	r2, r6
 8009686:	463b      	mov	r3, r7
 8009688:	4650      	mov	r0, sl
 800968a:	4659      	mov	r1, fp
 800968c:	f7f6 fe04 	bl	8000298 <__aeabi_dsub>
 8009690:	e00e      	b.n	80096b0 <__ieee754_rem_pio2+0x1c0>
 8009692:	463b      	mov	r3, r7
 8009694:	4632      	mov	r2, r6
 8009696:	4650      	mov	r0, sl
 8009698:	4659      	mov	r1, fp
 800969a:	f7f6 fdfd 	bl	8000298 <__aeabi_dsub>
 800969e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80096a2:	9305      	str	r3, [sp, #20]
 80096a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80096a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80096ac:	2b10      	cmp	r3, #16
 80096ae:	dc02      	bgt.n	80096b6 <__ieee754_rem_pio2+0x1c6>
 80096b0:	e9c4 0100 	strd	r0, r1, [r4]
 80096b4:	e039      	b.n	800972a <__ieee754_rem_pio2+0x23a>
 80096b6:	a34c      	add	r3, pc, #304	@ (adr r3, 80097e8 <__ieee754_rem_pio2+0x2f8>)
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096c0:	f7f6 ffa2 	bl	8000608 <__aeabi_dmul>
 80096c4:	4606      	mov	r6, r0
 80096c6:	460f      	mov	r7, r1
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4650      	mov	r0, sl
 80096ce:	4659      	mov	r1, fp
 80096d0:	f7f6 fde2 	bl	8000298 <__aeabi_dsub>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4680      	mov	r8, r0
 80096da:	4689      	mov	r9, r1
 80096dc:	4650      	mov	r0, sl
 80096de:	4659      	mov	r1, fp
 80096e0:	f7f6 fdda 	bl	8000298 <__aeabi_dsub>
 80096e4:	4632      	mov	r2, r6
 80096e6:	463b      	mov	r3, r7
 80096e8:	f7f6 fdd6 	bl	8000298 <__aeabi_dsub>
 80096ec:	a340      	add	r3, pc, #256	@ (adr r3, 80097f0 <__ieee754_rem_pio2+0x300>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	4606      	mov	r6, r0
 80096f4:	460f      	mov	r7, r1
 80096f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096fa:	f7f6 ff85 	bl	8000608 <__aeabi_dmul>
 80096fe:	4632      	mov	r2, r6
 8009700:	463b      	mov	r3, r7
 8009702:	f7f6 fdc9 	bl	8000298 <__aeabi_dsub>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	4606      	mov	r6, r0
 800970c:	460f      	mov	r7, r1
 800970e:	4640      	mov	r0, r8
 8009710:	4649      	mov	r1, r9
 8009712:	f7f6 fdc1 	bl	8000298 <__aeabi_dsub>
 8009716:	9a05      	ldr	r2, [sp, #20]
 8009718:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	2b31      	cmp	r3, #49	@ 0x31
 8009720:	dc20      	bgt.n	8009764 <__ieee754_rem_pio2+0x274>
 8009722:	e9c4 0100 	strd	r0, r1, [r4]
 8009726:	46c2      	mov	sl, r8
 8009728:	46cb      	mov	fp, r9
 800972a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800972e:	4650      	mov	r0, sl
 8009730:	4642      	mov	r2, r8
 8009732:	464b      	mov	r3, r9
 8009734:	4659      	mov	r1, fp
 8009736:	f7f6 fdaf 	bl	8000298 <__aeabi_dsub>
 800973a:	463b      	mov	r3, r7
 800973c:	4632      	mov	r2, r6
 800973e:	f7f6 fdab 	bl	8000298 <__aeabi_dsub>
 8009742:	9b04      	ldr	r3, [sp, #16]
 8009744:	2b00      	cmp	r3, #0
 8009746:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800974a:	f6bf af0e 	bge.w	800956a <__ieee754_rem_pio2+0x7a>
 800974e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009752:	6063      	str	r3, [r4, #4]
 8009754:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009758:	f8c4 8000 	str.w	r8, [r4]
 800975c:	60a0      	str	r0, [r4, #8]
 800975e:	60e3      	str	r3, [r4, #12]
 8009760:	426d      	negs	r5, r5
 8009762:	e702      	b.n	800956a <__ieee754_rem_pio2+0x7a>
 8009764:	a326      	add	r3, pc, #152	@ (adr r3, 8009800 <__ieee754_rem_pio2+0x310>)
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800976e:	f7f6 ff4b 	bl	8000608 <__aeabi_dmul>
 8009772:	4606      	mov	r6, r0
 8009774:	460f      	mov	r7, r1
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
 800977a:	4640      	mov	r0, r8
 800977c:	4649      	mov	r1, r9
 800977e:	f7f6 fd8b 	bl	8000298 <__aeabi_dsub>
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	4682      	mov	sl, r0
 8009788:	468b      	mov	fp, r1
 800978a:	4640      	mov	r0, r8
 800978c:	4649      	mov	r1, r9
 800978e:	f7f6 fd83 	bl	8000298 <__aeabi_dsub>
 8009792:	4632      	mov	r2, r6
 8009794:	463b      	mov	r3, r7
 8009796:	f7f6 fd7f 	bl	8000298 <__aeabi_dsub>
 800979a:	a31b      	add	r3, pc, #108	@ (adr r3, 8009808 <__ieee754_rem_pio2+0x318>)
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	4606      	mov	r6, r0
 80097a2:	460f      	mov	r7, r1
 80097a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097a8:	f7f6 ff2e 	bl	8000608 <__aeabi_dmul>
 80097ac:	4632      	mov	r2, r6
 80097ae:	463b      	mov	r3, r7
 80097b0:	f7f6 fd72 	bl	8000298 <__aeabi_dsub>
 80097b4:	4606      	mov	r6, r0
 80097b6:	460f      	mov	r7, r1
 80097b8:	e764      	b.n	8009684 <__ieee754_rem_pio2+0x194>
 80097ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009828 <__ieee754_rem_pio2+0x338>)
 80097bc:	4598      	cmp	r8, r3
 80097be:	d935      	bls.n	800982c <__ieee754_rem_pio2+0x33c>
 80097c0:	4632      	mov	r2, r6
 80097c2:	463b      	mov	r3, r7
 80097c4:	4630      	mov	r0, r6
 80097c6:	4639      	mov	r1, r7
 80097c8:	f7f6 fd66 	bl	8000298 <__aeabi_dsub>
 80097cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80097d0:	e9c4 0100 	strd	r0, r1, [r4]
 80097d4:	e69e      	b.n	8009514 <__ieee754_rem_pio2+0x24>
 80097d6:	bf00      	nop
 80097d8:	54400000 	.word	0x54400000
 80097dc:	3ff921fb 	.word	0x3ff921fb
 80097e0:	1a626331 	.word	0x1a626331
 80097e4:	3dd0b461 	.word	0x3dd0b461
 80097e8:	1a600000 	.word	0x1a600000
 80097ec:	3dd0b461 	.word	0x3dd0b461
 80097f0:	2e037073 	.word	0x2e037073
 80097f4:	3ba3198a 	.word	0x3ba3198a
 80097f8:	6dc9c883 	.word	0x6dc9c883
 80097fc:	3fe45f30 	.word	0x3fe45f30
 8009800:	2e000000 	.word	0x2e000000
 8009804:	3ba3198a 	.word	0x3ba3198a
 8009808:	252049c1 	.word	0x252049c1
 800980c:	397b839a 	.word	0x397b839a
 8009810:	3fe921fb 	.word	0x3fe921fb
 8009814:	4002d97b 	.word	0x4002d97b
 8009818:	3ff921fb 	.word	0x3ff921fb
 800981c:	413921fb 	.word	0x413921fb
 8009820:	3fe00000 	.word	0x3fe00000
 8009824:	0800a564 	.word	0x0800a564
 8009828:	7fefffff 	.word	0x7fefffff
 800982c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009830:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009834:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009838:	4630      	mov	r0, r6
 800983a:	460f      	mov	r7, r1
 800983c:	f7f7 f994 	bl	8000b68 <__aeabi_d2iz>
 8009840:	f7f6 fe78 	bl	8000534 <__aeabi_i2d>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	4630      	mov	r0, r6
 800984a:	4639      	mov	r1, r7
 800984c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009850:	f7f6 fd22 	bl	8000298 <__aeabi_dsub>
 8009854:	4b22      	ldr	r3, [pc, #136]	@ (80098e0 <__ieee754_rem_pio2+0x3f0>)
 8009856:	2200      	movs	r2, #0
 8009858:	f7f6 fed6 	bl	8000608 <__aeabi_dmul>
 800985c:	460f      	mov	r7, r1
 800985e:	4606      	mov	r6, r0
 8009860:	f7f7 f982 	bl	8000b68 <__aeabi_d2iz>
 8009864:	f7f6 fe66 	bl	8000534 <__aeabi_i2d>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	4630      	mov	r0, r6
 800986e:	4639      	mov	r1, r7
 8009870:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009874:	f7f6 fd10 	bl	8000298 <__aeabi_dsub>
 8009878:	4b19      	ldr	r3, [pc, #100]	@ (80098e0 <__ieee754_rem_pio2+0x3f0>)
 800987a:	2200      	movs	r2, #0
 800987c:	f7f6 fec4 	bl	8000608 <__aeabi_dmul>
 8009880:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009884:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009888:	f04f 0803 	mov.w	r8, #3
 800988c:	2600      	movs	r6, #0
 800988e:	2700      	movs	r7, #0
 8009890:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009894:	4632      	mov	r2, r6
 8009896:	463b      	mov	r3, r7
 8009898:	46c2      	mov	sl, r8
 800989a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800989e:	f7f7 f91b 	bl	8000ad8 <__aeabi_dcmpeq>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d1f4      	bne.n	8009890 <__ieee754_rem_pio2+0x3a0>
 80098a6:	4b0f      	ldr	r3, [pc, #60]	@ (80098e4 <__ieee754_rem_pio2+0x3f4>)
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	2302      	movs	r3, #2
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	462a      	mov	r2, r5
 80098b0:	4653      	mov	r3, sl
 80098b2:	4621      	mov	r1, r4
 80098b4:	a806      	add	r0, sp, #24
 80098b6:	f000 f81f 	bl	80098f8 <__kernel_rem_pio2>
 80098ba:	9b04      	ldr	r3, [sp, #16]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	4605      	mov	r5, r0
 80098c0:	f6bf ae53 	bge.w	800956a <__ieee754_rem_pio2+0x7a>
 80098c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80098c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80098cc:	e9c4 2300 	strd	r2, r3, [r4]
 80098d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80098d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80098d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80098dc:	e740      	b.n	8009760 <__ieee754_rem_pio2+0x270>
 80098de:	bf00      	nop
 80098e0:	41700000 	.word	0x41700000
 80098e4:	0800a5e4 	.word	0x0800a5e4

080098e8 <fabs>:
 80098e8:	ec51 0b10 	vmov	r0, r1, d0
 80098ec:	4602      	mov	r2, r0
 80098ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80098f2:	ec43 2b10 	vmov	d0, r2, r3
 80098f6:	4770      	bx	lr

080098f8 <__kernel_rem_pio2>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	ed2d 8b02 	vpush	{d8}
 8009900:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009904:	f112 0f14 	cmn.w	r2, #20
 8009908:	9306      	str	r3, [sp, #24]
 800990a:	9104      	str	r1, [sp, #16]
 800990c:	4bc2      	ldr	r3, [pc, #776]	@ (8009c18 <__kernel_rem_pio2+0x320>)
 800990e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009910:	9008      	str	r0, [sp, #32]
 8009912:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	9b06      	ldr	r3, [sp, #24]
 800991a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800991e:	bfa8      	it	ge
 8009920:	1ed4      	subge	r4, r2, #3
 8009922:	9305      	str	r3, [sp, #20]
 8009924:	bfb2      	itee	lt
 8009926:	2400      	movlt	r4, #0
 8009928:	2318      	movge	r3, #24
 800992a:	fb94 f4f3 	sdivge	r4, r4, r3
 800992e:	f06f 0317 	mvn.w	r3, #23
 8009932:	fb04 3303 	mla	r3, r4, r3, r3
 8009936:	eb03 0b02 	add.w	fp, r3, r2
 800993a:	9b00      	ldr	r3, [sp, #0]
 800993c:	9a05      	ldr	r2, [sp, #20]
 800993e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8009c08 <__kernel_rem_pio2+0x310>
 8009942:	eb03 0802 	add.w	r8, r3, r2
 8009946:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009948:	1aa7      	subs	r7, r4, r2
 800994a:	ae20      	add	r6, sp, #128	@ 0x80
 800994c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009950:	2500      	movs	r5, #0
 8009952:	4545      	cmp	r5, r8
 8009954:	dd12      	ble.n	800997c <__kernel_rem_pio2+0x84>
 8009956:	9b06      	ldr	r3, [sp, #24]
 8009958:	aa20      	add	r2, sp, #128	@ 0x80
 800995a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800995e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009962:	2700      	movs	r7, #0
 8009964:	9b00      	ldr	r3, [sp, #0]
 8009966:	429f      	cmp	r7, r3
 8009968:	dc2e      	bgt.n	80099c8 <__kernel_rem_pio2+0xd0>
 800996a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8009c08 <__kernel_rem_pio2+0x310>
 800996e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009972:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009976:	46a8      	mov	r8, r5
 8009978:	2600      	movs	r6, #0
 800997a:	e01b      	b.n	80099b4 <__kernel_rem_pio2+0xbc>
 800997c:	42ef      	cmn	r7, r5
 800997e:	d407      	bmi.n	8009990 <__kernel_rem_pio2+0x98>
 8009980:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009984:	f7f6 fdd6 	bl	8000534 <__aeabi_i2d>
 8009988:	e8e6 0102 	strd	r0, r1, [r6], #8
 800998c:	3501      	adds	r5, #1
 800998e:	e7e0      	b.n	8009952 <__kernel_rem_pio2+0x5a>
 8009990:	ec51 0b18 	vmov	r0, r1, d8
 8009994:	e7f8      	b.n	8009988 <__kernel_rem_pio2+0x90>
 8009996:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800999a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800999e:	f7f6 fe33 	bl	8000608 <__aeabi_dmul>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099aa:	f7f6 fc77 	bl	800029c <__adddf3>
 80099ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099b2:	3601      	adds	r6, #1
 80099b4:	9b05      	ldr	r3, [sp, #20]
 80099b6:	429e      	cmp	r6, r3
 80099b8:	dded      	ble.n	8009996 <__kernel_rem_pio2+0x9e>
 80099ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099be:	3701      	adds	r7, #1
 80099c0:	ecaa 7b02 	vstmia	sl!, {d7}
 80099c4:	3508      	adds	r5, #8
 80099c6:	e7cd      	b.n	8009964 <__kernel_rem_pio2+0x6c>
 80099c8:	9b00      	ldr	r3, [sp, #0]
 80099ca:	f8dd 8000 	ldr.w	r8, [sp]
 80099ce:	aa0c      	add	r2, sp, #48	@ 0x30
 80099d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80099d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80099d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80099dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80099de:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80099e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099e4:	ab98      	add	r3, sp, #608	@ 0x260
 80099e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80099ea:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80099ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80099f2:	ac0c      	add	r4, sp, #48	@ 0x30
 80099f4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80099f6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80099fa:	46a1      	mov	r9, r4
 80099fc:	46c2      	mov	sl, r8
 80099fe:	f1ba 0f00 	cmp.w	sl, #0
 8009a02:	dc77      	bgt.n	8009af4 <__kernel_rem_pio2+0x1fc>
 8009a04:	4658      	mov	r0, fp
 8009a06:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009a0a:	f000 fac5 	bl	8009f98 <scalbn>
 8009a0e:	ec57 6b10 	vmov	r6, r7, d0
 8009a12:	2200      	movs	r2, #0
 8009a14:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009a18:	4630      	mov	r0, r6
 8009a1a:	4639      	mov	r1, r7
 8009a1c:	f7f6 fdf4 	bl	8000608 <__aeabi_dmul>
 8009a20:	ec41 0b10 	vmov	d0, r0, r1
 8009a24:	f000 fb34 	bl	800a090 <floor>
 8009a28:	4b7c      	ldr	r3, [pc, #496]	@ (8009c1c <__kernel_rem_pio2+0x324>)
 8009a2a:	ec51 0b10 	vmov	r0, r1, d0
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f7f6 fdea 	bl	8000608 <__aeabi_dmul>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4630      	mov	r0, r6
 8009a3a:	4639      	mov	r1, r7
 8009a3c:	f7f6 fc2c 	bl	8000298 <__aeabi_dsub>
 8009a40:	460f      	mov	r7, r1
 8009a42:	4606      	mov	r6, r0
 8009a44:	f7f7 f890 	bl	8000b68 <__aeabi_d2iz>
 8009a48:	9002      	str	r0, [sp, #8]
 8009a4a:	f7f6 fd73 	bl	8000534 <__aeabi_i2d>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	4630      	mov	r0, r6
 8009a54:	4639      	mov	r1, r7
 8009a56:	f7f6 fc1f 	bl	8000298 <__aeabi_dsub>
 8009a5a:	f1bb 0f00 	cmp.w	fp, #0
 8009a5e:	4606      	mov	r6, r0
 8009a60:	460f      	mov	r7, r1
 8009a62:	dd6c      	ble.n	8009b3e <__kernel_rem_pio2+0x246>
 8009a64:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8009a68:	ab0c      	add	r3, sp, #48	@ 0x30
 8009a6a:	9d02      	ldr	r5, [sp, #8]
 8009a6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a70:	f1cb 0018 	rsb	r0, fp, #24
 8009a74:	fa43 f200 	asr.w	r2, r3, r0
 8009a78:	4415      	add	r5, r2
 8009a7a:	4082      	lsls	r2, r0
 8009a7c:	1a9b      	subs	r3, r3, r2
 8009a7e:	aa0c      	add	r2, sp, #48	@ 0x30
 8009a80:	9502      	str	r5, [sp, #8]
 8009a82:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009a86:	f1cb 0217 	rsb	r2, fp, #23
 8009a8a:	fa43 f902 	asr.w	r9, r3, r2
 8009a8e:	f1b9 0f00 	cmp.w	r9, #0
 8009a92:	dd64      	ble.n	8009b5e <__kernel_rem_pio2+0x266>
 8009a94:	9b02      	ldr	r3, [sp, #8]
 8009a96:	2200      	movs	r2, #0
 8009a98:	3301      	adds	r3, #1
 8009a9a:	9302      	str	r3, [sp, #8]
 8009a9c:	4615      	mov	r5, r2
 8009a9e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009aa2:	4590      	cmp	r8, r2
 8009aa4:	f300 80a1 	bgt.w	8009bea <__kernel_rem_pio2+0x2f2>
 8009aa8:	f1bb 0f00 	cmp.w	fp, #0
 8009aac:	dd07      	ble.n	8009abe <__kernel_rem_pio2+0x1c6>
 8009aae:	f1bb 0f01 	cmp.w	fp, #1
 8009ab2:	f000 80c1 	beq.w	8009c38 <__kernel_rem_pio2+0x340>
 8009ab6:	f1bb 0f02 	cmp.w	fp, #2
 8009aba:	f000 80c8 	beq.w	8009c4e <__kernel_rem_pio2+0x356>
 8009abe:	f1b9 0f02 	cmp.w	r9, #2
 8009ac2:	d14c      	bne.n	8009b5e <__kernel_rem_pio2+0x266>
 8009ac4:	4632      	mov	r2, r6
 8009ac6:	463b      	mov	r3, r7
 8009ac8:	4955      	ldr	r1, [pc, #340]	@ (8009c20 <__kernel_rem_pio2+0x328>)
 8009aca:	2000      	movs	r0, #0
 8009acc:	f7f6 fbe4 	bl	8000298 <__aeabi_dsub>
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	460f      	mov	r7, r1
 8009ad4:	2d00      	cmp	r5, #0
 8009ad6:	d042      	beq.n	8009b5e <__kernel_rem_pio2+0x266>
 8009ad8:	4658      	mov	r0, fp
 8009ada:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8009c10 <__kernel_rem_pio2+0x318>
 8009ade:	f000 fa5b 	bl	8009f98 <scalbn>
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	ec53 2b10 	vmov	r2, r3, d0
 8009aea:	f7f6 fbd5 	bl	8000298 <__aeabi_dsub>
 8009aee:	4606      	mov	r6, r0
 8009af0:	460f      	mov	r7, r1
 8009af2:	e034      	b.n	8009b5e <__kernel_rem_pio2+0x266>
 8009af4:	4b4b      	ldr	r3, [pc, #300]	@ (8009c24 <__kernel_rem_pio2+0x32c>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009afc:	f7f6 fd84 	bl	8000608 <__aeabi_dmul>
 8009b00:	f7f7 f832 	bl	8000b68 <__aeabi_d2iz>
 8009b04:	f7f6 fd16 	bl	8000534 <__aeabi_i2d>
 8009b08:	4b47      	ldr	r3, [pc, #284]	@ (8009c28 <__kernel_rem_pio2+0x330>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	460f      	mov	r7, r1
 8009b10:	f7f6 fd7a 	bl	8000608 <__aeabi_dmul>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b1c:	f7f6 fbbc 	bl	8000298 <__aeabi_dsub>
 8009b20:	f7f7 f822 	bl	8000b68 <__aeabi_d2iz>
 8009b24:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009b28:	f849 0b04 	str.w	r0, [r9], #4
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f7f6 fbb4 	bl	800029c <__adddf3>
 8009b34:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009b38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b3c:	e75f      	b.n	80099fe <__kernel_rem_pio2+0x106>
 8009b3e:	d107      	bne.n	8009b50 <__kernel_rem_pio2+0x258>
 8009b40:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8009b44:	aa0c      	add	r2, sp, #48	@ 0x30
 8009b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b4a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009b4e:	e79e      	b.n	8009a8e <__kernel_rem_pio2+0x196>
 8009b50:	4b36      	ldr	r3, [pc, #216]	@ (8009c2c <__kernel_rem_pio2+0x334>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	f7f6 ffde 	bl	8000b14 <__aeabi_dcmpge>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d143      	bne.n	8009be4 <__kernel_rem_pio2+0x2ec>
 8009b5c:	4681      	mov	r9, r0
 8009b5e:	2200      	movs	r2, #0
 8009b60:	2300      	movs	r3, #0
 8009b62:	4630      	mov	r0, r6
 8009b64:	4639      	mov	r1, r7
 8009b66:	f7f6 ffb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	f000 80c1 	beq.w	8009cf2 <__kernel_rem_pio2+0x3fa>
 8009b70:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8009b74:	2200      	movs	r2, #0
 8009b76:	9900      	ldr	r1, [sp, #0]
 8009b78:	428b      	cmp	r3, r1
 8009b7a:	da70      	bge.n	8009c5e <__kernel_rem_pio2+0x366>
 8009b7c:	2a00      	cmp	r2, #0
 8009b7e:	f000 808b 	beq.w	8009c98 <__kernel_rem_pio2+0x3a0>
 8009b82:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009b86:	ab0c      	add	r3, sp, #48	@ 0x30
 8009b88:	f1ab 0b18 	sub.w	fp, fp, #24
 8009b8c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0f6      	beq.n	8009b82 <__kernel_rem_pio2+0x28a>
 8009b94:	4658      	mov	r0, fp
 8009b96:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8009c10 <__kernel_rem_pio2+0x318>
 8009b9a:	f000 f9fd 	bl	8009f98 <scalbn>
 8009b9e:	f108 0301 	add.w	r3, r8, #1
 8009ba2:	00da      	lsls	r2, r3, #3
 8009ba4:	9205      	str	r2, [sp, #20]
 8009ba6:	ec55 4b10 	vmov	r4, r5, d0
 8009baa:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009bac:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8009c24 <__kernel_rem_pio2+0x32c>
 8009bb0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009bb4:	4646      	mov	r6, r8
 8009bb6:	f04f 0a00 	mov.w	sl, #0
 8009bba:	2e00      	cmp	r6, #0
 8009bbc:	f280 80d1 	bge.w	8009d62 <__kernel_rem_pio2+0x46a>
 8009bc0:	4644      	mov	r4, r8
 8009bc2:	2c00      	cmp	r4, #0
 8009bc4:	f2c0 80ff 	blt.w	8009dc6 <__kernel_rem_pio2+0x4ce>
 8009bc8:	4b19      	ldr	r3, [pc, #100]	@ (8009c30 <__kernel_rem_pio2+0x338>)
 8009bca:	461f      	mov	r7, r3
 8009bcc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009bce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009bd2:	9306      	str	r3, [sp, #24]
 8009bd4:	f04f 0a00 	mov.w	sl, #0
 8009bd8:	f04f 0b00 	mov.w	fp, #0
 8009bdc:	2600      	movs	r6, #0
 8009bde:	eba8 0504 	sub.w	r5, r8, r4
 8009be2:	e0e4      	b.n	8009dae <__kernel_rem_pio2+0x4b6>
 8009be4:	f04f 0902 	mov.w	r9, #2
 8009be8:	e754      	b.n	8009a94 <__kernel_rem_pio2+0x19c>
 8009bea:	f854 3b04 	ldr.w	r3, [r4], #4
 8009bee:	bb0d      	cbnz	r5, 8009c34 <__kernel_rem_pio2+0x33c>
 8009bf0:	b123      	cbz	r3, 8009bfc <__kernel_rem_pio2+0x304>
 8009bf2:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009bf6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	3201      	adds	r2, #1
 8009bfe:	461d      	mov	r5, r3
 8009c00:	e74f      	b.n	8009aa2 <__kernel_rem_pio2+0x1aa>
 8009c02:	bf00      	nop
 8009c04:	f3af 8000 	nop.w
	...
 8009c14:	3ff00000 	.word	0x3ff00000
 8009c18:	0800a730 	.word	0x0800a730
 8009c1c:	40200000 	.word	0x40200000
 8009c20:	3ff00000 	.word	0x3ff00000
 8009c24:	3e700000 	.word	0x3e700000
 8009c28:	41700000 	.word	0x41700000
 8009c2c:	3fe00000 	.word	0x3fe00000
 8009c30:	0800a6f0 	.word	0x0800a6f0
 8009c34:	1acb      	subs	r3, r1, r3
 8009c36:	e7de      	b.n	8009bf6 <__kernel_rem_pio2+0x2fe>
 8009c38:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8009c3c:	ab0c      	add	r3, sp, #48	@ 0x30
 8009c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c42:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009c46:	a90c      	add	r1, sp, #48	@ 0x30
 8009c48:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009c4c:	e737      	b.n	8009abe <__kernel_rem_pio2+0x1c6>
 8009c4e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8009c52:	ab0c      	add	r3, sp, #48	@ 0x30
 8009c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009c5c:	e7f3      	b.n	8009c46 <__kernel_rem_pio2+0x34e>
 8009c5e:	a90c      	add	r1, sp, #48	@ 0x30
 8009c60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009c64:	3b01      	subs	r3, #1
 8009c66:	430a      	orrs	r2, r1
 8009c68:	e785      	b.n	8009b76 <__kernel_rem_pio2+0x27e>
 8009c6a:	3401      	adds	r4, #1
 8009c6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009c70:	2a00      	cmp	r2, #0
 8009c72:	d0fa      	beq.n	8009c6a <__kernel_rem_pio2+0x372>
 8009c74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c76:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009c7a:	eb0d 0503 	add.w	r5, sp, r3
 8009c7e:	9b06      	ldr	r3, [sp, #24]
 8009c80:	aa20      	add	r2, sp, #128	@ 0x80
 8009c82:	4443      	add	r3, r8
 8009c84:	f108 0701 	add.w	r7, r8, #1
 8009c88:	3d98      	subs	r5, #152	@ 0x98
 8009c8a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009c8e:	4444      	add	r4, r8
 8009c90:	42bc      	cmp	r4, r7
 8009c92:	da04      	bge.n	8009c9e <__kernel_rem_pio2+0x3a6>
 8009c94:	46a0      	mov	r8, r4
 8009c96:	e6a2      	b.n	80099de <__kernel_rem_pio2+0xe6>
 8009c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c9a:	2401      	movs	r4, #1
 8009c9c:	e7e6      	b.n	8009c6c <__kernel_rem_pio2+0x374>
 8009c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009ca4:	f7f6 fc46 	bl	8000534 <__aeabi_i2d>
 8009ca8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8009f68 <__kernel_rem_pio2+0x670>
 8009cac:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009cb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009cb8:	46b2      	mov	sl, r6
 8009cba:	f04f 0800 	mov.w	r8, #0
 8009cbe:	9b05      	ldr	r3, [sp, #20]
 8009cc0:	4598      	cmp	r8, r3
 8009cc2:	dd05      	ble.n	8009cd0 <__kernel_rem_pio2+0x3d8>
 8009cc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cc8:	3701      	adds	r7, #1
 8009cca:	eca5 7b02 	vstmia	r5!, {d7}
 8009cce:	e7df      	b.n	8009c90 <__kernel_rem_pio2+0x398>
 8009cd0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009cd4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009cd8:	f7f6 fc96 	bl	8000608 <__aeabi_dmul>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ce4:	f7f6 fada 	bl	800029c <__adddf3>
 8009ce8:	f108 0801 	add.w	r8, r8, #1
 8009cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cf0:	e7e5      	b.n	8009cbe <__kernel_rem_pio2+0x3c6>
 8009cf2:	f1cb 0000 	rsb	r0, fp, #0
 8009cf6:	ec47 6b10 	vmov	d0, r6, r7
 8009cfa:	f000 f94d 	bl	8009f98 <scalbn>
 8009cfe:	ec55 4b10 	vmov	r4, r5, d0
 8009d02:	4b9b      	ldr	r3, [pc, #620]	@ (8009f70 <__kernel_rem_pio2+0x678>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	4620      	mov	r0, r4
 8009d08:	4629      	mov	r1, r5
 8009d0a:	f7f6 ff03 	bl	8000b14 <__aeabi_dcmpge>
 8009d0e:	b300      	cbz	r0, 8009d52 <__kernel_rem_pio2+0x45a>
 8009d10:	4b98      	ldr	r3, [pc, #608]	@ (8009f74 <__kernel_rem_pio2+0x67c>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	4620      	mov	r0, r4
 8009d16:	4629      	mov	r1, r5
 8009d18:	f7f6 fc76 	bl	8000608 <__aeabi_dmul>
 8009d1c:	f7f6 ff24 	bl	8000b68 <__aeabi_d2iz>
 8009d20:	4606      	mov	r6, r0
 8009d22:	f7f6 fc07 	bl	8000534 <__aeabi_i2d>
 8009d26:	4b92      	ldr	r3, [pc, #584]	@ (8009f70 <__kernel_rem_pio2+0x678>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f7f6 fc6d 	bl	8000608 <__aeabi_dmul>
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4602      	mov	r2, r0
 8009d32:	4629      	mov	r1, r5
 8009d34:	4620      	mov	r0, r4
 8009d36:	f7f6 faaf 	bl	8000298 <__aeabi_dsub>
 8009d3a:	f7f6 ff15 	bl	8000b68 <__aeabi_d2iz>
 8009d3e:	ab0c      	add	r3, sp, #48	@ 0x30
 8009d40:	f10b 0b18 	add.w	fp, fp, #24
 8009d44:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009d48:	f108 0801 	add.w	r8, r8, #1
 8009d4c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009d50:	e720      	b.n	8009b94 <__kernel_rem_pio2+0x29c>
 8009d52:	4620      	mov	r0, r4
 8009d54:	4629      	mov	r1, r5
 8009d56:	f7f6 ff07 	bl	8000b68 <__aeabi_d2iz>
 8009d5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009d5c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009d60:	e718      	b.n	8009b94 <__kernel_rem_pio2+0x29c>
 8009d62:	ab0c      	add	r3, sp, #48	@ 0x30
 8009d64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009d68:	f7f6 fbe4 	bl	8000534 <__aeabi_i2d>
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	462b      	mov	r3, r5
 8009d70:	f7f6 fc4a 	bl	8000608 <__aeabi_dmul>
 8009d74:	4652      	mov	r2, sl
 8009d76:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009d7a:	465b      	mov	r3, fp
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	4629      	mov	r1, r5
 8009d80:	f7f6 fc42 	bl	8000608 <__aeabi_dmul>
 8009d84:	3e01      	subs	r6, #1
 8009d86:	4604      	mov	r4, r0
 8009d88:	460d      	mov	r5, r1
 8009d8a:	e716      	b.n	8009bba <__kernel_rem_pio2+0x2c2>
 8009d8c:	9906      	ldr	r1, [sp, #24]
 8009d8e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009d92:	9106      	str	r1, [sp, #24]
 8009d94:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009d98:	f7f6 fc36 	bl	8000608 <__aeabi_dmul>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4650      	mov	r0, sl
 8009da2:	4659      	mov	r1, fp
 8009da4:	f7f6 fa7a 	bl	800029c <__adddf3>
 8009da8:	3601      	adds	r6, #1
 8009daa:	4682      	mov	sl, r0
 8009dac:	468b      	mov	fp, r1
 8009dae:	9b00      	ldr	r3, [sp, #0]
 8009db0:	429e      	cmp	r6, r3
 8009db2:	dc01      	bgt.n	8009db8 <__kernel_rem_pio2+0x4c0>
 8009db4:	42ae      	cmp	r6, r5
 8009db6:	dde9      	ble.n	8009d8c <__kernel_rem_pio2+0x494>
 8009db8:	ab48      	add	r3, sp, #288	@ 0x120
 8009dba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009dbe:	e9c5 ab00 	strd	sl, fp, [r5]
 8009dc2:	3c01      	subs	r4, #1
 8009dc4:	e6fd      	b.n	8009bc2 <__kernel_rem_pio2+0x2ca>
 8009dc6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	dc0b      	bgt.n	8009de4 <__kernel_rem_pio2+0x4ec>
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	dc35      	bgt.n	8009e3c <__kernel_rem_pio2+0x544>
 8009dd0:	d059      	beq.n	8009e86 <__kernel_rem_pio2+0x58e>
 8009dd2:	9b02      	ldr	r3, [sp, #8]
 8009dd4:	f003 0007 	and.w	r0, r3, #7
 8009dd8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009ddc:	ecbd 8b02 	vpop	{d8}
 8009de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d1f3      	bne.n	8009dd2 <__kernel_rem_pio2+0x4da>
 8009dea:	9b05      	ldr	r3, [sp, #20]
 8009dec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009df0:	eb0d 0403 	add.w	r4, sp, r3
 8009df4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009df8:	4625      	mov	r5, r4
 8009dfa:	46c2      	mov	sl, r8
 8009dfc:	f1ba 0f00 	cmp.w	sl, #0
 8009e00:	dc69      	bgt.n	8009ed6 <__kernel_rem_pio2+0x5de>
 8009e02:	4645      	mov	r5, r8
 8009e04:	2d01      	cmp	r5, #1
 8009e06:	f300 8087 	bgt.w	8009f18 <__kernel_rem_pio2+0x620>
 8009e0a:	9c05      	ldr	r4, [sp, #20]
 8009e0c:	ab48      	add	r3, sp, #288	@ 0x120
 8009e0e:	441c      	add	r4, r3
 8009e10:	2000      	movs	r0, #0
 8009e12:	2100      	movs	r1, #0
 8009e14:	f1b8 0f01 	cmp.w	r8, #1
 8009e18:	f300 809c 	bgt.w	8009f54 <__kernel_rem_pio2+0x65c>
 8009e1c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8009e20:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8009e24:	f1b9 0f00 	cmp.w	r9, #0
 8009e28:	f040 80a6 	bne.w	8009f78 <__kernel_rem_pio2+0x680>
 8009e2c:	9b04      	ldr	r3, [sp, #16]
 8009e2e:	e9c3 5600 	strd	r5, r6, [r3]
 8009e32:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009e36:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009e3a:	e7ca      	b.n	8009dd2 <__kernel_rem_pio2+0x4da>
 8009e3c:	9d05      	ldr	r5, [sp, #20]
 8009e3e:	ab48      	add	r3, sp, #288	@ 0x120
 8009e40:	441d      	add	r5, r3
 8009e42:	4644      	mov	r4, r8
 8009e44:	2000      	movs	r0, #0
 8009e46:	2100      	movs	r1, #0
 8009e48:	2c00      	cmp	r4, #0
 8009e4a:	da35      	bge.n	8009eb8 <__kernel_rem_pio2+0x5c0>
 8009e4c:	f1b9 0f00 	cmp.w	r9, #0
 8009e50:	d038      	beq.n	8009ec4 <__kernel_rem_pio2+0x5cc>
 8009e52:	4602      	mov	r2, r0
 8009e54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e58:	9c04      	ldr	r4, [sp, #16]
 8009e5a:	e9c4 2300 	strd	r2, r3, [r4]
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009e66:	f7f6 fa17 	bl	8000298 <__aeabi_dsub>
 8009e6a:	ad4a      	add	r5, sp, #296	@ 0x128
 8009e6c:	2401      	movs	r4, #1
 8009e6e:	45a0      	cmp	r8, r4
 8009e70:	da2b      	bge.n	8009eca <__kernel_rem_pio2+0x5d2>
 8009e72:	f1b9 0f00 	cmp.w	r9, #0
 8009e76:	d002      	beq.n	8009e7e <__kernel_rem_pio2+0x586>
 8009e78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	9b04      	ldr	r3, [sp, #16]
 8009e80:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009e84:	e7a5      	b.n	8009dd2 <__kernel_rem_pio2+0x4da>
 8009e86:	9c05      	ldr	r4, [sp, #20]
 8009e88:	ab48      	add	r3, sp, #288	@ 0x120
 8009e8a:	441c      	add	r4, r3
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	2100      	movs	r1, #0
 8009e90:	f1b8 0f00 	cmp.w	r8, #0
 8009e94:	da09      	bge.n	8009eaa <__kernel_rem_pio2+0x5b2>
 8009e96:	f1b9 0f00 	cmp.w	r9, #0
 8009e9a:	d002      	beq.n	8009ea2 <__kernel_rem_pio2+0x5aa>
 8009e9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	9b04      	ldr	r3, [sp, #16]
 8009ea4:	e9c3 0100 	strd	r0, r1, [r3]
 8009ea8:	e793      	b.n	8009dd2 <__kernel_rem_pio2+0x4da>
 8009eaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009eae:	f7f6 f9f5 	bl	800029c <__adddf3>
 8009eb2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009eb6:	e7eb      	b.n	8009e90 <__kernel_rem_pio2+0x598>
 8009eb8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009ebc:	f7f6 f9ee 	bl	800029c <__adddf3>
 8009ec0:	3c01      	subs	r4, #1
 8009ec2:	e7c1      	b.n	8009e48 <__kernel_rem_pio2+0x550>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	e7c6      	b.n	8009e58 <__kernel_rem_pio2+0x560>
 8009eca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009ece:	f7f6 f9e5 	bl	800029c <__adddf3>
 8009ed2:	3401      	adds	r4, #1
 8009ed4:	e7cb      	b.n	8009e6e <__kernel_rem_pio2+0x576>
 8009ed6:	ed35 7b02 	vldmdb	r5!, {d7}
 8009eda:	ed8d 7b00 	vstr	d7, [sp]
 8009ede:	ed95 7b02 	vldr	d7, [r5, #8]
 8009ee2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ee6:	ec53 2b17 	vmov	r2, r3, d7
 8009eea:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009eee:	f7f6 f9d5 	bl	800029c <__adddf3>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	460f      	mov	r7, r1
 8009efa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009efe:	f7f6 f9cb 	bl	8000298 <__aeabi_dsub>
 8009f02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f06:	f7f6 f9c9 	bl	800029c <__adddf3>
 8009f0a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009f0e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009f12:	e9c5 6700 	strd	r6, r7, [r5]
 8009f16:	e771      	b.n	8009dfc <__kernel_rem_pio2+0x504>
 8009f18:	ed34 7b02 	vldmdb	r4!, {d7}
 8009f1c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009f20:	ec51 0b17 	vmov	r0, r1, d7
 8009f24:	4652      	mov	r2, sl
 8009f26:	465b      	mov	r3, fp
 8009f28:	ed8d 7b00 	vstr	d7, [sp]
 8009f2c:	f7f6 f9b6 	bl	800029c <__adddf3>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4606      	mov	r6, r0
 8009f36:	460f      	mov	r7, r1
 8009f38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f3c:	f7f6 f9ac 	bl	8000298 <__aeabi_dsub>
 8009f40:	4652      	mov	r2, sl
 8009f42:	465b      	mov	r3, fp
 8009f44:	f7f6 f9aa 	bl	800029c <__adddf3>
 8009f48:	3d01      	subs	r5, #1
 8009f4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f4e:	e9c4 6700 	strd	r6, r7, [r4]
 8009f52:	e757      	b.n	8009e04 <__kernel_rem_pio2+0x50c>
 8009f54:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009f58:	f7f6 f9a0 	bl	800029c <__adddf3>
 8009f5c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009f60:	e758      	b.n	8009e14 <__kernel_rem_pio2+0x51c>
 8009f62:	bf00      	nop
 8009f64:	f3af 8000 	nop.w
	...
 8009f70:	41700000 	.word	0x41700000
 8009f74:	3e700000 	.word	0x3e700000
 8009f78:	9b04      	ldr	r3, [sp, #16]
 8009f7a:	9a04      	ldr	r2, [sp, #16]
 8009f7c:	601d      	str	r5, [r3, #0]
 8009f7e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8009f82:	605c      	str	r4, [r3, #4]
 8009f84:	609f      	str	r7, [r3, #8]
 8009f86:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8009f8a:	60d3      	str	r3, [r2, #12]
 8009f8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f90:	6110      	str	r0, [r2, #16]
 8009f92:	6153      	str	r3, [r2, #20]
 8009f94:	e71d      	b.n	8009dd2 <__kernel_rem_pio2+0x4da>
 8009f96:	bf00      	nop

08009f98 <scalbn>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	ec55 4b10 	vmov	r4, r5, d0
 8009f9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	b991      	cbnz	r1, 8009fce <scalbn+0x36>
 8009fa8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009fac:	4323      	orrs	r3, r4
 8009fae:	d03b      	beq.n	800a028 <scalbn+0x90>
 8009fb0:	4b33      	ldr	r3, [pc, #204]	@ (800a080 <scalbn+0xe8>)
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f7f6 fb26 	bl	8000608 <__aeabi_dmul>
 8009fbc:	4b31      	ldr	r3, [pc, #196]	@ (800a084 <scalbn+0xec>)
 8009fbe:	429e      	cmp	r6, r3
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	460d      	mov	r5, r1
 8009fc4:	da0f      	bge.n	8009fe6 <scalbn+0x4e>
 8009fc6:	a326      	add	r3, pc, #152	@ (adr r3, 800a060 <scalbn+0xc8>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	e01e      	b.n	800a00c <scalbn+0x74>
 8009fce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009fd2:	4291      	cmp	r1, r2
 8009fd4:	d10b      	bne.n	8009fee <scalbn+0x56>
 8009fd6:	4622      	mov	r2, r4
 8009fd8:	4620      	mov	r0, r4
 8009fda:	4629      	mov	r1, r5
 8009fdc:	f7f6 f95e 	bl	800029c <__adddf3>
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	460d      	mov	r5, r1
 8009fe4:	e020      	b.n	800a028 <scalbn+0x90>
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009fec:	3936      	subs	r1, #54	@ 0x36
 8009fee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009ff2:	4296      	cmp	r6, r2
 8009ff4:	dd0d      	ble.n	800a012 <scalbn+0x7a>
 8009ff6:	2d00      	cmp	r5, #0
 8009ff8:	a11b      	add	r1, pc, #108	@ (adr r1, 800a068 <scalbn+0xd0>)
 8009ffa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ffe:	da02      	bge.n	800a006 <scalbn+0x6e>
 800a000:	a11b      	add	r1, pc, #108	@ (adr r1, 800a070 <scalbn+0xd8>)
 800a002:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a006:	a318      	add	r3, pc, #96	@ (adr r3, 800a068 <scalbn+0xd0>)
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	f7f6 fafc 	bl	8000608 <__aeabi_dmul>
 800a010:	e7e6      	b.n	8009fe0 <scalbn+0x48>
 800a012:	1872      	adds	r2, r6, r1
 800a014:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a018:	428a      	cmp	r2, r1
 800a01a:	dcec      	bgt.n	8009ff6 <scalbn+0x5e>
 800a01c:	2a00      	cmp	r2, #0
 800a01e:	dd06      	ble.n	800a02e <scalbn+0x96>
 800a020:	f36f 531e 	bfc	r3, #20, #11
 800a024:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a028:	ec45 4b10 	vmov	d0, r4, r5
 800a02c:	bd70      	pop	{r4, r5, r6, pc}
 800a02e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a032:	da08      	bge.n	800a046 <scalbn+0xae>
 800a034:	2d00      	cmp	r5, #0
 800a036:	a10a      	add	r1, pc, #40	@ (adr r1, 800a060 <scalbn+0xc8>)
 800a038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a03c:	dac3      	bge.n	8009fc6 <scalbn+0x2e>
 800a03e:	a10e      	add	r1, pc, #56	@ (adr r1, 800a078 <scalbn+0xe0>)
 800a040:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a044:	e7bf      	b.n	8009fc6 <scalbn+0x2e>
 800a046:	3236      	adds	r2, #54	@ 0x36
 800a048:	f36f 531e 	bfc	r3, #20, #11
 800a04c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a050:	4620      	mov	r0, r4
 800a052:	4b0d      	ldr	r3, [pc, #52]	@ (800a088 <scalbn+0xf0>)
 800a054:	4629      	mov	r1, r5
 800a056:	2200      	movs	r2, #0
 800a058:	e7d8      	b.n	800a00c <scalbn+0x74>
 800a05a:	bf00      	nop
 800a05c:	f3af 8000 	nop.w
 800a060:	c2f8f359 	.word	0xc2f8f359
 800a064:	01a56e1f 	.word	0x01a56e1f
 800a068:	8800759c 	.word	0x8800759c
 800a06c:	7e37e43c 	.word	0x7e37e43c
 800a070:	8800759c 	.word	0x8800759c
 800a074:	fe37e43c 	.word	0xfe37e43c
 800a078:	c2f8f359 	.word	0xc2f8f359
 800a07c:	81a56e1f 	.word	0x81a56e1f
 800a080:	43500000 	.word	0x43500000
 800a084:	ffff3cb0 	.word	0xffff3cb0
 800a088:	3c900000 	.word	0x3c900000
 800a08c:	00000000 	.word	0x00000000

0800a090 <floor>:
 800a090:	ec51 0b10 	vmov	r0, r1, d0
 800a094:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a09c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a0a0:	2e13      	cmp	r6, #19
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	4680      	mov	r8, r0
 800a0a8:	dc34      	bgt.n	800a114 <floor+0x84>
 800a0aa:	2e00      	cmp	r6, #0
 800a0ac:	da17      	bge.n	800a0de <floor+0x4e>
 800a0ae:	a332      	add	r3, pc, #200	@ (adr r3, 800a178 <floor+0xe8>)
 800a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b4:	f7f6 f8f2 	bl	800029c <__adddf3>
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f7f6 fd34 	bl	8000b28 <__aeabi_dcmpgt>
 800a0c0:	b150      	cbz	r0, 800a0d8 <floor+0x48>
 800a0c2:	2c00      	cmp	r4, #0
 800a0c4:	da55      	bge.n	800a172 <floor+0xe2>
 800a0c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a0ca:	432c      	orrs	r4, r5
 800a0cc:	2500      	movs	r5, #0
 800a0ce:	42ac      	cmp	r4, r5
 800a0d0:	4c2b      	ldr	r4, [pc, #172]	@ (800a180 <floor+0xf0>)
 800a0d2:	bf08      	it	eq
 800a0d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4628      	mov	r0, r5
 800a0dc:	e023      	b.n	800a126 <floor+0x96>
 800a0de:	4f29      	ldr	r7, [pc, #164]	@ (800a184 <floor+0xf4>)
 800a0e0:	4137      	asrs	r7, r6
 800a0e2:	ea01 0307 	and.w	r3, r1, r7
 800a0e6:	4303      	orrs	r3, r0
 800a0e8:	d01d      	beq.n	800a126 <floor+0x96>
 800a0ea:	a323      	add	r3, pc, #140	@ (adr r3, 800a178 <floor+0xe8>)
 800a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f0:	f7f6 f8d4 	bl	800029c <__adddf3>
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	f7f6 fd16 	bl	8000b28 <__aeabi_dcmpgt>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d0eb      	beq.n	800a0d8 <floor+0x48>
 800a100:	2c00      	cmp	r4, #0
 800a102:	bfbe      	ittt	lt
 800a104:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a108:	4133      	asrlt	r3, r6
 800a10a:	18e4      	addlt	r4, r4, r3
 800a10c:	ea24 0407 	bic.w	r4, r4, r7
 800a110:	2500      	movs	r5, #0
 800a112:	e7e1      	b.n	800a0d8 <floor+0x48>
 800a114:	2e33      	cmp	r6, #51	@ 0x33
 800a116:	dd0a      	ble.n	800a12e <floor+0x9e>
 800a118:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a11c:	d103      	bne.n	800a126 <floor+0x96>
 800a11e:	4602      	mov	r2, r0
 800a120:	460b      	mov	r3, r1
 800a122:	f7f6 f8bb 	bl	800029c <__adddf3>
 800a126:	ec41 0b10 	vmov	d0, r0, r1
 800a12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a12e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a132:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a136:	40df      	lsrs	r7, r3
 800a138:	4207      	tst	r7, r0
 800a13a:	d0f4      	beq.n	800a126 <floor+0x96>
 800a13c:	a30e      	add	r3, pc, #56	@ (adr r3, 800a178 <floor+0xe8>)
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	f7f6 f8ab 	bl	800029c <__adddf3>
 800a146:	2200      	movs	r2, #0
 800a148:	2300      	movs	r3, #0
 800a14a:	f7f6 fced 	bl	8000b28 <__aeabi_dcmpgt>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d0c2      	beq.n	800a0d8 <floor+0x48>
 800a152:	2c00      	cmp	r4, #0
 800a154:	da0a      	bge.n	800a16c <floor+0xdc>
 800a156:	2e14      	cmp	r6, #20
 800a158:	d101      	bne.n	800a15e <floor+0xce>
 800a15a:	3401      	adds	r4, #1
 800a15c:	e006      	b.n	800a16c <floor+0xdc>
 800a15e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a162:	2301      	movs	r3, #1
 800a164:	40b3      	lsls	r3, r6
 800a166:	441d      	add	r5, r3
 800a168:	4545      	cmp	r5, r8
 800a16a:	d3f6      	bcc.n	800a15a <floor+0xca>
 800a16c:	ea25 0507 	bic.w	r5, r5, r7
 800a170:	e7b2      	b.n	800a0d8 <floor+0x48>
 800a172:	2500      	movs	r5, #0
 800a174:	462c      	mov	r4, r5
 800a176:	e7af      	b.n	800a0d8 <floor+0x48>
 800a178:	8800759c 	.word	0x8800759c
 800a17c:	7e37e43c 	.word	0x7e37e43c
 800a180:	bff00000 	.word	0xbff00000
 800a184:	000fffff 	.word	0x000fffff

0800a188 <_init>:
 800a188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18a:	bf00      	nop
 800a18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a18e:	bc08      	pop	{r3}
 800a190:	469e      	mov	lr, r3
 800a192:	4770      	bx	lr

0800a194 <_fini>:
 800a194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a196:	bf00      	nop
 800a198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19a:	bc08      	pop	{r3}
 800a19c:	469e      	mov	lr, r3
 800a19e:	4770      	bx	lr
